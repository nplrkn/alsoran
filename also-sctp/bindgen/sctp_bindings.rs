/* automatically generated by rust-bindgen 0.59.2 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __BITS_PER_LONG: u32 = 64;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &[u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MAX: u32 = 45;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MAX: u32 = 45;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const _K_SS_MAXSIZE: u32 = 128;
pub const SCTP_FUTURE_ASSOC: u32 = 0;
pub const SCTP_CURRENT_ASSOC: u32 = 1;
pub const SCTP_ALL_ASSOC: u32 = 2;
pub const SCTP_RTOINFO: u32 = 0;
pub const SCTP_ASSOCINFO: u32 = 1;
pub const SCTP_INITMSG: u32 = 2;
pub const SCTP_NODELAY: u32 = 3;
pub const SCTP_AUTOCLOSE: u32 = 4;
pub const SCTP_SET_PEER_PRIMARY_ADDR: u32 = 5;
pub const SCTP_PRIMARY_ADDR: u32 = 6;
pub const SCTP_ADAPTATION_LAYER: u32 = 7;
pub const SCTP_DISABLE_FRAGMENTS: u32 = 8;
pub const SCTP_PEER_ADDR_PARAMS: u32 = 9;
pub const SCTP_DEFAULT_SEND_PARAM: u32 = 10;
pub const SCTP_EVENTS: u32 = 11;
pub const SCTP_I_WANT_MAPPED_V4_ADDR: u32 = 12;
pub const SCTP_MAXSEG: u32 = 13;
pub const SCTP_STATUS: u32 = 14;
pub const SCTP_GET_PEER_ADDR_INFO: u32 = 15;
pub const SCTP_DELAYED_ACK_TIME: u32 = 16;
pub const SCTP_DELAYED_ACK: u32 = 16;
pub const SCTP_DELAYED_SACK: u32 = 16;
pub const SCTP_CONTEXT: u32 = 17;
pub const SCTP_FRAGMENT_INTERLEAVE: u32 = 18;
pub const SCTP_PARTIAL_DELIVERY_POINT: u32 = 19;
pub const SCTP_MAX_BURST: u32 = 20;
pub const SCTP_AUTH_CHUNK: u32 = 21;
pub const SCTP_HMAC_IDENT: u32 = 22;
pub const SCTP_AUTH_KEY: u32 = 23;
pub const SCTP_AUTH_ACTIVE_KEY: u32 = 24;
pub const SCTP_AUTH_DELETE_KEY: u32 = 25;
pub const SCTP_PEER_AUTH_CHUNKS: u32 = 26;
pub const SCTP_LOCAL_AUTH_CHUNKS: u32 = 27;
pub const SCTP_GET_ASSOC_NUMBER: u32 = 28;
pub const SCTP_GET_ASSOC_ID_LIST: u32 = 29;
pub const SCTP_AUTO_ASCONF: u32 = 30;
pub const SCTP_PEER_ADDR_THLDS: u32 = 31;
pub const SCTP_RECVRCVINFO: u32 = 32;
pub const SCTP_RECVNXTINFO: u32 = 33;
pub const SCTP_DEFAULT_SNDINFO: u32 = 34;
pub const SCTP_AUTH_DEACTIVATE_KEY: u32 = 35;
pub const SCTP_REUSE_PORT: u32 = 36;
pub const SCTP_SOCKOPT_BINDX_ADD: u32 = 100;
pub const SCTP_SOCKOPT_BINDX_REM: u32 = 101;
pub const SCTP_SOCKOPT_PEELOFF: u32 = 102;
pub const SCTP_SOCKOPT_CONNECTX_OLD: u32 = 107;
pub const SCTP_GET_PEER_ADDRS: u32 = 108;
pub const SCTP_GET_LOCAL_ADDRS: u32 = 109;
pub const SCTP_SOCKOPT_CONNECTX: u32 = 110;
pub const SCTP_SOCKOPT_CONNECTX3: u32 = 111;
pub const SCTP_GET_ASSOC_STATS: u32 = 112;
pub const SCTP_PR_SUPPORTED: u32 = 113;
pub const SCTP_DEFAULT_PRINFO: u32 = 114;
pub const SCTP_PR_ASSOC_STATUS: u32 = 115;
pub const SCTP_PR_STREAM_STATUS: u32 = 116;
pub const SCTP_RECONFIG_SUPPORTED: u32 = 117;
pub const SCTP_ENABLE_STREAM_RESET: u32 = 118;
pub const SCTP_RESET_STREAMS: u32 = 119;
pub const SCTP_RESET_ASSOC: u32 = 120;
pub const SCTP_ADD_STREAMS: u32 = 121;
pub const SCTP_SOCKOPT_PEELOFF_FLAGS: u32 = 122;
pub const SCTP_STREAM_SCHEDULER: u32 = 123;
pub const SCTP_STREAM_SCHEDULER_VALUE: u32 = 124;
pub const SCTP_INTERLEAVING_SUPPORTED: u32 = 125;
pub const SCTP_SENDMSG_CONNECT: u32 = 126;
pub const SCTP_EVENT: u32 = 127;
pub const SCTP_ASCONF_SUPPORTED: u32 = 128;
pub const SCTP_AUTH_SUPPORTED: u32 = 129;
pub const SCTP_ECN_SUPPORTED: u32 = 130;
pub const SCTP_PR_SCTP_NONE: u32 = 0;
pub const SCTP_PR_SCTP_TTL: u32 = 16;
pub const SCTP_PR_SCTP_RTX: u32 = 32;
pub const SCTP_PR_SCTP_PRIO: u32 = 48;
pub const SCTP_PR_SCTP_MAX: u32 = 48;
pub const SCTP_PR_SCTP_MASK: u32 = 48;
pub const SCTP_ENABLE_RESET_STREAM_REQ: u32 = 1;
pub const SCTP_ENABLE_RESET_ASSOC_REQ: u32 = 2;
pub const SCTP_ENABLE_CHANGE_ASSOC_REQ: u32 = 4;
pub const SCTP_ENABLE_STRRESET_MASK: u32 = 7;
pub const SCTP_STREAM_RESET_INCOMING: u32 = 1;
pub const SCTP_STREAM_RESET_OUTGOING: u32 = 2;
pub const SCTP_STREAM_RESET_INCOMING_SSN: u32 = 1;
pub const SCTP_STREAM_RESET_OUTGOING_SSN: u32 = 2;
pub const SCTP_STREAM_RESET_DENIED: u32 = 4;
pub const SCTP_STREAM_RESET_FAILED: u32 = 8;
pub const SCTP_ASSOC_RESET_DENIED: u32 = 4;
pub const SCTP_ASSOC_RESET_FAILED: u32 = 8;
pub const SCTP_ASSOC_CHANGE_DENIED: u32 = 4;
pub const SCTP_ASSOC_CHANGE_FAILED: u32 = 8;
pub const SCTP_STREAM_CHANGE_DENIED: u32 = 4;
pub const SCTP_STREAM_CHANGE_FAILED: u32 = 8;
pub const SCTP_BINDX_ADD_ADDR: u32 = 1;
pub const SCTP_BINDX_REM_ADDR: u32 = 2;
pub const SOL_SCTP: u32 = 132;
pub const IPPROTO_SCTP: u32 = 132;
pub const HAVE_SCTP_STREAM_RESET_EVENT: u32 = 1;
pub const HAVE_SCTP_STREAM_RECONFIG: u32 = 1;
pub const HAVE_SCTP_PEELOFF_FLAGS: u32 = 1;
pub const HAVE_SCTP_PDAPI_EVENT_PDAPI_STREAM: u32 = 1;
pub const HAVE_SCTP_PDAPI_EVENT_PDAPI_SEQ: u32 = 1;
pub const HAVE_SCTP_AUTH_NO_AUTH: u32 = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
pub type size_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: size_t,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = ::std::os::raw::c_uint;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
pub const MSG_OOB: ::std::os::raw::c_uint = 1;
pub const MSG_PEEK: ::std::os::raw::c_uint = 2;
pub const MSG_DONTROUTE: ::std::os::raw::c_uint = 4;
pub const MSG_CTRUNC: ::std::os::raw::c_uint = 8;
pub const MSG_PROXY: ::std::os::raw::c_uint = 16;
pub const MSG_TRUNC: ::std::os::raw::c_uint = 32;
pub const MSG_DONTWAIT: ::std::os::raw::c_uint = 64;
pub const MSG_EOR: ::std::os::raw::c_uint = 128;
pub const MSG_WAITALL: ::std::os::raw::c_uint = 256;
pub const MSG_FIN: ::std::os::raw::c_uint = 512;
pub const MSG_SYN: ::std::os::raw::c_uint = 1024;
pub const MSG_CONFIRM: ::std::os::raw::c_uint = 2048;
pub const MSG_RST: ::std::os::raw::c_uint = 4096;
pub const MSG_ERRQUEUE: ::std::os::raw::c_uint = 8192;
pub const MSG_NOSIGNAL: ::std::os::raw::c_uint = 16384;
pub const MSG_MORE: ::std::os::raw::c_uint = 32768;
pub const MSG_WAITFORONE: ::std::os::raw::c_uint = 65536;
pub const MSG_BATCH: ::std::os::raw::c_uint = 262144;
pub const MSG_ZEROCOPY: ::std::os::raw::c_uint = 67108864;
pub const MSG_FASTOPEN: ::std::os::raw::c_uint = 536870912;
pub const MSG_CMSG_CLOEXEC: ::std::os::raw::c_uint = 1073741824;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: size_t,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: size_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: size_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_level as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_type as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).__cmsg_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(__cmsg_data)
        )
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: ::std::os::raw::c_uint = 0;
pub const SHUT_WR: ::std::os::raw::c_uint = 1;
pub const SHUT_RDWR: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __kernel_sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __kernel_sockaddr_storage {
    pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __kernel_sockaddr_storage__bindgen_ty_1 {
    pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1,
    pub __align: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1 {
    pub ss_family: __kernel_sa_family_t,
    pub __data: [::std::os::raw::c_char; 126usize],
}
#[test]
fn bindgen_test_layout___kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>()))
                .ss_family as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>())).__data
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__data)
        )
    );
}
#[test]
fn bindgen_test_layout___kernel_sockaddr_storage__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_sockaddr_storage__bindgen_ty_1>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_sockaddr_storage__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__kernel_sockaddr_storage__bindgen_ty_1>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1),
            "::",
            stringify!(__align)
        )
    );
}
#[test]
fn bindgen_test_layout___kernel_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_sockaddr_storage))
    );
}
pub type sctp_assoc_t = __s32;
pub const sctp_msg_flags_MSG_NOTIFICATION: sctp_msg_flags = 32768;
pub type sctp_msg_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_initmsg {
    pub sinit_num_ostreams: __u16,
    pub sinit_max_instreams: __u16,
    pub sinit_max_attempts: __u16,
    pub sinit_max_init_timeo: __u16,
}
#[test]
fn bindgen_test_layout_sctp_initmsg() {
    assert_eq!(
        ::std::mem::size_of::<sctp_initmsg>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_initmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_initmsg>(),
        2usize,
        concat!("Alignment of ", stringify!(sctp_initmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_initmsg>())).sinit_num_ostreams as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_initmsg),
            "::",
            stringify!(sinit_num_ostreams)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_initmsg>())).sinit_max_instreams as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_initmsg),
            "::",
            stringify!(sinit_max_instreams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_initmsg>())).sinit_max_attempts as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_initmsg),
            "::",
            stringify!(sinit_max_attempts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_initmsg>())).sinit_max_init_timeo as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_initmsg),
            "::",
            stringify!(sinit_max_init_timeo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_sndrcvinfo {
    pub sinfo_stream: __u16,
    pub sinfo_ssn: __u16,
    pub sinfo_flags: __u16,
    pub sinfo_ppid: __u32,
    pub sinfo_context: __u32,
    pub sinfo_timetolive: __u32,
    pub sinfo_tsn: __u32,
    pub sinfo_cumtsn: __u32,
    pub sinfo_assoc_id: sctp_assoc_t,
}
#[test]
fn bindgen_test_layout_sctp_sndrcvinfo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_sndrcvinfo>(),
        32usize,
        concat!("Size of: ", stringify!(sctp_sndrcvinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_sndrcvinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_sndrcvinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sndrcvinfo>())).sinfo_stream as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndrcvinfo),
            "::",
            stringify!(sinfo_stream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sndrcvinfo>())).sinfo_ssn as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndrcvinfo),
            "::",
            stringify!(sinfo_ssn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sndrcvinfo>())).sinfo_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndrcvinfo),
            "::",
            stringify!(sinfo_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sndrcvinfo>())).sinfo_ppid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndrcvinfo),
            "::",
            stringify!(sinfo_ppid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sndrcvinfo>())).sinfo_context as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndrcvinfo),
            "::",
            stringify!(sinfo_context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_sndrcvinfo>())).sinfo_timetolive as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndrcvinfo),
            "::",
            stringify!(sinfo_timetolive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sndrcvinfo>())).sinfo_tsn as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndrcvinfo),
            "::",
            stringify!(sinfo_tsn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sndrcvinfo>())).sinfo_cumtsn as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndrcvinfo),
            "::",
            stringify!(sinfo_cumtsn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sndrcvinfo>())).sinfo_assoc_id as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndrcvinfo),
            "::",
            stringify!(sinfo_assoc_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_sndinfo {
    pub snd_sid: __u16,
    pub snd_flags: __u16,
    pub snd_ppid: __u32,
    pub snd_context: __u32,
    pub snd_assoc_id: sctp_assoc_t,
}
#[test]
fn bindgen_test_layout_sctp_sndinfo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_sndinfo>(),
        16usize,
        concat!("Size of: ", stringify!(sctp_sndinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_sndinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_sndinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sndinfo>())).snd_sid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndinfo),
            "::",
            stringify!(snd_sid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sndinfo>())).snd_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndinfo),
            "::",
            stringify!(snd_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sndinfo>())).snd_ppid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndinfo),
            "::",
            stringify!(snd_ppid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sndinfo>())).snd_context as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndinfo),
            "::",
            stringify!(snd_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sndinfo>())).snd_assoc_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndinfo),
            "::",
            stringify!(snd_assoc_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_rcvinfo {
    pub rcv_sid: __u16,
    pub rcv_ssn: __u16,
    pub rcv_flags: __u16,
    pub rcv_ppid: __u32,
    pub rcv_tsn: __u32,
    pub rcv_cumtsn: __u32,
    pub rcv_context: __u32,
    pub rcv_assoc_id: sctp_assoc_t,
}
#[test]
fn bindgen_test_layout_sctp_rcvinfo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_rcvinfo>(),
        28usize,
        concat!("Size of: ", stringify!(sctp_rcvinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_rcvinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_rcvinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rcvinfo>())).rcv_sid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rcvinfo),
            "::",
            stringify!(rcv_sid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rcvinfo>())).rcv_ssn as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rcvinfo),
            "::",
            stringify!(rcv_ssn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rcvinfo>())).rcv_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rcvinfo),
            "::",
            stringify!(rcv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rcvinfo>())).rcv_ppid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rcvinfo),
            "::",
            stringify!(rcv_ppid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rcvinfo>())).rcv_tsn as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rcvinfo),
            "::",
            stringify!(rcv_tsn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rcvinfo>())).rcv_cumtsn as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rcvinfo),
            "::",
            stringify!(rcv_cumtsn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rcvinfo>())).rcv_context as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rcvinfo),
            "::",
            stringify!(rcv_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rcvinfo>())).rcv_assoc_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rcvinfo),
            "::",
            stringify!(rcv_assoc_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_nxtinfo {
    pub nxt_sid: __u16,
    pub nxt_flags: __u16,
    pub nxt_ppid: __u32,
    pub nxt_length: __u32,
    pub nxt_assoc_id: sctp_assoc_t,
}
#[test]
fn bindgen_test_layout_sctp_nxtinfo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_nxtinfo>(),
        16usize,
        concat!("Size of: ", stringify!(sctp_nxtinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_nxtinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_nxtinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_nxtinfo>())).nxt_sid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_nxtinfo),
            "::",
            stringify!(nxt_sid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_nxtinfo>())).nxt_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_nxtinfo),
            "::",
            stringify!(nxt_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_nxtinfo>())).nxt_ppid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_nxtinfo),
            "::",
            stringify!(nxt_ppid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_nxtinfo>())).nxt_length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_nxtinfo),
            "::",
            stringify!(nxt_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_nxtinfo>())).nxt_assoc_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_nxtinfo),
            "::",
            stringify!(nxt_assoc_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_prinfo {
    pub pr_policy: __u16,
    pub pr_value: __u32,
}
#[test]
fn bindgen_test_layout_sctp_prinfo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_prinfo>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_prinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_prinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_prinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_prinfo>())).pr_policy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_prinfo),
            "::",
            stringify!(pr_policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_prinfo>())).pr_value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_prinfo),
            "::",
            stringify!(pr_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_authinfo {
    pub auth_keynumber: __u16,
}
#[test]
fn bindgen_test_layout_sctp_authinfo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_authinfo>(),
        2usize,
        concat!("Size of: ", stringify!(sctp_authinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_authinfo>(),
        2usize,
        concat!("Alignment of ", stringify!(sctp_authinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authinfo>())).auth_keynumber as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authinfo),
            "::",
            stringify!(auth_keynumber)
        )
    );
}
pub const sctp_sinfo_flags_SCTP_UNORDERED: sctp_sinfo_flags = 1;
pub const sctp_sinfo_flags_SCTP_ADDR_OVER: sctp_sinfo_flags = 2;
pub const sctp_sinfo_flags_SCTP_ABORT: sctp_sinfo_flags = 4;
pub const sctp_sinfo_flags_SCTP_SACK_IMMEDIATELY: sctp_sinfo_flags = 8;
pub const sctp_sinfo_flags_SCTP_SENDALL: sctp_sinfo_flags = 64;
pub const sctp_sinfo_flags_SCTP_PR_SCTP_ALL: sctp_sinfo_flags = 128;
pub const sctp_sinfo_flags_SCTP_NOTIFICATION: sctp_sinfo_flags = 32768;
pub const sctp_sinfo_flags_SCTP_EOF: sctp_sinfo_flags = 512;
pub type sctp_sinfo_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sctp_cmsg_data_t {
    pub raw: __u8,
    pub init: sctp_initmsg,
    pub sndrcv: sctp_sndrcvinfo,
}
#[test]
fn bindgen_test_layout_sctp_cmsg_data_t() {
    assert_eq!(
        ::std::mem::size_of::<sctp_cmsg_data_t>(),
        32usize,
        concat!("Size of: ", stringify!(sctp_cmsg_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_cmsg_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_cmsg_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_cmsg_data_t>())).raw as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_cmsg_data_t),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_cmsg_data_t>())).init as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_cmsg_data_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_cmsg_data_t>())).sndrcv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_cmsg_data_t),
            "::",
            stringify!(sndrcv)
        )
    );
}
pub const sctp_cmsg_type_SCTP_INIT: sctp_cmsg_type = 0;
pub const sctp_cmsg_type_SCTP_SNDRCV: sctp_cmsg_type = 1;
pub const sctp_cmsg_type_SCTP_SNDINFO: sctp_cmsg_type = 2;
pub const sctp_cmsg_type_SCTP_RCVINFO: sctp_cmsg_type = 3;
pub const sctp_cmsg_type_SCTP_NXTINFO: sctp_cmsg_type = 4;
pub const sctp_cmsg_type_SCTP_PRINFO: sctp_cmsg_type = 5;
pub const sctp_cmsg_type_SCTP_AUTHINFO: sctp_cmsg_type = 6;
pub const sctp_cmsg_type_SCTP_DSTADDRV4: sctp_cmsg_type = 7;
pub const sctp_cmsg_type_SCTP_DSTADDRV6: sctp_cmsg_type = 8;
pub type sctp_cmsg_type = ::std::os::raw::c_uint;
pub use self::sctp_cmsg_type as sctp_cmsg_t;
#[repr(C)]
#[derive(Debug)]
pub struct sctp_assoc_change {
    pub sac_type: __u16,
    pub sac_flags: __u16,
    pub sac_length: __u32,
    pub sac_state: __u16,
    pub sac_error: __u16,
    pub sac_outbound_streams: __u16,
    pub sac_inbound_streams: __u16,
    pub sac_assoc_id: sctp_assoc_t,
    pub sac_info: __IncompleteArrayField<__u8>,
}
#[test]
fn bindgen_test_layout_sctp_assoc_change() {
    assert_eq!(
        ::std::mem::size_of::<sctp_assoc_change>(),
        20usize,
        concat!("Size of: ", stringify!(sctp_assoc_change))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_assoc_change>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_assoc_change))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_change>())).sac_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_change),
            "::",
            stringify!(sac_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_change>())).sac_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_change),
            "::",
            stringify!(sac_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_change>())).sac_length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_change),
            "::",
            stringify!(sac_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_change>())).sac_state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_change),
            "::",
            stringify!(sac_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_change>())).sac_error as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_change),
            "::",
            stringify!(sac_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_change>())).sac_outbound_streams as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_change),
            "::",
            stringify!(sac_outbound_streams)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_change>())).sac_inbound_streams as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_change),
            "::",
            stringify!(sac_inbound_streams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_change>())).sac_assoc_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_change),
            "::",
            stringify!(sac_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_change>())).sac_info as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_change),
            "::",
            stringify!(sac_info)
        )
    );
}
pub const sctp_sac_state_SCTP_COMM_UP: sctp_sac_state = 0;
pub const sctp_sac_state_SCTP_COMM_LOST: sctp_sac_state = 1;
pub const sctp_sac_state_SCTP_RESTART: sctp_sac_state = 2;
pub const sctp_sac_state_SCTP_SHUTDOWN_COMP: sctp_sac_state = 3;
pub const sctp_sac_state_SCTP_CANT_STR_ASSOC: sctp_sac_state = 4;
pub type sctp_sac_state = ::std::os::raw::c_uint;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct sctp_paddr_change {
    pub spc_type: __u16,
    pub spc_flags: __u16,
    pub spc_length: __u32,
    pub spc_aaddr: sockaddr_storage,
    pub spc_state: ::std::os::raw::c_int,
    pub spc_error: ::std::os::raw::c_int,
    pub spc_assoc_id: sctp_assoc_t,
}
#[test]
fn bindgen_test_layout_sctp_paddr_change() {
    assert_eq!(
        ::std::mem::size_of::<sctp_paddr_change>(),
        148usize,
        concat!("Size of: ", stringify!(sctp_paddr_change))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_paddr_change>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_paddr_change))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddr_change>())).spc_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddr_change),
            "::",
            stringify!(spc_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddr_change>())).spc_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddr_change),
            "::",
            stringify!(spc_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddr_change>())).spc_length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddr_change),
            "::",
            stringify!(spc_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddr_change>())).spc_aaddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddr_change),
            "::",
            stringify!(spc_aaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddr_change>())).spc_state as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddr_change),
            "::",
            stringify!(spc_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddr_change>())).spc_error as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddr_change),
            "::",
            stringify!(spc_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddr_change>())).spc_assoc_id as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddr_change),
            "::",
            stringify!(spc_assoc_id)
        )
    );
}
pub const sctp_spc_state_SCTP_ADDR_AVAILABLE: sctp_spc_state = 0;
pub const sctp_spc_state_SCTP_ADDR_UNREACHABLE: sctp_spc_state = 1;
pub const sctp_spc_state_SCTP_ADDR_REMOVED: sctp_spc_state = 2;
pub const sctp_spc_state_SCTP_ADDR_ADDED: sctp_spc_state = 3;
pub const sctp_spc_state_SCTP_ADDR_MADE_PRIM: sctp_spc_state = 4;
pub const sctp_spc_state_SCTP_ADDR_CONFIRMED: sctp_spc_state = 5;
pub type sctp_spc_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct sctp_remote_error {
    pub sre_type: __u16,
    pub sre_flags: __u16,
    pub sre_length: __u32,
    pub sre_error: __be16,
    pub sre_assoc_id: sctp_assoc_t,
    pub sre_data: __IncompleteArrayField<__u8>,
}
#[test]
fn bindgen_test_layout_sctp_remote_error() {
    assert_eq!(
        ::std::mem::size_of::<sctp_remote_error>(),
        16usize,
        concat!("Size of: ", stringify!(sctp_remote_error))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_remote_error>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_remote_error))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_remote_error>())).sre_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_remote_error),
            "::",
            stringify!(sre_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_remote_error>())).sre_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_remote_error),
            "::",
            stringify!(sre_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_remote_error>())).sre_length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_remote_error),
            "::",
            stringify!(sre_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_remote_error>())).sre_error as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_remote_error),
            "::",
            stringify!(sre_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_remote_error>())).sre_assoc_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_remote_error),
            "::",
            stringify!(sre_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_remote_error>())).sre_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_remote_error),
            "::",
            stringify!(sre_data)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct sctp_send_failed {
    pub ssf_type: __u16,
    pub ssf_flags: __u16,
    pub ssf_length: __u32,
    pub ssf_error: __u32,
    pub ssf_info: sctp_sndrcvinfo,
    pub ssf_assoc_id: sctp_assoc_t,
    pub ssf_data: __IncompleteArrayField<__u8>,
}
#[test]
fn bindgen_test_layout_sctp_send_failed() {
    assert_eq!(
        ::std::mem::size_of::<sctp_send_failed>(),
        48usize,
        concat!("Size of: ", stringify!(sctp_send_failed))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_send_failed>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_send_failed))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_send_failed>())).ssf_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_send_failed),
            "::",
            stringify!(ssf_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_send_failed>())).ssf_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_send_failed),
            "::",
            stringify!(ssf_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_send_failed>())).ssf_length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_send_failed),
            "::",
            stringify!(ssf_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_send_failed>())).ssf_error as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_send_failed),
            "::",
            stringify!(ssf_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_send_failed>())).ssf_info as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_send_failed),
            "::",
            stringify!(ssf_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_send_failed>())).ssf_assoc_id as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_send_failed),
            "::",
            stringify!(ssf_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_send_failed>())).ssf_data as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_send_failed),
            "::",
            stringify!(ssf_data)
        )
    );
}
pub const sctp_ssf_flags_SCTP_DATA_UNSENT: sctp_ssf_flags = 0;
pub const sctp_ssf_flags_SCTP_DATA_SENT: sctp_ssf_flags = 1;
pub type sctp_ssf_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_shutdown_event {
    pub sse_type: __u16,
    pub sse_flags: __u16,
    pub sse_length: __u32,
    pub sse_assoc_id: sctp_assoc_t,
}
#[test]
fn bindgen_test_layout_sctp_shutdown_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_shutdown_event>(),
        12usize,
        concat!("Size of: ", stringify!(sctp_shutdown_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_shutdown_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_shutdown_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_shutdown_event>())).sse_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_shutdown_event),
            "::",
            stringify!(sse_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_shutdown_event>())).sse_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_shutdown_event),
            "::",
            stringify!(sse_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_shutdown_event>())).sse_length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_shutdown_event),
            "::",
            stringify!(sse_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_shutdown_event>())).sse_assoc_id as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_shutdown_event),
            "::",
            stringify!(sse_assoc_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_adaptation_event {
    pub sai_type: __u16,
    pub sai_flags: __u16,
    pub sai_length: __u32,
    pub sai_adaptation_ind: __u32,
    pub sai_assoc_id: sctp_assoc_t,
}
#[test]
fn bindgen_test_layout_sctp_adaptation_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_adaptation_event>(),
        16usize,
        concat!("Size of: ", stringify!(sctp_adaptation_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_adaptation_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_adaptation_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_adaptation_event>())).sai_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_adaptation_event),
            "::",
            stringify!(sai_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_adaptation_event>())).sai_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_adaptation_event),
            "::",
            stringify!(sai_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_adaptation_event>())).sai_length as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_adaptation_event),
            "::",
            stringify!(sai_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_adaptation_event>())).sai_adaptation_ind as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_adaptation_event),
            "::",
            stringify!(sai_adaptation_ind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_adaptation_event>())).sai_assoc_id as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_adaptation_event),
            "::",
            stringify!(sai_assoc_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_pdapi_event {
    pub pdapi_type: __u16,
    pub pdapi_flags: __u16,
    pub pdapi_length: __u32,
    pub pdapi_indication: __u32,
    pub pdapi_assoc_id: sctp_assoc_t,
    pub pdapi_stream: __u32,
    pub pdapi_seq: __u32,
}
#[test]
fn bindgen_test_layout_sctp_pdapi_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_pdapi_event>(),
        24usize,
        concat!("Size of: ", stringify!(sctp_pdapi_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_pdapi_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_pdapi_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_pdapi_event>())).pdapi_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_pdapi_event),
            "::",
            stringify!(pdapi_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_pdapi_event>())).pdapi_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_pdapi_event),
            "::",
            stringify!(pdapi_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_pdapi_event>())).pdapi_length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_pdapi_event),
            "::",
            stringify!(pdapi_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_pdapi_event>())).pdapi_indication as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_pdapi_event),
            "::",
            stringify!(pdapi_indication)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_pdapi_event>())).pdapi_assoc_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_pdapi_event),
            "::",
            stringify!(pdapi_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_pdapi_event>())).pdapi_stream as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_pdapi_event),
            "::",
            stringify!(pdapi_stream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_pdapi_event>())).pdapi_seq as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_pdapi_event),
            "::",
            stringify!(pdapi_seq)
        )
    );
}
pub const SCTP_PARTIAL_DELIVERY_ABORTED: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_authkey_event {
    pub auth_type: __u16,
    pub auth_flags: __u16,
    pub auth_length: __u32,
    pub auth_keynumber: __u16,
    pub auth_altkeynumber: __u16,
    pub auth_indication: __u32,
    pub auth_assoc_id: sctp_assoc_t,
}
#[test]
fn bindgen_test_layout_sctp_authkey_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_authkey_event>(),
        20usize,
        concat!("Size of: ", stringify!(sctp_authkey_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_authkey_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_authkey_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authkey_event>())).auth_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkey_event),
            "::",
            stringify!(auth_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authkey_event>())).auth_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkey_event),
            "::",
            stringify!(auth_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authkey_event>())).auth_length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkey_event),
            "::",
            stringify!(auth_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_authkey_event>())).auth_keynumber as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkey_event),
            "::",
            stringify!(auth_keynumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_authkey_event>())).auth_altkeynumber as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkey_event),
            "::",
            stringify!(auth_altkeynumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_authkey_event>())).auth_indication as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkey_event),
            "::",
            stringify!(auth_indication)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_authkey_event>())).auth_assoc_id as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkey_event),
            "::",
            stringify!(auth_assoc_id)
        )
    );
}
pub const SCTP_AUTH_NEW_KEY: ::std::os::raw::c_uint = 0;
pub const SCTP_AUTH_FREE_KEY: ::std::os::raw::c_uint = 1;
pub const SCTP_AUTH_NO_AUTH: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_sender_dry_event {
    pub sender_dry_type: __u16,
    pub sender_dry_flags: __u16,
    pub sender_dry_length: __u32,
    pub sender_dry_assoc_id: sctp_assoc_t,
}
#[test]
fn bindgen_test_layout_sctp_sender_dry_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_sender_dry_event>(),
        12usize,
        concat!("Size of: ", stringify!(sctp_sender_dry_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_sender_dry_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_sender_dry_event))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_sender_dry_event>())).sender_dry_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sender_dry_event),
            "::",
            stringify!(sender_dry_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_sender_dry_event>())).sender_dry_flags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sender_dry_event),
            "::",
            stringify!(sender_dry_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_sender_dry_event>())).sender_dry_length as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sender_dry_event),
            "::",
            stringify!(sender_dry_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_sender_dry_event>())).sender_dry_assoc_id as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sender_dry_event),
            "::",
            stringify!(sender_dry_assoc_id)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct sctp_stream_reset_event {
    pub strreset_type: __u16,
    pub strreset_flags: __u16,
    pub strreset_length: __u32,
    pub strreset_assoc_id: sctp_assoc_t,
    pub strreset_stream_list: __IncompleteArrayField<__u16>,
}
#[test]
fn bindgen_test_layout_sctp_stream_reset_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_stream_reset_event>(),
        12usize,
        concat!("Size of: ", stringify!(sctp_stream_reset_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_stream_reset_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_stream_reset_event))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_stream_reset_event>())).strreset_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_reset_event),
            "::",
            stringify!(strreset_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_stream_reset_event>())).strreset_flags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_reset_event),
            "::",
            stringify!(strreset_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_stream_reset_event>())).strreset_length as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_reset_event),
            "::",
            stringify!(strreset_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_stream_reset_event>())).strreset_assoc_id as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_reset_event),
            "::",
            stringify!(strreset_assoc_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_stream_reset_event>())).strreset_stream_list as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_reset_event),
            "::",
            stringify!(strreset_stream_list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_assoc_reset_event {
    pub assocreset_type: __u16,
    pub assocreset_flags: __u16,
    pub assocreset_length: __u32,
    pub assocreset_assoc_id: sctp_assoc_t,
    pub assocreset_local_tsn: __u32,
    pub assocreset_remote_tsn: __u32,
}
#[test]
fn bindgen_test_layout_sctp_assoc_reset_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_assoc_reset_event>(),
        20usize,
        concat!("Size of: ", stringify!(sctp_assoc_reset_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_assoc_reset_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_assoc_reset_event))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_reset_event>())).assocreset_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_reset_event),
            "::",
            stringify!(assocreset_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_reset_event>())).assocreset_flags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_reset_event),
            "::",
            stringify!(assocreset_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_reset_event>())).assocreset_length as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_reset_event),
            "::",
            stringify!(assocreset_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_reset_event>())).assocreset_assoc_id as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_reset_event),
            "::",
            stringify!(assocreset_assoc_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_reset_event>())).assocreset_local_tsn as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_reset_event),
            "::",
            stringify!(assocreset_local_tsn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_reset_event>())).assocreset_remote_tsn as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_reset_event),
            "::",
            stringify!(assocreset_remote_tsn)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_stream_change_event {
    pub strchange_type: __u16,
    pub strchange_flags: __u16,
    pub strchange_length: __u32,
    pub strchange_assoc_id: sctp_assoc_t,
    pub strchange_instrms: __u16,
    pub strchange_outstrms: __u16,
}
#[test]
fn bindgen_test_layout_sctp_stream_change_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_stream_change_event>(),
        16usize,
        concat!("Size of: ", stringify!(sctp_stream_change_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_stream_change_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_stream_change_event))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_stream_change_event>())).strchange_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_change_event),
            "::",
            stringify!(strchange_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_stream_change_event>())).strchange_flags as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_change_event),
            "::",
            stringify!(strchange_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_stream_change_event>())).strchange_length as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_change_event),
            "::",
            stringify!(strchange_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_stream_change_event>())).strchange_assoc_id as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_change_event),
            "::",
            stringify!(strchange_assoc_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_stream_change_event>())).strchange_instrms as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_change_event),
            "::",
            stringify!(strchange_instrms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_stream_change_event>())).strchange_outstrms as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_change_event),
            "::",
            stringify!(strchange_outstrms)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_event_subscribe {
    pub sctp_data_io_event: __u8,
    pub sctp_association_event: __u8,
    pub sctp_address_event: __u8,
    pub sctp_send_failure_event: __u8,
    pub sctp_peer_error_event: __u8,
    pub sctp_shutdown_event: __u8,
    pub sctp_partial_delivery_event: __u8,
    pub sctp_adaptation_layer_event: __u8,
    pub sctp_authentication_event: __u8,
    pub sctp_sender_dry_event: __u8,
    pub sctp_stream_reset_event: __u8,
    pub sctp_assoc_reset_event: __u8,
    pub sctp_stream_change_event: __u8,
}
#[test]
fn bindgen_test_layout_sctp_event_subscribe() {
    assert_eq!(
        ::std::mem::size_of::<sctp_event_subscribe>(),
        13usize,
        concat!("Size of: ", stringify!(sctp_event_subscribe))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_event_subscribe>(),
        1usize,
        concat!("Alignment of ", stringify!(sctp_event_subscribe))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_data_io_event as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_data_io_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_association_event as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_association_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_address_event as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_address_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_send_failure_event as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_send_failure_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_peer_error_event as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_peer_error_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_shutdown_event as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_shutdown_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_partial_delivery_event as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_partial_delivery_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_adaptation_layer_event as *const _
                as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_adaptation_layer_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_authentication_event as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_authentication_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_sender_dry_event as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_sender_dry_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_stream_reset_event as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_stream_reset_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_assoc_reset_event as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_assoc_reset_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_stream_change_event as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_stream_change_event)
        )
    );
}
#[repr(C)]
pub struct sctp_notification {
    pub sn_header: __BindgenUnionField<sctp_notification__bindgen_ty_1>,
    pub sn_assoc_change: __BindgenUnionField<sctp_assoc_change>,
    pub sn_paddr_change: __BindgenUnionField<sctp_paddr_change>,
    pub sn_remote_error: __BindgenUnionField<sctp_remote_error>,
    pub sn_send_failed: __BindgenUnionField<sctp_send_failed>,
    pub sn_shutdown_event: __BindgenUnionField<sctp_shutdown_event>,
    pub sn_adaptation_event: __BindgenUnionField<sctp_adaptation_event>,
    pub sn_pdapi_event: __BindgenUnionField<sctp_pdapi_event>,
    pub sn_authkey_event: __BindgenUnionField<sctp_authkey_event>,
    pub sn_sender_dry_event: __BindgenUnionField<sctp_sender_dry_event>,
    pub sn_strreset_event: __BindgenUnionField<sctp_stream_reset_event>,
    pub sn_assocreset_event: __BindgenUnionField<sctp_assoc_reset_event>,
    pub sn_strchange_event: __BindgenUnionField<sctp_stream_change_event>,
    pub bindgen_union_field: [u32; 37usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_notification__bindgen_ty_1 {
    pub sn_type: __u16,
    pub sn_flags: __u16,
    pub sn_length: __u32,
}
#[test]
fn bindgen_test_layout_sctp_notification__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sctp_notification__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_notification__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_notification__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_notification__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_notification__bindgen_ty_1>())).sn_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification__bindgen_ty_1),
            "::",
            stringify!(sn_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_notification__bindgen_ty_1>())).sn_flags as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification__bindgen_ty_1),
            "::",
            stringify!(sn_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_notification__bindgen_ty_1>())).sn_length as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification__bindgen_ty_1),
            "::",
            stringify!(sn_length)
        )
    );
}
#[test]
fn bindgen_test_layout_sctp_notification() {
    assert_eq!(
        ::std::mem::size_of::<sctp_notification>(),
        148usize,
        concat!("Size of: ", stringify!(sctp_notification))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_notification>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_notification))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_notification>())).sn_header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification),
            "::",
            stringify!(sn_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_notification>())).sn_assoc_change as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification),
            "::",
            stringify!(sn_assoc_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_notification>())).sn_paddr_change as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification),
            "::",
            stringify!(sn_paddr_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_notification>())).sn_remote_error as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification),
            "::",
            stringify!(sn_remote_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_notification>())).sn_send_failed as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification),
            "::",
            stringify!(sn_send_failed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_notification>())).sn_shutdown_event as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification),
            "::",
            stringify!(sn_shutdown_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_notification>())).sn_adaptation_event as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification),
            "::",
            stringify!(sn_adaptation_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_notification>())).sn_pdapi_event as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification),
            "::",
            stringify!(sn_pdapi_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_notification>())).sn_authkey_event as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification),
            "::",
            stringify!(sn_authkey_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_notification>())).sn_sender_dry_event as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification),
            "::",
            stringify!(sn_sender_dry_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_notification>())).sn_strreset_event as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification),
            "::",
            stringify!(sn_strreset_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_notification>())).sn_assocreset_event as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification),
            "::",
            stringify!(sn_assocreset_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_notification>())).sn_strchange_event as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification),
            "::",
            stringify!(sn_strchange_event)
        )
    );
}
pub const sctp_sn_type_SCTP_SN_TYPE_BASE: sctp_sn_type = 32768;
pub const sctp_sn_type_SCTP_DATA_IO_EVENT: sctp_sn_type = 32768;
pub const sctp_sn_type_SCTP_ASSOC_CHANGE: sctp_sn_type = 32769;
pub const sctp_sn_type_SCTP_PEER_ADDR_CHANGE: sctp_sn_type = 32770;
pub const sctp_sn_type_SCTP_SEND_FAILED: sctp_sn_type = 32771;
pub const sctp_sn_type_SCTP_REMOTE_ERROR: sctp_sn_type = 32772;
pub const sctp_sn_type_SCTP_SHUTDOWN_EVENT: sctp_sn_type = 32773;
pub const sctp_sn_type_SCTP_PARTIAL_DELIVERY_EVENT: sctp_sn_type = 32774;
pub const sctp_sn_type_SCTP_ADAPTATION_INDICATION: sctp_sn_type = 32775;
pub const sctp_sn_type_SCTP_AUTHENTICATION_EVENT: sctp_sn_type = 32776;
pub const sctp_sn_type_SCTP_SENDER_DRY_EVENT: sctp_sn_type = 32777;
pub const sctp_sn_type_SCTP_STREAM_RESET_EVENT: sctp_sn_type = 32778;
pub const sctp_sn_type_SCTP_ASSOC_RESET_EVENT: sctp_sn_type = 32779;
pub const sctp_sn_type_SCTP_STREAM_CHANGE_EVENT: sctp_sn_type = 32780;
pub const sctp_sn_type_SCTP_SN_TYPE_MAX: sctp_sn_type = 32780;
pub type sctp_sn_type = ::std::os::raw::c_uint;
pub const sctp_sn_error_SCTP_FAILED_THRESHOLD: sctp_sn_error = 0;
pub const sctp_sn_error_SCTP_RECEIVED_SACK: sctp_sn_error = 1;
pub const sctp_sn_error_SCTP_HEARTBEAT_SUCCESS: sctp_sn_error = 2;
pub const sctp_sn_error_SCTP_RESPONSE_TO_USER_REQ: sctp_sn_error = 3;
pub const sctp_sn_error_SCTP_INTERNAL_ERROR: sctp_sn_error = 4;
pub const sctp_sn_error_SCTP_SHUTDOWN_GUARD_EXPIRES: sctp_sn_error = 5;
pub const sctp_sn_error_SCTP_PEER_FAULTY: sctp_sn_error = 6;
pub type sctp_sn_error = ::std::os::raw::c_uint;
pub use self::sctp_sn_error as sctp_sn_error_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_rtoinfo {
    pub srto_assoc_id: sctp_assoc_t,
    pub srto_initial: __u32,
    pub srto_max: __u32,
    pub srto_min: __u32,
}
#[test]
fn bindgen_test_layout_sctp_rtoinfo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_rtoinfo>(),
        16usize,
        concat!("Size of: ", stringify!(sctp_rtoinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_rtoinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_rtoinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rtoinfo>())).srto_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rtoinfo),
            "::",
            stringify!(srto_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rtoinfo>())).srto_initial as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rtoinfo),
            "::",
            stringify!(srto_initial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rtoinfo>())).srto_max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rtoinfo),
            "::",
            stringify!(srto_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rtoinfo>())).srto_min as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rtoinfo),
            "::",
            stringify!(srto_min)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_assocparams {
    pub sasoc_assoc_id: sctp_assoc_t,
    pub sasoc_asocmaxrxt: __u16,
    pub sasoc_number_peer_destinations: __u16,
    pub sasoc_peer_rwnd: __u32,
    pub sasoc_local_rwnd: __u32,
    pub sasoc_cookie_life: __u32,
}
#[test]
fn bindgen_test_layout_sctp_assocparams() {
    assert_eq!(
        ::std::mem::size_of::<sctp_assocparams>(),
        20usize,
        concat!("Size of: ", stringify!(sctp_assocparams))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_assocparams>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_assocparams))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assocparams>())).sasoc_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assocparams),
            "::",
            stringify!(sasoc_assoc_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assocparams>())).sasoc_asocmaxrxt as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assocparams),
            "::",
            stringify!(sasoc_asocmaxrxt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assocparams>())).sasoc_number_peer_destinations as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assocparams),
            "::",
            stringify!(sasoc_number_peer_destinations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assocparams>())).sasoc_peer_rwnd as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assocparams),
            "::",
            stringify!(sasoc_peer_rwnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assocparams>())).sasoc_local_rwnd as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assocparams),
            "::",
            stringify!(sasoc_local_rwnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assocparams>())).sasoc_cookie_life as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assocparams),
            "::",
            stringify!(sasoc_cookie_life)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct sctp_setpeerprim {
    pub sspp_assoc_id: sctp_assoc_t,
    pub sspp_addr: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_sctp_setpeerprim() {
    assert_eq!(
        ::std::mem::size_of::<sctp_setpeerprim>(),
        132usize,
        concat!("Size of: ", stringify!(sctp_setpeerprim))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_setpeerprim>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_setpeerprim))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_setpeerprim>())).sspp_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_setpeerprim),
            "::",
            stringify!(sspp_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_setpeerprim>())).sspp_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_setpeerprim),
            "::",
            stringify!(sspp_addr)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct sctp_prim {
    pub ssp_assoc_id: sctp_assoc_t,
    pub ssp_addr: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_sctp_prim() {
    assert_eq!(
        ::std::mem::size_of::<sctp_prim>(),
        132usize,
        concat!("Size of: ", stringify!(sctp_prim))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_prim>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_prim))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_prim>())).ssp_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_prim),
            "::",
            stringify!(ssp_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_prim>())).ssp_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_prim),
            "::",
            stringify!(ssp_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_setadaptation {
    pub ssb_adaptation_ind: __u32,
}
#[test]
fn bindgen_test_layout_sctp_setadaptation() {
    assert_eq!(
        ::std::mem::size_of::<sctp_setadaptation>(),
        4usize,
        concat!("Size of: ", stringify!(sctp_setadaptation))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_setadaptation>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_setadaptation))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_setadaptation>())).ssb_adaptation_ind as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_setadaptation),
            "::",
            stringify!(ssb_adaptation_ind)
        )
    );
}
pub const sctp_spp_flags_SPP_HB_ENABLE: sctp_spp_flags = 1;
pub const sctp_spp_flags_SPP_HB_DISABLE: sctp_spp_flags = 2;
pub const sctp_spp_flags_SPP_HB: sctp_spp_flags = 3;
pub const sctp_spp_flags_SPP_HB_DEMAND: sctp_spp_flags = 4;
pub const sctp_spp_flags_SPP_PMTUD_ENABLE: sctp_spp_flags = 8;
pub const sctp_spp_flags_SPP_PMTUD_DISABLE: sctp_spp_flags = 16;
pub const sctp_spp_flags_SPP_PMTUD: sctp_spp_flags = 24;
pub const sctp_spp_flags_SPP_SACKDELAY_ENABLE: sctp_spp_flags = 32;
pub const sctp_spp_flags_SPP_SACKDELAY_DISABLE: sctp_spp_flags = 64;
pub const sctp_spp_flags_SPP_SACKDELAY: sctp_spp_flags = 96;
pub const sctp_spp_flags_SPP_HB_TIME_IS_ZERO: sctp_spp_flags = 128;
pub const sctp_spp_flags_SPP_IPV6_FLOWLABEL: sctp_spp_flags = 256;
pub const sctp_spp_flags_SPP_DSCP: sctp_spp_flags = 512;
pub type sctp_spp_flags = ::std::os::raw::c_uint;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct sctp_paddrparams {
    pub spp_assoc_id: sctp_assoc_t,
    pub spp_address: sockaddr_storage,
    pub spp_hbinterval: __u32,
    pub spp_pathmaxrxt: __u16,
    pub spp_pathmtu: __u32,
    pub spp_sackdelay: __u32,
    pub spp_flags: __u32,
    pub spp_ipv6_flowlabel: __u32,
    pub spp_dscp: __u8,
}
#[test]
fn bindgen_test_layout_sctp_paddrparams() {
    assert_eq!(
        ::std::mem::size_of::<sctp_paddrparams>(),
        156usize,
        concat!("Size of: ", stringify!(sctp_paddrparams))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_paddrparams>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_paddrparams))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrparams>())).spp_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrparams),
            "::",
            stringify!(spp_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrparams>())).spp_address as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrparams),
            "::",
            stringify!(spp_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrparams>())).spp_hbinterval as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrparams),
            "::",
            stringify!(spp_hbinterval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrparams>())).spp_pathmaxrxt as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrparams),
            "::",
            stringify!(spp_pathmaxrxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrparams>())).spp_pathmtu as *const _ as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrparams),
            "::",
            stringify!(spp_pathmtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrparams>())).spp_sackdelay as *const _ as usize },
        142usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrparams),
            "::",
            stringify!(spp_sackdelay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrparams>())).spp_flags as *const _ as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrparams),
            "::",
            stringify!(spp_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_paddrparams>())).spp_ipv6_flowlabel as *const _ as usize
        },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrparams),
            "::",
            stringify!(spp_ipv6_flowlabel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrparams>())).spp_dscp as *const _ as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrparams),
            "::",
            stringify!(spp_dscp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_authchunk {
    pub sauth_chunk: __u8,
}
#[test]
fn bindgen_test_layout_sctp_authchunk() {
    assert_eq!(
        ::std::mem::size_of::<sctp_authchunk>(),
        1usize,
        concat!("Size of: ", stringify!(sctp_authchunk))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_authchunk>(),
        1usize,
        concat!("Alignment of ", stringify!(sctp_authchunk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authchunk>())).sauth_chunk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authchunk),
            "::",
            stringify!(sauth_chunk)
        )
    );
}
pub const SCTP_AUTH_HMAC_ID_SHA1: ::std::os::raw::c_uint = 1;
pub const SCTP_AUTH_HMAC_ID_SHA256: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct sctp_hmacalgo {
    pub shmac_num_idents: __u32,
    pub shmac_idents: __IncompleteArrayField<__u16>,
}
#[test]
fn bindgen_test_layout_sctp_hmacalgo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_hmacalgo>(),
        4usize,
        concat!("Size of: ", stringify!(sctp_hmacalgo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_hmacalgo>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_hmacalgo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_hmacalgo>())).shmac_num_idents as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_hmacalgo),
            "::",
            stringify!(shmac_num_idents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_hmacalgo>())).shmac_idents as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_hmacalgo),
            "::",
            stringify!(shmac_idents)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct sctp_authkey {
    pub sca_assoc_id: sctp_assoc_t,
    pub sca_keynumber: __u16,
    pub sca_keylength: __u16,
    pub sca_key: __IncompleteArrayField<__u8>,
}
#[test]
fn bindgen_test_layout_sctp_authkey() {
    assert_eq!(
        ::std::mem::size_of::<sctp_authkey>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_authkey))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_authkey>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_authkey))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authkey>())).sca_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkey),
            "::",
            stringify!(sca_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authkey>())).sca_keynumber as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkey),
            "::",
            stringify!(sca_keynumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authkey>())).sca_keylength as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkey),
            "::",
            stringify!(sca_keylength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authkey>())).sca_key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkey),
            "::",
            stringify!(sca_key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_authkeyid {
    pub scact_assoc_id: sctp_assoc_t,
    pub scact_keynumber: __u16,
}
#[test]
fn bindgen_test_layout_sctp_authkeyid() {
    assert_eq!(
        ::std::mem::size_of::<sctp_authkeyid>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_authkeyid))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_authkeyid>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_authkeyid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authkeyid>())).scact_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkeyid),
            "::",
            stringify!(scact_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authkeyid>())).scact_keynumber as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkeyid),
            "::",
            stringify!(scact_keynumber)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_sack_info {
    pub sack_assoc_id: sctp_assoc_t,
    pub sack_delay: u32,
    pub sack_freq: u32,
}
#[test]
fn bindgen_test_layout_sctp_sack_info() {
    assert_eq!(
        ::std::mem::size_of::<sctp_sack_info>(),
        12usize,
        concat!("Size of: ", stringify!(sctp_sack_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_sack_info>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_sack_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sack_info>())).sack_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sack_info),
            "::",
            stringify!(sack_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sack_info>())).sack_delay as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sack_info),
            "::",
            stringify!(sack_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sack_info>())).sack_freq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sack_info),
            "::",
            stringify!(sack_freq)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_assoc_value {
    pub assoc_id: sctp_assoc_t,
    pub assoc_value: u32,
}
#[test]
fn bindgen_test_layout_sctp_assoc_value() {
    assert_eq!(
        ::std::mem::size_of::<sctp_assoc_value>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_assoc_value))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_assoc_value>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_assoc_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_value>())).assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_value),
            "::",
            stringify!(assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_value>())).assoc_value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_value),
            "::",
            stringify!(assoc_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_stream_value {
    pub assoc_id: sctp_assoc_t,
    pub stream_id: u16,
    pub stream_value: u16,
}
#[test]
fn bindgen_test_layout_sctp_stream_value() {
    assert_eq!(
        ::std::mem::size_of::<sctp_stream_value>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_stream_value))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_stream_value>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_stream_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_stream_value>())).assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_value),
            "::",
            stringify!(assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_stream_value>())).stream_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_value),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_stream_value>())).stream_value as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_value),
            "::",
            stringify!(stream_value)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct sctp_paddrinfo {
    pub spinfo_assoc_id: sctp_assoc_t,
    pub spinfo_address: sockaddr_storage,
    pub spinfo_state: __s32,
    pub spinfo_cwnd: __u32,
    pub spinfo_srtt: __u32,
    pub spinfo_rto: __u32,
    pub spinfo_mtu: __u32,
}
#[test]
fn bindgen_test_layout_sctp_paddrinfo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_paddrinfo>(),
        152usize,
        concat!("Size of: ", stringify!(sctp_paddrinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_paddrinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_paddrinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrinfo>())).spinfo_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrinfo),
            "::",
            stringify!(spinfo_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrinfo>())).spinfo_address as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrinfo),
            "::",
            stringify!(spinfo_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrinfo>())).spinfo_state as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrinfo),
            "::",
            stringify!(spinfo_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrinfo>())).spinfo_cwnd as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrinfo),
            "::",
            stringify!(spinfo_cwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrinfo>())).spinfo_srtt as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrinfo),
            "::",
            stringify!(spinfo_srtt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrinfo>())).spinfo_rto as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrinfo),
            "::",
            stringify!(spinfo_rto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrinfo>())).spinfo_mtu as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrinfo),
            "::",
            stringify!(spinfo_mtu)
        )
    );
}
pub const sctp_spinfo_state_SCTP_INACTIVE: sctp_spinfo_state = 0;
pub const sctp_spinfo_state_SCTP_PF: sctp_spinfo_state = 1;
pub const sctp_spinfo_state_SCTP_ACTIVE: sctp_spinfo_state = 2;
pub const sctp_spinfo_state_SCTP_UNCONFIRMED: sctp_spinfo_state = 3;
pub const sctp_spinfo_state_SCTP_UNKNOWN: sctp_spinfo_state = 65535;
pub type sctp_spinfo_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_status {
    pub sstat_assoc_id: sctp_assoc_t,
    pub sstat_state: __s32,
    pub sstat_rwnd: __u32,
    pub sstat_unackdata: __u16,
    pub sstat_penddata: __u16,
    pub sstat_instrms: __u16,
    pub sstat_outstrms: __u16,
    pub sstat_fragmentation_point: __u32,
    pub sstat_primary: sctp_paddrinfo,
}
#[test]
fn bindgen_test_layout_sctp_status() {
    assert_eq!(
        ::std::mem::size_of::<sctp_status>(),
        176usize,
        concat!("Size of: ", stringify!(sctp_status))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_status>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_status))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_status>())).sstat_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_status),
            "::",
            stringify!(sstat_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_status>())).sstat_state as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_status),
            "::",
            stringify!(sstat_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_status>())).sstat_rwnd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_status),
            "::",
            stringify!(sstat_rwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_status>())).sstat_unackdata as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_status),
            "::",
            stringify!(sstat_unackdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_status>())).sstat_penddata as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_status),
            "::",
            stringify!(sstat_penddata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_status>())).sstat_instrms as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_status),
            "::",
            stringify!(sstat_instrms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_status>())).sstat_outstrms as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_status),
            "::",
            stringify!(sstat_outstrms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_status>())).sstat_fragmentation_point as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_status),
            "::",
            stringify!(sstat_fragmentation_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_status>())).sstat_primary as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_status),
            "::",
            stringify!(sstat_primary)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct sctp_authchunks {
    pub gauth_assoc_id: sctp_assoc_t,
    pub gauth_number_of_chunks: __u32,
    pub gauth_chunks: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_sctp_authchunks() {
    assert_eq!(
        ::std::mem::size_of::<sctp_authchunks>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_authchunks))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_authchunks>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_authchunks))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authchunks>())).gauth_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authchunks),
            "::",
            stringify!(gauth_assoc_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_authchunks>())).gauth_number_of_chunks as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authchunks),
            "::",
            stringify!(gauth_number_of_chunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authchunks>())).gauth_chunks as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authchunks),
            "::",
            stringify!(gauth_chunks)
        )
    );
}
pub const sctp_sstat_state_SCTP_EMPTY: sctp_sstat_state = 0;
pub const sctp_sstat_state_SCTP_CLOSED: sctp_sstat_state = 1;
pub const sctp_sstat_state_SCTP_COOKIE_WAIT: sctp_sstat_state = 2;
pub const sctp_sstat_state_SCTP_COOKIE_ECHOED: sctp_sstat_state = 3;
pub const sctp_sstat_state_SCTP_ESTABLISHED: sctp_sstat_state = 4;
pub const sctp_sstat_state_SCTP_SHUTDOWN_PENDING: sctp_sstat_state = 5;
pub const sctp_sstat_state_SCTP_SHUTDOWN_SENT: sctp_sstat_state = 6;
pub const sctp_sstat_state_SCTP_SHUTDOWN_RECEIVED: sctp_sstat_state = 7;
pub const sctp_sstat_state_SCTP_SHUTDOWN_ACK_SENT: sctp_sstat_state = 8;
pub type sctp_sstat_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct sctp_assoc_ids {
    pub gaids_number_of_ids: __u32,
    pub gaids_assoc_id: __IncompleteArrayField<sctp_assoc_t>,
}
#[test]
fn bindgen_test_layout_sctp_assoc_ids() {
    assert_eq!(
        ::std::mem::size_of::<sctp_assoc_ids>(),
        4usize,
        concat!("Size of: ", stringify!(sctp_assoc_ids))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_assoc_ids>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_assoc_ids))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_ids>())).gaids_number_of_ids as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_ids),
            "::",
            stringify!(gaids_number_of_ids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_ids>())).gaids_assoc_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_ids),
            "::",
            stringify!(gaids_assoc_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_getaddrs_old {
    pub assoc_id: sctp_assoc_t,
    pub addr_num: ::std::os::raw::c_int,
    pub addrs: *mut sockaddr,
}
#[test]
fn bindgen_test_layout_sctp_getaddrs_old() {
    assert_eq!(
        ::std::mem::size_of::<sctp_getaddrs_old>(),
        16usize,
        concat!("Size of: ", stringify!(sctp_getaddrs_old))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_getaddrs_old>(),
        8usize,
        concat!("Alignment of ", stringify!(sctp_getaddrs_old))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_getaddrs_old>())).assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_getaddrs_old),
            "::",
            stringify!(assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_getaddrs_old>())).addr_num as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_getaddrs_old),
            "::",
            stringify!(addr_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_getaddrs_old>())).addrs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_getaddrs_old),
            "::",
            stringify!(addrs)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct sctp_getaddrs {
    pub assoc_id: sctp_assoc_t,
    pub addr_num: __u32,
    pub addrs: __IncompleteArrayField<__u8>,
}
#[test]
fn bindgen_test_layout_sctp_getaddrs() {
    assert_eq!(
        ::std::mem::size_of::<sctp_getaddrs>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_getaddrs))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_getaddrs>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_getaddrs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_getaddrs>())).assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_getaddrs),
            "::",
            stringify!(assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_getaddrs>())).addr_num as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_getaddrs),
            "::",
            stringify!(addr_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_getaddrs>())).addrs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_getaddrs),
            "::",
            stringify!(addrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_assoc_stats {
    pub sas_assoc_id: sctp_assoc_t,
    pub sas_obs_rto_ipaddr: sockaddr_storage,
    pub sas_maxrto: __u64,
    pub sas_isacks: __u64,
    pub sas_osacks: __u64,
    pub sas_opackets: __u64,
    pub sas_ipackets: __u64,
    pub sas_rtxchunks: __u64,
    pub sas_outofseqtsns: __u64,
    pub sas_idupchunks: __u64,
    pub sas_gapcnt: __u64,
    pub sas_ouodchunks: __u64,
    pub sas_iuodchunks: __u64,
    pub sas_oodchunks: __u64,
    pub sas_iodchunks: __u64,
    pub sas_octrlchunks: __u64,
    pub sas_ictrlchunks: __u64,
}
#[test]
fn bindgen_test_layout_sctp_assoc_stats() {
    assert_eq!(
        ::std::mem::size_of::<sctp_assoc_stats>(),
        256usize,
        concat!("Size of: ", stringify!(sctp_assoc_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_assoc_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(sctp_assoc_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_stats>())).sas_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_stats),
            "::",
            stringify!(sas_assoc_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_stats>())).sas_obs_rto_ipaddr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_stats),
            "::",
            stringify!(sas_obs_rto_ipaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_stats>())).sas_maxrto as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_stats),
            "::",
            stringify!(sas_maxrto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_stats>())).sas_isacks as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_stats),
            "::",
            stringify!(sas_isacks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_stats>())).sas_osacks as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_stats),
            "::",
            stringify!(sas_osacks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_stats>())).sas_opackets as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_stats),
            "::",
            stringify!(sas_opackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_stats>())).sas_ipackets as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_stats),
            "::",
            stringify!(sas_ipackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_stats>())).sas_rtxchunks as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_stats),
            "::",
            stringify!(sas_rtxchunks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_stats>())).sas_outofseqtsns as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_stats),
            "::",
            stringify!(sas_outofseqtsns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_stats>())).sas_idupchunks as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_stats),
            "::",
            stringify!(sas_idupchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_stats>())).sas_gapcnt as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_stats),
            "::",
            stringify!(sas_gapcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_stats>())).sas_ouodchunks as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_stats),
            "::",
            stringify!(sas_ouodchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_stats>())).sas_iuodchunks as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_stats),
            "::",
            stringify!(sas_iuodchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_stats>())).sas_oodchunks as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_stats),
            "::",
            stringify!(sas_oodchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_stats>())).sas_iodchunks as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_stats),
            "::",
            stringify!(sas_iodchunks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_stats>())).sas_octrlchunks as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_stats),
            "::",
            stringify!(sas_octrlchunks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_stats>())).sas_ictrlchunks as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_stats),
            "::",
            stringify!(sas_ictrlchunks)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_peeloff_arg_t {
    pub associd: sctp_assoc_t,
    pub sd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sctp_peeloff_arg_t() {
    assert_eq!(
        ::std::mem::size_of::<sctp_peeloff_arg_t>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_peeloff_arg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_peeloff_arg_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_peeloff_arg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_peeloff_arg_t>())).associd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_peeloff_arg_t),
            "::",
            stringify!(associd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_peeloff_arg_t>())).sd as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_peeloff_arg_t),
            "::",
            stringify!(sd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_peeloff_flags_arg_t {
    pub p_arg: sctp_peeloff_arg_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_sctp_peeloff_flags_arg_t() {
    assert_eq!(
        ::std::mem::size_of::<sctp_peeloff_flags_arg_t>(),
        12usize,
        concat!("Size of: ", stringify!(sctp_peeloff_flags_arg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_peeloff_flags_arg_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_peeloff_flags_arg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_peeloff_flags_arg_t>())).p_arg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_peeloff_flags_arg_t),
            "::",
            stringify!(p_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_peeloff_flags_arg_t>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_peeloff_flags_arg_t),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_paddrthlds {
    pub spt_assoc_id: sctp_assoc_t,
    pub spt_address: sockaddr_storage,
    pub spt_pathmaxrxt: __u16,
    pub spt_pathpfthld: __u16,
}
#[test]
fn bindgen_test_layout_sctp_paddrthlds() {
    assert_eq!(
        ::std::mem::size_of::<sctp_paddrthlds>(),
        144usize,
        concat!("Size of: ", stringify!(sctp_paddrthlds))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_paddrthlds>(),
        8usize,
        concat!("Alignment of ", stringify!(sctp_paddrthlds))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrthlds>())).spt_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrthlds),
            "::",
            stringify!(spt_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrthlds>())).spt_address as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrthlds),
            "::",
            stringify!(spt_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrthlds>())).spt_pathmaxrxt as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrthlds),
            "::",
            stringify!(spt_pathmaxrxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrthlds>())).spt_pathpfthld as *const _ as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrthlds),
            "::",
            stringify!(spt_pathpfthld)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_prstatus {
    pub sprstat_assoc_id: sctp_assoc_t,
    pub sprstat_sid: __u16,
    pub sprstat_policy: __u16,
    pub sprstat_abandoned_unsent: __u64,
    pub sprstat_abandoned_sent: __u64,
}
#[test]
fn bindgen_test_layout_sctp_prstatus() {
    assert_eq!(
        ::std::mem::size_of::<sctp_prstatus>(),
        24usize,
        concat!("Size of: ", stringify!(sctp_prstatus))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_prstatus>(),
        8usize,
        concat!("Alignment of ", stringify!(sctp_prstatus))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_prstatus>())).sprstat_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_prstatus),
            "::",
            stringify!(sprstat_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_prstatus>())).sprstat_sid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_prstatus),
            "::",
            stringify!(sprstat_sid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_prstatus>())).sprstat_policy as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_prstatus),
            "::",
            stringify!(sprstat_policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_prstatus>())).sprstat_abandoned_unsent as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_prstatus),
            "::",
            stringify!(sprstat_abandoned_unsent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_prstatus>())).sprstat_abandoned_sent as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_prstatus),
            "::",
            stringify!(sprstat_abandoned_sent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_default_prinfo {
    pub pr_assoc_id: sctp_assoc_t,
    pub pr_value: __u32,
    pub pr_policy: __u16,
}
#[test]
fn bindgen_test_layout_sctp_default_prinfo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_default_prinfo>(),
        12usize,
        concat!("Size of: ", stringify!(sctp_default_prinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_default_prinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_default_prinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_default_prinfo>())).pr_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_default_prinfo),
            "::",
            stringify!(pr_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_default_prinfo>())).pr_value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_default_prinfo),
            "::",
            stringify!(pr_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_default_prinfo>())).pr_policy as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_default_prinfo),
            "::",
            stringify!(pr_policy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_info {
    pub sctpi_tag: __u32,
    pub sctpi_state: __u32,
    pub sctpi_rwnd: __u32,
    pub sctpi_unackdata: __u16,
    pub sctpi_penddata: __u16,
    pub sctpi_instrms: __u16,
    pub sctpi_outstrms: __u16,
    pub sctpi_fragmentation_point: __u32,
    pub sctpi_inqueue: __u32,
    pub sctpi_outqueue: __u32,
    pub sctpi_overall_error: __u32,
    pub sctpi_max_burst: __u32,
    pub sctpi_maxseg: __u32,
    pub sctpi_peer_rwnd: __u32,
    pub sctpi_peer_tag: __u32,
    pub sctpi_peer_capable: __u8,
    pub sctpi_peer_sack: __u8,
    pub __reserved1: __u16,
    pub sctpi_isacks: __u64,
    pub sctpi_osacks: __u64,
    pub sctpi_opackets: __u64,
    pub sctpi_ipackets: __u64,
    pub sctpi_rtxchunks: __u64,
    pub sctpi_outofseqtsns: __u64,
    pub sctpi_idupchunks: __u64,
    pub sctpi_gapcnt: __u64,
    pub sctpi_ouodchunks: __u64,
    pub sctpi_iuodchunks: __u64,
    pub sctpi_oodchunks: __u64,
    pub sctpi_iodchunks: __u64,
    pub sctpi_octrlchunks: __u64,
    pub sctpi_ictrlchunks: __u64,
    pub sctpi_p_address: sockaddr_storage,
    pub sctpi_p_state: __s32,
    pub sctpi_p_cwnd: __u32,
    pub sctpi_p_srtt: __u32,
    pub sctpi_p_rto: __u32,
    pub sctpi_p_hbinterval: __u32,
    pub sctpi_p_pathmaxrxt: __u32,
    pub sctpi_p_sackdelay: __u32,
    pub sctpi_p_sackfreq: __u32,
    pub sctpi_p_ssthresh: __u32,
    pub sctpi_p_partial_bytes_acked: __u32,
    pub sctpi_p_flight_size: __u32,
    pub sctpi_p_error: __u16,
    pub __reserved2: __u16,
    pub sctpi_s_autoclose: __u32,
    pub sctpi_s_adaptation_ind: __u32,
    pub sctpi_s_pd_point: __u32,
    pub sctpi_s_nodelay: __u8,
    pub sctpi_s_disable_fragments: __u8,
    pub sctpi_s_v4mapped: __u8,
    pub sctpi_s_frag_interleave: __u8,
    pub sctpi_s_type: __u32,
    pub __reserved3: __u32,
}
#[test]
fn bindgen_test_layout_sctp_info() {
    assert_eq!(
        ::std::mem::size_of::<sctp_info>(),
        368usize,
        concat!("Size of: ", stringify!(sctp_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sctp_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_state as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_rwnd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_rwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_unackdata as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_unackdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_penddata as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_penddata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_instrms as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_instrms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_outstrms as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_outstrms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_info>())).sctpi_fragmentation_point as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_fragmentation_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_inqueue as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_inqueue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_outqueue as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_outqueue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_overall_error as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_overall_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_max_burst as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_max_burst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_maxseg as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_maxseg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_peer_rwnd as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_peer_rwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_peer_tag as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_peer_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_peer_capable as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_peer_capable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_peer_sack as *const _ as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_peer_sack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).__reserved1 as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(__reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_isacks as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_isacks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_osacks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_osacks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_opackets as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_opackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_ipackets as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_ipackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_rtxchunks as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_rtxchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_outofseqtsns as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_outofseqtsns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_idupchunks as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_idupchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_gapcnt as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_gapcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_ouodchunks as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_ouodchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_iuodchunks as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_iuodchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_oodchunks as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_oodchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_iodchunks as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_iodchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_octrlchunks as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_octrlchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_ictrlchunks as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_ictrlchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_p_address as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_p_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_p_state as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_p_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_p_cwnd as *const _ as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_p_cwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_p_srtt as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_p_srtt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_p_rto as *const _ as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_p_rto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_p_hbinterval as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_p_hbinterval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_p_pathmaxrxt as *const _ as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_p_pathmaxrxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_p_sackdelay as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_p_sackdelay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_p_sackfreq as *const _ as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_p_sackfreq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_p_ssthresh as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_p_ssthresh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_info>())).sctpi_p_partial_bytes_acked as *const _ as usize
        },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_p_partial_bytes_acked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_p_flight_size as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_p_flight_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_p_error as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_p_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).__reserved2 as *const _ as usize },
        342usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(__reserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_s_autoclose as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_s_autoclose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_info>())).sctpi_s_adaptation_ind as *const _ as usize
        },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_s_adaptation_ind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_s_pd_point as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_s_pd_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_s_nodelay as *const _ as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_s_nodelay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_info>())).sctpi_s_disable_fragments as *const _ as usize
        },
        357usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_s_disable_fragments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_s_v4mapped as *const _ as usize },
        358usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_s_v4mapped)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_info>())).sctpi_s_frag_interleave as *const _ as usize
        },
        359usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_s_frag_interleave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).sctpi_s_type as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(sctpi_s_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_info>())).__reserved3 as *const _ as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_info),
            "::",
            stringify!(__reserved3)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct sctp_reset_streams {
    pub srs_assoc_id: sctp_assoc_t,
    pub srs_flags: u16,
    pub srs_number_streams: u16,
    pub srs_stream_list: __IncompleteArrayField<u16>,
}
#[test]
fn bindgen_test_layout_sctp_reset_streams() {
    assert_eq!(
        ::std::mem::size_of::<sctp_reset_streams>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_reset_streams))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_reset_streams>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_reset_streams))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_reset_streams>())).srs_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_reset_streams),
            "::",
            stringify!(srs_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_reset_streams>())).srs_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_reset_streams),
            "::",
            stringify!(srs_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_reset_streams>())).srs_number_streams as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_reset_streams),
            "::",
            stringify!(srs_number_streams)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_reset_streams>())).srs_stream_list as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_reset_streams),
            "::",
            stringify!(srs_stream_list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_add_streams {
    pub sas_assoc_id: sctp_assoc_t,
    pub sas_instrms: u16,
    pub sas_outstrms: u16,
}
#[test]
fn bindgen_test_layout_sctp_add_streams() {
    assert_eq!(
        ::std::mem::size_of::<sctp_add_streams>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_add_streams))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_add_streams>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_add_streams))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_add_streams>())).sas_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_add_streams),
            "::",
            stringify!(sas_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_add_streams>())).sas_instrms as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_add_streams),
            "::",
            stringify!(sas_instrms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_add_streams>())).sas_outstrms as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_add_streams),
            "::",
            stringify!(sas_outstrms)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_event {
    pub se_assoc_id: sctp_assoc_t,
    pub se_type: u16,
    pub se_on: u8,
}
#[test]
fn bindgen_test_layout_sctp_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_event>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_event>())).se_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event),
            "::",
            stringify!(se_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_event>())).se_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event),
            "::",
            stringify!(se_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_event>())).se_on as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event),
            "::",
            stringify!(se_on)
        )
    );
}
pub const sctp_sched_type_SCTP_SS_FCFS: sctp_sched_type = 0;
pub const sctp_sched_type_SCTP_SS_DEFAULT: sctp_sched_type = 0;
pub const sctp_sched_type_SCTP_SS_PRIO: sctp_sched_type = 1;
pub const sctp_sched_type_SCTP_SS_RR: sctp_sched_type = 2;
pub const sctp_sched_type_SCTP_SS_MAX: sctp_sched_type = 2;
pub type sctp_sched_type = ::std::os::raw::c_uint;
extern "C" {
    pub fn sctp_bindx(
        sd: ::std::os::raw::c_int,
        addrs: *mut sockaddr,
        addrcnt: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sctp_connectx(
        sd: ::std::os::raw::c_int,
        addrs: *mut sockaddr,
        addrcnt: ::std::os::raw::c_int,
        id: *mut sctp_assoc_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sctp_peeloff(sd: ::std::os::raw::c_int, assoc_id: sctp_assoc_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sctp_peeloff_flags(
        sd: ::std::os::raw::c_int,
        assoc_id: sctp_assoc_t,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sctp_opt_info(
        sd: ::std::os::raw::c_int,
        id: sctp_assoc_t,
        opt: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
        size: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sctp_getpaddrs(
        sd: ::std::os::raw::c_int,
        id: sctp_assoc_t,
        addrs: *mut *mut sockaddr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sctp_freepaddrs(addrs: *mut sockaddr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sctp_getladdrs(
        sd: ::std::os::raw::c_int,
        id: sctp_assoc_t,
        addrs: *mut *mut sockaddr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sctp_freeladdrs(addrs: *mut sockaddr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sctp_sendmsg(
        s: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_void,
        len: size_t,
        to: *mut sockaddr,
        tolen: socklen_t,
        ppid: u32,
        flags: u32,
        stream_no: u16,
        timetolive: u32,
        context: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sctp_send(
        s: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_void,
        len: size_t,
        sinfo: *const sctp_sndrcvinfo,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sctp_recvmsg(
        s: ::std::os::raw::c_int,
        msg: *mut ::std::os::raw::c_void,
        len: size_t,
        from: *mut sockaddr,
        fromlen: *mut socklen_t,
        sinfo: *mut sctp_sndrcvinfo,
        msg_flags: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sctp_getaddrlen(family: sa_family_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_sendv_spa {
    pub sendv_flags: u32,
    pub sendv_sndinfo: sctp_sndinfo,
}
#[test]
fn bindgen_test_layout_sctp_sendv_spa() {
    assert_eq!(
        ::std::mem::size_of::<sctp_sendv_spa>(),
        20usize,
        concat!("Size of: ", stringify!(sctp_sendv_spa))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_sendv_spa>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_sendv_spa))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sendv_spa>())).sendv_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sendv_spa),
            "::",
            stringify!(sendv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sendv_spa>())).sendv_sndinfo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sendv_spa),
            "::",
            stringify!(sendv_sndinfo)
        )
    );
}
