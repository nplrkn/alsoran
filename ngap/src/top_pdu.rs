// Copyright (c) Nicholas Larkin
// Autogenerated from NGAP-PDU-Descriptions.asn
use super::pdu::*;
use crate::common::Criticality;
use asn1_codecs::aper::{self, AperCodec, AperCodecData, AperCodecError};

// NgapPdu
#[derive(Clone, Debug)]
pub enum NgapPdu {
    InitiatingMessage(InitiatingMessage),
    SuccessfulOutcome(SuccessfulOutcome),
    UnsuccessfulOutcome(UnsuccessfulOutcome),
}

impl NgapPdu {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, true)?;
        if extended {
            return Err(aper::AperCodecError::new(
                "CHOICE additions not implemented",
            ));
        }
        match idx {
            0 => Ok(Self::InitiatingMessage(InitiatingMessage::decode(data)?)),
            1 => Ok(Self::SuccessfulOutcome(SuccessfulOutcome::decode(data)?)),
            2 => Ok(Self::UnsuccessfulOutcome(UnsuccessfulOutcome::decode(
                data,
            )?)),
            _ => Err(AperCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        match self {
            Self::InitiatingMessage(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, true, 0, false)?;
                x.encode(data)
            }
            Self::SuccessfulOutcome(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, true, 1, false)?;
                x.encode(data)
            }
            Self::UnsuccessfulOutcome(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, true, 2, false)?;
                x.encode(data)
            }
        }
    }
}

impl AperCodec for NgapPdu {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        NgapPdu::decode_inner(data).map_err(|e: AperCodecError| e.push_context("NgapPdu"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NgapPdu"))
    }
}
#[derive(Clone, Debug)]
pub enum InitiatingMessage {
    AmfConfigurationUpdate(AmfConfigurationUpdate),
    AmfcpRelocationIndication(AmfcpRelocationIndication),
    AmfStatusIndication(AmfStatusIndication),
    CellTrafficTrace(CellTrafficTrace),
    ConnectionEstablishmentIndication(ConnectionEstablishmentIndication),
    DeactivateTrace(DeactivateTrace),
    DownlinkNasTransport(DownlinkNasTransport),
    DownlinkNonUeAssociatedNrpPaTransport(DownlinkNonUeAssociatedNrpPaTransport),
    DownlinkRanConfigurationTransfer(DownlinkRanConfigurationTransfer),
    DownlinkRanEarlyStatusTransfer(DownlinkRanEarlyStatusTransfer),
    DownlinkRanStatusTransfer(DownlinkRanStatusTransfer),
    DownlinkUeAssociatedNrpPaTransport(DownlinkUeAssociatedNrpPaTransport),
    ErrorIndication(ErrorIndication),
    HandoverCancel(HandoverCancel),
    HandoverNotify(HandoverNotify),
    HandoverRequired(HandoverRequired),
    HandoverRequest(HandoverRequest),
    HandoverSuccess(HandoverSuccess),
    InitialContextSetupRequest(InitialContextSetupRequest),
    InitialUeMessage(InitialUeMessage),
    LocationReport(LocationReport),
    LocationReportingControl(LocationReportingControl),
    LocationReportingFailureIndication(LocationReportingFailureIndication),
    NasNonDeliveryIndication(NasNonDeliveryIndication),
    NgReset(NgReset),
    NgSetupRequest(NgSetupRequest),
    OverloadStart(OverloadStart),
    OverloadStop(OverloadStop),
    Paging(Paging),
    PathSwitchRequest(PathSwitchRequest),
    PduSessionResourceModifyRequest(PduSessionResourceModifyRequest),
    PduSessionResourceModifyIndication(PduSessionResourceModifyIndication),
    PduSessionResourceNotify(PduSessionResourceNotify),
    PduSessionResourceReleaseCommand(PduSessionResourceReleaseCommand),
    PduSessionResourceSetupRequest(PduSessionResourceSetupRequest),
    PwsCancelRequest(PwsCancelRequest),
    PwsFailureIndication(PwsFailureIndication),
    PwsRestartIndication(PwsRestartIndication),
    RanConfigurationUpdate(RanConfigurationUpdate),
    RancpRelocationIndication(RancpRelocationIndication),
    RerouteNasRequest(RerouteNasRequest),
    RetrieveUeInformation(RetrieveUeInformation),
    RrcInactiveTransitionReport(RrcInactiveTransitionReport),
    SecondaryRatDataUsageReport(SecondaryRatDataUsageReport),
    TraceFailureIndication(TraceFailureIndication),
    TraceStart(TraceStart),
    UeContextModificationRequest(UeContextModificationRequest),
    UeContextReleaseCommand(UeContextReleaseCommand),
    UeContextReleaseRequest(UeContextReleaseRequest),
    UeContextResumeRequest(UeContextResumeRequest),
    UeContextSuspendRequest(UeContextSuspendRequest),
    UeInformationTransfer(UeInformationTransfer),
    UeRadioCapabilityCheckRequest(UeRadioCapabilityCheckRequest),
    UeRadioCapabilityIdMappingRequest(UeRadioCapabilityIdMappingRequest),
    UeRadioCapabilityInfoIndication(UeRadioCapabilityInfoIndication),
    UetnlaBindingReleaseRequest(UetnlaBindingReleaseRequest),
    UplinkNasTransport(UplinkNasTransport),
    UplinkNonUeAssociatedNrpPaTransport(UplinkNonUeAssociatedNrpPaTransport),
    UplinkRanConfigurationTransfer(UplinkRanConfigurationTransfer),
    UplinkRanEarlyStatusTransfer(UplinkRanEarlyStatusTransfer),
    UplinkRanStatusTransfer(UplinkRanStatusTransfer),
    UplinkUeAssociatedNrpPaTransport(UplinkUeAssociatedNrpPaTransport),
    WriteReplaceWarningRequest(WriteReplaceWarningRequest),
    UplinkRimInformationTransfer(UplinkRimInformationTransfer),
    DownlinkRimInformationTransfer(DownlinkRimInformationTransfer),
}

impl AperCodec for InitiatingMessage {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        InitiatingMessage::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("InitiatingMessage"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("InitiatingMessage"))
    }
}
impl InitiatingMessage {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(255), false)?;
        let _ = Criticality::decode(data)?;
        match id {
            0 => Ok(Self::AmfConfigurationUpdate(
                AmfConfigurationUpdate::decode(data)?,
            )),
            64 => Ok(Self::AmfcpRelocationIndication(
                AmfcpRelocationIndication::decode(data)?,
            )),
            1 => Ok(Self::AmfStatusIndication(AmfStatusIndication::decode(
                data,
            )?)),
            2 => Ok(Self::CellTrafficTrace(CellTrafficTrace::decode(data)?)),
            65 => Ok(Self::ConnectionEstablishmentIndication(
                ConnectionEstablishmentIndication::decode(data)?,
            )),
            3 => Ok(Self::DeactivateTrace(DeactivateTrace::decode(data)?)),
            4 => Ok(Self::DownlinkNasTransport(DownlinkNasTransport::decode(
                data,
            )?)),
            5 => Ok(Self::DownlinkNonUeAssociatedNrpPaTransport(
                DownlinkNonUeAssociatedNrpPaTransport::decode(data)?,
            )),
            6 => Ok(Self::DownlinkRanConfigurationTransfer(
                DownlinkRanConfigurationTransfer::decode(data)?,
            )),
            63 => Ok(Self::DownlinkRanEarlyStatusTransfer(
                DownlinkRanEarlyStatusTransfer::decode(data)?,
            )),
            7 => Ok(Self::DownlinkRanStatusTransfer(
                DownlinkRanStatusTransfer::decode(data)?,
            )),
            8 => Ok(Self::DownlinkUeAssociatedNrpPaTransport(
                DownlinkUeAssociatedNrpPaTransport::decode(data)?,
            )),
            9 => Ok(Self::ErrorIndication(ErrorIndication::decode(data)?)),
            10 => Ok(Self::HandoverCancel(HandoverCancel::decode(data)?)),
            11 => Ok(Self::HandoverNotify(HandoverNotify::decode(data)?)),
            12 => Ok(Self::HandoverRequired(HandoverRequired::decode(data)?)),
            13 => Ok(Self::HandoverRequest(HandoverRequest::decode(data)?)),
            61 => Ok(Self::HandoverSuccess(HandoverSuccess::decode(data)?)),
            14 => Ok(Self::InitialContextSetupRequest(
                InitialContextSetupRequest::decode(data)?,
            )),
            15 => Ok(Self::InitialUeMessage(InitialUeMessage::decode(data)?)),
            18 => Ok(Self::LocationReport(LocationReport::decode(data)?)),
            16 => Ok(Self::LocationReportingControl(
                LocationReportingControl::decode(data)?,
            )),
            17 => Ok(Self::LocationReportingFailureIndication(
                LocationReportingFailureIndication::decode(data)?,
            )),
            19 => Ok(Self::NasNonDeliveryIndication(
                NasNonDeliveryIndication::decode(data)?,
            )),
            20 => Ok(Self::NgReset(NgReset::decode(data)?)),
            21 => Ok(Self::NgSetupRequest(NgSetupRequest::decode(data)?)),
            22 => Ok(Self::OverloadStart(OverloadStart::decode(data)?)),
            23 => Ok(Self::OverloadStop(OverloadStop::decode(data)?)),
            24 => Ok(Self::Paging(Paging::decode(data)?)),
            25 => Ok(Self::PathSwitchRequest(PathSwitchRequest::decode(data)?)),
            26 => Ok(Self::PduSessionResourceModifyRequest(
                PduSessionResourceModifyRequest::decode(data)?,
            )),
            27 => Ok(Self::PduSessionResourceModifyIndication(
                PduSessionResourceModifyIndication::decode(data)?,
            )),
            30 => Ok(Self::PduSessionResourceNotify(
                PduSessionResourceNotify::decode(data)?,
            )),
            28 => Ok(Self::PduSessionResourceReleaseCommand(
                PduSessionResourceReleaseCommand::decode(data)?,
            )),
            29 => Ok(Self::PduSessionResourceSetupRequest(
                PduSessionResourceSetupRequest::decode(data)?,
            )),
            32 => Ok(Self::PwsCancelRequest(PwsCancelRequest::decode(data)?)),
            33 => Ok(Self::PwsFailureIndication(PwsFailureIndication::decode(
                data,
            )?)),
            34 => Ok(Self::PwsRestartIndication(PwsRestartIndication::decode(
                data,
            )?)),
            35 => Ok(Self::RanConfigurationUpdate(
                RanConfigurationUpdate::decode(data)?,
            )),
            57 => Ok(Self::RancpRelocationIndication(
                RancpRelocationIndication::decode(data)?,
            )),
            36 => Ok(Self::RerouteNasRequest(RerouteNasRequest::decode(data)?)),
            55 => Ok(Self::RetrieveUeInformation(RetrieveUeInformation::decode(
                data,
            )?)),
            37 => Ok(Self::RrcInactiveTransitionReport(
                RrcInactiveTransitionReport::decode(data)?,
            )),
            52 => Ok(Self::SecondaryRatDataUsageReport(
                SecondaryRatDataUsageReport::decode(data)?,
            )),
            38 => Ok(Self::TraceFailureIndication(
                TraceFailureIndication::decode(data)?,
            )),
            39 => Ok(Self::TraceStart(TraceStart::decode(data)?)),
            40 => Ok(Self::UeContextModificationRequest(
                UeContextModificationRequest::decode(data)?,
            )),
            41 => Ok(Self::UeContextReleaseCommand(
                UeContextReleaseCommand::decode(data)?,
            )),
            42 => Ok(Self::UeContextReleaseRequest(
                UeContextReleaseRequest::decode(data)?,
            )),
            58 => Ok(Self::UeContextResumeRequest(
                UeContextResumeRequest::decode(data)?,
            )),
            59 => Ok(Self::UeContextSuspendRequest(
                UeContextSuspendRequest::decode(data)?,
            )),
            56 => Ok(Self::UeInformationTransfer(UeInformationTransfer::decode(
                data,
            )?)),
            43 => Ok(Self::UeRadioCapabilityCheckRequest(
                UeRadioCapabilityCheckRequest::decode(data)?,
            )),
            60 => Ok(Self::UeRadioCapabilityIdMappingRequest(
                UeRadioCapabilityIdMappingRequest::decode(data)?,
            )),
            44 => Ok(Self::UeRadioCapabilityInfoIndication(
                UeRadioCapabilityInfoIndication::decode(data)?,
            )),
            45 => Ok(Self::UetnlaBindingReleaseRequest(
                UetnlaBindingReleaseRequest::decode(data)?,
            )),
            46 => Ok(Self::UplinkNasTransport(UplinkNasTransport::decode(data)?)),
            47 => Ok(Self::UplinkNonUeAssociatedNrpPaTransport(
                UplinkNonUeAssociatedNrpPaTransport::decode(data)?,
            )),
            48 => Ok(Self::UplinkRanConfigurationTransfer(
                UplinkRanConfigurationTransfer::decode(data)?,
            )),
            62 => Ok(Self::UplinkRanEarlyStatusTransfer(
                UplinkRanEarlyStatusTransfer::decode(data)?,
            )),
            49 => Ok(Self::UplinkRanStatusTransfer(
                UplinkRanStatusTransfer::decode(data)?,
            )),
            50 => Ok(Self::UplinkUeAssociatedNrpPaTransport(
                UplinkUeAssociatedNrpPaTransport::decode(data)?,
            )),
            51 => Ok(Self::WriteReplaceWarningRequest(
                WriteReplaceWarningRequest::decode(data)?,
            )),
            53 => Ok(Self::UplinkRimInformationTransfer(
                UplinkRimInformationTransfer::decode(data)?,
            )),
            54 => Ok(Self::DownlinkRimInformationTransfer(
                DownlinkRimInformationTransfer::decode(data)?,
            )),
            x => {
                return Err(aper::AperCodecError::new(format!(
                    "Unrecognised procedure code {}",
                    x
                )))
            }
        }
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        match self {
            Self::AmfConfigurationUpdate(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 0, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::AmfcpRelocationIndication(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 64, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::AmfStatusIndication(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 1, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::CellTrafficTrace(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 2, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::ConnectionEstablishmentIndication(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 65, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::DeactivateTrace(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 3, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::DownlinkNasTransport(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 4, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::DownlinkNonUeAssociatedNrpPaTransport(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 5, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::DownlinkRanConfigurationTransfer(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 6, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::DownlinkRanEarlyStatusTransfer(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 63, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::DownlinkRanStatusTransfer(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 7, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::DownlinkUeAssociatedNrpPaTransport(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 8, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::ErrorIndication(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 9, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::HandoverCancel(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 10, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::HandoverNotify(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 11, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::HandoverRequired(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 12, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::HandoverRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 13, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::HandoverSuccess(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 61, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::InitialContextSetupRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 14, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::InitialUeMessage(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 15, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::LocationReport(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 18, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::LocationReportingControl(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 16, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::LocationReportingFailureIndication(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 17, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::NasNonDeliveryIndication(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 19, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::NgReset(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 20, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::NgSetupRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 21, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::OverloadStart(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 22, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::OverloadStop(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 23, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::Paging(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 24, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::PathSwitchRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 25, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::PduSessionResourceModifyRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 26, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::PduSessionResourceModifyIndication(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 27, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::PduSessionResourceNotify(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 30, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::PduSessionResourceReleaseCommand(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 28, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::PduSessionResourceSetupRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 29, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::PwsCancelRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 32, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::PwsFailureIndication(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 33, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::PwsRestartIndication(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 34, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::RanConfigurationUpdate(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 35, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::RancpRelocationIndication(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 57, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::RerouteNasRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 36, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::RetrieveUeInformation(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 55, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::RrcInactiveTransitionReport(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 37, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::SecondaryRatDataUsageReport(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 52, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::TraceFailureIndication(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 38, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::TraceStart(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 39, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::UeContextModificationRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 40, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::UeContextReleaseCommand(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 41, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::UeContextReleaseRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 42, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::UeContextResumeRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 58, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::UeContextSuspendRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 59, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::UeInformationTransfer(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 56, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::UeRadioCapabilityCheckRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 43, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::UeRadioCapabilityIdMappingRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 60, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::UeRadioCapabilityInfoIndication(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 44, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::UetnlaBindingReleaseRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 45, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::UplinkNasTransport(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 46, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::UplinkNonUeAssociatedNrpPaTransport(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 47, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::UplinkRanConfigurationTransfer(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 48, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::UplinkRanEarlyStatusTransfer(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 62, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::UplinkRanStatusTransfer(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 49, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::UplinkUeAssociatedNrpPaTransport(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 50, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::WriteReplaceWarningRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 51, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::UplinkRimInformationTransfer(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 53, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
            Self::DownlinkRimInformationTransfer(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 54, false)?;
                Criticality::Ignore.encode(data)?;
                x.encode(data)?;
            }
        }
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub enum SuccessfulOutcome {
    AmfConfigurationUpdateAcknowledge(AmfConfigurationUpdateAcknowledge),
    HandoverCancelAcknowledge(HandoverCancelAcknowledge),
    HandoverCommand(HandoverCommand),
    HandoverRequestAcknowledge(HandoverRequestAcknowledge),
    InitialContextSetupResponse(InitialContextSetupResponse),
    NgResetAcknowledge(NgResetAcknowledge),
    NgSetupResponse(NgSetupResponse),
    PathSwitchRequestAcknowledge(PathSwitchRequestAcknowledge),
    PduSessionResourceModifyResponse(PduSessionResourceModifyResponse),
    PduSessionResourceModifyConfirm(PduSessionResourceModifyConfirm),
    PduSessionResourceReleaseResponse(PduSessionResourceReleaseResponse),
    PduSessionResourceSetupResponse(PduSessionResourceSetupResponse),
    PwsCancelResponse(PwsCancelResponse),
    RanConfigurationUpdateAcknowledge(RanConfigurationUpdateAcknowledge),
    UeContextModificationResponse(UeContextModificationResponse),
    UeContextReleaseComplete(UeContextReleaseComplete),
    UeContextResumeResponse(UeContextResumeResponse),
    UeContextSuspendResponse(UeContextSuspendResponse),
    UeRadioCapabilityCheckResponse(UeRadioCapabilityCheckResponse),
    UeRadioCapabilityIdMappingResponse(UeRadioCapabilityIdMappingResponse),
    WriteReplaceWarningResponse(WriteReplaceWarningResponse),
}

impl AperCodec for SuccessfulOutcome {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SuccessfulOutcome::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SuccessfulOutcome"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SuccessfulOutcome"))
    }
}
impl SuccessfulOutcome {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(255), false)?;
        let _ = Criticality::decode(data)?;
        match id {
            0 => Ok(Self::AmfConfigurationUpdateAcknowledge(
                AmfConfigurationUpdateAcknowledge::decode(data)?,
            )),
            10 => Ok(Self::HandoverCancelAcknowledge(
                HandoverCancelAcknowledge::decode(data)?,
            )),
            12 => Ok(Self::HandoverCommand(HandoverCommand::decode(data)?)),
            13 => Ok(Self::HandoverRequestAcknowledge(
                HandoverRequestAcknowledge::decode(data)?,
            )),
            14 => Ok(Self::InitialContextSetupResponse(
                InitialContextSetupResponse::decode(data)?,
            )),
            20 => Ok(Self::NgResetAcknowledge(NgResetAcknowledge::decode(data)?)),
            21 => Ok(Self::NgSetupResponse(NgSetupResponse::decode(data)?)),
            25 => Ok(Self::PathSwitchRequestAcknowledge(
                PathSwitchRequestAcknowledge::decode(data)?,
            )),
            26 => Ok(Self::PduSessionResourceModifyResponse(
                PduSessionResourceModifyResponse::decode(data)?,
            )),
            27 => Ok(Self::PduSessionResourceModifyConfirm(
                PduSessionResourceModifyConfirm::decode(data)?,
            )),
            28 => Ok(Self::PduSessionResourceReleaseResponse(
                PduSessionResourceReleaseResponse::decode(data)?,
            )),
            29 => Ok(Self::PduSessionResourceSetupResponse(
                PduSessionResourceSetupResponse::decode(data)?,
            )),
            32 => Ok(Self::PwsCancelResponse(PwsCancelResponse::decode(data)?)),
            35 => Ok(Self::RanConfigurationUpdateAcknowledge(
                RanConfigurationUpdateAcknowledge::decode(data)?,
            )),
            40 => Ok(Self::UeContextModificationResponse(
                UeContextModificationResponse::decode(data)?,
            )),
            41 => Ok(Self::UeContextReleaseComplete(
                UeContextReleaseComplete::decode(data)?,
            )),
            58 => Ok(Self::UeContextResumeResponse(
                UeContextResumeResponse::decode(data)?,
            )),
            59 => Ok(Self::UeContextSuspendResponse(
                UeContextSuspendResponse::decode(data)?,
            )),
            43 => Ok(Self::UeRadioCapabilityCheckResponse(
                UeRadioCapabilityCheckResponse::decode(data)?,
            )),
            60 => Ok(Self::UeRadioCapabilityIdMappingResponse(
                UeRadioCapabilityIdMappingResponse::decode(data)?,
            )),
            51 => Ok(Self::WriteReplaceWarningResponse(
                WriteReplaceWarningResponse::decode(data)?,
            )),
            x => {
                return Err(aper::AperCodecError::new(format!(
                    "Unrecognised procedure code {}",
                    x
                )))
            }
        }
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        match self {
            Self::AmfConfigurationUpdateAcknowledge(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 0, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::HandoverCancelAcknowledge(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 10, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::HandoverCommand(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 12, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::HandoverRequestAcknowledge(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 13, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::InitialContextSetupResponse(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 14, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::NgResetAcknowledge(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 20, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::NgSetupResponse(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 21, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::PathSwitchRequestAcknowledge(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 25, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::PduSessionResourceModifyResponse(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 26, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::PduSessionResourceModifyConfirm(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 27, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::PduSessionResourceReleaseResponse(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 28, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::PduSessionResourceSetupResponse(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 29, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::PwsCancelResponse(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 32, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::RanConfigurationUpdateAcknowledge(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 35, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::UeContextModificationResponse(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 40, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::UeContextReleaseComplete(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 41, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::UeContextResumeResponse(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 58, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::UeContextSuspendResponse(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 59, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::UeRadioCapabilityCheckResponse(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 43, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::UeRadioCapabilityIdMappingResponse(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 60, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::WriteReplaceWarningResponse(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 51, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
        }
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub enum UnsuccessfulOutcome {
    AmfConfigurationUpdateFailure(AmfConfigurationUpdateFailure),
    HandoverPreparationFailure(HandoverPreparationFailure),
    HandoverFailure(HandoverFailure),
    InitialContextSetupFailure(InitialContextSetupFailure),
    NgSetupFailure(NgSetupFailure),
    PathSwitchRequestFailure(PathSwitchRequestFailure),
    RanConfigurationUpdateFailure(RanConfigurationUpdateFailure),
    UeContextModificationFailure(UeContextModificationFailure),
    UeContextResumeFailure(UeContextResumeFailure),
    UeContextSuspendFailure(UeContextSuspendFailure),
}

impl AperCodec for UnsuccessfulOutcome {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UnsuccessfulOutcome::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UnsuccessfulOutcome"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UnsuccessfulOutcome"))
    }
}
impl UnsuccessfulOutcome {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(255), false)?;
        let _ = Criticality::decode(data)?;
        match id {
            0 => Ok(Self::AmfConfigurationUpdateFailure(
                AmfConfigurationUpdateFailure::decode(data)?,
            )),
            12 => Ok(Self::HandoverPreparationFailure(
                HandoverPreparationFailure::decode(data)?,
            )),
            13 => Ok(Self::HandoverFailure(HandoverFailure::decode(data)?)),
            14 => Ok(Self::InitialContextSetupFailure(
                InitialContextSetupFailure::decode(data)?,
            )),
            21 => Ok(Self::NgSetupFailure(NgSetupFailure::decode(data)?)),
            25 => Ok(Self::PathSwitchRequestFailure(
                PathSwitchRequestFailure::decode(data)?,
            )),
            35 => Ok(Self::RanConfigurationUpdateFailure(
                RanConfigurationUpdateFailure::decode(data)?,
            )),
            40 => Ok(Self::UeContextModificationFailure(
                UeContextModificationFailure::decode(data)?,
            )),
            58 => Ok(Self::UeContextResumeFailure(
                UeContextResumeFailure::decode(data)?,
            )),
            59 => Ok(Self::UeContextSuspendFailure(
                UeContextSuspendFailure::decode(data)?,
            )),
            x => {
                return Err(aper::AperCodecError::new(format!(
                    "Unrecognised procedure code {}",
                    x
                )))
            }
        }
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        match self {
            Self::AmfConfigurationUpdateFailure(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 0, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::HandoverPreparationFailure(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 12, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::HandoverFailure(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 13, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::InitialContextSetupFailure(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 14, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::NgSetupFailure(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 21, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::PathSwitchRequestFailure(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 25, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::RanConfigurationUpdateFailure(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 35, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::UeContextModificationFailure(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 40, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::UeContextResumeFailure(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 58, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
            Self::UeContextSuspendFailure(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 59, false)?;
                Criticality::Reject.encode(data)?;
                x.encode(data)?;
            }
        }
        Ok(())
    }
}
