// Autogenerated from E1AP-PDU-Descriptions.asn
use super::pdu::*;
use crate::common::Criticality;
use anyhow::Result;
use asn1_codecs::{aper, aper::AperCodec, PerCodecData, PerCodecError};
use async_trait::async_trait;
use net::{
    AperSerde, Indication, IndicationHandler, Procedure, RequestError, RequestProvider,
    ResponseAction,
};
use slog::Logger;

// E1apPdu
#[derive(Clone, Debug)]
pub enum E1apPdu {
    InitiatingMessage(InitiatingMessage),
    SuccessfulOutcome(SuccessfulOutcome),
    UnsuccessfulOutcome(UnsuccessfulOutcome),
}

impl E1apPdu {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, true)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::InitiatingMessage(InitiatingMessage::aper_decode(
                data,
            )?)),
            1 => Ok(Self::SuccessfulOutcome(SuccessfulOutcome::aper_decode(
                data,
            )?)),
            2 => Ok(Self::UnsuccessfulOutcome(UnsuccessfulOutcome::aper_decode(
                data,
            )?)),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::InitiatingMessage(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, true, 0, false)?;
                x.aper_encode(data)
            }
            Self::SuccessfulOutcome(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, true, 1, false)?;
                x.aper_encode(data)
            }
            Self::UnsuccessfulOutcome(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, true, 2, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for E1apPdu {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        E1apPdu::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("E1apPdu");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("E1apPdu");
            e
        })
    }
}
pub struct ResetProcedure {}

#[async_trait]
impl Procedure for ResetProcedure {
    type TopPdu = E1apPdu;
    type Request = Reset;
    type Success = ResetAcknowledge;
    type Failure = ();
    const CODE: u8 = 0;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: Reset,
        logger: &Logger,
    ) -> Option<ResponseAction<E1apPdu>> {
        match <T as RequestProvider<ResetProcedure>>::request(provider, req, logger).await {
            Ok((r, f)) => Some((
                E1apPdu::SuccessfulOutcome(SuccessfulOutcome::ResetAcknowledge(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::Reset(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            E1apPdu::SuccessfulOutcome(SuccessfulOutcome::ResetAcknowledge(x)) => Ok(x),

            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct ErrorIndicationProcedure {}

#[async_trait]
impl Indication for ErrorIndicationProcedure {
    type TopPdu = E1apPdu;
    type Request = ErrorIndication;
    const CODE: u8 = 1;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: ErrorIndication,
        logger: &Logger,
    ) {
        <T as IndicationHandler<ErrorIndicationProcedure>>::handle(provider, req, logger).await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::ErrorIndication(r)).into_bytes()
    }
}

pub struct GnbCuUpE1SetupProcedure {}

#[async_trait]
impl Procedure for GnbCuUpE1SetupProcedure {
    type TopPdu = E1apPdu;
    type Request = GnbCuUpE1SetupRequest;
    type Success = GnbCuUpE1SetupResponse;
    type Failure = GnbCuUpE1SetupFailure;
    const CODE: u8 = 3;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: GnbCuUpE1SetupRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<E1apPdu>> {
        match <T as RequestProvider<GnbCuUpE1SetupProcedure>>::request(provider, req, logger).await
        {
            Ok((r, f)) => Some((
                E1apPdu::SuccessfulOutcome(SuccessfulOutcome::GnbCuUpE1SetupResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::GnbCuUpE1SetupRequest(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            E1apPdu::SuccessfulOutcome(SuccessfulOutcome::GnbCuUpE1SetupResponse(x)) => Ok(x),
            E1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::GnbCuUpE1SetupFailure(x)) => {
                Err(RequestError::UnsuccessfulOutcome(x))
            }
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct GnbCuCpE1SetupProcedure {}

#[async_trait]
impl Procedure for GnbCuCpE1SetupProcedure {
    type TopPdu = E1apPdu;
    type Request = GnbCuCpE1SetupRequest;
    type Success = GnbCuCpE1SetupResponse;
    type Failure = GnbCuCpE1SetupFailure;
    const CODE: u8 = 4;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: GnbCuCpE1SetupRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<E1apPdu>> {
        match <T as RequestProvider<GnbCuCpE1SetupProcedure>>::request(provider, req, logger).await
        {
            Ok((r, f)) => Some((
                E1apPdu::SuccessfulOutcome(SuccessfulOutcome::GnbCuCpE1SetupResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::GnbCuCpE1SetupRequest(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            E1apPdu::SuccessfulOutcome(SuccessfulOutcome::GnbCuCpE1SetupResponse(x)) => Ok(x),
            E1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::GnbCuCpE1SetupFailure(x)) => {
                Err(RequestError::UnsuccessfulOutcome(x))
            }
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct GnbCuUpConfigurationUpdateProcedure {}

#[async_trait]
impl Procedure for GnbCuUpConfigurationUpdateProcedure {
    type TopPdu = E1apPdu;
    type Request = GnbCuUpConfigurationUpdate;
    type Success = GnbCuUpConfigurationUpdateAcknowledge;
    type Failure = GnbCuUpConfigurationUpdateFailure;
    const CODE: u8 = 5;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: GnbCuUpConfigurationUpdate,
        logger: &Logger,
    ) -> Option<ResponseAction<E1apPdu>> {
        match <T as RequestProvider<GnbCuUpConfigurationUpdateProcedure>>::request(
            provider, req, logger,
        )
        .await
        {
            Ok((r, f)) => Some((
                E1apPdu::SuccessfulOutcome(
                    SuccessfulOutcome::GnbCuUpConfigurationUpdateAcknowledge(r),
                ),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::GnbCuUpConfigurationUpdate(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            E1apPdu::SuccessfulOutcome(
                SuccessfulOutcome::GnbCuUpConfigurationUpdateAcknowledge(x),
            ) => Ok(x),
            E1apPdu::UnsuccessfulOutcome(
                UnsuccessfulOutcome::GnbCuUpConfigurationUpdateFailure(x),
            ) => Err(RequestError::UnsuccessfulOutcome(x)),
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct GnbCuCpConfigurationUpdateProcedure {}

#[async_trait]
impl Procedure for GnbCuCpConfigurationUpdateProcedure {
    type TopPdu = E1apPdu;
    type Request = GnbCuCpConfigurationUpdate;
    type Success = GnbCuCpConfigurationUpdateAcknowledge;
    type Failure = GnbCuCpConfigurationUpdateFailure;
    const CODE: u8 = 6;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: GnbCuCpConfigurationUpdate,
        logger: &Logger,
    ) -> Option<ResponseAction<E1apPdu>> {
        match <T as RequestProvider<GnbCuCpConfigurationUpdateProcedure>>::request(
            provider, req, logger,
        )
        .await
        {
            Ok((r, f)) => Some((
                E1apPdu::SuccessfulOutcome(
                    SuccessfulOutcome::GnbCuCpConfigurationUpdateAcknowledge(r),
                ),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::GnbCuCpConfigurationUpdate(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            E1apPdu::SuccessfulOutcome(
                SuccessfulOutcome::GnbCuCpConfigurationUpdateAcknowledge(x),
            ) => Ok(x),
            E1apPdu::UnsuccessfulOutcome(
                UnsuccessfulOutcome::GnbCuCpConfigurationUpdateFailure(x),
            ) => Err(RequestError::UnsuccessfulOutcome(x)),
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct E1ReleaseProcedure {}

#[async_trait]
impl Procedure for E1ReleaseProcedure {
    type TopPdu = E1apPdu;
    type Request = E1ReleaseRequest;
    type Success = E1ReleaseResponse;
    type Failure = ();
    const CODE: u8 = 7;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: E1ReleaseRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<E1apPdu>> {
        match <T as RequestProvider<E1ReleaseProcedure>>::request(provider, req, logger).await {
            Ok((r, f)) => Some((
                E1apPdu::SuccessfulOutcome(SuccessfulOutcome::E1ReleaseResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::E1ReleaseRequest(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            E1apPdu::SuccessfulOutcome(SuccessfulOutcome::E1ReleaseResponse(x)) => Ok(x),

            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct BearerContextSetupProcedure {}

#[async_trait]
impl Procedure for BearerContextSetupProcedure {
    type TopPdu = E1apPdu;
    type Request = BearerContextSetupRequest;
    type Success = BearerContextSetupResponse;
    type Failure = BearerContextSetupFailure;
    const CODE: u8 = 8;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: BearerContextSetupRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<E1apPdu>> {
        match <T as RequestProvider<BearerContextSetupProcedure>>::request(provider, req, logger)
            .await
        {
            Ok((r, f)) => Some((
                E1apPdu::SuccessfulOutcome(SuccessfulOutcome::BearerContextSetupResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::BearerContextSetupRequest(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            E1apPdu::SuccessfulOutcome(SuccessfulOutcome::BearerContextSetupResponse(x)) => Ok(x),
            E1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::BearerContextSetupFailure(x)) => {
                Err(RequestError::UnsuccessfulOutcome(x))
            }
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct BearerContextModificationProcedure {}

#[async_trait]
impl Procedure for BearerContextModificationProcedure {
    type TopPdu = E1apPdu;
    type Request = BearerContextModificationRequest;
    type Success = BearerContextModificationResponse;
    type Failure = BearerContextModificationFailure;
    const CODE: u8 = 9;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: BearerContextModificationRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<E1apPdu>> {
        match <T as RequestProvider<BearerContextModificationProcedure>>::request(
            provider, req, logger,
        )
        .await
        {
            Ok((r, f)) => Some((
                E1apPdu::SuccessfulOutcome(SuccessfulOutcome::BearerContextModificationResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::BearerContextModificationRequest(r))
            .into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            E1apPdu::SuccessfulOutcome(SuccessfulOutcome::BearerContextModificationResponse(x)) => {
                Ok(x)
            }
            E1apPdu::UnsuccessfulOutcome(
                UnsuccessfulOutcome::BearerContextModificationFailure(x),
            ) => Err(RequestError::UnsuccessfulOutcome(x)),
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct BearerContextModificationRequiredProcedure {}

#[async_trait]
impl Procedure for BearerContextModificationRequiredProcedure {
    type TopPdu = E1apPdu;
    type Request = BearerContextModificationRequired;
    type Success = BearerContextModificationConfirm;
    type Failure = ();
    const CODE: u8 = 10;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: BearerContextModificationRequired,
        logger: &Logger,
    ) -> Option<ResponseAction<E1apPdu>> {
        match <T as RequestProvider<BearerContextModificationRequiredProcedure>>::request(
            provider, req, logger,
        )
        .await
        {
            Ok((r, f)) => Some((
                E1apPdu::SuccessfulOutcome(SuccessfulOutcome::BearerContextModificationConfirm(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::BearerContextModificationRequired(r))
            .into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            E1apPdu::SuccessfulOutcome(SuccessfulOutcome::BearerContextModificationConfirm(x)) => {
                Ok(x)
            }

            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct BearerContextReleaseProcedure {}

#[async_trait]
impl Procedure for BearerContextReleaseProcedure {
    type TopPdu = E1apPdu;
    type Request = BearerContextReleaseCommand;
    type Success = BearerContextReleaseComplete;
    type Failure = ();
    const CODE: u8 = 11;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: BearerContextReleaseCommand,
        logger: &Logger,
    ) -> Option<ResponseAction<E1apPdu>> {
        match <T as RequestProvider<BearerContextReleaseProcedure>>::request(provider, req, logger)
            .await
        {
            Ok((r, f)) => Some((
                E1apPdu::SuccessfulOutcome(SuccessfulOutcome::BearerContextReleaseComplete(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::BearerContextReleaseCommand(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            E1apPdu::SuccessfulOutcome(SuccessfulOutcome::BearerContextReleaseComplete(x)) => Ok(x),

            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct BearerContextReleaseRequestProcedure {}

#[async_trait]
impl Indication for BearerContextReleaseRequestProcedure {
    type TopPdu = E1apPdu;
    type Request = BearerContextReleaseRequest;
    const CODE: u8 = 12;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: BearerContextReleaseRequest,
        logger: &Logger,
    ) {
        <T as IndicationHandler<BearerContextReleaseRequestProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::BearerContextReleaseRequest(r)).into_bytes()
    }
}

pub struct BearerContextInactivityNotificationProcedure {}

#[async_trait]
impl Indication for BearerContextInactivityNotificationProcedure {
    type TopPdu = E1apPdu;
    type Request = BearerContextInactivityNotification;
    const CODE: u8 = 13;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: BearerContextInactivityNotification,
        logger: &Logger,
    ) {
        <T as IndicationHandler<BearerContextInactivityNotificationProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::BearerContextInactivityNotification(r))
            .into_bytes()
    }
}

pub struct DlDataNotificationProcedure {}

#[async_trait]
impl Indication for DlDataNotificationProcedure {
    type TopPdu = E1apPdu;
    type Request = DlDataNotification;
    const CODE: u8 = 14;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: DlDataNotification,
        logger: &Logger,
    ) {
        <T as IndicationHandler<DlDataNotificationProcedure>>::handle(provider, req, logger).await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::DlDataNotification(r)).into_bytes()
    }
}

pub struct UlDataNotificationProcedure {}

#[async_trait]
impl Indication for UlDataNotificationProcedure {
    type TopPdu = E1apPdu;
    type Request = UlDataNotification;
    const CODE: u8 = 18;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: UlDataNotification,
        logger: &Logger,
    ) {
        <T as IndicationHandler<UlDataNotificationProcedure>>::handle(provider, req, logger).await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::UlDataNotification(r)).into_bytes()
    }
}

pub struct DataUsageReportProcedure {}

#[async_trait]
impl Indication for DataUsageReportProcedure {
    type TopPdu = E1apPdu;
    type Request = DataUsageReport;
    const CODE: u8 = 15;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: DataUsageReport,
        logger: &Logger,
    ) {
        <T as IndicationHandler<DataUsageReportProcedure>>::handle(provider, req, logger).await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::DataUsageReport(r)).into_bytes()
    }
}

pub struct GnbCuUpCounterCheckProcedure {}

#[async_trait]
impl Indication for GnbCuUpCounterCheckProcedure {
    type TopPdu = E1apPdu;
    type Request = GnbCuUpCounterCheckRequest;
    const CODE: u8 = 16;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: GnbCuUpCounterCheckRequest,
        logger: &Logger,
    ) {
        <T as IndicationHandler<GnbCuUpCounterCheckProcedure>>::handle(provider, req, logger).await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::GnbCuUpCounterCheckRequest(r)).into_bytes()
    }
}

pub struct GnbCuUpStatusIndicationProcedure {}

#[async_trait]
impl Indication for GnbCuUpStatusIndicationProcedure {
    type TopPdu = E1apPdu;
    type Request = GnbCuUpStatusIndication;
    const CODE: u8 = 17;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: GnbCuUpStatusIndication,
        logger: &Logger,
    ) {
        <T as IndicationHandler<GnbCuUpStatusIndicationProcedure>>::handle(provider, req, logger)
            .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::GnbCuUpStatusIndication(r)).into_bytes()
    }
}

pub struct GnbCuCpMeasurementResultsInformationProcedure {}

#[async_trait]
impl Indication for GnbCuCpMeasurementResultsInformationProcedure {
    type TopPdu = E1apPdu;
    type Request = GnbCuCpMeasurementResultsInformation;
    const CODE: u8 = 27;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: GnbCuCpMeasurementResultsInformation,
        logger: &Logger,
    ) {
        <T as IndicationHandler<GnbCuCpMeasurementResultsInformationProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::GnbCuCpMeasurementResultsInformation(r))
            .into_bytes()
    }
}

pub struct MrdcDataUsageReportProcedure {}

#[async_trait]
impl Indication for MrdcDataUsageReportProcedure {
    type TopPdu = E1apPdu;
    type Request = MrdcDataUsageReport;
    const CODE: u8 = 19;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: MrdcDataUsageReport,
        logger: &Logger,
    ) {
        <T as IndicationHandler<MrdcDataUsageReportProcedure>>::handle(provider, req, logger).await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::MrdcDataUsageReport(r)).into_bytes()
    }
}

pub struct DeactivateTraceProcedure {}

#[async_trait]
impl Indication for DeactivateTraceProcedure {
    type TopPdu = E1apPdu;
    type Request = DeactivateTrace;
    const CODE: u8 = 21;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: DeactivateTrace,
        logger: &Logger,
    ) {
        <T as IndicationHandler<DeactivateTraceProcedure>>::handle(provider, req, logger).await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::DeactivateTrace(r)).into_bytes()
    }
}

pub struct TraceStartProcedure {}

#[async_trait]
impl Indication for TraceStartProcedure {
    type TopPdu = E1apPdu;
    type Request = TraceStart;
    const CODE: u8 = 20;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: TraceStart,
        logger: &Logger,
    ) {
        <T as IndicationHandler<TraceStartProcedure>>::handle(provider, req, logger).await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::TraceStart(r)).into_bytes()
    }
}

pub struct ResourceStatusReportingInitiationProcedure {}

#[async_trait]
impl Procedure for ResourceStatusReportingInitiationProcedure {
    type TopPdu = E1apPdu;
    type Request = ResourceStatusRequest;
    type Success = ResourceStatusResponse;
    type Failure = ResourceStatusFailure;
    const CODE: u8 = 22;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: ResourceStatusRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<E1apPdu>> {
        match <T as RequestProvider<ResourceStatusReportingInitiationProcedure>>::request(
            provider, req, logger,
        )
        .await
        {
            Ok((r, f)) => Some((
                E1apPdu::SuccessfulOutcome(SuccessfulOutcome::ResourceStatusResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::ResourceStatusRequest(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            E1apPdu::SuccessfulOutcome(SuccessfulOutcome::ResourceStatusResponse(x)) => Ok(x),
            E1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::ResourceStatusFailure(x)) => {
                Err(RequestError::UnsuccessfulOutcome(x))
            }
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct ResourceStatusReportingProcedure {}

#[async_trait]
impl Indication for ResourceStatusReportingProcedure {
    type TopPdu = E1apPdu;
    type Request = ResourceStatusUpdate;
    const CODE: u8 = 23;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: ResourceStatusUpdate,
        logger: &Logger,
    ) {
        <T as IndicationHandler<ResourceStatusReportingProcedure>>::handle(provider, req, logger)
            .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::ResourceStatusUpdate(r)).into_bytes()
    }
}

pub struct IabUptnlAddressUpdateProcedure {}

#[async_trait]
impl Procedure for IabUptnlAddressUpdateProcedure {
    type TopPdu = E1apPdu;
    type Request = IabUptnlAddressUpdate;
    type Success = IabUptnlAddressUpdateAcknowledge;
    type Failure = IabUptnlAddressUpdateFailure;
    const CODE: u8 = 24;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: IabUptnlAddressUpdate,
        logger: &Logger,
    ) -> Option<ResponseAction<E1apPdu>> {
        match <T as RequestProvider<IabUptnlAddressUpdateProcedure>>::request(provider, req, logger)
            .await
        {
            Ok((r, f)) => Some((
                E1apPdu::SuccessfulOutcome(SuccessfulOutcome::IabUptnlAddressUpdateAcknowledge(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::IabUptnlAddressUpdate(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            E1apPdu::SuccessfulOutcome(SuccessfulOutcome::IabUptnlAddressUpdateAcknowledge(x)) => {
                Ok(x)
            }
            E1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::IabUptnlAddressUpdateFailure(x)) => {
                Err(RequestError::UnsuccessfulOutcome(x))
            }
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct CellTrafficTraceProcedure {}

#[async_trait]
impl Indication for CellTrafficTraceProcedure {
    type TopPdu = E1apPdu;
    type Request = CellTrafficTrace;
    const CODE: u8 = 25;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: CellTrafficTrace,
        logger: &Logger,
    ) {
        <T as IndicationHandler<CellTrafficTraceProcedure>>::handle(provider, req, logger).await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::CellTrafficTrace(r)).into_bytes()
    }
}

pub struct EarlyForwardingSnTransferProcedure {}

#[async_trait]
impl Indication for EarlyForwardingSnTransferProcedure {
    type TopPdu = E1apPdu;
    type Request = EarlyForwardingSnTransfer;
    const CODE: u8 = 26;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: EarlyForwardingSnTransfer,
        logger: &Logger,
    ) {
        <T as IndicationHandler<EarlyForwardingSnTransferProcedure>>::handle(provider, req, logger)
            .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        E1apPdu::InitiatingMessage(InitiatingMessage::EarlyForwardingSnTransfer(r)).into_bytes()
    }
}

#[derive(Clone, Debug)]
pub enum InitiatingMessage {
    Reset(Reset),
    ErrorIndication(ErrorIndication),
    GnbCuUpE1SetupRequest(GnbCuUpE1SetupRequest),
    GnbCuCpE1SetupRequest(GnbCuCpE1SetupRequest),
    GnbCuUpConfigurationUpdate(GnbCuUpConfigurationUpdate),
    GnbCuCpConfigurationUpdate(GnbCuCpConfigurationUpdate),
    E1ReleaseRequest(E1ReleaseRequest),
    BearerContextSetupRequest(BearerContextSetupRequest),
    BearerContextModificationRequest(BearerContextModificationRequest),
    BearerContextModificationRequired(BearerContextModificationRequired),
    BearerContextReleaseCommand(BearerContextReleaseCommand),
    BearerContextReleaseRequest(BearerContextReleaseRequest),
    BearerContextInactivityNotification(BearerContextInactivityNotification),
    DlDataNotification(DlDataNotification),
    UlDataNotification(UlDataNotification),
    DataUsageReport(DataUsageReport),
    GnbCuUpCounterCheckRequest(GnbCuUpCounterCheckRequest),
    GnbCuUpStatusIndication(GnbCuUpStatusIndication),
    GnbCuCpMeasurementResultsInformation(GnbCuCpMeasurementResultsInformation),
    MrdcDataUsageReport(MrdcDataUsageReport),
    DeactivateTrace(DeactivateTrace),
    TraceStart(TraceStart),
    ResourceStatusRequest(ResourceStatusRequest),
    ResourceStatusUpdate(ResourceStatusUpdate),
    IabUptnlAddressUpdate(IabUptnlAddressUpdate),
    CellTrafficTrace(CellTrafficTrace),
    EarlyForwardingSnTransfer(EarlyForwardingSnTransfer),
}

impl InitiatingMessage {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(255), false)?;
        let _ = Criticality::aper_decode(data)?;
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        match id {
            0 => Ok(Self::Reset(Reset::aper_decode(data)?)),
            1 => Ok(Self::ErrorIndication(ErrorIndication::aper_decode(data)?)),
            3 => Ok(Self::GnbCuUpE1SetupRequest(
                GnbCuUpE1SetupRequest::aper_decode(data)?,
            )),
            4 => Ok(Self::GnbCuCpE1SetupRequest(
                GnbCuCpE1SetupRequest::aper_decode(data)?,
            )),
            5 => Ok(Self::GnbCuUpConfigurationUpdate(
                GnbCuUpConfigurationUpdate::aper_decode(data)?,
            )),
            6 => Ok(Self::GnbCuCpConfigurationUpdate(
                GnbCuCpConfigurationUpdate::aper_decode(data)?,
            )),
            7 => Ok(Self::E1ReleaseRequest(E1ReleaseRequest::aper_decode(data)?)),
            8 => Ok(Self::BearerContextSetupRequest(
                BearerContextSetupRequest::aper_decode(data)?,
            )),
            9 => Ok(Self::BearerContextModificationRequest(
                BearerContextModificationRequest::aper_decode(data)?,
            )),
            10 => Ok(Self::BearerContextModificationRequired(
                BearerContextModificationRequired::aper_decode(data)?,
            )),
            11 => Ok(Self::BearerContextReleaseCommand(
                BearerContextReleaseCommand::aper_decode(data)?,
            )),
            12 => Ok(Self::BearerContextReleaseRequest(
                BearerContextReleaseRequest::aper_decode(data)?,
            )),
            13 => Ok(Self::BearerContextInactivityNotification(
                BearerContextInactivityNotification::aper_decode(data)?,
            )),
            14 => Ok(Self::DlDataNotification(DlDataNotification::aper_decode(
                data,
            )?)),
            18 => Ok(Self::UlDataNotification(UlDataNotification::aper_decode(
                data,
            )?)),
            15 => Ok(Self::DataUsageReport(DataUsageReport::aper_decode(data)?)),
            16 => Ok(Self::GnbCuUpCounterCheckRequest(
                GnbCuUpCounterCheckRequest::aper_decode(data)?,
            )),
            17 => Ok(Self::GnbCuUpStatusIndication(
                GnbCuUpStatusIndication::aper_decode(data)?,
            )),
            27 => Ok(Self::GnbCuCpMeasurementResultsInformation(
                GnbCuCpMeasurementResultsInformation::aper_decode(data)?,
            )),
            19 => Ok(Self::MrdcDataUsageReport(MrdcDataUsageReport::aper_decode(
                data,
            )?)),
            21 => Ok(Self::DeactivateTrace(DeactivateTrace::aper_decode(data)?)),
            20 => Ok(Self::TraceStart(TraceStart::aper_decode(data)?)),
            22 => Ok(Self::ResourceStatusRequest(
                ResourceStatusRequest::aper_decode(data)?,
            )),
            23 => Ok(Self::ResourceStatusUpdate(
                ResourceStatusUpdate::aper_decode(data)?,
            )),
            24 => Ok(Self::IabUptnlAddressUpdate(
                IabUptnlAddressUpdate::aper_decode(data)?,
            )),
            25 => Ok(Self::CellTrafficTrace(CellTrafficTrace::aper_decode(data)?)),
            26 => Ok(Self::EarlyForwardingSnTransfer(
                EarlyForwardingSnTransfer::aper_decode(data)?,
            )),
            x => {
                return Err(PerCodecError::new(format!(
                    "Unrecognised procedure code {}",
                    x
                )))
            }
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::Reset(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 0, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::ErrorIndication(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 1, false)?;
                Criticality::Ignore.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbCuUpE1SetupRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 3, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbCuCpE1SetupRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 4, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbCuUpConfigurationUpdate(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 5, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbCuCpConfigurationUpdate(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 6, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::E1ReleaseRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 7, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::BearerContextSetupRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 8, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::BearerContextModificationRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 9, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::BearerContextModificationRequired(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 10, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::BearerContextReleaseCommand(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 11, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::BearerContextReleaseRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 12, false)?;
                Criticality::Ignore.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::BearerContextInactivityNotification(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 13, false)?;
                Criticality::Ignore.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::DlDataNotification(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 14, false)?;
                Criticality::Ignore.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::UlDataNotification(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 18, false)?;
                Criticality::Ignore.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::DataUsageReport(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 15, false)?;
                Criticality::Ignore.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbCuUpCounterCheckRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 16, false)?;
                Criticality::Ignore.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbCuUpStatusIndication(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 17, false)?;
                Criticality::Ignore.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbCuCpMeasurementResultsInformation(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 27, false)?;
                Criticality::Ignore.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::MrdcDataUsageReport(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 19, false)?;
                Criticality::Ignore.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::DeactivateTrace(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 21, false)?;
                Criticality::Ignore.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::TraceStart(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 20, false)?;
                Criticality::Ignore.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::ResourceStatusRequest(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 22, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::ResourceStatusUpdate(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 23, false)?;
                Criticality::Ignore.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::IabUptnlAddressUpdate(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 24, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::CellTrafficTrace(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 25, false)?;
                Criticality::Ignore.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::EarlyForwardingSnTransfer(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 26, false)?;
                Criticality::Ignore.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
        }
        Ok(())
    }
}

impl AperCodec for InitiatingMessage {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        InitiatingMessage::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("InitiatingMessage");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("InitiatingMessage");
            e
        })
    }
}

#[derive(Clone, Debug)]
pub enum SuccessfulOutcome {
    ResetAcknowledge(ResetAcknowledge),
    GnbCuUpE1SetupResponse(GnbCuUpE1SetupResponse),
    GnbCuCpE1SetupResponse(GnbCuCpE1SetupResponse),
    GnbCuUpConfigurationUpdateAcknowledge(GnbCuUpConfigurationUpdateAcknowledge),
    GnbCuCpConfigurationUpdateAcknowledge(GnbCuCpConfigurationUpdateAcknowledge),
    E1ReleaseResponse(E1ReleaseResponse),
    BearerContextSetupResponse(BearerContextSetupResponse),
    BearerContextModificationResponse(BearerContextModificationResponse),
    BearerContextModificationConfirm(BearerContextModificationConfirm),
    BearerContextReleaseComplete(BearerContextReleaseComplete),
    ResourceStatusResponse(ResourceStatusResponse),
    IabUptnlAddressUpdateAcknowledge(IabUptnlAddressUpdateAcknowledge),
}

impl SuccessfulOutcome {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(255), false)?;
        let _ = Criticality::aper_decode(data)?;
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        match id {
            0 => Ok(Self::ResetAcknowledge(ResetAcknowledge::aper_decode(data)?)),
            3 => Ok(Self::GnbCuUpE1SetupResponse(
                GnbCuUpE1SetupResponse::aper_decode(data)?,
            )),
            4 => Ok(Self::GnbCuCpE1SetupResponse(
                GnbCuCpE1SetupResponse::aper_decode(data)?,
            )),
            5 => Ok(Self::GnbCuUpConfigurationUpdateAcknowledge(
                GnbCuUpConfigurationUpdateAcknowledge::aper_decode(data)?,
            )),
            6 => Ok(Self::GnbCuCpConfigurationUpdateAcknowledge(
                GnbCuCpConfigurationUpdateAcknowledge::aper_decode(data)?,
            )),
            7 => Ok(Self::E1ReleaseResponse(E1ReleaseResponse::aper_decode(
                data,
            )?)),
            8 => Ok(Self::BearerContextSetupResponse(
                BearerContextSetupResponse::aper_decode(data)?,
            )),
            9 => Ok(Self::BearerContextModificationResponse(
                BearerContextModificationResponse::aper_decode(data)?,
            )),
            10 => Ok(Self::BearerContextModificationConfirm(
                BearerContextModificationConfirm::aper_decode(data)?,
            )),
            11 => Ok(Self::BearerContextReleaseComplete(
                BearerContextReleaseComplete::aper_decode(data)?,
            )),
            22 => Ok(Self::ResourceStatusResponse(
                ResourceStatusResponse::aper_decode(data)?,
            )),
            24 => Ok(Self::IabUptnlAddressUpdateAcknowledge(
                IabUptnlAddressUpdateAcknowledge::aper_decode(data)?,
            )),
            x => {
                return Err(PerCodecError::new(format!(
                    "Unrecognised procedure code {}",
                    x
                )))
            }
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::ResetAcknowledge(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 0, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbCuUpE1SetupResponse(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 3, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbCuCpE1SetupResponse(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 4, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbCuUpConfigurationUpdateAcknowledge(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 5, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbCuCpConfigurationUpdateAcknowledge(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 6, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::E1ReleaseResponse(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 7, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::BearerContextSetupResponse(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 8, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::BearerContextModificationResponse(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 9, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::BearerContextModificationConfirm(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 10, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::BearerContextReleaseComplete(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 11, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::ResourceStatusResponse(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 22, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::IabUptnlAddressUpdateAcknowledge(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 24, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
        }
        Ok(())
    }
}

impl AperCodec for SuccessfulOutcome {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SuccessfulOutcome::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SuccessfulOutcome");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SuccessfulOutcome");
            e
        })
    }
}

#[derive(Clone, Debug)]
pub enum UnsuccessfulOutcome {
    GnbCuUpE1SetupFailure(GnbCuUpE1SetupFailure),
    GnbCuCpE1SetupFailure(GnbCuCpE1SetupFailure),
    GnbCuUpConfigurationUpdateFailure(GnbCuUpConfigurationUpdateFailure),
    GnbCuCpConfigurationUpdateFailure(GnbCuCpConfigurationUpdateFailure),
    BearerContextSetupFailure(BearerContextSetupFailure),
    BearerContextModificationFailure(BearerContextModificationFailure),
    ResourceStatusFailure(ResourceStatusFailure),
    IabUptnlAddressUpdateFailure(IabUptnlAddressUpdateFailure),
}

impl UnsuccessfulOutcome {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(255), false)?;
        let _ = Criticality::aper_decode(data)?;
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        match id {
            3 => Ok(Self::GnbCuUpE1SetupFailure(
                GnbCuUpE1SetupFailure::aper_decode(data)?,
            )),
            4 => Ok(Self::GnbCuCpE1SetupFailure(
                GnbCuCpE1SetupFailure::aper_decode(data)?,
            )),
            5 => Ok(Self::GnbCuUpConfigurationUpdateFailure(
                GnbCuUpConfigurationUpdateFailure::aper_decode(data)?,
            )),
            6 => Ok(Self::GnbCuCpConfigurationUpdateFailure(
                GnbCuCpConfigurationUpdateFailure::aper_decode(data)?,
            )),
            8 => Ok(Self::BearerContextSetupFailure(
                BearerContextSetupFailure::aper_decode(data)?,
            )),
            9 => Ok(Self::BearerContextModificationFailure(
                BearerContextModificationFailure::aper_decode(data)?,
            )),
            22 => Ok(Self::ResourceStatusFailure(
                ResourceStatusFailure::aper_decode(data)?,
            )),
            24 => Ok(Self::IabUptnlAddressUpdateFailure(
                IabUptnlAddressUpdateFailure::aper_decode(data)?,
            )),
            x => {
                return Err(PerCodecError::new(format!(
                    "Unrecognised procedure code {}",
                    x
                )))
            }
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::GnbCuUpE1SetupFailure(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 3, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbCuCpE1SetupFailure(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 4, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbCuUpConfigurationUpdateFailure(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 5, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbCuCpConfigurationUpdateFailure(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 6, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::BearerContextSetupFailure(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 8, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::BearerContextModificationFailure(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 9, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::ResourceStatusFailure(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 22, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::IabUptnlAddressUpdateFailure(x) => {
                aper::encode::encode_integer(data, Some(0), Some(255), false, 24, false)?;
                Criticality::Reject.aper_encode(data)?;
                let container = &mut PerCodecData::new_aper();
                x.aper_encode(container)?;
                aper::encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
        }
        Ok(())
    }
}

impl AperCodec for UnsuccessfulOutcome {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UnsuccessfulOutcome::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UnsuccessfulOutcome");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UnsuccessfulOutcome");
            e
        })
    }
}
