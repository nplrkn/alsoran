// Autogenerated from E1AP-PDU-Contents.asn
use super::common::*;
use asn1_codecs::aper::{self, AperCodec, AperCodecData, AperCodecError};
use bitvec::prelude::*;
#[allow(dead_code)]
pub type BitString = BitVec<u8, Msb0>;
use super::ies::*;
#[allow(unused_imports)]
use num_enum::TryFromPrimitive;

// Reset
#[derive(Clone, Debug)]
pub struct Reset {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub reset_type: ResetType,
}

impl Reset {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut reset_type: Option<ResetType> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                4 => reset_type = Some(ResetType::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        let reset_type = reset_type.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE reset_type"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            reset_type,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.reset_type.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 4, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for Reset {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Reset::decode_inner(data).map_err(|e: AperCodecError| e.push_context("Reset"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("Reset"))
    }
}
// ResetType
#[derive(Clone, Debug)]
pub enum ResetType {
    E1Interface(ResetAll),
    PartOfE1Interface(UeAssociatedLogicalE1ConnectionListRes),
}

impl ResetType {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(aper::AperCodecError::new(
                "CHOICE additions not implemented",
            ));
        }
        match idx {
            0 => Ok(Self::E1Interface(ResetAll::decode(data)?)),
            1 => Ok(Self::PartOfE1Interface(
                UeAssociatedLogicalE1ConnectionListRes::decode(data)?,
            )),
            2 => Err(AperCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(AperCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        match self {
            Self::E1Interface(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.encode(data)
            }
            Self::PartOfE1Interface(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.encode(data)
            }
        }
    }
}

impl AperCodec for ResetType {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ResetType::decode_inner(data).map_err(|e: AperCodecError| e.push_context("ResetType"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResetType"))
    }
}
// ResetAll
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ResetAll {
    ResetAll,
}

impl ResetAll {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(aper::AperCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| AperCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for ResetAll {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ResetAll::decode_inner(data).map_err(|e: AperCodecError| e.push_context("ResetAll"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResetAll"))
    }
}
// UeAssociatedLogicalE1ConnectionListRes
#[derive(Clone, Debug)]
pub struct UeAssociatedLogicalE1ConnectionListRes(pub Vec<UeAssociatedLogicalE1ConnectionItem>);

impl UeAssociatedLogicalE1ConnectionListRes {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65536), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(UeAssociatedLogicalE1ConnectionItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65536), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 5, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for UeAssociatedLogicalE1ConnectionListRes {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UeAssociatedLogicalE1ConnectionListRes::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeAssociatedLogicalE1ConnectionListRes"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeAssociatedLogicalE1ConnectionListRes"))
    }
}
// ResetAcknowledge
#[derive(Clone, Debug)]
pub struct ResetAcknowledge {
    pub transaction_id: TransactionId,
    pub ue_associated_logical_e1_connection_list_res_ack:
        Option<UeAssociatedLogicalE1ConnectionListResAck>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl ResetAcknowledge {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut ue_associated_logical_e1_connection_list_res_ack: Option<
            UeAssociatedLogicalE1ConnectionListResAck,
        > = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                6 => {
                    ue_associated_logical_e1_connection_list_res_ack =
                        Some(UeAssociatedLogicalE1ConnectionListResAck::decode(data)?)
                }
                1 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            ue_associated_logical_e1_connection_list_res_ack,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.ue_associated_logical_e1_connection_list_res_ack {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 6, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 1, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for ResetAcknowledge {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ResetAcknowledge::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResetAcknowledge"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResetAcknowledge"))
    }
}
// UeAssociatedLogicalE1ConnectionListResAck
#[derive(Clone, Debug)]
pub struct UeAssociatedLogicalE1ConnectionListResAck(pub Vec<UeAssociatedLogicalE1ConnectionItem>);

impl UeAssociatedLogicalE1ConnectionListResAck {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65536), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(UeAssociatedLogicalE1ConnectionItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65536), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 5, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for UeAssociatedLogicalE1ConnectionListResAck {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UeAssociatedLogicalE1ConnectionListResAck::decode_inner(data).map_err(
            |e: AperCodecError| e.push_context("UeAssociatedLogicalE1ConnectionListResAck"),
        )
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data).map_err(|e: AperCodecError| {
            e.push_context("UeAssociatedLogicalE1ConnectionListResAck")
        })
    }
}
// ErrorIndication
#[derive(Clone, Debug)]
pub struct ErrorIndication {
    pub transaction_id: TransactionId,
    pub gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId>,
    pub gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId>,
    pub cause: Option<Cause>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl ErrorIndication {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                1 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            cause,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_cu_cp_ue_e1ap_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_cu_up_ue_e1ap_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.cause {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 1, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for ErrorIndication {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ErrorIndication::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ErrorIndication"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ErrorIndication"))
    }
}
// GnbCuUpE1SetupRequest
#[derive(Clone, Debug)]
pub struct GnbCuUpE1SetupRequest {
    pub transaction_id: TransactionId,
    pub gnb_cu_up_id: GnbCuUpId,
    pub gnb_cu_up_name: Option<GnbCuUpName>,
    pub cn_support: CnSupport,
    pub supported_plmns: SupportedPlmnsList,
    pub gnb_cu_up_capacity: Option<GnbCuUpCapacity>,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
    pub extended_gnb_cu_up_name: Option<ExtendedGnbCuUpName>,
}

impl GnbCuUpE1SetupRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_up_id: Option<GnbCuUpId> = None;
        let mut gnb_cu_up_name: Option<GnbCuUpName> = None;
        let mut cn_support: Option<CnSupport> = None;
        let mut supported_plmns: Option<SupportedPlmnsList> = None;
        let mut gnb_cu_up_capacity: Option<GnbCuUpCapacity> = None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;
        let mut extended_gnb_cu_up_name: Option<ExtendedGnbCuUpName> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                7 => gnb_cu_up_id = Some(GnbCuUpId::decode(data)?),
                8 => gnb_cu_up_name = Some(GnbCuUpName::decode(data)?),
                10 => cn_support = Some(CnSupport::decode(data)?),
                11 => supported_plmns = Some(SupportedPlmnsList::decode(data)?),
                64 => gnb_cu_up_capacity = Some(GnbCuUpCapacity::decode(data)?),
                86 => transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?),
                130 => extended_gnb_cu_up_name = Some(ExtendedGnbCuUpName::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_cu_up_id = gnb_cu_up_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_up_id"
        )))?;
        let cn_support = cn_support.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cn_support"
        )))?;
        let supported_plmns = supported_plmns.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE supported_plmns"
        )))?;
        Ok(Self {
            transaction_id,
            gnb_cu_up_id,
            gnb_cu_up_name,
            cn_support,
            supported_plmns,
            gnb_cu_up_capacity,
            transport_layer_address_info,
            extended_gnb_cu_up_name,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_cu_up_name {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 8, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.cn_support.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 10, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.supported_plmns.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 11, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_cu_up_capacity {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 64, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.transport_layer_address_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 86, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.extended_gnb_cu_up_name {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 130, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for GnbCuUpE1SetupRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuUpE1SetupRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuUpE1SetupRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuUpE1SetupRequest"))
    }
}
// SupportedPlmnsList
#[derive(Clone, Debug)]
pub struct SupportedPlmnsList(pub Vec<SupportedPlmnsItem>);

impl SupportedPlmnsList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(12), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SupportedPlmnsItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(12), false, self.0.len())?;
        for x in &self.0 {
            x.encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for SupportedPlmnsList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SupportedPlmnsList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SupportedPlmnsList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SupportedPlmnsList"))
    }
}
// SupportedPlmnsItem
#[derive(Clone, Debug)]
pub struct SupportedPlmnsItem {
    pub plmn_identity: PlmnIdentity,
    pub slice_support_list: Option<SliceSupportList>,
    pub nr_cgi_support_list: Option<NrCgiSupportList>,
    pub qos_parameters_support_list: Option<QosParametersSupportList>,
}

impl SupportedPlmnsItem {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 4)?;
        let plmn_identity = PlmnIdentity::decode(data)?;
        let slice_support_list = if optionals[0] {
            Some(SliceSupportList::decode(data)?)
        } else {
            None
        };
        let nr_cgi_support_list = if optionals[1] {
            Some(NrCgiSupportList::decode(data)?)
        } else {
            None
        };
        let qos_parameters_support_list = if optionals[2] {
            Some(QosParametersSupportList::decode(data)?)
        } else {
            None
        };

        Ok(Self {
            plmn_identity,
            slice_support_list,
            nr_cgi_support_list,
            qos_parameters_support_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.slice_support_list.is_some());
        optionals.push(self.nr_cgi_support_list.is_some());
        optionals.push(self.qos_parameters_support_list.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.plmn_identity.encode(data)?;
        if let Some(x) = &self.slice_support_list {
            x.encode(data)?;
        }
        if let Some(x) = &self.nr_cgi_support_list {
            x.encode(data)?;
        }
        if let Some(x) = &self.qos_parameters_support_list {
            x.encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SupportedPlmnsItem {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SupportedPlmnsItem::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SupportedPlmnsItem"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SupportedPlmnsItem"))
    }
}
// GnbCuUpE1SetupResponse
#[derive(Clone, Debug)]
pub struct GnbCuUpE1SetupResponse {
    pub transaction_id: TransactionId,
    pub gnb_cu_cp_name: Option<GnbCuCpName>,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
    pub extended_gnb_cu_cp_name: Option<ExtendedGnbCuCpName>,
}

impl GnbCuUpE1SetupResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_cp_name: Option<GnbCuCpName> = None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;
        let mut extended_gnb_cu_cp_name: Option<ExtendedGnbCuCpName> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                9 => gnb_cu_cp_name = Some(GnbCuCpName::decode(data)?),
                86 => transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?),
                129 => extended_gnb_cu_cp_name = Some(ExtendedGnbCuCpName::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            gnb_cu_cp_name,
            transport_layer_address_info,
            extended_gnb_cu_cp_name,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_cu_cp_name {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 9, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.transport_layer_address_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 86, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.extended_gnb_cu_cp_name {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 129, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for GnbCuUpE1SetupResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuUpE1SetupResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuUpE1SetupResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuUpE1SetupResponse"))
    }
}
// GnbCuUpE1SetupFailure
#[derive(Clone, Debug)]
pub struct GnbCuUpE1SetupFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl GnbCuUpE1SetupFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                12 => time_to_wait = Some(TimeToWait::decode(data)?),
                1 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.time_to_wait {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 12, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 1, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for GnbCuUpE1SetupFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuUpE1SetupFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuUpE1SetupFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuUpE1SetupFailure"))
    }
}
// GnbCuCpE1SetupRequest
#[derive(Clone, Debug)]
pub struct GnbCuCpE1SetupRequest {
    pub transaction_id: TransactionId,
    pub gnb_cu_cp_name: Option<GnbCuCpName>,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
    pub extended_gnb_cu_cp_name: Option<ExtendedGnbCuCpName>,
}

impl GnbCuCpE1SetupRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_cp_name: Option<GnbCuCpName> = None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;
        let mut extended_gnb_cu_cp_name: Option<ExtendedGnbCuCpName> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                9 => gnb_cu_cp_name = Some(GnbCuCpName::decode(data)?),
                86 => transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?),
                129 => extended_gnb_cu_cp_name = Some(ExtendedGnbCuCpName::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            gnb_cu_cp_name,
            transport_layer_address_info,
            extended_gnb_cu_cp_name,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_cu_cp_name {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 9, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.transport_layer_address_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 86, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.extended_gnb_cu_cp_name {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 129, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for GnbCuCpE1SetupRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuCpE1SetupRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpE1SetupRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpE1SetupRequest"))
    }
}
// GnbCuCpE1SetupResponse
#[derive(Clone, Debug)]
pub struct GnbCuCpE1SetupResponse {
    pub transaction_id: TransactionId,
    pub gnb_cu_up_id: GnbCuUpId,
    pub gnb_cu_up_name: Option<GnbCuUpName>,
    pub cn_support: CnSupport,
    pub supported_plmns: SupportedPlmnsList,
    pub gnb_cu_up_capacity: Option<GnbCuUpCapacity>,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
    pub extended_gnb_cu_up_name: Option<ExtendedGnbCuUpName>,
}

impl GnbCuCpE1SetupResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_up_id: Option<GnbCuUpId> = None;
        let mut gnb_cu_up_name: Option<GnbCuUpName> = None;
        let mut cn_support: Option<CnSupport> = None;
        let mut supported_plmns: Option<SupportedPlmnsList> = None;
        let mut gnb_cu_up_capacity: Option<GnbCuUpCapacity> = None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;
        let mut extended_gnb_cu_up_name: Option<ExtendedGnbCuUpName> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                7 => gnb_cu_up_id = Some(GnbCuUpId::decode(data)?),
                8 => gnb_cu_up_name = Some(GnbCuUpName::decode(data)?),
                10 => cn_support = Some(CnSupport::decode(data)?),
                11 => supported_plmns = Some(SupportedPlmnsList::decode(data)?),
                64 => gnb_cu_up_capacity = Some(GnbCuUpCapacity::decode(data)?),
                86 => transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?),
                130 => extended_gnb_cu_up_name = Some(ExtendedGnbCuUpName::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_cu_up_id = gnb_cu_up_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_up_id"
        )))?;
        let cn_support = cn_support.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cn_support"
        )))?;
        let supported_plmns = supported_plmns.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE supported_plmns"
        )))?;
        Ok(Self {
            transaction_id,
            gnb_cu_up_id,
            gnb_cu_up_name,
            cn_support,
            supported_plmns,
            gnb_cu_up_capacity,
            transport_layer_address_info,
            extended_gnb_cu_up_name,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_cu_up_name {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 8, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.cn_support.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 10, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.supported_plmns.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 11, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_cu_up_capacity {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 64, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.transport_layer_address_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 86, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.extended_gnb_cu_up_name {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 130, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for GnbCuCpE1SetupResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuCpE1SetupResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpE1SetupResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpE1SetupResponse"))
    }
}
// GnbCuCpE1SetupFailure
#[derive(Clone, Debug)]
pub struct GnbCuCpE1SetupFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl GnbCuCpE1SetupFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                12 => time_to_wait = Some(TimeToWait::decode(data)?),
                1 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.time_to_wait {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 12, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 1, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for GnbCuCpE1SetupFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuCpE1SetupFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpE1SetupFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpE1SetupFailure"))
    }
}
// GnbCuUpConfigurationUpdate
#[derive(Clone, Debug)]
pub struct GnbCuUpConfigurationUpdate {
    pub transaction_id: TransactionId,
    pub gnb_cu_up_id: GnbCuUpId,
    pub gnb_cu_up_name: Option<GnbCuUpName>,
    pub supported_plmns: Option<SupportedPlmnsList>,
    pub gnb_cu_up_capacity: Option<GnbCuUpCapacity>,
    pub gnb_cu_up_tnla_to_remove_list: Option<GnbCuUpTnlaToRemoveList>,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
    pub extended_gnb_cu_up_name: Option<ExtendedGnbCuUpName>,
}

impl GnbCuUpConfigurationUpdate {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_up_id: Option<GnbCuUpId> = None;
        let mut gnb_cu_up_name: Option<GnbCuUpName> = None;
        let mut supported_plmns: Option<SupportedPlmnsList> = None;
        let mut gnb_cu_up_capacity: Option<GnbCuUpCapacity> = None;
        let mut gnb_cu_up_tnla_to_remove_list: Option<GnbCuUpTnlaToRemoveList> = None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;
        let mut extended_gnb_cu_up_name: Option<ExtendedGnbCuUpName> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                7 => gnb_cu_up_id = Some(GnbCuUpId::decode(data)?),
                8 => gnb_cu_up_name = Some(GnbCuUpName::decode(data)?),
                11 => supported_plmns = Some(SupportedPlmnsList::decode(data)?),
                64 => gnb_cu_up_capacity = Some(GnbCuUpCapacity::decode(data)?),
                73 => gnb_cu_up_tnla_to_remove_list = Some(GnbCuUpTnlaToRemoveList::decode(data)?),
                86 => transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?),
                130 => extended_gnb_cu_up_name = Some(ExtendedGnbCuUpName::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_cu_up_id = gnb_cu_up_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_up_id"
        )))?;
        Ok(Self {
            transaction_id,
            gnb_cu_up_id,
            gnb_cu_up_name,
            supported_plmns,
            gnb_cu_up_capacity,
            gnb_cu_up_tnla_to_remove_list,
            transport_layer_address_info,
            extended_gnb_cu_up_name,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_cu_up_name {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 8, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.supported_plmns {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 11, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_cu_up_capacity {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 64, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_cu_up_tnla_to_remove_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 73, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.transport_layer_address_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 86, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.extended_gnb_cu_up_name {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 130, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for GnbCuUpConfigurationUpdate {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuUpConfigurationUpdate::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuUpConfigurationUpdate"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuUpConfigurationUpdate"))
    }
}
// GnbCuUpTnlaToRemoveList
#[derive(Clone, Debug)]
pub struct GnbCuUpTnlaToRemoveList(pub Vec<GnbCuUpTnlaToRemoveItem>);

impl GnbCuUpTnlaToRemoveList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(GnbCuUpTnlaToRemoveItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            x.encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for GnbCuUpTnlaToRemoveList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuUpTnlaToRemoveList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuUpTnlaToRemoveList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuUpTnlaToRemoveList"))
    }
}
// GnbCuUpConfigurationUpdateAcknowledge
#[derive(Clone, Debug)]
pub struct GnbCuUpConfigurationUpdateAcknowledge {
    pub transaction_id: TransactionId,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
}

impl GnbCuUpConfigurationUpdateAcknowledge {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                1 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                86 => transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            criticality_diagnostics,
            transport_layer_address_info,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 1, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.transport_layer_address_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 86, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for GnbCuUpConfigurationUpdateAcknowledge {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuUpConfigurationUpdateAcknowledge::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuUpConfigurationUpdateAcknowledge"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuUpConfigurationUpdateAcknowledge"))
    }
}
// GnbCuUpConfigurationUpdateFailure
#[derive(Clone, Debug)]
pub struct GnbCuUpConfigurationUpdateFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl GnbCuUpConfigurationUpdateFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                12 => time_to_wait = Some(TimeToWait::decode(data)?),
                1 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.time_to_wait {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 12, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 1, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for GnbCuUpConfigurationUpdateFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuUpConfigurationUpdateFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuUpConfigurationUpdateFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuUpConfigurationUpdateFailure"))
    }
}
// GnbCuCpConfigurationUpdate
#[derive(Clone, Debug)]
pub struct GnbCuCpConfigurationUpdate {
    pub transaction_id: TransactionId,
    pub gnb_cu_cp_name: Option<GnbCuCpName>,
    pub gnb_cu_cp_tnla_to_add_list: Option<GnbCuCpTnlaToAddList>,
    pub gnb_cu_cp_tnla_to_remove_list: Option<GnbCuCpTnlaToRemoveList>,
    pub gnb_cu_cp_tnla_to_update_list: Option<GnbCuCpTnlaToUpdateList>,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
    pub extended_gnb_cu_cp_name: Option<ExtendedGnbCuCpName>,
}

impl GnbCuCpConfigurationUpdate {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_cp_name: Option<GnbCuCpName> = None;
        let mut gnb_cu_cp_tnla_to_add_list: Option<GnbCuCpTnlaToAddList> = None;
        let mut gnb_cu_cp_tnla_to_remove_list: Option<GnbCuCpTnlaToRemoveList> = None;
        let mut gnb_cu_cp_tnla_to_update_list: Option<GnbCuCpTnlaToUpdateList> = None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;
        let mut extended_gnb_cu_cp_name: Option<ExtendedGnbCuCpName> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                9 => gnb_cu_cp_name = Some(GnbCuCpName::decode(data)?),
                27 => gnb_cu_cp_tnla_to_add_list = Some(GnbCuCpTnlaToAddList::decode(data)?),
                28 => gnb_cu_cp_tnla_to_remove_list = Some(GnbCuCpTnlaToRemoveList::decode(data)?),
                29 => gnb_cu_cp_tnla_to_update_list = Some(GnbCuCpTnlaToUpdateList::decode(data)?),
                86 => transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?),
                129 => extended_gnb_cu_cp_name = Some(ExtendedGnbCuCpName::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            gnb_cu_cp_name,
            gnb_cu_cp_tnla_to_add_list,
            gnb_cu_cp_tnla_to_remove_list,
            gnb_cu_cp_tnla_to_update_list,
            transport_layer_address_info,
            extended_gnb_cu_cp_name,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_cu_cp_name {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 9, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_cu_cp_tnla_to_add_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 27, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_cu_cp_tnla_to_remove_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 28, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_cu_cp_tnla_to_update_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 29, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.transport_layer_address_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 86, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.extended_gnb_cu_cp_name {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 129, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for GnbCuCpConfigurationUpdate {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuCpConfigurationUpdate::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpConfigurationUpdate"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpConfigurationUpdate"))
    }
}
// GnbCuCpTnlaToAddList
#[derive(Clone, Debug)]
pub struct GnbCuCpTnlaToAddList(pub Vec<GnbCuCpTnlaToAddItem>);

impl GnbCuCpTnlaToAddList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(GnbCuCpTnlaToAddItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            x.encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for GnbCuCpTnlaToAddList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuCpTnlaToAddList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpTnlaToAddList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpTnlaToAddList"))
    }
}
// GnbCuCpTnlaToRemoveList
#[derive(Clone, Debug)]
pub struct GnbCuCpTnlaToRemoveList(pub Vec<GnbCuCpTnlaToRemoveItem>);

impl GnbCuCpTnlaToRemoveList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(GnbCuCpTnlaToRemoveItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            x.encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for GnbCuCpTnlaToRemoveList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuCpTnlaToRemoveList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpTnlaToRemoveList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpTnlaToRemoveList"))
    }
}
// GnbCuCpTnlaToUpdateList
#[derive(Clone, Debug)]
pub struct GnbCuCpTnlaToUpdateList(pub Vec<GnbCuCpTnlaToUpdateItem>);

impl GnbCuCpTnlaToUpdateList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(GnbCuCpTnlaToUpdateItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            x.encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for GnbCuCpTnlaToUpdateList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuCpTnlaToUpdateList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpTnlaToUpdateList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpTnlaToUpdateList"))
    }
}
// GnbCuCpConfigurationUpdateAcknowledge
#[derive(Clone, Debug)]
pub struct GnbCuCpConfigurationUpdateAcknowledge {
    pub transaction_id: TransactionId,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub gnb_cu_cp_tnla_setup_list: Option<GnbCuCpTnlaSetupList>,
    pub gnb_cu_cp_tnla_failed_to_setup_list: Option<GnbCuCpTnlaFailedToSetupList>,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
}

impl GnbCuCpConfigurationUpdateAcknowledge {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut gnb_cu_cp_tnla_setup_list: Option<GnbCuCpTnlaSetupList> = None;
        let mut gnb_cu_cp_tnla_failed_to_setup_list: Option<GnbCuCpTnlaFailedToSetupList> = None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                1 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                30 => gnb_cu_cp_tnla_setup_list = Some(GnbCuCpTnlaSetupList::decode(data)?),
                31 => {
                    gnb_cu_cp_tnla_failed_to_setup_list =
                        Some(GnbCuCpTnlaFailedToSetupList::decode(data)?)
                }
                86 => transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            criticality_diagnostics,
            gnb_cu_cp_tnla_setup_list,
            gnb_cu_cp_tnla_failed_to_setup_list,
            transport_layer_address_info,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 1, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_cu_cp_tnla_setup_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 30, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_cu_cp_tnla_failed_to_setup_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 31, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.transport_layer_address_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 86, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for GnbCuCpConfigurationUpdateAcknowledge {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuCpConfigurationUpdateAcknowledge::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpConfigurationUpdateAcknowledge"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpConfigurationUpdateAcknowledge"))
    }
}
// GnbCuCpTnlaSetupList
#[derive(Clone, Debug)]
pub struct GnbCuCpTnlaSetupList(pub Vec<GnbCuCpTnlaSetupItem>);

impl GnbCuCpTnlaSetupList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(GnbCuCpTnlaSetupItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            x.encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for GnbCuCpTnlaSetupList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuCpTnlaSetupList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpTnlaSetupList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpTnlaSetupList"))
    }
}
// GnbCuCpTnlaFailedToSetupList
#[derive(Clone, Debug)]
pub struct GnbCuCpTnlaFailedToSetupList(pub Vec<GnbCuCpTnlaFailedToSetupItem>);

impl GnbCuCpTnlaFailedToSetupList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(GnbCuCpTnlaFailedToSetupItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            x.encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for GnbCuCpTnlaFailedToSetupList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuCpTnlaFailedToSetupList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpTnlaFailedToSetupList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpTnlaFailedToSetupList"))
    }
}
// GnbCuCpConfigurationUpdateFailure
#[derive(Clone, Debug)]
pub struct GnbCuCpConfigurationUpdateFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl GnbCuCpConfigurationUpdateFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                12 => time_to_wait = Some(TimeToWait::decode(data)?),
                1 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.time_to_wait {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 12, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 1, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for GnbCuCpConfigurationUpdateFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuCpConfigurationUpdateFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpConfigurationUpdateFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpConfigurationUpdateFailure"))
    }
}
// E1ReleaseRequest
#[derive(Clone, Debug)]
pub struct E1ReleaseRequest {
    pub transaction_id: TransactionId,
    pub cause: Cause,
}

impl E1ReleaseRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for E1ReleaseRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        E1ReleaseRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("E1ReleaseRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("E1ReleaseRequest"))
    }
}
// E1ReleaseResponse
#[derive(Clone, Debug)]
pub struct E1ReleaseResponse {
    pub transaction_id: TransactionId,
}

impl E1ReleaseResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self { transaction_id })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for E1ReleaseResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        E1ReleaseResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("E1ReleaseResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("E1ReleaseResponse"))
    }
}
// BearerContextSetupRequest
#[derive(Clone, Debug)]
pub struct BearerContextSetupRequest {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub security_information: SecurityInformation,
    pub ue_dl_aggregate_maximum_bit_rate: BitRate,
    pub ue_dl_maximum_integrity_protected_data_rate: Option<BitRate>,
    pub serving_plmn: PlmnIdentity,
    pub activity_notification_level: ActivityNotificationLevel,
    pub ue_inactivity_timer: Option<InactivityTimer>,
    pub bearer_context_status_change: Option<BearerContextStatusChange>,
    pub system_bearer_context_setup_request: SystemBearerContextSetupRequest,
    pub ran_ue_id: Option<RanUeId>,
    pub gnb_du_id: Option<GnbDuId>,
    pub trace_activation: Option<TraceActivation>,
    pub npn_context_info: Option<NpnContextInfo>,
    pub management_based_mdt_plmn_list: Option<MdtPlmnList>,
    pub cho_initiation: Option<ChoInitiation>,
    pub additional_handover_info: Option<AdditionalHandoverInfo>,
    pub direct_forwarding_path_availability: Option<DirectForwardingPathAvailability>,
    pub gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId>,
}

impl BearerContextSetupRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut security_information: Option<SecurityInformation> = None;
        let mut ue_dl_aggregate_maximum_bit_rate: Option<BitRate> = None;
        let mut ue_dl_maximum_integrity_protected_data_rate: Option<BitRate> = None;
        let mut serving_plmn: Option<PlmnIdentity> = None;
        let mut activity_notification_level: Option<ActivityNotificationLevel> = None;
        let mut ue_inactivity_timer: Option<InactivityTimer> = None;
        let mut bearer_context_status_change: Option<BearerContextStatusChange> = None;
        let mut system_bearer_context_setup_request: Option<SystemBearerContextSetupRequest> = None;
        let mut ran_ue_id: Option<RanUeId> = None;
        let mut gnb_du_id: Option<GnbDuId> = None;
        let mut trace_activation: Option<TraceActivation> = None;
        let mut npn_context_info: Option<NpnContextInfo> = None;
        let mut management_based_mdt_plmn_list: Option<MdtPlmnList> = None;
        let mut cho_initiation: Option<ChoInitiation> = None;
        let mut additional_handover_info: Option<AdditionalHandoverInfo> = None;
        let mut direct_forwarding_path_availability: Option<DirectForwardingPathAvailability> =
            None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                13 => security_information = Some(SecurityInformation::decode(data)?),
                14 => ue_dl_aggregate_maximum_bit_rate = Some(BitRate::decode(data)?),
                66 => ue_dl_maximum_integrity_protected_data_rate = Some(BitRate::decode(data)?),
                58 => serving_plmn = Some(PlmnIdentity::decode(data)?),
                23 => activity_notification_level = Some(ActivityNotificationLevel::decode(data)?),
                59 => ue_inactivity_timer = Some(InactivityTimer::decode(data)?),
                17 => bearer_context_status_change = Some(BearerContextStatusChange::decode(data)?),
                15 => {
                    system_bearer_context_setup_request =
                        Some(SystemBearerContextSetupRequest::decode(data)?)
                }
                76 => ran_ue_id = Some(RanUeId::decode(data)?),
                77 => gnb_du_id = Some(GnbDuId::decode(data)?),
                81 => trace_activation = Some(TraceActivation::decode(data)?),
                111 => npn_context_info = Some(NpnContextInfo::decode(data)?),
                113 => management_based_mdt_plmn_list = Some(MdtPlmnList::decode(data)?),
                121 => cho_initiation = Some(ChoInitiation::decode(data)?),
                134 => additional_handover_info = Some(AdditionalHandoverInfo::decode(data)?),
                139 => {
                    direct_forwarding_path_availability =
                        Some(DirectForwardingPathAvailability::decode(data)?)
                }
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let security_information = security_information.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE security_information"),
        ))?;
        let ue_dl_aggregate_maximum_bit_rate =
            ue_dl_aggregate_maximum_bit_rate.ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE ue_dl_aggregate_maximum_bit_rate"
            )))?;
        let serving_plmn = serving_plmn.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE serving_plmn"
        )))?;
        let activity_notification_level = activity_notification_level.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE activity_notification_level")),
        )?;
        let system_bearer_context_setup_request =
            system_bearer_context_setup_request.ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE system_bearer_context_setup_request"
            )))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            security_information,
            ue_dl_aggregate_maximum_bit_rate,
            ue_dl_maximum_integrity_protected_data_rate,
            serving_plmn,
            activity_notification_level,
            ue_inactivity_timer,
            bearer_context_status_change,
            system_bearer_context_setup_request,
            ran_ue_id,
            gnb_du_id,
            trace_activation,
            npn_context_info,
            management_based_mdt_plmn_list,
            cho_initiation,
            additional_handover_info,
            direct_forwarding_path_availability,
            gnb_cu_up_ue_e1ap_id,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.security_information.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 13, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.ue_dl_aggregate_maximum_bit_rate.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 14, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.ue_dl_maximum_integrity_protected_data_rate {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 66, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.serving_plmn.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 58, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.activity_notification_level.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 23, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.ue_inactivity_timer {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 59, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.bearer_context_status_change {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 17, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.system_bearer_context_setup_request.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 15, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.ran_ue_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 76, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_du_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 77, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.trace_activation {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 81, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.npn_context_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 111, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.management_based_mdt_plmn_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 113, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.cho_initiation {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 121, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.additional_handover_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 134, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.direct_forwarding_path_availability {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 139, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_cu_up_ue_e1ap_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for BearerContextSetupRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BearerContextSetupRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextSetupRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextSetupRequest"))
    }
}
// SystemBearerContextSetupRequest
#[derive(Clone, Debug)]
pub enum SystemBearerContextSetupRequest {
    EutranBearerContextSetupRequest(EutranBearerContextSetupRequest),
    NgRanBearerContextSetupRequest(NgRanBearerContextSetupRequest),
}

impl SystemBearerContextSetupRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(aper::AperCodecError::new(
                "CHOICE additions not implemented",
            ));
        }
        match idx {
            0 => Ok(Self::EutranBearerContextSetupRequest(
                EutranBearerContextSetupRequest::decode(data)?,
            )),
            1 => Ok(Self::NgRanBearerContextSetupRequest(
                NgRanBearerContextSetupRequest::decode(data)?,
            )),
            2 => Err(AperCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(AperCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        match self {
            Self::EutranBearerContextSetupRequest(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.encode(data)
            }
            Self::NgRanBearerContextSetupRequest(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.encode(data)
            }
        }
    }
}

impl AperCodec for SystemBearerContextSetupRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SystemBearerContextSetupRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SystemBearerContextSetupRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SystemBearerContextSetupRequest"))
    }
}
// BearerContextSetupResponse
#[derive(Clone, Debug)]
pub struct BearerContextSetupResponse {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub system_bearer_context_setup_response: SystemBearerContextSetupResponse,
}

impl BearerContextSetupResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut system_bearer_context_setup_response: Option<SystemBearerContextSetupResponse> =
            None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                16 => {
                    system_bearer_context_setup_response =
                        Some(SystemBearerContextSetupResponse::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        let system_bearer_context_setup_response =
            system_bearer_context_setup_response.ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE system_bearer_context_setup_response"
            )))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            system_bearer_context_setup_response,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.system_bearer_context_setup_response.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 16, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for BearerContextSetupResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BearerContextSetupResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextSetupResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextSetupResponse"))
    }
}
// SystemBearerContextSetupResponse
#[derive(Clone, Debug)]
pub enum SystemBearerContextSetupResponse {
    EutranBearerContextSetupResponse(EutranBearerContextSetupResponse),
    NgRanBearerContextSetupResponse(NgRanBearerContextSetupResponse),
}

impl SystemBearerContextSetupResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(aper::AperCodecError::new(
                "CHOICE additions not implemented",
            ));
        }
        match idx {
            0 => Ok(Self::EutranBearerContextSetupResponse(
                EutranBearerContextSetupResponse::decode(data)?,
            )),
            1 => Ok(Self::NgRanBearerContextSetupResponse(
                NgRanBearerContextSetupResponse::decode(data)?,
            )),
            2 => Err(AperCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(AperCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        match self {
            Self::EutranBearerContextSetupResponse(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.encode(data)
            }
            Self::NgRanBearerContextSetupResponse(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.encode(data)
            }
        }
    }
}

impl AperCodec for SystemBearerContextSetupResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SystemBearerContextSetupResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SystemBearerContextSetupResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SystemBearerContextSetupResponse"))
    }
}
// BearerContextSetupFailure
#[derive(Clone, Debug)]
pub struct BearerContextSetupFailure {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId>,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl BearerContextSetupFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                1 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            cause,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_cu_up_ue_e1ap_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 1, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for BearerContextSetupFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BearerContextSetupFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextSetupFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextSetupFailure"))
    }
}
// BearerContextModificationRequest
#[derive(Clone, Debug)]
pub struct BearerContextModificationRequest {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub security_information: Option<SecurityInformation>,
    pub ue_dl_aggregate_maximum_bit_rate: Option<BitRate>,
    pub ue_dl_maximum_integrity_protected_data_rate: Option<BitRate>,
    pub bearer_context_status_change: Option<BearerContextStatusChange>,
    pub new_ul_tnl_information_required: Option<NewUlTnlInformationRequired>,
    pub ue_inactivity_timer: Option<InactivityTimer>,
    pub data_discard_required: Option<DataDiscardRequired>,
    pub system_bearer_context_modification_request: Option<SystemBearerContextModificationRequest>,
    pub ran_ue_id: Option<RanUeId>,
    pub gnb_du_id: Option<GnbDuId>,
    pub activity_notification_level: Option<ActivityNotificationLevel>,
}

impl BearerContextModificationRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut security_information: Option<SecurityInformation> = None;
        let mut ue_dl_aggregate_maximum_bit_rate: Option<BitRate> = None;
        let mut ue_dl_maximum_integrity_protected_data_rate: Option<BitRate> = None;
        let mut bearer_context_status_change: Option<BearerContextStatusChange> = None;
        let mut new_ul_tnl_information_required: Option<NewUlTnlInformationRequired> = None;
        let mut ue_inactivity_timer: Option<InactivityTimer> = None;
        let mut data_discard_required: Option<DataDiscardRequired> = None;
        let mut system_bearer_context_modification_request: Option<
            SystemBearerContextModificationRequest,
        > = None;
        let mut ran_ue_id: Option<RanUeId> = None;
        let mut gnb_du_id: Option<GnbDuId> = None;
        let mut activity_notification_level: Option<ActivityNotificationLevel> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                13 => security_information = Some(SecurityInformation::decode(data)?),
                14 => ue_dl_aggregate_maximum_bit_rate = Some(BitRate::decode(data)?),
                66 => ue_dl_maximum_integrity_protected_data_rate = Some(BitRate::decode(data)?),
                17 => bearer_context_status_change = Some(BearerContextStatusChange::decode(data)?),
                26 => {
                    new_ul_tnl_information_required =
                        Some(NewUlTnlInformationRequired::decode(data)?)
                }
                59 => ue_inactivity_timer = Some(InactivityTimer::decode(data)?),
                70 => data_discard_required = Some(DataDiscardRequired::decode(data)?),
                18 => {
                    system_bearer_context_modification_request =
                        Some(SystemBearerContextModificationRequest::decode(data)?)
                }
                76 => ran_ue_id = Some(RanUeId::decode(data)?),
                77 => gnb_du_id = Some(GnbDuId::decode(data)?),
                23 => activity_notification_level = Some(ActivityNotificationLevel::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            security_information,
            ue_dl_aggregate_maximum_bit_rate,
            ue_dl_maximum_integrity_protected_data_rate,
            bearer_context_status_change,
            new_ul_tnl_information_required,
            ue_inactivity_timer,
            data_discard_required,
            system_bearer_context_modification_request,
            ran_ue_id,
            gnb_du_id,
            activity_notification_level,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.security_information {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 13, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.ue_dl_aggregate_maximum_bit_rate {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 14, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.ue_dl_maximum_integrity_protected_data_rate {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 66, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.bearer_context_status_change {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 17, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.new_ul_tnl_information_required {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 26, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.ue_inactivity_timer {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 59, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.data_discard_required {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 70, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.system_bearer_context_modification_request {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 18, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.ran_ue_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 76, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_du_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 77, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.activity_notification_level {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 23, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for BearerContextModificationRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BearerContextModificationRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextModificationRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextModificationRequest"))
    }
}
// SystemBearerContextModificationRequest
#[derive(Clone, Debug)]
pub enum SystemBearerContextModificationRequest {
    EutranBearerContextModificationRequest(EutranBearerContextModificationRequest),
    NgRanBearerContextModificationRequest(NgRanBearerContextModificationRequest),
}

impl SystemBearerContextModificationRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(aper::AperCodecError::new(
                "CHOICE additions not implemented",
            ));
        }
        match idx {
            0 => Ok(Self::EutranBearerContextModificationRequest(
                EutranBearerContextModificationRequest::decode(data)?,
            )),
            1 => Ok(Self::NgRanBearerContextModificationRequest(
                NgRanBearerContextModificationRequest::decode(data)?,
            )),
            2 => Err(AperCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(AperCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        match self {
            Self::EutranBearerContextModificationRequest(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.encode(data)
            }
            Self::NgRanBearerContextModificationRequest(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.encode(data)
            }
        }
    }
}

impl AperCodec for SystemBearerContextModificationRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SystemBearerContextModificationRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SystemBearerContextModificationRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SystemBearerContextModificationRequest"))
    }
}
// BearerContextModificationResponse
#[derive(Clone, Debug)]
pub struct BearerContextModificationResponse {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub system_bearer_context_modification_response:
        Option<SystemBearerContextModificationResponse>,
}

impl BearerContextModificationResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut system_bearer_context_modification_response: Option<
            SystemBearerContextModificationResponse,
        > = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                19 => {
                    system_bearer_context_modification_response =
                        Some(SystemBearerContextModificationResponse::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            system_bearer_context_modification_response,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.system_bearer_context_modification_response {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 19, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for BearerContextModificationResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BearerContextModificationResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextModificationResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextModificationResponse"))
    }
}
// SystemBearerContextModificationResponse
#[derive(Clone, Debug)]
pub enum SystemBearerContextModificationResponse {
    EutranBearerContextModificationResponse(EutranBearerContextModificationResponse),
    NgRanBearerContextModificationResponse(NgRanBearerContextModificationResponse),
}

impl SystemBearerContextModificationResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(aper::AperCodecError::new(
                "CHOICE additions not implemented",
            ));
        }
        match idx {
            0 => Ok(Self::EutranBearerContextModificationResponse(
                EutranBearerContextModificationResponse::decode(data)?,
            )),
            1 => Ok(Self::NgRanBearerContextModificationResponse(
                NgRanBearerContextModificationResponse::decode(data)?,
            )),
            2 => Err(AperCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(AperCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        match self {
            Self::EutranBearerContextModificationResponse(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.encode(data)
            }
            Self::NgRanBearerContextModificationResponse(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.encode(data)
            }
        }
    }
}

impl AperCodec for SystemBearerContextModificationResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SystemBearerContextModificationResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SystemBearerContextModificationResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SystemBearerContextModificationResponse"))
    }
}
// BearerContextModificationFailure
#[derive(Clone, Debug)]
pub struct BearerContextModificationFailure {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl BearerContextModificationFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                1 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            cause,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 1, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for BearerContextModificationFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BearerContextModificationFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextModificationFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextModificationFailure"))
    }
}
// BearerContextModificationRequired
#[derive(Clone, Debug)]
pub struct BearerContextModificationRequired {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub system_bearer_context_modification_required: SystemBearerContextModificationRequired,
}

impl BearerContextModificationRequired {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut system_bearer_context_modification_required: Option<
            SystemBearerContextModificationRequired,
        > = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                21 => {
                    system_bearer_context_modification_required =
                        Some(SystemBearerContextModificationRequired::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        let system_bearer_context_modification_required =
            system_bearer_context_modification_required.ok_or(aper::AperCodecError::new(
                format!("Missing mandatory IE system_bearer_context_modification_required"),
            ))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            system_bearer_context_modification_required,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.system_bearer_context_modification_required
            .encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 21, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for BearerContextModificationRequired {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BearerContextModificationRequired::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextModificationRequired"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextModificationRequired"))
    }
}
// SystemBearerContextModificationRequired
#[derive(Clone, Debug)]
pub enum SystemBearerContextModificationRequired {
    EutranBearerContextModificationRequired(EutranBearerContextModificationRequired),
    NgRanBearerContextModificationRequired(NgRanBearerContextModificationRequired),
}

impl SystemBearerContextModificationRequired {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(aper::AperCodecError::new(
                "CHOICE additions not implemented",
            ));
        }
        match idx {
            0 => Ok(Self::EutranBearerContextModificationRequired(
                EutranBearerContextModificationRequired::decode(data)?,
            )),
            1 => Ok(Self::NgRanBearerContextModificationRequired(
                NgRanBearerContextModificationRequired::decode(data)?,
            )),
            2 => Err(AperCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(AperCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        match self {
            Self::EutranBearerContextModificationRequired(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.encode(data)
            }
            Self::NgRanBearerContextModificationRequired(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.encode(data)
            }
        }
    }
}

impl AperCodec for SystemBearerContextModificationRequired {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SystemBearerContextModificationRequired::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SystemBearerContextModificationRequired"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SystemBearerContextModificationRequired"))
    }
}
// BearerContextModificationConfirm
#[derive(Clone, Debug)]
pub struct BearerContextModificationConfirm {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub system_bearer_context_modification_confirm: Option<SystemBearerContextModificationConfirm>,
}

impl BearerContextModificationConfirm {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut system_bearer_context_modification_confirm: Option<
            SystemBearerContextModificationConfirm,
        > = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                20 => {
                    system_bearer_context_modification_confirm =
                        Some(SystemBearerContextModificationConfirm::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            system_bearer_context_modification_confirm,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.system_bearer_context_modification_confirm {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 20, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for BearerContextModificationConfirm {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BearerContextModificationConfirm::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextModificationConfirm"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextModificationConfirm"))
    }
}
// SystemBearerContextModificationConfirm
#[derive(Clone, Debug)]
pub enum SystemBearerContextModificationConfirm {
    EutranBearerContextModificationConfirm(EutranBearerContextModificationConfirm),
    NgRanBearerContextModificationConfirm(NgRanBearerContextModificationConfirm),
}

impl SystemBearerContextModificationConfirm {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(aper::AperCodecError::new(
                "CHOICE additions not implemented",
            ));
        }
        match idx {
            0 => Ok(Self::EutranBearerContextModificationConfirm(
                EutranBearerContextModificationConfirm::decode(data)?,
            )),
            1 => Ok(Self::NgRanBearerContextModificationConfirm(
                NgRanBearerContextModificationConfirm::decode(data)?,
            )),
            2 => Err(AperCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(AperCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        match self {
            Self::EutranBearerContextModificationConfirm(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.encode(data)
            }
            Self::NgRanBearerContextModificationConfirm(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.encode(data)
            }
        }
    }
}

impl AperCodec for SystemBearerContextModificationConfirm {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SystemBearerContextModificationConfirm::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SystemBearerContextModificationConfirm"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SystemBearerContextModificationConfirm"))
    }
}
// BearerContextReleaseCommand
#[derive(Clone, Debug)]
pub struct BearerContextReleaseCommand {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub cause: Cause,
}

impl BearerContextReleaseCommand {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut cause: Option<Cause> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            cause,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for BearerContextReleaseCommand {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BearerContextReleaseCommand::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextReleaseCommand"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextReleaseCommand"))
    }
}
// BearerContextReleaseComplete
#[derive(Clone, Debug)]
pub struct BearerContextReleaseComplete {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub retainability_measurements_info: Option<RetainabilityMeasurementsInfo>,
}

impl BearerContextReleaseComplete {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut retainability_measurements_info: Option<RetainabilityMeasurementsInfo> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                1 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                85 => {
                    retainability_measurements_info =
                        Some(RetainabilityMeasurementsInfo::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            criticality_diagnostics,
            retainability_measurements_info,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 1, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.retainability_measurements_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 85, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for BearerContextReleaseComplete {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BearerContextReleaseComplete::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextReleaseComplete"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextReleaseComplete"))
    }
}
// BearerContextReleaseRequest
#[derive(Clone, Debug)]
pub struct BearerContextReleaseRequest {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub drb_status_list: Option<DrbStatusList>,
    pub cause: Cause,
}

impl BearerContextReleaseRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut drb_status_list: Option<DrbStatusList> = None;
        let mut cause: Option<Cause> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                22 => drb_status_list = Some(DrbStatusList::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            drb_status_list,
            cause,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.drb_status_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 22, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for BearerContextReleaseRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BearerContextReleaseRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextReleaseRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextReleaseRequest"))
    }
}
// DrbStatusList
#[derive(Clone, Debug)]
pub struct DrbStatusList(pub Vec<DrbStatusItem>);

impl DrbStatusList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(DrbStatusItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            x.encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for DrbStatusList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DrbStatusList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrbStatusList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrbStatusList"))
    }
}
// BearerContextInactivityNotification
#[derive(Clone, Debug)]
pub struct BearerContextInactivityNotification {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub activity_information: ActivityInformation,
}

impl BearerContextInactivityNotification {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut activity_information: Option<ActivityInformation> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                24 => activity_information = Some(ActivityInformation::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        let activity_information = activity_information.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE activity_information"),
        ))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            activity_information,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.activity_information.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 24, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for BearerContextInactivityNotification {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BearerContextInactivityNotification::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextInactivityNotification"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BearerContextInactivityNotification"))
    }
}
// DlDataNotification
#[derive(Clone, Debug)]
pub struct DlDataNotification {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub ppi: Option<Ppi>,
    pub pdu_session_to_notify_list: Option<PduSessionToNotifyList>,
}

impl DlDataNotification {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut ppi: Option<Ppi> = None;
        let mut pdu_session_to_notify_list: Option<PduSessionToNotifyList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                63 => ppi = Some(Ppi::decode(data)?),
                67 => pdu_session_to_notify_list = Some(PduSessionToNotifyList::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            ppi,
            pdu_session_to_notify_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.ppi {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 63, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.pdu_session_to_notify_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 67, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for DlDataNotification {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DlDataNotification::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DlDataNotification"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DlDataNotification"))
    }
}
// UlDataNotification
#[derive(Clone, Debug)]
pub struct UlDataNotification {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub pdu_session_to_notify_list: PduSessionToNotifyList,
}

impl UlDataNotification {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut pdu_session_to_notify_list: Option<PduSessionToNotifyList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                67 => pdu_session_to_notify_list = Some(PduSessionToNotifyList::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        let pdu_session_to_notify_list = pdu_session_to_notify_list.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE pdu_session_to_notify_list")),
        )?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            pdu_session_to_notify_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.pdu_session_to_notify_list.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 67, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for UlDataNotification {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UlDataNotification::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UlDataNotification"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UlDataNotification"))
    }
}
// DataUsageReport
#[derive(Clone, Debug)]
pub struct DataUsageReport {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub data_usage_report_list: DataUsageReportList,
}

impl DataUsageReport {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut data_usage_report_list: Option<DataUsageReportList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                25 => data_usage_report_list = Some(DataUsageReportList::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        let data_usage_report_list = data_usage_report_list.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE data_usage_report_list"),
        ))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            data_usage_report_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.data_usage_report_list.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 25, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for DataUsageReport {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DataUsageReport::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DataUsageReport"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DataUsageReport"))
    }
}
// GnbCuUpCounterCheckRequest
#[derive(Clone, Debug)]
pub struct GnbCuUpCounterCheckRequest {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub system_gnb_cu_up_counter_check_request: SystemGnbCuUpCounterCheckRequest,
}

impl GnbCuUpCounterCheckRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut system_gnb_cu_up_counter_check_request: Option<SystemGnbCuUpCounterCheckRequest> =
            None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                60 => {
                    system_gnb_cu_up_counter_check_request =
                        Some(SystemGnbCuUpCounterCheckRequest::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        let system_gnb_cu_up_counter_check_request =
            system_gnb_cu_up_counter_check_request.ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE system_gnb_cu_up_counter_check_request"
            )))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            system_gnb_cu_up_counter_check_request,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.system_gnb_cu_up_counter_check_request.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 60, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for GnbCuUpCounterCheckRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuUpCounterCheckRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuUpCounterCheckRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuUpCounterCheckRequest"))
    }
}
// SystemGnbCuUpCounterCheckRequest
#[derive(Clone, Debug)]
pub enum SystemGnbCuUpCounterCheckRequest {
    EutranGnbCuUpCounterCheckRequest(EutranGnbCuUpCounterCheckRequest),
    NgRanGnbCuUpCounterCheckRequest(NgRanGnbCuUpCounterCheckRequest),
}

impl SystemGnbCuUpCounterCheckRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(aper::AperCodecError::new(
                "CHOICE additions not implemented",
            ));
        }
        match idx {
            0 => Ok(Self::EutranGnbCuUpCounterCheckRequest(
                EutranGnbCuUpCounterCheckRequest::decode(data)?,
            )),
            1 => Ok(Self::NgRanGnbCuUpCounterCheckRequest(
                NgRanGnbCuUpCounterCheckRequest::decode(data)?,
            )),
            2 => Err(AperCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(AperCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        match self {
            Self::EutranGnbCuUpCounterCheckRequest(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.encode(data)
            }
            Self::NgRanGnbCuUpCounterCheckRequest(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.encode(data)
            }
        }
    }
}

impl AperCodec for SystemGnbCuUpCounterCheckRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SystemGnbCuUpCounterCheckRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SystemGnbCuUpCounterCheckRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SystemGnbCuUpCounterCheckRequest"))
    }
}
// GnbCuUpStatusIndication
#[derive(Clone, Debug)]
pub struct GnbCuUpStatusIndication {
    pub transaction_id: TransactionId,
    pub gnb_cu_up_overload_information: GnbCuUpOverloadInformation,
}

impl GnbCuUpStatusIndication {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_up_overload_information: Option<GnbCuUpOverloadInformation> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                65 => {
                    gnb_cu_up_overload_information = Some(GnbCuUpOverloadInformation::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_cu_up_overload_information =
            gnb_cu_up_overload_information.ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE gnb_cu_up_overload_information"
            )))?;
        Ok(Self {
            transaction_id,
            gnb_cu_up_overload_information,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_overload_information.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 65, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for GnbCuUpStatusIndication {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuUpStatusIndication::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuUpStatusIndication"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuUpStatusIndication"))
    }
}
// GnbCuCpMeasurementResultsInformation
#[derive(Clone, Debug)]
pub struct GnbCuCpMeasurementResultsInformation {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub drb_measurement_results_information_list: DrbMeasurementResultsInformationList,
}

impl GnbCuCpMeasurementResultsInformation {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut drb_measurement_results_information_list: Option<
            DrbMeasurementResultsInformationList,
        > = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                128 => {
                    drb_measurement_results_information_list =
                        Some(DrbMeasurementResultsInformationList::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        let drb_measurement_results_information_list = drb_measurement_results_information_list
            .ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE drb_measurement_results_information_list"
            )))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            drb_measurement_results_information_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.drb_measurement_results_information_list.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 128, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for GnbCuCpMeasurementResultsInformation {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuCpMeasurementResultsInformation::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpMeasurementResultsInformation"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuCpMeasurementResultsInformation"))
    }
}
// MrdcDataUsageReport
#[derive(Clone, Debug)]
pub struct MrdcDataUsageReport {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub pdu_session_resource_data_usage_list: PduSessionResourceDataUsageList,
}

impl MrdcDataUsageReport {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut pdu_session_resource_data_usage_list: Option<PduSessionResourceDataUsageList> =
            None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                68 => {
                    pdu_session_resource_data_usage_list =
                        Some(PduSessionResourceDataUsageList::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        let pdu_session_resource_data_usage_list =
            pdu_session_resource_data_usage_list.ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE pdu_session_resource_data_usage_list"
            )))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            pdu_session_resource_data_usage_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.pdu_session_resource_data_usage_list.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 68, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for MrdcDataUsageReport {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        MrdcDataUsageReport::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("MrdcDataUsageReport"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("MrdcDataUsageReport"))
    }
}
// TraceStart
#[derive(Clone, Debug)]
pub struct TraceStart {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub trace_activation: TraceActivation,
}

impl TraceStart {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut trace_activation: Option<TraceActivation> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                81 => trace_activation = Some(TraceActivation::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        let trace_activation = trace_activation.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE trace_activation"
        )))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            trace_activation,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.trace_activation.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 81, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for TraceStart {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        TraceStart::decode_inner(data).map_err(|e: AperCodecError| e.push_context("TraceStart"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("TraceStart"))
    }
}
// DeactivateTrace
#[derive(Clone, Debug)]
pub struct DeactivateTrace {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub trace_id: TraceId,
}

impl DeactivateTrace {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut trace_id: Option<TraceId> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                82 => trace_id = Some(TraceId::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        let trace_id = trace_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE trace_id"
        )))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            trace_id,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.trace_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 82, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for DeactivateTrace {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DeactivateTrace::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DeactivateTrace"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DeactivateTrace"))
    }
}
// CellTrafficTrace
#[derive(Clone, Debug)]
pub struct CellTrafficTrace {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub trace_id: TraceId,
    pub trace_collection_entity_ip_address: TransportLayerAddress,
    pub privacy_indicator: Option<PrivacyIndicator>,
    pub ur_iaddress: Option<UrIaddress>,
}

impl CellTrafficTrace {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut trace_id: Option<TraceId> = None;
        let mut trace_collection_entity_ip_address: Option<TransportLayerAddress> = None;
        let mut privacy_indicator: Option<PrivacyIndicator> = None;
        let mut ur_iaddress: Option<UrIaddress> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                82 => trace_id = Some(TraceId::decode(data)?),
                114 => {
                    trace_collection_entity_ip_address = Some(TransportLayerAddress::decode(data)?)
                }
                115 => privacy_indicator = Some(PrivacyIndicator::decode(data)?),
                117 => ur_iaddress = Some(UrIaddress::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        let trace_id = trace_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE trace_id"
        )))?;
        let trace_collection_entity_ip_address =
            trace_collection_entity_ip_address.ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE trace_collection_entity_ip_address"
            )))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            trace_id,
            trace_collection_entity_ip_address,
            privacy_indicator,
            ur_iaddress,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.trace_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 82, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.trace_collection_entity_ip_address.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 114, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.privacy_indicator {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 115, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.ur_iaddress {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 117, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for CellTrafficTrace {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        CellTrafficTrace::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellTrafficTrace"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellTrafficTrace"))
    }
}
// PrivateMessage
#[derive(Clone, Debug)]
pub struct PrivateMessage {}

impl PrivateMessage {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (_optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, true, 1)?;

        Ok(Self {})
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;

        Ok(())
    }
}

impl AperCodec for PrivateMessage {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PrivateMessage::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PrivateMessage"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PrivateMessage"))
    }
}
// ResourceStatusRequest
#[derive(Clone, Debug)]
pub struct ResourceStatusRequest {
    pub transaction_id: TransactionId,
    pub gnb_cu_cp_measurement_id: u16,
    pub gnb_cu_up_measurement_id: Option<u16>,
    pub registration_request: RegistrationRequest,
    pub report_characteristics: Option<ReportCharacteristics>,
    pub reporting_periodicity: Option<ReportingPeriodicity>,
}

impl ResourceStatusRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_cp_measurement_id: Option<u16> = None;
        let mut gnb_cu_up_measurement_id: Option<u16> = None;
        let mut registration_request: Option<RegistrationRequest> = None;
        let mut report_characteristics: Option<ReportCharacteristics> = None;
        let mut reporting_periodicity: Option<ReportingPeriodicity> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                89 => {
                    gnb_cu_cp_measurement_id = Some(
                        aper::decode::decode_integer(data, Some(1), Some(4095), true)?.0 as u16,
                    )
                }
                90 => {
                    gnb_cu_up_measurement_id = Some(
                        aper::decode::decode_integer(data, Some(1), Some(4095), true)?.0 as u16,
                    )
                }
                91 => registration_request = Some(RegistrationRequest::decode(data)?),
                92 => report_characteristics = Some(ReportCharacteristics::decode(data)?),
                93 => reporting_periodicity = Some(ReportingPeriodicity::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_cu_cp_measurement_id = gnb_cu_cp_measurement_id.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE gnb_cu_cp_measurement_id")),
        )?;
        let registration_request = registration_request.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE registration_request"),
        ))?;
        Ok(Self {
            transaction_id,
            gnb_cu_cp_measurement_id,
            gnb_cu_up_measurement_id,
            registration_request,
            report_characteristics,
            reporting_periodicity,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        aper::encode::encode_integer(
            ie,
            Some(1),
            Some(4095),
            true,
            self.gnb_cu_cp_measurement_id as i128,
            false,
        )?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 89, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_cu_up_measurement_id {
            let ie = &mut AperCodecData::new();
            aper::encode::encode_integer(ie, Some(1), Some(4095), true, *x as i128, false)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 90, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.registration_request.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 91, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.report_characteristics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 92, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.reporting_periodicity {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 93, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for ResourceStatusRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ResourceStatusRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResourceStatusRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResourceStatusRequest"))
    }
}
// ResourceStatusResponse
#[derive(Clone, Debug)]
pub struct ResourceStatusResponse {
    pub transaction_id: TransactionId,
    pub gnb_cu_cp_measurement_id: u16,
    pub gnb_cu_up_measurement_id: u16,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl ResourceStatusResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_cp_measurement_id: Option<u16> = None;
        let mut gnb_cu_up_measurement_id: Option<u16> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                89 => {
                    gnb_cu_cp_measurement_id = Some(
                        aper::decode::decode_integer(data, Some(1), Some(4095), true)?.0 as u16,
                    )
                }
                90 => {
                    gnb_cu_up_measurement_id = Some(
                        aper::decode::decode_integer(data, Some(1), Some(4095), true)?.0 as u16,
                    )
                }
                1 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_cu_cp_measurement_id = gnb_cu_cp_measurement_id.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE gnb_cu_cp_measurement_id")),
        )?;
        let gnb_cu_up_measurement_id = gnb_cu_up_measurement_id.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE gnb_cu_up_measurement_id")),
        )?;
        Ok(Self {
            transaction_id,
            gnb_cu_cp_measurement_id,
            gnb_cu_up_measurement_id,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        aper::encode::encode_integer(
            ie,
            Some(1),
            Some(4095),
            true,
            self.gnb_cu_cp_measurement_id as i128,
            false,
        )?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 89, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        aper::encode::encode_integer(
            ie,
            Some(1),
            Some(4095),
            true,
            self.gnb_cu_up_measurement_id as i128,
            false,
        )?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 90, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 1, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for ResourceStatusResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ResourceStatusResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResourceStatusResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResourceStatusResponse"))
    }
}
// ResourceStatusFailure
#[derive(Clone, Debug)]
pub struct ResourceStatusFailure {
    pub transaction_id: TransactionId,
    pub gnb_cu_cp_measurement_id: u16,
    pub gnb_cu_up_measurement_id: Option<u16>,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl ResourceStatusFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_cp_measurement_id: Option<u16> = None;
        let mut gnb_cu_up_measurement_id: Option<u16> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                89 => {
                    gnb_cu_cp_measurement_id = Some(
                        aper::decode::decode_integer(data, Some(1), Some(4095), true)?.0 as u16,
                    )
                }
                90 => {
                    gnb_cu_up_measurement_id = Some(
                        aper::decode::decode_integer(data, Some(1), Some(4095), true)?.0 as u16,
                    )
                }
                0 => cause = Some(Cause::decode(data)?),
                1 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_cu_cp_measurement_id = gnb_cu_cp_measurement_id.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE gnb_cu_cp_measurement_id")),
        )?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            gnb_cu_cp_measurement_id,
            gnb_cu_up_measurement_id,
            cause,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        aper::encode::encode_integer(
            ie,
            Some(1),
            Some(4095),
            true,
            self.gnb_cu_cp_measurement_id as i128,
            false,
        )?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 89, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_cu_up_measurement_id {
            let ie = &mut AperCodecData::new();
            aper::encode::encode_integer(ie, Some(1), Some(4095), true, *x as i128, false)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 90, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 1, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for ResourceStatusFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ResourceStatusFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResourceStatusFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResourceStatusFailure"))
    }
}
// ResourceStatusUpdate
#[derive(Clone, Debug)]
pub struct ResourceStatusUpdate {
    pub transaction_id: TransactionId,
    pub gnb_cu_cp_measurement_id: u16,
    pub gnb_cu_up_measurement_id: Option<u16>,
    pub tnl_available_capacity_indicator: Option<TnlAvailableCapacityIndicator>,
    pub hw_capacity_indicator: HwCapacityIndicator,
}

impl ResourceStatusUpdate {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_cp_measurement_id: Option<u16> = None;
        let mut gnb_cu_up_measurement_id: Option<u16> = None;
        let mut tnl_available_capacity_indicator: Option<TnlAvailableCapacityIndicator> = None;
        let mut hw_capacity_indicator: Option<HwCapacityIndicator> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                89 => {
                    gnb_cu_cp_measurement_id = Some(
                        aper::decode::decode_integer(data, Some(1), Some(4095), true)?.0 as u16,
                    )
                }
                90 => {
                    gnb_cu_up_measurement_id = Some(
                        aper::decode::decode_integer(data, Some(1), Some(4095), true)?.0 as u16,
                    )
                }
                94 => {
                    tnl_available_capacity_indicator =
                        Some(TnlAvailableCapacityIndicator::decode(data)?)
                }
                95 => hw_capacity_indicator = Some(HwCapacityIndicator::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_cu_cp_measurement_id = gnb_cu_cp_measurement_id.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE gnb_cu_cp_measurement_id")),
        )?;
        let hw_capacity_indicator = hw_capacity_indicator.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE hw_capacity_indicator"),
        ))?;
        Ok(Self {
            transaction_id,
            gnb_cu_cp_measurement_id,
            gnb_cu_up_measurement_id,
            tnl_available_capacity_indicator,
            hw_capacity_indicator,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        aper::encode::encode_integer(
            ie,
            Some(1),
            Some(4095),
            true,
            self.gnb_cu_cp_measurement_id as i128,
            false,
        )?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 89, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_cu_up_measurement_id {
            let ie = &mut AperCodecData::new();
            aper::encode::encode_integer(ie, Some(1), Some(4095), true, *x as i128, false)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 90, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.tnl_available_capacity_indicator {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 94, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.hw_capacity_indicator.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 95, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for ResourceStatusUpdate {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ResourceStatusUpdate::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResourceStatusUpdate"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResourceStatusUpdate"))
    }
}
// IabUptnlAddressUpdate
#[derive(Clone, Debug)]
pub struct IabUptnlAddressUpdate {
    pub transaction_id: TransactionId,
    pub dluptnl_address_to_update_list: Option<DluptnlAddressToUpdateList>,
}

impl IabUptnlAddressUpdate {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut dluptnl_address_to_update_list: Option<DluptnlAddressToUpdateList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                108 => {
                    dluptnl_address_to_update_list = Some(DluptnlAddressToUpdateList::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            dluptnl_address_to_update_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.dluptnl_address_to_update_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 108, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for IabUptnlAddressUpdate {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        IabUptnlAddressUpdate::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabUptnlAddressUpdate"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabUptnlAddressUpdate"))
    }
}
// DluptnlAddressToUpdateList
#[derive(Clone, Debug)]
pub struct DluptnlAddressToUpdateList(pub Vec<DluptnlAddressToUpdateItem>);

impl DluptnlAddressToUpdateList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(8), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(DluptnlAddressToUpdateItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(8), false, self.0.len())?;
        for x in &self.0 {
            x.encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for DluptnlAddressToUpdateList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DluptnlAddressToUpdateList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DluptnlAddressToUpdateList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DluptnlAddressToUpdateList"))
    }
}
// IabUptnlAddressUpdateAcknowledge
#[derive(Clone, Debug)]
pub struct IabUptnlAddressUpdateAcknowledge {
    pub transaction_id: TransactionId,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub uluptnl_address_to_update_list: Option<UluptnlAddressToUpdateList>,
}

impl IabUptnlAddressUpdateAcknowledge {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut uluptnl_address_to_update_list: Option<UluptnlAddressToUpdateList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                1 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                109 => {
                    uluptnl_address_to_update_list = Some(UluptnlAddressToUpdateList::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            criticality_diagnostics,
            uluptnl_address_to_update_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 1, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.uluptnl_address_to_update_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 109, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for IabUptnlAddressUpdateAcknowledge {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        IabUptnlAddressUpdateAcknowledge::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabUptnlAddressUpdateAcknowledge"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabUptnlAddressUpdateAcknowledge"))
    }
}
// UluptnlAddressToUpdateList
#[derive(Clone, Debug)]
pub struct UluptnlAddressToUpdateList(pub Vec<UluptnlAddressToUpdateItem>);

impl UluptnlAddressToUpdateList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(8), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(UluptnlAddressToUpdateItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(8), false, self.0.len())?;
        for x in &self.0 {
            x.encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for UluptnlAddressToUpdateList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UluptnlAddressToUpdateList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UluptnlAddressToUpdateList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UluptnlAddressToUpdateList"))
    }
}
// IabUptnlAddressUpdateFailure
#[derive(Clone, Debug)]
pub struct IabUptnlAddressUpdateFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl IabUptnlAddressUpdateFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                57 => transaction_id = Some(TransactionId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                12 => time_to_wait = Some(TimeToWait::decode(data)?),
                1 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 57, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.time_to_wait {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 12, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 1, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for IabUptnlAddressUpdateFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        IabUptnlAddressUpdateFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabUptnlAddressUpdateFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabUptnlAddressUpdateFailure"))
    }
}
// EarlyForwardingSnTransfer
#[derive(Clone, Debug)]
pub struct EarlyForwardingSnTransfer {
    pub gnb_cu_cp_ue_e1ap_id: GnbCuCpUeE1apId,
    pub gnb_cu_up_ue_e1ap_id: GnbCuUpUeE1apId,
    pub drbs_subject_to_early_forwarding_list: DrbsSubjectToEarlyForwardingList,
}

impl EarlyForwardingSnTransfer {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_cp_ue_e1ap_id: Option<GnbCuCpUeE1apId> = None;
        let mut gnb_cu_up_ue_e1ap_id: Option<GnbCuUpUeE1apId> = None;
        let mut drbs_subject_to_early_forwarding_list: Option<DrbsSubjectToEarlyForwardingList> =
            None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                2 => gnb_cu_cp_ue_e1ap_id = Some(GnbCuCpUeE1apId::decode(data)?),
                3 => gnb_cu_up_ue_e1ap_id = Some(GnbCuUpUeE1apId::decode(data)?),
                119 => {
                    drbs_subject_to_early_forwarding_list =
                        Some(DrbsSubjectToEarlyForwardingList::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_cp_ue_e1ap_id = gnb_cu_cp_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_cp_ue_e1ap_id"),
        ))?;
        let gnb_cu_up_ue_e1ap_id = gnb_cu_up_ue_e1ap_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_up_ue_e1ap_id"),
        ))?;
        let drbs_subject_to_early_forwarding_list =
            drbs_subject_to_early_forwarding_list.ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE drbs_subject_to_early_forwarding_list"
            )))?;
        Ok(Self {
            gnb_cu_cp_ue_e1ap_id,
            gnb_cu_up_ue_e1ap_id,
            drbs_subject_to_early_forwarding_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_cp_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 2, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_up_ue_e1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.drbs_subject_to_early_forwarding_list.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 119, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_sequence_header(data, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for EarlyForwardingSnTransfer {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        EarlyForwardingSnTransfer::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("EarlyForwardingSnTransfer"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("EarlyForwardingSnTransfer"))
    }
}
// EutranBearerContextSetupRequest
#[derive(Clone, Debug)]
pub struct EutranBearerContextSetupRequest {
    pub drb_to_setup_list_eutran: DrbToSetupListEutran,
    pub subscriber_profile_i_dfor_rfp: Option<SubscriberProfileIDforRfp>,
    pub additional_rrm_priority_index: Option<AdditionalRrmPriorityIndex>,
}

impl EutranBearerContextSetupRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut drb_to_setup_list_eutran: Option<DrbToSetupListEutran> = None;
        let mut subscriber_profile_i_dfor_rfp: Option<SubscriberProfileIDforRfp> = None;
        let mut additional_rrm_priority_index: Option<AdditionalRrmPriorityIndex> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                32 => drb_to_setup_list_eutran = Some(DrbToSetupListEutran::decode(data)?),
                83 => {
                    subscriber_profile_i_dfor_rfp = Some(SubscriberProfileIDforRfp::decode(data)?)
                }
                84 => {
                    additional_rrm_priority_index = Some(AdditionalRrmPriorityIndex::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let drb_to_setup_list_eutran = drb_to_setup_list_eutran.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE drb_to_setup_list_eutran")),
        )?;
        Ok(Self {
            drb_to_setup_list_eutran,
            subscriber_profile_i_dfor_rfp,
            additional_rrm_priority_index,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.drb_to_setup_list_eutran.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 32, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.subscriber_profile_i_dfor_rfp {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 83, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.additional_rrm_priority_index {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 84, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for EutranBearerContextSetupRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        EutranBearerContextSetupRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("EutranBearerContextSetupRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("EutranBearerContextSetupRequest"))
    }
}
// NgRanBearerContextSetupRequest
#[derive(Clone, Debug)]
pub struct NgRanBearerContextSetupRequest {
    pub pdu_session_resource_to_setup_list: PduSessionResourceToSetupList,
}

impl NgRanBearerContextSetupRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut pdu_session_resource_to_setup_list: Option<PduSessionResourceToSetupList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                42 => {
                    pdu_session_resource_to_setup_list =
                        Some(PduSessionResourceToSetupList::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let pdu_session_resource_to_setup_list =
            pdu_session_resource_to_setup_list.ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE pdu_session_resource_to_setup_list"
            )))?;
        Ok(Self {
            pdu_session_resource_to_setup_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.pdu_session_resource_to_setup_list.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 42, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for NgRanBearerContextSetupRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        NgRanBearerContextSetupRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NgRanBearerContextSetupRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NgRanBearerContextSetupRequest"))
    }
}
// EutranBearerContextSetupResponse
#[derive(Clone, Debug)]
pub struct EutranBearerContextSetupResponse {
    pub drb_setup_list_eutran: DrbSetupListEutran,
    pub drb_failed_list_eutran: Option<DrbFailedListEutran>,
}

impl EutranBearerContextSetupResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut drb_setup_list_eutran: Option<DrbSetupListEutran> = None;
        let mut drb_failed_list_eutran: Option<DrbFailedListEutran> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                37 => drb_setup_list_eutran = Some(DrbSetupListEutran::decode(data)?),
                38 => drb_failed_list_eutran = Some(DrbFailedListEutran::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let drb_setup_list_eutran = drb_setup_list_eutran.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE drb_setup_list_eutran"),
        ))?;
        Ok(Self {
            drb_setup_list_eutran,
            drb_failed_list_eutran,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.drb_setup_list_eutran.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 37, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.drb_failed_list_eutran {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 38, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for EutranBearerContextSetupResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        EutranBearerContextSetupResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("EutranBearerContextSetupResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("EutranBearerContextSetupResponse"))
    }
}
// NgRanBearerContextSetupResponse
#[derive(Clone, Debug)]
pub struct NgRanBearerContextSetupResponse {
    pub pdu_session_resource_setup_list: PduSessionResourceSetupList,
    pub pdu_session_resource_failed_list: Option<PduSessionResourceFailedList>,
}

impl NgRanBearerContextSetupResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut pdu_session_resource_setup_list: Option<PduSessionResourceSetupList> = None;
        let mut pdu_session_resource_failed_list: Option<PduSessionResourceFailedList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                46 => {
                    pdu_session_resource_setup_list =
                        Some(PduSessionResourceSetupList::decode(data)?)
                }
                47 => {
                    pdu_session_resource_failed_list =
                        Some(PduSessionResourceFailedList::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let pdu_session_resource_setup_list =
            pdu_session_resource_setup_list.ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE pdu_session_resource_setup_list"
            )))?;
        Ok(Self {
            pdu_session_resource_setup_list,
            pdu_session_resource_failed_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.pdu_session_resource_setup_list.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 46, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.pdu_session_resource_failed_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 47, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for NgRanBearerContextSetupResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        NgRanBearerContextSetupResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NgRanBearerContextSetupResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NgRanBearerContextSetupResponse"))
    }
}
// EutranBearerContextModificationRequest
#[derive(Clone, Debug)]
pub struct EutranBearerContextModificationRequest {
    pub drb_to_setup_mod_list_eutran: Option<DrbToSetupModListEutran>,
    pub drb_to_modify_list_eutran: Option<DrbToModifyListEutran>,
    pub drb_to_remove_list_eutran: Option<DrbToRemoveListEutran>,
    pub subscriber_profile_i_dfor_rfp: Option<SubscriberProfileIDforRfp>,
    pub additional_rrm_priority_index: Option<AdditionalRrmPriorityIndex>,
}

impl EutranBearerContextModificationRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut drb_to_setup_mod_list_eutran: Option<DrbToSetupModListEutran> = None;
        let mut drb_to_modify_list_eutran: Option<DrbToModifyListEutran> = None;
        let mut drb_to_remove_list_eutran: Option<DrbToRemoveListEutran> = None;
        let mut subscriber_profile_i_dfor_rfp: Option<SubscriberProfileIDforRfp> = None;
        let mut additional_rrm_priority_index: Option<AdditionalRrmPriorityIndex> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                51 => drb_to_setup_mod_list_eutran = Some(DrbToSetupModListEutran::decode(data)?),
                33 => drb_to_modify_list_eutran = Some(DrbToModifyListEutran::decode(data)?),
                34 => drb_to_remove_list_eutran = Some(DrbToRemoveListEutran::decode(data)?),
                83 => {
                    subscriber_profile_i_dfor_rfp = Some(SubscriberProfileIDforRfp::decode(data)?)
                }
                84 => {
                    additional_rrm_priority_index = Some(AdditionalRrmPriorityIndex::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        Ok(Self {
            drb_to_setup_mod_list_eutran,
            drb_to_modify_list_eutran,
            drb_to_remove_list_eutran,
            subscriber_profile_i_dfor_rfp,
            additional_rrm_priority_index,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        if let Some(x) = &self.drb_to_setup_mod_list_eutran {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 51, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.drb_to_modify_list_eutran {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 33, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.drb_to_remove_list_eutran {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 34, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.subscriber_profile_i_dfor_rfp {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 83, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.additional_rrm_priority_index {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 84, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for EutranBearerContextModificationRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        EutranBearerContextModificationRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("EutranBearerContextModificationRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("EutranBearerContextModificationRequest"))
    }
}
// NgRanBearerContextModificationRequest
#[derive(Clone, Debug)]
pub struct NgRanBearerContextModificationRequest {
    pub pdu_session_resource_to_setup_mod_list: Option<PduSessionResourceToSetupModList>,
    pub pdu_session_resource_to_modify_list: Option<PduSessionResourceToModifyList>,
    pub pdu_session_resource_to_remove_list: Option<PduSessionResourceToRemoveList>,
}

impl NgRanBearerContextModificationRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut pdu_session_resource_to_setup_mod_list: Option<PduSessionResourceToSetupModList> =
            None;
        let mut pdu_session_resource_to_modify_list: Option<PduSessionResourceToModifyList> = None;
        let mut pdu_session_resource_to_remove_list: Option<PduSessionResourceToRemoveList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                56 => {
                    pdu_session_resource_to_setup_mod_list =
                        Some(PduSessionResourceToSetupModList::decode(data)?)
                }
                43 => {
                    pdu_session_resource_to_modify_list =
                        Some(PduSessionResourceToModifyList::decode(data)?)
                }
                44 => {
                    pdu_session_resource_to_remove_list =
                        Some(PduSessionResourceToRemoveList::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        Ok(Self {
            pdu_session_resource_to_setup_mod_list,
            pdu_session_resource_to_modify_list,
            pdu_session_resource_to_remove_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        if let Some(x) = &self.pdu_session_resource_to_setup_mod_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 56, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.pdu_session_resource_to_modify_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 43, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.pdu_session_resource_to_remove_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 44, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for NgRanBearerContextModificationRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        NgRanBearerContextModificationRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NgRanBearerContextModificationRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NgRanBearerContextModificationRequest"))
    }
}
// EutranBearerContextModificationResponse
#[derive(Clone, Debug)]
pub struct EutranBearerContextModificationResponse {
    pub drb_setup_mod_list_eutran: Option<DrbSetupModListEutran>,
    pub drb_failed_mod_list_eutran: Option<DrbFailedModListEutran>,
    pub drb_modified_list_eutran: Option<DrbModifiedListEutran>,
    pub drb_failed_to_modify_list_eutran: Option<DrbFailedToModifyListEutran>,
    pub retainability_measurements_info: Option<RetainabilityMeasurementsInfo>,
}

impl EutranBearerContextModificationResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut drb_setup_mod_list_eutran: Option<DrbSetupModListEutran> = None;
        let mut drb_failed_mod_list_eutran: Option<DrbFailedModListEutran> = None;
        let mut drb_modified_list_eutran: Option<DrbModifiedListEutran> = None;
        let mut drb_failed_to_modify_list_eutran: Option<DrbFailedToModifyListEutran> = None;
        let mut retainability_measurements_info: Option<RetainabilityMeasurementsInfo> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                52 => drb_setup_mod_list_eutran = Some(DrbSetupModListEutran::decode(data)?),
                53 => drb_failed_mod_list_eutran = Some(DrbFailedModListEutran::decode(data)?),
                39 => drb_modified_list_eutran = Some(DrbModifiedListEutran::decode(data)?),
                40 => {
                    drb_failed_to_modify_list_eutran =
                        Some(DrbFailedToModifyListEutran::decode(data)?)
                }
                85 => {
                    retainability_measurements_info =
                        Some(RetainabilityMeasurementsInfo::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        Ok(Self {
            drb_setup_mod_list_eutran,
            drb_failed_mod_list_eutran,
            drb_modified_list_eutran,
            drb_failed_to_modify_list_eutran,
            retainability_measurements_info,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        if let Some(x) = &self.drb_setup_mod_list_eutran {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 52, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.drb_failed_mod_list_eutran {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 53, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.drb_modified_list_eutran {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 39, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.drb_failed_to_modify_list_eutran {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.retainability_measurements_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 85, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for EutranBearerContextModificationResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        EutranBearerContextModificationResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("EutranBearerContextModificationResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("EutranBearerContextModificationResponse"))
    }
}
// NgRanBearerContextModificationResponse
#[derive(Clone, Debug)]
pub struct NgRanBearerContextModificationResponse {
    pub pdu_session_resource_setup_mod_list: Option<PduSessionResourceSetupModList>,
    pub pdu_session_resource_failed_mod_list: Option<PduSessionResourceFailedModList>,
    pub pdu_session_resource_modified_list: Option<PduSessionResourceModifiedList>,
    pub pdu_session_resource_failed_to_modify_list: Option<PduSessionResourceFailedToModifyList>,
    pub retainability_measurements_info: Option<RetainabilityMeasurementsInfo>,
}

impl NgRanBearerContextModificationResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut pdu_session_resource_setup_mod_list: Option<PduSessionResourceSetupModList> = None;
        let mut pdu_session_resource_failed_mod_list: Option<PduSessionResourceFailedModList> =
            None;
        let mut pdu_session_resource_modified_list: Option<PduSessionResourceModifiedList> = None;
        let mut pdu_session_resource_failed_to_modify_list: Option<
            PduSessionResourceFailedToModifyList,
        > = None;
        let mut retainability_measurements_info: Option<RetainabilityMeasurementsInfo> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                54 => {
                    pdu_session_resource_setup_mod_list =
                        Some(PduSessionResourceSetupModList::decode(data)?)
                }
                55 => {
                    pdu_session_resource_failed_mod_list =
                        Some(PduSessionResourceFailedModList::decode(data)?)
                }
                48 => {
                    pdu_session_resource_modified_list =
                        Some(PduSessionResourceModifiedList::decode(data)?)
                }
                49 => {
                    pdu_session_resource_failed_to_modify_list =
                        Some(PduSessionResourceFailedToModifyList::decode(data)?)
                }
                85 => {
                    retainability_measurements_info =
                        Some(RetainabilityMeasurementsInfo::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        Ok(Self {
            pdu_session_resource_setup_mod_list,
            pdu_session_resource_failed_mod_list,
            pdu_session_resource_modified_list,
            pdu_session_resource_failed_to_modify_list,
            retainability_measurements_info,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        if let Some(x) = &self.pdu_session_resource_setup_mod_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 54, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.pdu_session_resource_failed_mod_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 55, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.pdu_session_resource_modified_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 48, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.pdu_session_resource_failed_to_modify_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 49, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.retainability_measurements_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 85, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for NgRanBearerContextModificationResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        NgRanBearerContextModificationResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NgRanBearerContextModificationResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NgRanBearerContextModificationResponse"))
    }
}
// EutranBearerContextModificationRequired
#[derive(Clone, Debug)]
pub struct EutranBearerContextModificationRequired {
    pub drb_required_to_modify_list_eutran: Option<DrbRequiredToModifyListEutran>,
    pub drb_required_to_remove_list_eutran: Option<DrbRequiredToRemoveListEutran>,
}

impl EutranBearerContextModificationRequired {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut drb_required_to_modify_list_eutran: Option<DrbRequiredToModifyListEutran> = None;
        let mut drb_required_to_remove_list_eutran: Option<DrbRequiredToRemoveListEutran> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                35 => {
                    drb_required_to_modify_list_eutran =
                        Some(DrbRequiredToModifyListEutran::decode(data)?)
                }
                36 => {
                    drb_required_to_remove_list_eutran =
                        Some(DrbRequiredToRemoveListEutran::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        Ok(Self {
            drb_required_to_modify_list_eutran,
            drb_required_to_remove_list_eutran,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        if let Some(x) = &self.drb_required_to_modify_list_eutran {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 35, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.drb_required_to_remove_list_eutran {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 36, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for EutranBearerContextModificationRequired {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        EutranBearerContextModificationRequired::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("EutranBearerContextModificationRequired"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("EutranBearerContextModificationRequired"))
    }
}
// NgRanBearerContextModificationRequired
#[derive(Clone, Debug)]
pub struct NgRanBearerContextModificationRequired {
    pub pdu_session_resource_required_to_modify_list:
        Option<PduSessionResourceRequiredToModifyList>,
    pub pdu_session_resource_to_remove_list: Option<PduSessionResourceToRemoveList>,
}

impl NgRanBearerContextModificationRequired {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut pdu_session_resource_required_to_modify_list: Option<
            PduSessionResourceRequiredToModifyList,
        > = None;
        let mut pdu_session_resource_to_remove_list: Option<PduSessionResourceToRemoveList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                45 => {
                    pdu_session_resource_required_to_modify_list =
                        Some(PduSessionResourceRequiredToModifyList::decode(data)?)
                }
                44 => {
                    pdu_session_resource_to_remove_list =
                        Some(PduSessionResourceToRemoveList::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        Ok(Self {
            pdu_session_resource_required_to_modify_list,
            pdu_session_resource_to_remove_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        if let Some(x) = &self.pdu_session_resource_required_to_modify_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 45, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.pdu_session_resource_to_remove_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 44, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for NgRanBearerContextModificationRequired {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        NgRanBearerContextModificationRequired::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NgRanBearerContextModificationRequired"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NgRanBearerContextModificationRequired"))
    }
}
// EutranBearerContextModificationConfirm
#[derive(Clone, Debug)]
pub struct EutranBearerContextModificationConfirm {
    pub drb_confirm_modified_list_eutran: Option<DrbConfirmModifiedListEutran>,
}

impl EutranBearerContextModificationConfirm {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut drb_confirm_modified_list_eutran: Option<DrbConfirmModifiedListEutran> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                41 => {
                    drb_confirm_modified_list_eutran =
                        Some(DrbConfirmModifiedListEutran::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        Ok(Self {
            drb_confirm_modified_list_eutran,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        if let Some(x) = &self.drb_confirm_modified_list_eutran {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for EutranBearerContextModificationConfirm {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        EutranBearerContextModificationConfirm::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("EutranBearerContextModificationConfirm"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("EutranBearerContextModificationConfirm"))
    }
}
// NgRanBearerContextModificationConfirm
#[derive(Clone, Debug)]
pub struct NgRanBearerContextModificationConfirm {
    pub pdu_session_resource_confirm_modified_list: Option<PduSessionResourceConfirmModifiedList>,
}

impl NgRanBearerContextModificationConfirm {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut pdu_session_resource_confirm_modified_list: Option<
            PduSessionResourceConfirmModifiedList,
        > = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                50 => {
                    pdu_session_resource_confirm_modified_list =
                        Some(PduSessionResourceConfirmModifiedList::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        Ok(Self {
            pdu_session_resource_confirm_modified_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        if let Some(x) = &self.pdu_session_resource_confirm_modified_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 50, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for NgRanBearerContextModificationConfirm {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        NgRanBearerContextModificationConfirm::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NgRanBearerContextModificationConfirm"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NgRanBearerContextModificationConfirm"))
    }
}
// EutranGnbCuUpCounterCheckRequest
#[derive(Clone, Debug)]
pub struct EutranGnbCuUpCounterCheckRequest {
    pub drbs_subject_to_counter_check_list_eutran: DrbsSubjectToCounterCheckListEutran,
}

impl EutranGnbCuUpCounterCheckRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut drbs_subject_to_counter_check_list_eutran: Option<
            DrbsSubjectToCounterCheckListEutran,
        > = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                61 => {
                    drbs_subject_to_counter_check_list_eutran =
                        Some(DrbsSubjectToCounterCheckListEutran::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let drbs_subject_to_counter_check_list_eutran = drbs_subject_to_counter_check_list_eutran
            .ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE drbs_subject_to_counter_check_list_eutran"),
        ))?;
        Ok(Self {
            drbs_subject_to_counter_check_list_eutran,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.drbs_subject_to_counter_check_list_eutran.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 61, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for EutranGnbCuUpCounterCheckRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        EutranGnbCuUpCounterCheckRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("EutranGnbCuUpCounterCheckRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("EutranGnbCuUpCounterCheckRequest"))
    }
}
// NgRanGnbCuUpCounterCheckRequest
#[derive(Clone, Debug)]
pub struct NgRanGnbCuUpCounterCheckRequest {
    pub drbs_subject_to_counter_check_list_ng_ran: DrbsSubjectToCounterCheckListNgRan,
}

impl NgRanGnbCuUpCounterCheckRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut drbs_subject_to_counter_check_list_ng_ran: Option<
            DrbsSubjectToCounterCheckListNgRan,
        > = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                62 => {
                    drbs_subject_to_counter_check_list_ng_ran =
                        Some(DrbsSubjectToCounterCheckListNgRan::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let drbs_subject_to_counter_check_list_ng_ran = drbs_subject_to_counter_check_list_ng_ran
            .ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE drbs_subject_to_counter_check_list_ng_ran"),
        ))?;
        Ok(Self {
            drbs_subject_to_counter_check_list_ng_ran,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.drbs_subject_to_counter_check_list_ng_ran.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 62, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        aper::encode::encode_length_determinent(data, Some(0), Some(65535), false, num_ies)?;
        data.append_aligned(ies);
        Ok(())
    }
}

impl AperCodec for NgRanGnbCuUpCounterCheckRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        NgRanGnbCuUpCounterCheckRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NgRanGnbCuUpCounterCheckRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NgRanGnbCuUpCounterCheckRequest"))
    }
}
