%import common.WS
%import common.DIGIT

COMMENT:                (/--[^\n]*--/ | /--[^\n]*\n/) 
NEWLINE:                "\n"
%ignore WS
%ignore COMMENT
%ignore NEWLINE

IDENTIFIER:             ("a".."z" | "A".."Z" | DIGIT | "-")+
INTEGER:                "-"? "0" | "1".."9"("0".."9")*
_IDENTIFIER:            IDENTIFIER
_identifier:            IDENTIFIER
BOUND:                  INTEGER | IDENTIFIER
_OID:                   /{[^}]+}/
_PROTOCOL_IES:          /\w+-PROTOCOL-IES/
_IMPORTS:                /[^;]+;/
extension_marker:       "..." [","]

// For testability, we make the parts before and after the definitions optional
// This means we can just run small fragments through the grammar.
document:               [module _OID _begin ["IMPORTS" _IMPORTS]] _definitions ["END"]
module:                 IDENTIFIER
_begin:                 "DEFINITIONS AUTOMATIC TAGS ::=" "BEGIN" 

_PROCEDURE:             /.*-ELEMENTARY-PROCEDURE/

_definitions:           (ignored | procedure_def)+
procedure_def.2:        procedure_name _PROCEDURE "::=" "{" initiating successful? unsuccessful? procedure_code criticality "}"
procedure_name:         IDENTIFIER
initiating:             "INITIATING MESSAGE" IDENTIFIER
successful:             "SUCCESSFUL OUTCOME" IDENTIFIER
unsuccessful:           "UNSUCCESSFUL OUTCOME" IDENTIFIER
procedure_code:         "PROCEDURE CODE" IDENTIFIER
criticality:            "CRITICALITY" IDENTIFIER 

ignored:               _IDENTIFIER [_IDENTIFIER] "::=" [_IDENTIFIER] _nested_braces ["WITH SYNTAX" _nested_braces]

_comma_separated{x}:    x ("," x)* ","?
_items{x}:              "{" _comma_separated{x}? (extension_marker extended_items{x}?)? "}" 
extended_items{x}:      _comma_separated{x}

_nested_braces:         "{" (_nested_braces|_inner) * "}"
_inner:                  /[^\{\}]+/


