%import common.WS
%import common.DIGIT

COMMENT:                (/--[^\n]*--/ | /--[^\n]*\n/) 
NEWLINE:                "\n"
%ignore WS
%ignore COMMENT
%ignore NEWLINE

IDENTIFIER:             NONHYPHEN (NONHYPHEN|"-")*
NONHYPHEN:              ("a".."z" | "A".."Z" | DIGIT)
INTEGER:                "0" | "-"? "1".."9"("0".."9")*
_IDENTIFIER:            IDENTIFIER
_identifier:            IDENTIFIER
BOUND:                  INTEGER | IDENTIFIER
_OID:                   /{[^}]+}/
//_OBJECT_CLASS:          /\w+/
_IMPORTS:                /[^;]+;/
extension_marker:       "..." [","]
_size:                  "(" "SIZE" "(" _constraints ")" ")"
_constraints:           _range_options+
_range_options:         _range["|" _range] * [","]
_range:                 extension_marker | (BOUND [".." BOUND])        
named_values:           _nested_braces
_nested_braces:         "{" (_nested_braces|/[^\{\}]+/) * "}"

// For testability, we make the parts before and after the definitions optional
// This means we can just run small fragments through the grammar.
document:               _modules | _fragment
_modules.1:             (module_name [_OID] _begin ["IMPORTS" _IMPORTS] _definitions "END")+       
_fragment:              _definitions  
module_name:            IDENTIFIER
_begin:                 "DEFINITIONS AUTOMATIC TAGS ::=" "BEGIN" 

_definitions:           ( primitive_def 
                        | sequence_def 
                        | enum_def 
                        | choice_def 
                        | generic_choice_def
                        | constant_def 
                        | object_def 
                        | procedure_def 
                        | class_def
                        | top_level_enum_def
                        | class_instance)+
?assign:                IDENTIFIER "::="
primitive_def:           assign _primitive
sequence_def:           assign sequence
enum_def:               assign enumerated
choice_def:             assign choice
generic_choice_def:     IDENTIFIER type_parameter "::=" choice
constant_def:           IDENTIFIER _IDENTIFIER "::=" INTEGER
object_def.0:           IDENTIFIER _IDENTIFIER "::=" ies
//protocol_ies.1:         IDENTIFIER _PROTOCOL_IES "::=" ies

_comma_separated{x}:    x ("," x)* ","?
_items{x}:              "{" _comma_separated{x}? (extension_marker extended_items{x}?)? "}" 
extended_items{x}:      _comma_separated{_bracketed_group{x}}
_bracketed_group{x}:    ("[[" _comma_separated{x} "]]") | x

sequence_of:            "SEQUENCE" [_size] "OF" (_field_type | single_ie_container)
sequence:               "SEQUENCE" _items{_sequence_item}
_sequence_item:         optional_field | field | extension_container_field | private_ie_container_field | protocol_ies_field | single_ie_container | (empty_sequence_field "OPTIONAL")
optional_field.2:       _identifier _field_type ("OPTIONAL" | "DEFAULT" _identifier)
field.1:                _identifier _field_type

_empty_sequence.3:       "SEQUENCE" "{}"
empty_sequence_field.1:  _identifier _empty_sequence

enumerated.1:             "ENUMERATED" _items{enum_field}
enum_field:              _identifier

choice:                 "CHOICE" _items{_choice_item}
_choice_item:            choice_field | choice_field_ie_container | choice_field_ie_extension | empty_sequence_field
choice_field:           _identifier _field_type

integer:                "INTEGER" named_values? ["(" _constraints ")"]
printable_string:       "PrintableString" [_size]
visible_string:         "VisibleString" [_size]
utf8_string:            "UTF8String" [_size]
bit_string.2:           "BIT STRING" [_size]
null:                   "NULL"
octet_string.2:         ("OCTET STRING" [_size | "(CONTAINING" IDENTIFIER ")"]) | "OBJECT IDENTIFIER"
boolean:                "BOOLEAN"
_inttype:               IDENTIFIER
_objecttype:            IDENTIFIER

_primitive:             sequence_of
                        | integer
                        | printable_string
                        | visible_string
                        | utf8_string
                        | bit_string 
                        | octet_string
                        | boolean
                        | null
                        | _identifier 
                        | type_parameterized_identifier? 
_field_type:            _primitive | enumerated | sequence | choice
type_parameter:         "{" _identifier "}"
type_parameterized_identifier: _identifier type_parameter

// XXAP IE and protocol containers
_protocol_ie_container: "ProtocolIE-Container" "{" "{" _identifier "}" "}"
single_ie_container.1:  "ProtocolIE-SingleContainer" "{" "{" _identifier "}" "}"
_private_ie_container:  "PrivateIE-Container" "{" "{" _identifier "}" "}" "OPTIONAL"? ","?
_extension_container:   "ProtocolExtensionContainer" "{" "{" _identifier "}" "}" "OPTIONAL"? ","?

extension_container_field.0:             _IDENTIFIER _extension_container
choice_field_ie_extension:               _identifier single_ie_container
choice_field_ie_container:               _identifier _protocol_ie_container
private_ie_container_field.0:            _identifier _private_ie_container
protocol_ies_field.1:                    "protocolIEs" _protocol_ie_container

ies:                    "{" (ie | optional_ie)* [","] extension_marker? "}"
_ie{p}:                 "{" "ID" _identifier "CRITICALITY" _identifier  ("TYPE" | "EXTENSION") _field_type+ "PRESENCE" p "}" ["|" | ","]
optional_ie:            _ie{"optional"} | _ie{"conditional"}
ie:                      _ie{"mandatory"}

// XXAP procedures
family:                 /\w*-ELEMENTARY-PROCEDURE/
procedure_def.2:        procedure_name family "::=" "{" initiating successful? unsuccessful? procedure_code criticality "}"
procedure_name:         IDENTIFIER
initiating:             "INITIATING MESSAGE" IDENTIFIER
successful:             "SUCCESSFUL OUTCOME" IDENTIFIER
unsuccessful:           "UNSUCCESSFUL OUTCOME" IDENTIFIER
procedure_code:         "PROCEDURE CODE" IDENTIFIER
criticality:            "CRITICALITY" IDENTIFIER 

class_def:              IDENTIFIER "::=" "CLASS" _nested_braces "WITH SYNTAX" _nested_braces
top_level_enum_def.2:   ("InitiatingMessage" | "SuccessfulOutcome" | "UnsuccessfulOutcome") "::=" "SEQUENCE" _nested_braces 
class_instance:         IDENTIFIER IDENTIFIER "::=" _nested_braces