#!/usr/bin/env python3

import os
from rust_interpreter import generate_structs
from constants import get_constants_from_file

COPYRIGHT = "// Copyright (c) Nicholas Larkin\n"
AUTOGENERATED = "// Autogenerated from "
USE_ASN1 = """\
    use asn1_codecs::aper::{self, AperCodec, AperCodecData, AperCodecError};
"""
USE_BITSTRING = """\
use bitvec::prelude::*;
pub type BitString = BitVec<Msb0, u8>;
"""
USE_NUM_ENUM = """\
#[allow(unused_imports)]
use num_enum::TryFromPrimitive;
"""
USE_COMMON = "use super::common::*;\n"
USE_IES = "use super::ies::*;\n"
USE_PDUS = """\
use crate::common::Criticality;
use super::pdu::*;
"""


def generate(protocol):
    def output_filename(filename):
        return "../../" + protocol.lower() + "/src/" + filename

    def input_filename(filename_part):
        f = protocol.upper() + "-" + filename_part + ".asn"
        print("Processing " + f)
        return f

    def input_file_path(filename):
        return protocol.lower() + "/asn1/" + filename

    constants = get_constants_from_file(
        input_file_path(input_filename("Constants")))

    def generate_file(outfile, infile, header):
        i = input_filename(infile)
        out = output_filename(outfile)
        f = open(out, "w")
        f.write(COPYRIGHT + AUTOGENERATED + i + "\n")
        f.write(header + "\n\n")
        f.write(generate_structs(input_file_path(i), constants))
        f.close()
        os.system('rustfmt ' + out)

    generate_file("top_pdu.rs", "PDU-Descriptions",
                  USE_ASN1 + USE_PDUS)
    generate_file("common.rs", "CommonDataTypes",
                  USE_ASN1 + USE_BITSTRING + USE_NUM_ENUM)
    generate_file("ies.rs", "IEs", USE_COMMON +
                  USE_ASN1 + USE_BITSTRING + USE_NUM_ENUM)
    generate_file("pdu.rs", "PDU-Contents", USE_COMMON +
                  USE_ASN1 + USE_BITSTRING + USE_NUM_ENUM + USE_IES)


generate("f1ap")
generate("ngap")
