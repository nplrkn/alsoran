#!/usr/bin/env python3

import os
from rust_interpreter2 import generate_structs
from constants import get_constants_from_file
# from pdu import generate_pdus

COPYRIGHT = "// Copyright (c) Nicholas Larkin\n"
AUTOGENERATED = "// Autogenerated from "
USE_ASN1 = """
use bitvec::prelude::*;
pub type BitString = BitVec<Msb0, u8>;
use asn1_codecs::aper::{self, AperCodec, AperCodecData, AperCodecError};
"""
USE_NUM_ENUM = """\
use num_enum::TryFromPrimitive;
"""
USE_COMMON = "use super::common::*;\n"
USE_IES = "use super::ies::*;"


def generate(protocol):
    protocol_lower = protocol.lower()
    protocol_upper = protocol.upper()

    def output_filename(filename):
        return protocol_lower + "/src/" + filename

    def input_filename(filename_part):
        f = protocol_upper + "-" + filename_part + ".asn"
        print("Processing " + f)
        return f

    def input_file_path(filename):
        return protocol_lower + "/asn1/" + filename

    out = output_filename("common.rs")
    f = open(out, "w")
    f.write(COPYRIGHT)
    f.write("""
pub mod common;
pub mod ies;
pub mod pdu;
""")
    close_and_format(f, out)

    out = output_filename("common.rs")
    f = open(out, "w")
    i = input_filename("CommonDataTypes")
    f.write(COPYRIGHT + AUTOGENERATED + i +
            USE_ASN1 + USE_NUM_ENUM + "\n\n")
    f.write(generate_structs(input_file_path(i)))
    close_and_format(f, out)

    i = input_filename("Constants")
    constants = get_constants_from_file(input_file_path(i))

    out = output_filename("ies.rs")
    f = open(out, "w")
    i = input_filename("IEs")
    f.write(COPYRIGHT + AUTOGENERATED + i +
            "\n" + USE_COMMON + USE_ASN1 + USE_NUM_ENUM + "\n")
    f.write(generate_structs(input_file_path(i), constants))
    close_and_format(f, out)

    out = output_filename("pdu.rs")
    f = open(out, "w")
    i = input_filename("PDU-Contents")
    f.write(COPYRIGHT
            + AUTOGENERATED
            + i
            + "\n"
            + USE_ASN1
            + USE_COMMON
            + USE_IES
            + "\n\n")
    f.write(generate_structs(input_file_path(i), constants))
    close_and_format(f, out)


def close_and_format(file, filename):
    file.close
    os.system('rustfmt ' + filename)


generate("f1ap")
generate("ngap")
