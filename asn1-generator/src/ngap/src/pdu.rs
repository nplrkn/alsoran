// Copyright (c) Nicholas Larkin
// Autogenerated from NGAP-PDU-Contents.asn

use asn1_codecs::aper::{self, AperCodec, AperCodecData, AperCodecError};
use bitvec::prelude::*;
pub type BitString = BitVec<u8, Msb0>;
use super::common::*;
use super::ies::*;

// PduSessionResourceSetupRequest
#[derive(Clone)]
pub struct PduSessionResourceSetupRequest {
    pub amf_ue_ngap_id: AmfUeNgapId,
    pub ran_paging_priority: Option<Vec<u8>>,
}

impl AperCodec for PduSessionResourceSetupRequest {
    type Output = PduSessionResourceSetupRequest;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut amf_ue_ngap_id: Option<AmfUeNgapId> = None;
        let mut ran_paging_priority: Option<Vec<u8>> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                10 => {
                    amf_ue_ngap_id = Some(AmfUeNgapId::decode(data)?);
                }
                83 => {
                    ran_paging_priority =
                        Some(aper::decode::decode_octetstring(data, None, None, false)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let amf_ue_ngap_id = amf_ue_ngap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE amf_ue_ngap_id"
        )))?;
        Ok(Self {
            amf_ue_ngap_id,
            ran_paging_priority,
        })
    }
}
