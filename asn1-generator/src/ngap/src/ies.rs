// Copyright (c) Nicholas Larkin
// Autogenerated from NGAP-IEs.asn
use super::common::*;

use bitvec::prelude::*;
pub type BitString = BitVec<u8, Msb0>;

// AdditionalDluptnlInformationForHoList
#[derive(Clone)]
pub struct AdditionalDluptnlInformationForHoList(pub Vec<AdditionalDluptnlInformationForHoItem>);

// AdditionalDluptnlInformationForHoItem
#[derive(Clone)]
pub struct AdditionalDluptnlInformationForHoItem {
    pub additional_dl_ngu_up_tnl_information: UpTransportLayerInformation,
    pub additional_qos_flow_setup_response_list: QosFlowListWithDataForwarding,
    pub additional_dl_forwarding_uptnl_information: Option<UpTransportLayerInformation>,
}

// AdditionalQosFlowInformation
#[derive(Clone, Copy)]
pub enum AdditionalQosFlowInformation {
    MoreLikely,
}

// AllocationAndRetentionPriority
#[derive(Clone)]
pub struct AllocationAndRetentionPriority {
    pub priority_level_arp: PriorityLevelArp,
    pub pre_emption_capability: PreEmptionCapability,
    pub pre_emption_vulnerability: PreEmptionVulnerability,
}

// AllowedCagListPerPlmn
#[derive(Clone)]
pub struct AllowedCagListPerPlmn(pub Vec<CagId>);

// AllowedNssai
#[derive(Clone)]
pub struct AllowedNssai(pub Vec<AllowedNssaiItem>);

// AllowedNssaiItem
#[derive(Clone)]
pub struct AllowedNssaiItem {
    pub s_nssai: SNssai,
}

// AllowedPniNpnList
#[derive(Clone)]
pub struct AllowedPniNpnList(pub Vec<AllowedPniNpnItem>);

// AllowedPniNpnItem
#[derive(Clone)]
pub struct AllowedPniNpnItem {
    pub plmn_identity: PlmnIdentity,
    pub pni_npn_restricted: PniNpnRestricted,
    pub allowed_cag_list_per_plmn: AllowedCagListPerPlmn,
}

// AllowedTaCs
#[derive(Clone)]
pub struct AllowedTaCs(pub Vec<Tac>);

// AlternativeQosParaSetIndex
#[derive(Clone)]
pub struct AlternativeQosParaSetIndex(pub u8);

// AlternativeQosParaSetNotifyIndex
#[derive(Clone)]
pub struct AlternativeQosParaSetNotifyIndex(pub u8);

// AlternativeQosParaSetList
#[derive(Clone)]
pub struct AlternativeQosParaSetList(pub Vec<AlternativeQosParaSetItem>);

// AlternativeQosParaSetItem
#[derive(Clone)]
pub struct AlternativeQosParaSetItem {
    pub alternative_qos_para_set_index: AlternativeQosParaSetIndex,
    pub guaranteed_flow_bit_rate_dl: Option<BitRate>,
    pub guaranteed_flow_bit_rate_ul: Option<BitRate>,
    pub packet_delay_budget: Option<PacketDelayBudget>,
    pub packet_error_rate: Option<PacketErrorRate>,
}

// AmfName
#[derive(Clone)]
pub struct AmfName(pub String);

// AmfNameVisibleString
#[derive(Clone)]
pub struct AmfNameVisibleString(pub String);

// AmfNameUtf8String
#[derive(Clone)]
pub struct AmfNameUtf8String(pub String);

// AmfPagingTarget
#[derive(Clone)]
pub enum AmfPagingTarget {
    GlobalRanNodeId(GlobalRanNodeId),
    Tai(Tai),
}

// AmfPointer
#[derive(Clone)]
pub struct AmfPointer(pub BitString);

// AmfRegionId
#[derive(Clone)]
pub struct AmfRegionId(pub BitString);

// AmfSetId
#[derive(Clone)]
pub struct AmfSetId(pub BitString);

// AmfTnlAssociationSetupList
#[derive(Clone)]
pub struct AmfTnlAssociationSetupList(pub Vec<AmfTnlAssociationSetupItem>);

// AmfTnlAssociationSetupItem
#[derive(Clone)]
pub struct AmfTnlAssociationSetupItem {
    pub amf_tnl_association_address: CpTransportLayerInformation,
}

// AmfTnlAssociationToAddList
#[derive(Clone)]
pub struct AmfTnlAssociationToAddList(pub Vec<AmfTnlAssociationToAddItem>);

// AmfTnlAssociationToAddItem
#[derive(Clone)]
pub struct AmfTnlAssociationToAddItem {
    pub amf_tnl_association_address: CpTransportLayerInformation,
    pub tnl_association_usage: Option<TnlAssociationUsage>,
    pub tnl_address_weight_factor: TnlAddressWeightFactor,
}

// AmfTnlAssociationToRemoveList
#[derive(Clone)]
pub struct AmfTnlAssociationToRemoveList(pub Vec<AmfTnlAssociationToRemoveItem>);

// AmfTnlAssociationToRemoveItem
#[derive(Clone)]
pub struct AmfTnlAssociationToRemoveItem {
    pub amf_tnl_association_address: CpTransportLayerInformation,
}

// AmfTnlAssociationToUpdateList
#[derive(Clone)]
pub struct AmfTnlAssociationToUpdateList(pub Vec<AmfTnlAssociationToUpdateItem>);

// AmfTnlAssociationToUpdateItem
#[derive(Clone)]
pub struct AmfTnlAssociationToUpdateItem {
    pub amf_tnl_association_address: CpTransportLayerInformation,
    pub tnl_association_usage: Option<TnlAssociationUsage>,
    pub tnl_address_weight_factor: Option<TnlAddressWeightFactor>,
}

// AmfUeNgapId
#[derive(Clone)]
pub struct AmfUeNgapId(pub u64);

// AreaOfInterest
#[derive(Clone)]
pub struct AreaOfInterest {
    pub area_of_interest_tai_list: Option<AreaOfInterestTaiList>,
    pub area_of_interest_cell_list: Option<AreaOfInterestCellList>,
    pub area_of_interest_ran_node_list: Option<AreaOfInterestRanNodeList>,
}

// AreaOfInterestCellList
#[derive(Clone)]
pub struct AreaOfInterestCellList(pub Vec<AreaOfInterestCellItem>);

// AreaOfInterestCellItem
#[derive(Clone)]
pub struct AreaOfInterestCellItem {
    pub ngran_cgi: NgranCgi,
}

// AreaOfInterestList
#[derive(Clone)]
pub struct AreaOfInterestList(pub Vec<AreaOfInterestItem>);

// AreaOfInterestItem
#[derive(Clone)]
pub struct AreaOfInterestItem {
    pub area_of_interest: AreaOfInterest,
    pub location_reporting_reference_id: LocationReportingReferenceId,
}

// AreaOfInterestRanNodeList
#[derive(Clone)]
pub struct AreaOfInterestRanNodeList(pub Vec<AreaOfInterestRanNodeItem>);

// AreaOfInterestRanNodeItem
#[derive(Clone)]
pub struct AreaOfInterestRanNodeItem {
    pub global_ran_node_id: GlobalRanNodeId,
}

// AreaOfInterestTaiList
#[derive(Clone)]
pub struct AreaOfInterestTaiList(pub Vec<AreaOfInterestTaiItem>);

// AreaOfInterestTaiItem
#[derive(Clone)]
pub struct AreaOfInterestTaiItem {
    pub tai: Tai,
}

// AssistanceDataForPaging
#[derive(Clone)]
pub struct AssistanceDataForPaging {
    pub assistance_data_for_recommended_cells: Option<AssistanceDataForRecommendedCells>,
    pub paging_attempt_information: Option<PagingAttemptInformation>,
}

// AssistanceDataForRecommendedCells
#[derive(Clone)]
pub struct AssistanceDataForRecommendedCells {
    pub recommended_cells_for_paging: RecommendedCellsForPaging,
}

// AssociatedQosFlowList
#[derive(Clone)]
pub struct AssociatedQosFlowList(pub Vec<AssociatedQosFlowItem>);

// AssociatedQosFlowItem
#[derive(Clone)]
pub struct AssociatedQosFlowItem {
    pub qos_flow_identifier: QosFlowIdentifier,
    pub qos_flow_mapping_indication: Option<QosFlowMappingIndication>,
}

// AuthenticatedIndication
#[derive(Clone, Copy)]
pub enum AuthenticatedIndication {
    True,
}

// AveragingWindow
#[derive(Clone)]
pub struct AveragingWindow(pub u16);

// AreaScopeOfMdtNr
#[derive(Clone)]
pub enum AreaScopeOfMdtNr {
    CellBased(CellBasedMdtNr),
    TaBased(TaBasedMdt),
    PlmnWide,
    TaiBased(TaiBasedMdt),
}

// AreaScopeOfMdtEutra
#[derive(Clone)]
pub enum AreaScopeOfMdtEutra {
    CellBased(CellBasedMdtEutra),
    TaBased(TaBasedMdt),
    PlmnWide,
    TaiBased(TaiBasedMdt),
}

// AreaScopeOfNeighCellsList
#[derive(Clone)]
pub struct AreaScopeOfNeighCellsList(pub Vec<AreaScopeOfNeighCellsItem>);

// AreaScopeOfNeighCellsItem
#[derive(Clone)]
pub struct AreaScopeOfNeighCellsItem {
    pub nr_frequency_info: NrFrequencyInfo,
    pub pci_list_for_mdt: Option<PciListForMdt>,
}

// BitRate
#[derive(Clone)]
pub struct BitRate(pub u64);

// BroadcastCancelledAreaList
#[derive(Clone)]
pub enum BroadcastCancelledAreaList {
    CellIdCancelledEutra(CellIdCancelledEutra),
    TaiCancelledEutra(TaiCancelledEutra),
    EmergencyAreaIdCancelledEutra(EmergencyAreaIdCancelledEutra),
    CellIdCancelledNr(CellIdCancelledNr),
    TaiCancelledNr(TaiCancelledNr),
    EmergencyAreaIdCancelledNr(EmergencyAreaIdCancelledNr),
}

// BroadcastCompletedAreaList
#[derive(Clone)]
pub enum BroadcastCompletedAreaList {
    CellIdBroadcastEutra(CellIdBroadcastEutra),
    TaiBroadcastEutra(TaiBroadcastEutra),
    EmergencyAreaIdBroadcastEutra(EmergencyAreaIdBroadcastEutra),
    CellIdBroadcastNr(CellIdBroadcastNr),
    TaiBroadcastNr(TaiBroadcastNr),
    EmergencyAreaIdBroadcastNr(EmergencyAreaIdBroadcastNr),
}

// BroadcastPlmnList
#[derive(Clone)]
pub struct BroadcastPlmnList(pub Vec<BroadcastPlmnItem>);

// BroadcastPlmnItem
#[derive(Clone)]
pub struct BroadcastPlmnItem {
    pub plmn_identity: PlmnIdentity,
    pub tai_slice_support_list: SliceSupportList,
}

// BluetoothMeasurementConfiguration
#[derive(Clone)]
pub struct BluetoothMeasurementConfiguration {
    pub bluetooth_meas_config: BluetoothMeasConfig,
    pub bluetooth_meas_config_name_list: Option<BluetoothMeasConfigNameList>,
    pub bt_rssi: Option<BtRssi>,
}

// BluetoothMeasConfigNameList
#[derive(Clone)]
pub struct BluetoothMeasConfigNameList(pub Vec<BluetoothMeasConfigNameItem>);

// BluetoothMeasConfigNameItem
#[derive(Clone)]
pub struct BluetoothMeasConfigNameItem {
    pub bluetooth_name: BluetoothName,
}

// BluetoothMeasConfig
#[derive(Clone, Copy)]
pub enum BluetoothMeasConfig {
    Setup,
}

// BluetoothName
#[derive(Clone)]
pub struct BluetoothName(pub Vec<u8>);

// BurstArrivalTime
#[derive(Clone)]
pub struct BurstArrivalTime(pub Vec<u8>);

// CagId
#[derive(Clone)]
pub struct CagId(pub BitString);

// CancelAllWarningMessages
#[derive(Clone, Copy)]
pub enum CancelAllWarningMessages {
    True,
}

// CancelledCellsInEaiEutra
#[derive(Clone)]
pub struct CancelledCellsInEaiEutra(pub Vec<CancelledCellsInEaiEutraItem>);

// CancelledCellsInEaiEutraItem
#[derive(Clone)]
pub struct CancelledCellsInEaiEutraItem {
    pub eutra_cgi: EutraCgi,
    pub number_of_broadcasts: NumberOfBroadcasts,
}

// CancelledCellsInEaiNr
#[derive(Clone)]
pub struct CancelledCellsInEaiNr(pub Vec<CancelledCellsInEaiNrItem>);

// CancelledCellsInEaiNrItem
#[derive(Clone)]
pub struct CancelledCellsInEaiNrItem {
    pub nr_cgi: NrCgi,
    pub number_of_broadcasts: NumberOfBroadcasts,
}

// CancelledCellsInTaiEutra
#[derive(Clone)]
pub struct CancelledCellsInTaiEutra(pub Vec<CancelledCellsInTaiEutraItem>);

// CancelledCellsInTaiEutraItem
#[derive(Clone)]
pub struct CancelledCellsInTaiEutraItem {
    pub eutra_cgi: EutraCgi,
    pub number_of_broadcasts: NumberOfBroadcasts,
}

// CancelledCellsInTaiNr
#[derive(Clone)]
pub struct CancelledCellsInTaiNr(pub Vec<CancelledCellsInTaiNrItem>);

// CancelledCellsInTaiNrItem
#[derive(Clone)]
pub struct CancelledCellsInTaiNrItem {
    pub nr_cgi: NrCgi,
    pub number_of_broadcasts: NumberOfBroadcasts,
}

// CandidateCellList
#[derive(Clone)]
pub struct CandidateCellList(pub Vec<CandidateCellItem>);

// CandidateCellItem
#[derive(Clone)]
pub struct CandidateCellItem {
    pub candidate_cell: CandidateCell,
}

// CandidateCell
#[derive(Clone)]
pub enum CandidateCell {
    CandidateCgi(CandidateCellId),
    CandidatePci(CandidatePci),
}

// CandidateCellId
#[derive(Clone)]
pub struct CandidateCellId {
    pub candidate_cell_id: NrCgi,
}

// CandidatePci
#[derive(Clone)]
pub struct CandidatePci {
    pub candidate_pci: u16,
    pub candidate_nrarfcn: u32,
}

// Cause
#[derive(Clone)]
pub enum Cause {
    RadioNetwork(CauseRadioNetwork),
    Transport(CauseTransport),
    Nas(CauseNas),
    Protocol(CauseProtocol),
    Misc(CauseMisc),
}

// CauseMisc
#[derive(Clone, Copy)]
pub enum CauseMisc {
    ControlProcessingOverload,
    NotEnoughUserPlaneProcessingResources,
    HardwareFailure,
    OmIntervention,
    UnknownPlmnOrSnpn,
    Unspecified,
}

// CauseNas
#[derive(Clone, Copy)]
pub enum CauseNas {
    NormalRelease,
    AuthenticationFailure,
    Deregister,
    Unspecified,
}

// CauseProtocol
#[derive(Clone, Copy)]
pub enum CauseProtocol {
    TransferSyntaxError,
    AbstractSyntaxErrorReject,
    AbstractSyntaxErrorIgnoreAndNotify,
    MessageNotCompatibleWithReceiverState,
    SemanticError,
    AbstractSyntaxErrorFalselyConstructedMessage,
    Unspecified,
}

// CauseRadioNetwork
#[derive(Clone, Copy)]
pub enum CauseRadioNetwork {
    Unspecified,
    TxnrelocoverallExpiry,
    SuccessfulHandover,
    ReleaseDueToNgranGeneratedReason,
    ReleaseDueTo5gcGeneratedReason,
    HandoverCancelled,
    PartialHandover,
    HoFailureInTarget5gcNgranNodeOrTargetSystem,
    HoTargetNotAllowed,
    TngrelocoverallExpiry,
    TngrelocprepExpiry,
    CellNotAvailable,
    UnknownTargetId,
    NoRadioResourcesAvailableInTargetCell,
    UnknownLocalUeNgapId,
    InconsistentRemoteUeNgapId,
    HandoverDesirableForRadioReason,
    TimeCriticalHandover,
    ResourceOptimisationHandover,
    ReduceLoadInServingCell,
    UserInactivity,
    RadioConnectionWithUeLost,
    RadioResourcesNotAvailable,
    InvalidQosCombination,
    FailureInRadioInterfaceProcedure,
    InteractionWithOtherProcedure,
    UnknownPduSessionId,
    UnkownQosFlowId,
    MultiplePduSessionIdInstances,
    MultipleQosFlowIdInstances,
    EncryptionAndOrIntegrityProtectionAlgorithmsNotSupported,
    NgIntraSystemHandoverTriggered,
    NgInterSystemHandoverTriggered,
    XnHandoverTriggered,
    NotSupported5qiValue,
    UeContextTransfer,
    ImsVoiceEpsFallbackOrRatFallbackTriggered,
    UpIntegrityProtectionNotPossible,
    UpConfidentialityProtectionNotPossible,
    SliceNotSupported,
    UeInRrcInactiveStateNotReachable,
    Redirection,
    ResourcesNotAvailableForTheSlice,
    UeMaxIntegrityProtectedDataRateReason,
    ReleaseDueToCnDetectedMobility,
}

// CauseTransport
#[derive(Clone, Copy)]
pub enum CauseTransport {
    TransportResourceUnavailable,
    Unspecified,
}

// CellCagInformation
#[derive(Clone)]
pub struct CellCagInformation {
    pub ngran_cgi: NgranCgi,
    pub cell_cag_list: CellCagList,
}

// CellCagList
#[derive(Clone)]
pub struct CellCagList(pub Vec<CagId>);

// CellIdBroadcastEutra
#[derive(Clone)]
pub struct CellIdBroadcastEutra(pub Vec<CellIdBroadcastEutraItem>);

// CellIdBroadcastEutraItem
#[derive(Clone)]
pub struct CellIdBroadcastEutraItem {
    pub eutra_cgi: EutraCgi,
}

// CellIdBroadcastNr
#[derive(Clone)]
pub struct CellIdBroadcastNr(pub Vec<CellIdBroadcastNrItem>);

// CellIdBroadcastNrItem
#[derive(Clone)]
pub struct CellIdBroadcastNrItem {
    pub nr_cgi: NrCgi,
}

// CellIdCancelledEutra
#[derive(Clone)]
pub struct CellIdCancelledEutra(pub Vec<CellIdCancelledEutraItem>);

// CellIdCancelledEutraItem
#[derive(Clone)]
pub struct CellIdCancelledEutraItem {
    pub eutra_cgi: EutraCgi,
    pub number_of_broadcasts: NumberOfBroadcasts,
}

// CellIdCancelledNr
#[derive(Clone)]
pub struct CellIdCancelledNr(pub Vec<CellIdCancelledNrItem>);

// CellIdCancelledNrItem
#[derive(Clone)]
pub struct CellIdCancelledNrItem {
    pub nr_cgi: NrCgi,
    pub number_of_broadcasts: NumberOfBroadcasts,
}

// CellIdListForRestart
#[derive(Clone)]
pub enum CellIdListForRestart {
    EutraCgiListforRestart(EutraCgiList),
    NrCgiListforRestart(NrCgiList),
}

// CellSize
#[derive(Clone, Copy)]
pub enum CellSize {
    Verysmall,
    Small,
    Medium,
    Large,
}

// CellType
#[derive(Clone)]
pub struct CellType {
    pub cell_size: CellSize,
}

// CEmodeBSupportIndicator
#[derive(Clone, Copy)]
pub enum CEmodeBSupportIndicator {
    Supported,
}

// CEmodeBrestricted
#[derive(Clone, Copy)]
pub enum CEmodeBrestricted {
    Restricted,
    NotRestricted,
}

// CnAssistedRanTuning
#[derive(Clone)]
pub struct CnAssistedRanTuning {
    pub expected_ue_behaviour: Option<ExpectedUeBehaviour>,
}

// CnTypeRestrictionsForEquivalent
#[derive(Clone)]
pub struct CnTypeRestrictionsForEquivalent(pub Vec<CnTypeRestrictionsForEquivalentItem>);

// CnTypeRestrictionsForEquivalentItem
#[derive(Clone)]
pub struct CnTypeRestrictionsForEquivalentItem {
    pub plmn_identity: PlmnIdentity,
    pub cn_type: CnType,
}

// CnTypeRestrictionsForServing
#[derive(Clone, Copy)]
pub enum CnTypeRestrictionsForServing {
    EpcForbidden,
}

// CommonNetworkInstance
#[derive(Clone)]
pub struct CommonNetworkInstance(pub Vec<u8>);

// CompletedCellsInEaiEutra
#[derive(Clone)]
pub struct CompletedCellsInEaiEutra(pub Vec<CompletedCellsInEaiEutraItem>);

// CompletedCellsInEaiEutraItem
#[derive(Clone)]
pub struct CompletedCellsInEaiEutraItem {
    pub eutra_cgi: EutraCgi,
}

// CompletedCellsInEaiNr
#[derive(Clone)]
pub struct CompletedCellsInEaiNr(pub Vec<CompletedCellsInEaiNrItem>);

// CompletedCellsInEaiNrItem
#[derive(Clone)]
pub struct CompletedCellsInEaiNrItem {
    pub nr_cgi: NrCgi,
}

// CompletedCellsInTaiEutra
#[derive(Clone)]
pub struct CompletedCellsInTaiEutra(pub Vec<CompletedCellsInTaiEutraItem>);

// CompletedCellsInTaiEutraItem
#[derive(Clone)]
pub struct CompletedCellsInTaiEutraItem {
    pub eutra_cgi: EutraCgi,
}

// CompletedCellsInTaiNr
#[derive(Clone)]
pub struct CompletedCellsInTaiNr(pub Vec<CompletedCellsInTaiNrItem>);

// CompletedCellsInTaiNrItem
#[derive(Clone)]
pub struct CompletedCellsInTaiNrItem {
    pub nr_cgi: NrCgi,
}

// ConcurrentWarningMessageInd
#[derive(Clone, Copy)]
pub enum ConcurrentWarningMessageInd {
    True,
}

// ConfidentialityProtectionIndication
#[derive(Clone, Copy)]
pub enum ConfidentialityProtectionIndication {
    Required,
    Preferred,
    NotNeeded,
}

// ConfidentialityProtectionResult
#[derive(Clone, Copy)]
pub enum ConfidentialityProtectionResult {
    Performed,
    NotPerformed,
}

// ConfiguredTacIndication
#[derive(Clone, Copy)]
pub enum ConfiguredTacIndication {
    True,
}

// CoreNetworkAssistanceInformationForInactive
#[derive(Clone)]
pub struct CoreNetworkAssistanceInformationForInactive {
    pub ue_identity_index_value: UeIdentityIndexValue,
    pub ue_specific_drx: Option<PagingDrx>,
    pub periodic_registration_update_timer: PeriodicRegistrationUpdateTimer,
    pub mico_mode_indication: Option<MicoModeIndication>,
    pub tai_list_for_inactive: TaiListForInactive,
    pub expected_ue_behaviour: Option<ExpectedUeBehaviour>,
}

// CountValueForPdcpSn12
#[derive(Clone)]
pub struct CountValueForPdcpSn12 {
    pub pdcp_sn12: u16,
    pub hfn_pdcp_sn12: u32,
}

// CountValueForPdcpSn18
#[derive(Clone)]
pub struct CountValueForPdcpSn18 {
    pub pdcp_sn18: u32,
    pub hfn_pdcp_sn18: u16,
}

// CoverageEnhancementLevel
#[derive(Clone)]
pub struct CoverageEnhancementLevel(pub Vec<u8>);

// CpTransportLayerInformation
#[derive(Clone)]
pub enum CpTransportLayerInformation {
    EndpointIpAddress(TransportLayerAddress),
}

// CriticalityDiagnostics
#[derive(Clone)]
pub struct CriticalityDiagnostics {
    pub procedure_code: Option<ProcedureCode>,
    pub triggering_message: Option<TriggeringMessage>,
    pub procedure_criticality: Option<Criticality>,
    pub i_es_criticality_diagnostics: Option<CriticalityDiagnosticsIeList>,
}

// CriticalityDiagnosticsIeList
#[derive(Clone)]
pub struct CriticalityDiagnosticsIeList(pub Vec<CriticalityDiagnosticsIeItem>);

// CriticalityDiagnosticsIeItem
#[derive(Clone)]
pub struct CriticalityDiagnosticsIeItem {
    pub ie_criticality: Criticality,
    pub ie_id: ProtocolIeId,
    pub type_of_error: TypeOfError,
}

// CellBasedMdtNr
#[derive(Clone)]
pub struct CellBasedMdtNr {
    pub cell_id_listfor_mdt: CellIdListforMdtNr,
}

// CellIdListforMdtNr
#[derive(Clone)]
pub struct CellIdListforMdtNr(pub Vec<NrCgi>);

// CellBasedMdtEutra
#[derive(Clone)]
pub struct CellBasedMdtEutra {
    pub cell_id_listfor_mdt: CellIdListforMdtEutra,
}

// CellIdListforMdtEutra
#[derive(Clone)]
pub struct CellIdListforMdtEutra(pub Vec<EutraCgi>);

// DataCodingScheme
#[derive(Clone)]
pub struct DataCodingScheme(pub BitString);

// DataForwardingAccepted
#[derive(Clone, Copy)]
pub enum DataForwardingAccepted {
    DataForwardingAccepted,
}

// DataForwardingNotPossible
#[derive(Clone, Copy)]
pub enum DataForwardingNotPossible {
    DataForwardingNotPossible,
}

// DataForwardingResponseDrbList
#[derive(Clone)]
pub struct DataForwardingResponseDrbList(pub Vec<DataForwardingResponseDrbItem>);

// DataForwardingResponseDrbItem
#[derive(Clone)]
pub struct DataForwardingResponseDrbItem {
    pub drb_id: DrbId,
    pub dl_forwarding_up_tnl_information: Option<UpTransportLayerInformation>,
    pub ul_forwarding_up_tnl_information: Option<UpTransportLayerInformation>,
}

// DapsRequestInfo
#[derive(Clone)]
pub struct DapsRequestInfo {
    pub daps_indicator: DapsIndicator,
}

// DapsResponseInfoList
#[derive(Clone)]
pub struct DapsResponseInfoList(pub Vec<DapsResponseInfoItem>);

// DapsResponseInfoItem
#[derive(Clone)]
pub struct DapsResponseInfoItem {
    pub drb_id: DrbId,
    pub daps_response_info: DapsResponseInfo,
}

// DapsResponseInfo
#[derive(Clone)]
pub struct DapsResponseInfo {
    pub dapsresponseindicator: Dapsresponseindicator,
}

// DataForwardingResponseErabList
#[derive(Clone)]
pub struct DataForwardingResponseErabList(pub Vec<DataForwardingResponseErabListItem>);

// DataForwardingResponseErabListItem
#[derive(Clone)]
pub struct DataForwardingResponseErabListItem {
    pub e_rab_id: ERabId,
    pub dl_forwarding_up_tnl_information: UpTransportLayerInformation,
}

// DelayCritical
#[derive(Clone, Copy)]
pub enum DelayCritical {
    DelayCritical,
    NonDelayCritical,
}

// DlCpSecurityInformation
#[derive(Clone)]
pub struct DlCpSecurityInformation {
    pub dl_nas_mac: DlNasMac,
}

// DlNasMac
#[derive(Clone)]
pub struct DlNasMac(pub BitString);

// DlForwarding
#[derive(Clone, Copy)]
pub enum DlForwarding {
    DlForwardingProposed,
}

// DlNguTnlInformationReused
#[derive(Clone, Copy)]
pub enum DlNguTnlInformationReused {
    True,
}

// DirectForwardingPathAvailability
#[derive(Clone, Copy)]
pub enum DirectForwardingPathAvailability {
    DirectPathAvailable,
}

// DrbId
#[derive(Clone)]
pub struct DrbId(pub u8);

// DrBsSubjectToStatusTransferList
#[derive(Clone)]
pub struct DrBsSubjectToStatusTransferList(pub Vec<DrBsSubjectToStatusTransferItem>);

// DrBsSubjectToStatusTransferItem
#[derive(Clone)]
pub struct DrBsSubjectToStatusTransferItem {
    pub drb_id: DrbId,
    pub drb_status_ul: DrbStatusUl,
    pub drb_status_dl: DrbStatusDl,
}

// DrbStatusDl
#[derive(Clone)]
pub enum DrbStatusDl {
    DrbStatusDl12(DrbStatusDl12),
    DrbStatusDl18(DrbStatusDl18),
}

// DrbStatusDl12
#[derive(Clone)]
pub struct DrbStatusDl12 {
    pub dl_count_value: CountValueForPdcpSn12,
}

// DrbStatusDl18
#[derive(Clone)]
pub struct DrbStatusDl18 {
    pub dl_count_value: CountValueForPdcpSn18,
}

// DrbStatusUl
#[derive(Clone)]
pub enum DrbStatusUl {
    DrbStatusUl12(DrbStatusUl12),
    DrbStatusUl18(DrbStatusUl18),
}

// DrbStatusUl12
#[derive(Clone)]
pub struct DrbStatusUl12 {
    pub ul_count_value: CountValueForPdcpSn12,
    pub receive_status_of_ul_pdcp_sd_us: Option<BitString>,
}

// DrbStatusUl18
#[derive(Clone)]
pub struct DrbStatusUl18 {
    pub ul_count_value: CountValueForPdcpSn18,
    pub receive_status_of_ul_pdcp_sd_us: Option<BitString>,
}

// DrBsToQosFlowsMappingList
#[derive(Clone)]
pub struct DrBsToQosFlowsMappingList(pub Vec<DrBsToQosFlowsMappingItem>);

// DrBsToQosFlowsMappingItem
#[derive(Clone)]
pub struct DrBsToQosFlowsMappingItem {
    pub drb_id: DrbId,
    pub associated_qos_flow_list: AssociatedQosFlowList,
}

// Dynamic5qiDescriptor
#[derive(Clone)]
pub struct Dynamic5qiDescriptor {
    pub priority_level_qos: PriorityLevelQos,
    pub packet_delay_budget: PacketDelayBudget,
    pub packet_error_rate: PacketErrorRate,
    pub five_qi: Option<FiveQi>,
    pub delay_critical: Option<DelayCritical>,
    pub averaging_window: Option<AveragingWindow>,
    pub maximum_data_burst_volume: Option<MaximumDataBurstVolume>,
}

// EarlyStatusTransferTransparentContainer
#[derive(Clone)]
pub struct EarlyStatusTransferTransparentContainer {
    pub procedure_stage: ProcedureStageChoice,
}

// ProcedureStageChoice
#[derive(Clone)]
pub enum ProcedureStageChoice {
    FirstDlCount(FirstDlCount),
}

// FirstDlCount
#[derive(Clone)]
pub struct FirstDlCount {
    pub dr_bs_subject_to_early_status_transfer: DrBsSubjectToEarlyStatusTransferList,
}

// DrBsSubjectToEarlyStatusTransferList
#[derive(Clone)]
pub struct DrBsSubjectToEarlyStatusTransferList(pub Vec<DrBsSubjectToEarlyStatusTransferItem>);

// DrBsSubjectToEarlyStatusTransferItem
#[derive(Clone)]
pub struct DrBsSubjectToEarlyStatusTransferItem {
    pub drb_id: DrbId,
    pub first_dlcount: DrbStatusDl,
}

// EdtSession
#[derive(Clone, Copy)]
pub enum EdtSession {
    True,
}

// EmergencyAreaId
#[derive(Clone)]
pub struct EmergencyAreaId(pub Vec<u8>);

// EmergencyAreaIdBroadcastEutra
#[derive(Clone)]
pub struct EmergencyAreaIdBroadcastEutra(pub Vec<EmergencyAreaIdBroadcastEutraItem>);

// EmergencyAreaIdBroadcastEutraItem
#[derive(Clone)]
pub struct EmergencyAreaIdBroadcastEutraItem {
    pub emergency_area_id: EmergencyAreaId,
    pub completed_cells_in_eai_eutra: CompletedCellsInEaiEutra,
}

// EmergencyAreaIdBroadcastNr
#[derive(Clone)]
pub struct EmergencyAreaIdBroadcastNr(pub Vec<EmergencyAreaIdBroadcastNrItem>);

// EmergencyAreaIdBroadcastNrItem
#[derive(Clone)]
pub struct EmergencyAreaIdBroadcastNrItem {
    pub emergency_area_id: EmergencyAreaId,
    pub completed_cells_in_eai_nr: CompletedCellsInEaiNr,
}

// EmergencyAreaIdCancelledEutra
#[derive(Clone)]
pub struct EmergencyAreaIdCancelledEutra(pub Vec<EmergencyAreaIdCancelledEutraItem>);

// EmergencyAreaIdCancelledEutraItem
#[derive(Clone)]
pub struct EmergencyAreaIdCancelledEutraItem {
    pub emergency_area_id: EmergencyAreaId,
    pub cancelled_cells_in_eai_eutra: CancelledCellsInEaiEutra,
}

// EmergencyAreaIdCancelledNr
#[derive(Clone)]
pub struct EmergencyAreaIdCancelledNr(pub Vec<EmergencyAreaIdCancelledNrItem>);

// EmergencyAreaIdCancelledNrItem
#[derive(Clone)]
pub struct EmergencyAreaIdCancelledNrItem {
    pub emergency_area_id: EmergencyAreaId,
    pub cancelled_cells_in_eai_nr: CancelledCellsInEaiNr,
}

// EmergencyAreaIdList
#[derive(Clone)]
pub struct EmergencyAreaIdList(pub Vec<EmergencyAreaId>);

// EmergencyAreaIdListForRestart
#[derive(Clone)]
pub struct EmergencyAreaIdListForRestart(pub Vec<EmergencyAreaId>);

// EmergencyFallbackIndicator
#[derive(Clone)]
pub struct EmergencyFallbackIndicator {
    pub emergency_fallback_request_indicator: EmergencyFallbackRequestIndicator,
    pub emergency_service_target_cn: Option<EmergencyServiceTargetCn>,
}

// EmergencyFallbackRequestIndicator
#[derive(Clone, Copy)]
pub enum EmergencyFallbackRequestIndicator {
    EmergencyFallbackRequested,
}

// EmergencyServiceTargetCn
#[derive(Clone, Copy)]
pub enum EmergencyServiceTargetCn {
    FiveGc,
    Epc,
}

// EnbId
#[derive(Clone)]
pub enum EnbId {
    MacroEnbId(BitString),
    HomeEnbId(BitString),
    ShortMacroEnbId(BitString),
    LongMacroEnbId(BitString),
}

// EnhancedCoverageRestriction
#[derive(Clone, Copy)]
pub enum EnhancedCoverageRestriction {
    Restricted,
}

// ExtendedConnectedTime
#[derive(Clone)]
pub struct ExtendedConnectedTime(pub u8);

// EnDcsonConfigurationTransfer
#[derive(Clone)]
pub struct EnDcsonConfigurationTransfer(pub Vec<u8>);

// EndpointIpAddressAndPort
#[derive(Clone)]
pub struct EndpointIpAddressAndPort {
    pub endpoint_ip_address: TransportLayerAddress,
    pub port_number: PortNumber,
}

// EndIndication
#[derive(Clone, Copy)]
pub enum EndIndication {
    NoFurtherData,
    FurtherDataExists,
}

// EquivalentPlmnS
#[derive(Clone)]
pub struct EquivalentPlmnS(pub Vec<PlmnIdentity>);

// EpsTac
#[derive(Clone)]
pub struct EpsTac(pub Vec<u8>);

// EpsTai
#[derive(Clone)]
pub struct EpsTai {
    pub plmn_identity: PlmnIdentity,
    pub eps_tac: EpsTac,
}

// ERabId
#[derive(Clone)]
pub struct ERabId(pub u8);

// ERabInformationList
#[derive(Clone)]
pub struct ERabInformationList(pub Vec<ERabInformationItem>);

// ERabInformationItem
#[derive(Clone)]
pub struct ERabInformationItem {
    pub e_rab_id: ERabId,
    pub dl_forwarding: Option<DlForwarding>,
}

// EutraCellIdentity
#[derive(Clone)]
pub struct EutraCellIdentity(pub BitString);

// EutraCgi
#[derive(Clone)]
pub struct EutraCgi {
    pub plmn_identity: PlmnIdentity,
    pub eutra_cell_identity: EutraCellIdentity,
}

// EutraCgiList
#[derive(Clone)]
pub struct EutraCgiList(pub Vec<EutraCgi>);

// EutraCgiListForWarning
#[derive(Clone)]
pub struct EutraCgiListForWarning(pub Vec<EutraCgi>);

// EutrAencryptionAlgorithms
#[derive(Clone)]
pub struct EutrAencryptionAlgorithms(pub BitString);

// EutrAintegrityProtectionAlgorithms
#[derive(Clone)]
pub struct EutrAintegrityProtectionAlgorithms(pub BitString);

// EventType
#[derive(Clone, Copy)]
pub enum EventType {
    Direct,
    ChangeOfServeCell,
    UePresenceInAreaOfInterest,
    StopChangeOfServeCell,
    StopUePresenceInAreaOfInterest,
    CancelLocationReportingForTheUe,
}

// ExpectedActivityPeriod
#[derive(Clone)]
pub struct ExpectedActivityPeriod(pub u8);

// ExpectedHoInterval
#[derive(Clone, Copy)]
pub enum ExpectedHoInterval {
    Sec15,
    Sec30,
    Sec60,
    Sec90,
    Sec120,
    Sec180,
    LongTime,
}

// ExpectedIdlePeriod
#[derive(Clone)]
pub struct ExpectedIdlePeriod(pub u8);

// ExpectedUeActivityBehaviour
#[derive(Clone)]
pub struct ExpectedUeActivityBehaviour {
    pub expected_activity_period: Option<ExpectedActivityPeriod>,
    pub expected_idle_period: Option<ExpectedIdlePeriod>,
    pub source_of_ue_activity_behaviour_information: Option<SourceOfUeActivityBehaviourInformation>,
}

// ExpectedUeBehaviour
#[derive(Clone)]
pub struct ExpectedUeBehaviour {
    pub expected_ue_activity_behaviour: Option<ExpectedUeActivityBehaviour>,
    pub expected_ho_interval: Option<ExpectedHoInterval>,
    pub expected_ue_mobility: Option<ExpectedUeMobility>,
    pub expected_ue_moving_trajectory: Option<ExpectedUeMovingTrajectory>,
}

// ExpectedUeMobility
#[derive(Clone, Copy)]
pub enum ExpectedUeMobility {
    Stationary,
    Mobile,
}

// ExpectedUeMovingTrajectory
#[derive(Clone)]
pub struct ExpectedUeMovingTrajectory(pub Vec<ExpectedUeMovingTrajectoryItem>);

// ExpectedUeMovingTrajectoryItem
#[derive(Clone)]
pub struct ExpectedUeMovingTrajectoryItem {
    pub ngran_cgi: NgranCgi,
    pub time_stayed_in_cell: Option<u16>,
}

// ExtendedAmfName
#[derive(Clone)]
pub struct ExtendedAmfName {
    pub amf_name_visible_string: Option<AmfNameVisibleString>,
    pub amf_name_utf8_string: Option<AmfNameUtf8String>,
}

// ExtendedPacketDelayBudget
#[derive(Clone)]
pub struct ExtendedPacketDelayBudget(pub u16);

// ExtendedRanNodeName
#[derive(Clone)]
pub struct ExtendedRanNodeName {
    pub ran_node_name_visible_string: Option<RanNodeNameVisibleString>,
    pub ran_node_name_utf8_string: Option<RanNodeNameUtf8String>,
}

// ExtendedRatRestrictionInformation
#[derive(Clone)]
pub struct ExtendedRatRestrictionInformation {
    pub primary_rat_restriction: BitString,
    pub secondary_rat_restriction: BitString,
}

// ExtendedRncId
#[derive(Clone)]
pub struct ExtendedRncId(pub u16);

// ExtendedSliceSupportList
#[derive(Clone)]
pub struct ExtendedSliceSupportList(pub Vec<SliceSupportItem>);

// ExtendedUeIdentityIndexValue
#[derive(Clone)]
pub struct ExtendedUeIdentityIndexValue(pub BitString);

// EventTrigger
#[derive(Clone)]
pub enum EventTrigger {
    OutOfCoverage(OutOfCoverage),
    EventL1LoggedMdtConfig(EventL1LoggedMdtConfig),
}

// EventL1LoggedMdtConfig
#[derive(Clone)]
pub struct EventL1LoggedMdtConfig {
    pub l1_threshold: MeasurementThresholdL1LoggedMdt,
    pub hysteresis: Hysteresis,
    pub time_to_trigger: TimeToTrigger,
}

// MeasurementThresholdL1LoggedMdt
#[derive(Clone)]
pub enum MeasurementThresholdL1LoggedMdt {
    ThresholdRsrp(ThresholdRsrp),
    ThresholdRsrq(ThresholdRsrq),
}

// FailureIndication
#[derive(Clone)]
pub struct FailureIndication {
    pub ue_rlf_report_container: UeRlfReportContainer,
}

// FiveGSTmsi
#[derive(Clone)]
pub struct FiveGSTmsi {
    pub amf_set_id: AmfSetId,
    pub amf_pointer: AmfPointer,
    pub five_g_tmsi: FiveGTmsi,
}

// FiveGTmsi
#[derive(Clone)]
pub struct FiveGTmsi(pub Vec<u8>);

// FiveQi
#[derive(Clone)]
pub struct FiveQi(pub u8);

// ForbiddenAreaInformation
#[derive(Clone)]
pub struct ForbiddenAreaInformation(pub Vec<ForbiddenAreaInformationItem>);

// ForbiddenAreaInformationItem
#[derive(Clone)]
pub struct ForbiddenAreaInformationItem {
    pub plmn_identity: PlmnIdentity,
    pub forbidden_ta_cs: ForbiddenTaCs,
}

// ForbiddenTaCs
#[derive(Clone)]
pub struct ForbiddenTaCs(pub Vec<Tac>);

// FromEutranToNgran
#[derive(Clone)]
pub struct FromEutranToNgran {
    pub source_enb_id: IntersystemSonEnbId,
    pub target_ngran_node_id: IntersystemSonNgranNodeId,
}

// FromNgranToEutran
#[derive(Clone)]
pub struct FromNgranToEutran {
    pub source_ngran_node_id: IntersystemSonNgranNodeId,
    pub target_enb_id: IntersystemSonEnbId,
}

// GbrQosInformation
#[derive(Clone)]
pub struct GbrQosInformation {
    pub maximum_flow_bit_rate_dl: BitRate,
    pub maximum_flow_bit_rate_ul: BitRate,
    pub guaranteed_flow_bit_rate_dl: BitRate,
    pub guaranteed_flow_bit_rate_ul: BitRate,
    pub notification_control: Option<NotificationControl>,
    pub maximum_packet_loss_rate_dl: Option<PacketLossRate>,
    pub maximum_packet_loss_rate_ul: Option<PacketLossRate>,
}

// GlobalCableId
#[derive(Clone)]
pub struct GlobalCableId(pub Vec<u8>);

// GlobalEnbId
#[derive(Clone)]
pub struct GlobalEnbId {
    pub plmn_identity: PlmnIdentity,
    pub enb_id: EnbId,
}

// GlobalGnbId
#[derive(Clone)]
pub struct GlobalGnbId {
    pub plmn_identity: PlmnIdentity,
    pub gnb_id: GnbId,
}

// GlobalN3IwfId
#[derive(Clone)]
pub struct GlobalN3IwfId {
    pub plmn_identity: PlmnIdentity,
    pub n3_iwf_id: N3IwfId,
}

// GlobalLineId
#[derive(Clone)]
pub struct GlobalLineId {
    pub global_line_identity: GlobalLineIdentity,
    pub line_type: Option<LineType>,
}

// GlobalLineIdentity
#[derive(Clone)]
pub struct GlobalLineIdentity(pub Vec<u8>);

// GlobalNgEnbId
#[derive(Clone)]
pub struct GlobalNgEnbId {
    pub plmn_identity: PlmnIdentity,
    pub ng_enb_id: NgEnbId,
}

// GlobalRanNodeId
#[derive(Clone)]
pub enum GlobalRanNodeId {
    GlobalGnbId(GlobalGnbId),
    GlobalNgEnbId(GlobalNgEnbId),
    GlobalN3IwfId(GlobalN3IwfId),
}

// GlobalTngfId
#[derive(Clone)]
pub struct GlobalTngfId {
    pub plmn_identity: PlmnIdentity,
    pub tngf_id: TngfId,
}

// GlobalTwifId
#[derive(Clone)]
pub struct GlobalTwifId {
    pub plmn_identity: PlmnIdentity,
    pub twif_id: TwifId,
}

// GlobalWAgfId
#[derive(Clone)]
pub struct GlobalWAgfId {
    pub plmn_identity: PlmnIdentity,
    pub w_agf_id: WAgfId,
}

// GnbId
#[derive(Clone)]
pub enum GnbId {
    GnbId(BitString),
}

// GtpTeid
#[derive(Clone)]
pub struct GtpTeid(pub Vec<u8>);

// GtpTunnel
#[derive(Clone)]
pub struct GtpTunnel {
    pub transport_layer_address: TransportLayerAddress,
    pub gtp_teid: GtpTeid,
}

// Guami
#[derive(Clone)]
pub struct Guami {
    pub plmn_identity: PlmnIdentity,
    pub amf_region_id: AmfRegionId,
    pub amf_set_id: AmfSetId,
    pub amf_pointer: AmfPointer,
}

// GuamiType
#[derive(Clone, Copy)]
pub enum GuamiType {
    Native,
    Mapped,
}

// HandoverCommandTransfer
#[derive(Clone)]
pub struct HandoverCommandTransfer {
    pub dl_forwarding_up_tnl_information: Option<UpTransportLayerInformation>,
    pub qos_flow_to_be_forwarded_list: Option<QosFlowToBeForwardedList>,
    pub data_forwarding_response_drb_list: Option<DataForwardingResponseDrbList>,
}

// HandoverFlag
#[derive(Clone, Copy)]
pub enum HandoverFlag {
    HandoverPreparation,
}

// HandoverPreparationUnsuccessfulTransfer
#[derive(Clone)]
pub struct HandoverPreparationUnsuccessfulTransfer {
    pub cause: Cause,
}

// HandoverRequestAcknowledgeTransfer
#[derive(Clone)]
pub struct HandoverRequestAcknowledgeTransfer {
    pub dl_ngu_up_tnl_information: UpTransportLayerInformation,
    pub dl_forwarding_up_tnl_information: Option<UpTransportLayerInformation>,
    pub security_result: Option<SecurityResult>,
    pub qos_flow_setup_response_list: QosFlowListWithDataForwarding,
    pub qos_flow_failed_to_setup_list: Option<QosFlowListWithCause>,
    pub data_forwarding_response_drb_list: Option<DataForwardingResponseDrbList>,
}

// HandoverRequiredTransfer
#[derive(Clone)]
pub struct HandoverRequiredTransfer {
    pub direct_forwarding_path_availability: Option<DirectForwardingPathAvailability>,
}

// HandoverResourceAllocationUnsuccessfulTransfer
#[derive(Clone)]
pub struct HandoverResourceAllocationUnsuccessfulTransfer {
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

// HandoverType
#[derive(Clone, Copy)]
pub enum HandoverType {
    Intra5gs,
    FivegsToEps,
    EpsTo5gs,
}

// HfcNodeId
#[derive(Clone)]
pub struct HfcNodeId(pub Vec<u8>);

// HoReport
#[derive(Clone)]
pub struct HoReport {
    pub handover_report_type: HandoverReportType,
    pub handover_cause: Cause,
    pub sourcecell_cgi: NgranCgi,
    pub targetcell_cgi: NgranCgi,
    pub reestablishmentcell_cgi: Option<NgranCgi>,
    pub sourcecell_c_rnti: Option<BitString>,
    pub targetcellin_e_utran: Option<EutraCgi>,
    pub mobility_information: Option<MobilityInformation>,
    pub ue_rlf_report_container: Option<UeRlfReportContainer>,
}

// Hysteresis
#[derive(Clone)]
pub struct Hysteresis(pub u8);

// IabAuthorized
#[derive(Clone, Copy)]
pub enum IabAuthorized {
    Authorized,
    NotAuthorized,
}

// IabSupported
#[derive(Clone, Copy)]
pub enum IabSupported {
    True,
}

// IabNodeIndication
#[derive(Clone, Copy)]
pub enum IabNodeIndication {
    True,
}

// ImsVoiceSupportIndicator
#[derive(Clone, Copy)]
pub enum ImsVoiceSupportIndicator {
    Supported,
    NotSupported,
}

// IndexToRfsp
#[derive(Clone)]
pub struct IndexToRfsp(pub u8);

// InfoOnRecommendedCellsAndRanNodesForPaging
#[derive(Clone)]
pub struct InfoOnRecommendedCellsAndRanNodesForPaging {
    pub recommended_cells_for_paging: RecommendedCellsForPaging,
    pub recommend_ran_nodes_for_paging: RecommendedRanNodesForPaging,
}

// IntegrityProtectionIndication
#[derive(Clone, Copy)]
pub enum IntegrityProtectionIndication {
    Required,
    Preferred,
    NotNeeded,
}

// IntegrityProtectionResult
#[derive(Clone, Copy)]
pub enum IntegrityProtectionResult {
    Performed,
    NotPerformed,
}

// IntendedNumberOfPagingAttempts
#[derive(Clone)]
pub struct IntendedNumberOfPagingAttempts(pub u8);

// InterfacesToTrace
#[derive(Clone)]
pub struct InterfacesToTrace(pub BitString);

// ImmediateMdtNr
#[derive(Clone)]
pub struct ImmediateMdtNr {
    pub measurements_to_activate: MeasurementsToActivate,
    pub m1_configuration: Option<M1Configuration>,
    pub m4_configuration: Option<M4Configuration>,
    pub m5_configuration: Option<M5Configuration>,
    pub m6_configuration: Option<M6Configuration>,
    pub m7_configuration: Option<M7Configuration>,
    pub bluetooth_measurement_configuration: Option<BluetoothMeasurementConfiguration>,
    pub wlan_measurement_configuration: Option<WlanMeasurementConfiguration>,
    pub mdt_location_info: Option<MdtLocationInfo>,
    pub sensor_measurement_configuration: Option<SensorMeasurementConfiguration>,
}

// InterSystemFailureIndication
#[derive(Clone)]
pub struct InterSystemFailureIndication {
    pub ue_rlf_report_container: Option<UeRlfReportContainer>,
}

// IntersystemSonConfigurationTransfer
#[derive(Clone)]
pub struct IntersystemSonConfigurationTransfer {
    pub transfer_type: IntersystemSonTransferType,
    pub intersystem_son_information: IntersystemSonInformation,
}

// IntersystemSonTransferType
#[derive(Clone)]
pub enum IntersystemSonTransferType {
    FromEutranToNgran(FromEutranToNgran),
    FromNgranToEutran(FromNgranToEutran),
}

// IntersystemSonEnbId
#[derive(Clone)]
pub struct IntersystemSonEnbId {
    pub global_enb_id: GlobalEnbId,
    pub selected_epstai: EpsTai,
}

// IntersystemSonNgranNodeId
#[derive(Clone)]
pub struct IntersystemSonNgranNodeId {
    pub global_ran_node_id: GlobalRanNodeId,
    pub selected_tai: Tai,
}

// IntersystemSonInformation
#[derive(Clone)]
pub enum IntersystemSonInformation {
    IntersystemSonInformationReport(IntersystemSonInformationReport),
}

// IntersystemSonInformationReport
#[derive(Clone)]
pub enum IntersystemSonInformationReport {
    HoReportInformation(InterSystemHoReport),
    FailureIndicationInformation(InterSystemFailureIndication),
}

// InterSystemHoReport
#[derive(Clone)]
pub struct InterSystemHoReport {
    pub handover_report_type: InterSystemHandoverReportType,
}

// InterSystemHandoverReportType
#[derive(Clone)]
pub enum InterSystemHandoverReportType {
    TooearlyIntersystemHo(TooearlyIntersystemHo),
    IntersystemUnnecessaryHo(IntersystemUnnecessaryHo),
}

// IntersystemUnnecessaryHo
#[derive(Clone)]
pub struct IntersystemUnnecessaryHo {
    pub sourcecell_id: NgranCgi,
    pub targetcell_id: EutraCgi,
    pub early_iratho: EarlyIratho,
    pub candidate_cell_list: CandidateCellList,
}

// Lac
#[derive(Clone)]
pub struct Lac(pub Vec<u8>);

// Lai
#[derive(Clone)]
pub struct Lai {
    pub plmn_identity: PlmnIdentity,
    pub lac: Lac,
}

// LastVisitedCellInformation
#[derive(Clone)]
pub enum LastVisitedCellInformation {
    NgranCell(LastVisitedNgranCellInformation),
    EutranCell(LastVisitedEutranCellInformation),
    UtranCell(LastVisitedUtranCellInformation),
    GeranCell(LastVisitedGeranCellInformation),
}

// LastVisitedCellItem
#[derive(Clone)]
pub struct LastVisitedCellItem {
    pub last_visited_cell_information: LastVisitedCellInformation,
}

// LastVisitedEutranCellInformation
#[derive(Clone)]
pub struct LastVisitedEutranCellInformation(pub Vec<u8>);

// LastVisitedGeranCellInformation
#[derive(Clone)]
pub struct LastVisitedGeranCellInformation(pub Vec<u8>);

// LastVisitedNgranCellInformation
#[derive(Clone)]
pub struct LastVisitedNgranCellInformation {
    pub global_cell_id: NgranCgi,
    pub cell_type: CellType,
    pub time_ue_stayed_in_cell: TimeUeStayedInCell,
    pub time_ue_stayed_in_cell_enhanced_granularity: Option<TimeUeStayedInCellEnhancedGranularity>,
    pub ho_cause_value: Option<Cause>,
}

// LastVisitedUtranCellInformation
#[derive(Clone)]
pub struct LastVisitedUtranCellInformation(pub Vec<u8>);

// LineType
#[derive(Clone, Copy)]
pub enum LineType {
    Dsl,
    Pon,
}

// LocationReportingAdditionalInfo
#[derive(Clone, Copy)]
pub enum LocationReportingAdditionalInfo {
    IncludePsCell,
}

// LocationReportingReferenceId
#[derive(Clone)]
pub struct LocationReportingReferenceId(pub u8);

// LocationReportingRequestType
#[derive(Clone)]
pub struct LocationReportingRequestType {
    pub event_type: EventType,
    pub report_area: ReportArea,
    pub area_of_interest_list: Option<AreaOfInterestList>,
    pub location_reporting_reference_id_to_be_cancelled: Option<LocationReportingReferenceId>,
}

// LoggedMdtNr
#[derive(Clone)]
pub struct LoggedMdtNr {
    pub logging_interval: LoggingInterval,
    pub logging_duration: LoggingDuration,
    pub logged_mdt_trigger: LoggedMdtTrigger,
    pub bluetooth_measurement_configuration: Option<BluetoothMeasurementConfiguration>,
    pub wlan_measurement_configuration: Option<WlanMeasurementConfiguration>,
    pub sensor_measurement_configuration: Option<SensorMeasurementConfiguration>,
    pub area_scope_of_neigh_cells_list: Option<AreaScopeOfNeighCellsList>,
}

// LoggingInterval
#[derive(Clone, Copy)]
pub enum LoggingInterval {
    Ms320,
    Ms640,
    Ms1280,
    Ms2560,
    Ms5120,
    Ms10240,
    Ms20480,
    Ms30720,
    Ms40960,
    Ms61440,
    Infinity,
}

// LoggingDuration
#[derive(Clone, Copy)]
pub enum LoggingDuration {
    M10,
    M20,
    M40,
    M60,
    M90,
    M120,
}

// LinksToLog
#[derive(Clone, Copy)]
pub enum LinksToLog {
    Uplink,
    Downlink,
    BothUplinkAndDownlink,
}

// LoggedMdtTrigger
#[derive(Clone)]
pub enum LoggedMdtTrigger {
    Periodical,
    EventTrigger(EventTrigger),
}

// LtemIndication
#[derive(Clone, Copy)]
pub enum LtemIndication {
    LteM,
}

// LteueRlfReportContainer
#[derive(Clone)]
pub struct LteueRlfReportContainer(pub Vec<u8>);

// Ltev2xServicesAuthorized
#[derive(Clone)]
pub struct Ltev2xServicesAuthorized {
    pub vehicle_ue: Option<VehicleUe>,
    pub pedestrian_ue: Option<PedestrianUe>,
}

// LteueSidelinkAggregateMaximumBitrate
#[derive(Clone)]
pub struct LteueSidelinkAggregateMaximumBitrate {
    pub ue_sidelink_aggregate_maximum_bit_rate: BitRate,
}

// MaskedImeisv
#[derive(Clone)]
pub struct MaskedImeisv(pub BitString);

// MaximumDataBurstVolume
#[derive(Clone)]
pub struct MaximumDataBurstVolume(pub u16);

// MessageIdentifier
#[derive(Clone)]
pub struct MessageIdentifier(pub BitString);

// MaximumIntegrityProtectedDataRate
#[derive(Clone, Copy)]
pub enum MaximumIntegrityProtectedDataRate {
    Bitrate64kbs,
    MaximumUeRate,
}

// MicoModeIndication
#[derive(Clone, Copy)]
pub enum MicoModeIndication {
    True,
}

// MobilityInformation
#[derive(Clone)]
pub struct MobilityInformation(pub BitString);

// MobilityRestrictionList
#[derive(Clone)]
pub struct MobilityRestrictionList {
    pub serving_plmn: PlmnIdentity,
    pub equivalent_plmn_s: Option<EquivalentPlmnS>,
    pub rat_restrictions: Option<RatRestrictions>,
    pub forbidden_area_information: Option<ForbiddenAreaInformation>,
    pub service_area_information: Option<ServiceAreaInformation>,
}

// MdtPlmnList
#[derive(Clone)]
pub struct MdtPlmnList(pub Vec<PlmnIdentity>);

// MdtConfiguration
#[derive(Clone)]
pub struct MdtConfiguration {
    pub mdt_config_nr: Option<MdtConfigurationNr>,
    pub mdt_config_eutra: Option<MdtConfigurationEutra>,
}

// MdtConfigurationNr
#[derive(Clone)]
pub struct MdtConfigurationNr {
    pub mdt_activation: MdtActivation,
    pub area_scope_of_mdt: AreaScopeOfMdtNr,
    pub mdt_mode_nr: MdtModeNr,
    pub signalling_based_mdt_plmn_list: Option<MdtPlmnList>,
}

// MdtConfigurationEutra
#[derive(Clone)]
pub struct MdtConfigurationEutra {
    pub mdt_activation: MdtActivation,
    pub area_scope_of_mdt: AreaScopeOfMdtEutra,
    pub mdt_mode: MdtModeEutra,
    pub signalling_based_mdt_plmn_list: Option<MdtPlmnList>,
}

// MdtActivation
#[derive(Clone, Copy)]
pub enum MdtActivation {
    ImmediateMdtOnly,
    LoggedMdtOnly,
    ImmediateMdtAndTrace,
}

// MdtModeNr
#[derive(Clone)]
pub enum MdtModeNr {
    ImmediateMdtNr(ImmediateMdtNr),
    LoggedMdtNr(LoggedMdtNr),
}

// MdtModeEutra
#[derive(Clone)]
pub struct MdtModeEutra(pub Vec<u8>);

// MeasurementsToActivate
#[derive(Clone)]
pub struct MeasurementsToActivate(pub BitString);

// M1Configuration
#[derive(Clone)]
pub struct M1Configuration {
    pub m1reporting_trigger: M1ReportingTrigger,
    pub m1threshold_event_a2: Option<M1ThresholdEventA2>,
    pub m1periodic_reporting: Option<M1PeriodicReporting>,
}

// M1ReportingTrigger
#[derive(Clone, Copy)]
pub enum M1ReportingTrigger {
    Periodic,
    A2eventtriggered,
    A2eventtriggeredPeriodic,
}

// M1ThresholdEventA2
#[derive(Clone)]
pub struct M1ThresholdEventA2 {
    pub m1_threshold_type: M1ThresholdType,
}

// M1ThresholdType
#[derive(Clone)]
pub enum M1ThresholdType {
    ThresholdRsrp(ThresholdRsrp),
    ThresholdRsrq(ThresholdRsrq),
    ThresholdSinr(ThresholdSinr),
}

// M1PeriodicReporting
#[derive(Clone)]
pub struct M1PeriodicReporting {
    pub report_interval: ReportIntervalMdt,
    pub report_amount: ReportAmountMdt,
}

// M4Configuration
#[derive(Clone)]
pub struct M4Configuration {
    pub m4period: M4period,
    pub m4_links_to_log: LinksToLog,
}

// M4period
#[derive(Clone, Copy)]
pub enum M4period {
    Ms1024,
    Ms2048,
    Ms5120,
    Ms10240,
    Min1,
}

// M5Configuration
#[derive(Clone)]
pub struct M5Configuration {
    pub m5period: M5period,
    pub m5_links_to_log: LinksToLog,
}

// M5period
#[derive(Clone, Copy)]
pub enum M5period {
    Ms1024,
    Ms2048,
    Ms5120,
    Ms10240,
    Min1,
}

// M6Configuration
#[derive(Clone)]
pub struct M6Configuration {
    pub m6report_interval: M6reportInterval,
    pub m6_links_to_log: LinksToLog,
}

// M6reportInterval
#[derive(Clone, Copy)]
pub enum M6reportInterval {
    Ms120,
    Ms240,
    Ms480,
    Ms640,
    Ms1024,
    Ms2048,
    Ms5120,
    Ms10240,
    Ms20480,
    Ms40960,
    Min1,
    Min6,
    Min12,
    Min30,
}

// M7Configuration
#[derive(Clone)]
pub struct M7Configuration {
    pub m7period: M7period,
    pub m7_links_to_log: LinksToLog,
}

// M7period
#[derive(Clone)]
pub struct M7period(pub u8);

// MdtLocationInfo
#[derive(Clone)]
pub struct MdtLocationInfo {
    pub mdt_location_information: MdtLocationInformation,
}

// MdtLocationInformation
#[derive(Clone)]
pub struct MdtLocationInformation(pub BitString);

// N3IwfId
#[derive(Clone)]
pub enum N3IwfId {
    N3IwfId(BitString),
}

// NasPdu
#[derive(Clone)]
pub struct NasPdu(pub Vec<u8>);

// NasSecurityParametersFromNgran
#[derive(Clone)]
pub struct NasSecurityParametersFromNgran(pub Vec<u8>);

// NbIotDefaultPagingDrx
#[derive(Clone, Copy)]
pub enum NbIotDefaultPagingDrx {
    Rf128,
    Rf256,
    Rf512,
    Rf1024,
}

// NbIotPagingDrx
#[derive(Clone, Copy)]
pub enum NbIotPagingDrx {
    Rf32,
    Rf64,
    Rf128,
    Rf256,
    Rf512,
    Rf1024,
}

// NbIotPagingEDrxCycle
#[derive(Clone, Copy)]
pub enum NbIotPagingEDrxCycle {
    Hf2,
    Hf4,
    Hf6,
    Hf8,
    Hf10,
    Hf12,
    Hf14,
    Hf16,
    Hf32,
    Hf64,
    Hf128,
    Hf256,
    Hf512,
    Hf1024,
}

// NbIotPagingTimeWindow
#[derive(Clone, Copy)]
pub enum NbIotPagingTimeWindow {
    S1,
    S2,
    S3,
    S4,
    S5,
    S6,
    S7,
    S8,
    S9,
    S10,
    S11,
    S12,
    S13,
    S14,
    S15,
    S16,
}

// NbIotPagingEDrxInfo
#[derive(Clone)]
pub struct NbIotPagingEDrxInfo {
    pub nb_iot_paging_e_drx_cycle: NbIotPagingEDrxCycle,
    pub nb_iot_paging_time_window: Option<NbIotPagingTimeWindow>,
}

// NbIotUePriority
#[derive(Clone)]
pub struct NbIotUePriority(pub u8);

// NetworkInstance
#[derive(Clone)]
pub struct NetworkInstance(pub u8);

// NewSecurityContextInd
#[derive(Clone, Copy)]
pub enum NewSecurityContextInd {
    True,
}

// NextHopChainingCount
#[derive(Clone)]
pub struct NextHopChainingCount(pub u8);

// NextPagingAreaScope
#[derive(Clone, Copy)]
pub enum NextPagingAreaScope {
    Same,
    Changed,
}

// NgEnbId
#[derive(Clone)]
pub enum NgEnbId {
    MacroNgEnbId(BitString),
    ShortMacroNgEnbId(BitString),
    LongMacroNgEnbId(BitString),
}

// NotifySourceNgranNode
#[derive(Clone, Copy)]
pub enum NotifySourceNgranNode {
    NotifySource,
}

// NgranCgi
#[derive(Clone)]
pub enum NgranCgi {
    NrCgi(NrCgi),
    EutraCgi(EutraCgi),
}

// NgranTnlAssociationToRemoveList
#[derive(Clone)]
pub struct NgranTnlAssociationToRemoveList(pub Vec<NgranTnlAssociationToRemoveItem>);

// NgranTnlAssociationToRemoveItem
#[derive(Clone)]
pub struct NgranTnlAssociationToRemoveItem {
    pub tnl_association_transport_layer_address: CpTransportLayerInformation,
    pub tnl_association_transport_layer_address_amf: Option<CpTransportLayerInformation>,
}

// NgranTraceId
#[derive(Clone)]
pub struct NgranTraceId(pub Vec<u8>);

// Nid
#[derive(Clone)]
pub struct Nid(pub BitString);

// NonDynamic5qiDescriptor
#[derive(Clone)]
pub struct NonDynamic5qiDescriptor {
    pub five_qi: FiveQi,
    pub priority_level_qos: Option<PriorityLevelQos>,
    pub averaging_window: Option<AveragingWindow>,
    pub maximum_data_burst_volume: Option<MaximumDataBurstVolume>,
}

// NotAllowedTaCs
#[derive(Clone)]
pub struct NotAllowedTaCs(pub Vec<Tac>);

// NotificationCause
#[derive(Clone, Copy)]
pub enum NotificationCause {
    Fulfilled,
    NotFulfilled,
}

// NotificationControl
#[derive(Clone, Copy)]
pub enum NotificationControl {
    NotificationRequested,
}

// NpnAccessInformation
#[derive(Clone)]
pub enum NpnAccessInformation {
    PniNpnAccessInformation(CellCagList),
}

// NpnMobilityInformation
#[derive(Clone)]
pub enum NpnMobilityInformation {
    SnpnMobilityInformation(SnpnMobilityInformation),
    PniNpnMobilityInformation(PniNpnMobilityInformation),
}

// NpnPagingAssistanceInformation
#[derive(Clone)]
pub enum NpnPagingAssistanceInformation {
    PniNpnPagingAssistance(AllowedPniNpnList),
}

// NpnSupport
#[derive(Clone)]
pub enum NpnSupport {
    Snpn(Nid),
}

// NrCellIdentity
#[derive(Clone)]
pub struct NrCellIdentity(pub BitString);

// NrCgi
#[derive(Clone)]
pub struct NrCgi {
    pub plmn_identity: PlmnIdentity,
    pub nr_cell_identity: NrCellIdentity,
}

// NrCgiList
#[derive(Clone)]
pub struct NrCgiList(pub Vec<NrCgi>);

// NrCgiListForWarning
#[derive(Clone)]
pub struct NrCgiListForWarning(pub Vec<NrCgi>);

// NRencryptionAlgorithms
#[derive(Clone)]
pub struct NRencryptionAlgorithms(pub BitString);

// NRintegrityProtectionAlgorithms
#[derive(Clone)]
pub struct NRintegrityProtectionAlgorithms(pub BitString);

// NrMobilityHistoryReport
#[derive(Clone)]
pub struct NrMobilityHistoryReport(pub Vec<u8>);

// NrpPaPdu
#[derive(Clone)]
pub struct NrpPaPdu(pub Vec<u8>);

// NrueRlfReportContainer
#[derive(Clone)]
pub struct NrueRlfReportContainer(pub Vec<u8>);

// NumberOfBroadcasts
#[derive(Clone)]
pub struct NumberOfBroadcasts(pub u16);

// NumberOfBroadcastsRequested
#[derive(Clone)]
pub struct NumberOfBroadcastsRequested(pub u16);

// Nrarfcn
#[derive(Clone)]
pub struct Nrarfcn(pub u32);

// NrFrequencyBand
#[derive(Clone)]
pub struct NrFrequencyBand(pub u16);

// NrFrequencyBandList
#[derive(Clone)]
pub struct NrFrequencyBandList(pub Vec<NrFrequencyBandItem>);

// NrFrequencyBandItem
#[derive(Clone)]
pub struct NrFrequencyBandItem {
    pub nr_frequency_band: NrFrequencyBand,
}

// NrFrequencyInfo
#[derive(Clone)]
pub struct NrFrequencyInfo {
    pub nr_arfcn: Nrarfcn,
    pub frequency_band_list: NrFrequencyBandList,
}

// NrPci
#[derive(Clone)]
pub struct NrPci(pub u16);

// Nrv2xServicesAuthorized
#[derive(Clone)]
pub struct Nrv2xServicesAuthorized {
    pub vehicle_ue: Option<VehicleUe>,
    pub pedestrian_ue: Option<PedestrianUe>,
}

// VehicleUe
#[derive(Clone, Copy)]
pub enum VehicleUe {
    Authorized,
    NotAuthorized,
}

// PedestrianUe
#[derive(Clone, Copy)]
pub enum PedestrianUe {
    Authorized,
    NotAuthorized,
}

// NrueSidelinkAggregateMaximumBitrate
#[derive(Clone)]
pub struct NrueSidelinkAggregateMaximumBitrate {
    pub ue_sidelink_aggregate_maximum_bit_rate: BitRate,
}

// OverloadAction
#[derive(Clone, Copy)]
pub enum OverloadAction {
    RejectNonEmergencyMoDt,
    RejectRrcCrSignalling,
    PermitEmergencySessionsAndMobileTerminatedServicesOnly,
    PermitHighPrioritySessionsAndMobileTerminatedServicesOnly,
}

// OverloadResponse
#[derive(Clone)]
pub enum OverloadResponse {
    OverloadAction(OverloadAction),
}

// OverloadStartNssaiList
#[derive(Clone)]
pub struct OverloadStartNssaiList(pub Vec<OverloadStartNssaiItem>);

// OverloadStartNssaiItem
#[derive(Clone)]
pub struct OverloadStartNssaiItem {
    pub slice_overload_list: SliceOverloadList,
    pub slice_overload_response: Option<OverloadResponse>,
    pub slice_traffic_load_reduction_indication: Option<TrafficLoadReductionIndication>,
}

// PacketDelayBudget
#[derive(Clone)]
pub struct PacketDelayBudget(pub u16);

// PacketErrorRate
#[derive(Clone)]
pub struct PacketErrorRate {
    pub per_scalar: u8,
    pub per_exponent: u8,
}

// PacketLossRate
#[derive(Clone)]
pub struct PacketLossRate(pub u16);

// PagingAssisDataforCEcapabUe
#[derive(Clone)]
pub struct PagingAssisDataforCEcapabUe {
    pub eutra_cgi: EutraCgi,
    pub coverage_enhancement_level: CoverageEnhancementLevel,
}

// PagingAttemptInformation
#[derive(Clone)]
pub struct PagingAttemptInformation {
    pub paging_attempt_count: PagingAttemptCount,
    pub intended_number_of_paging_attempts: IntendedNumberOfPagingAttempts,
    pub next_paging_area_scope: Option<NextPagingAreaScope>,
}

// PagingAttemptCount
#[derive(Clone)]
pub struct PagingAttemptCount(pub u8);

// PagingDrx
#[derive(Clone, Copy)]
pub enum PagingDrx {
    V32,
    V64,
    V128,
    V256,
}

// PagingOrigin
#[derive(Clone, Copy)]
pub enum PagingOrigin {
    Non3gpp,
}

// PagingPriority
#[derive(Clone, Copy)]
pub enum PagingPriority {
    Priolevel1,
    Priolevel2,
    Priolevel3,
    Priolevel4,
    Priolevel5,
    Priolevel6,
    Priolevel7,
    Priolevel8,
}

// PagingeDrxInformation
#[derive(Clone)]
pub struct PagingeDrxInformation {
    pub paging_e_drx_cycle: PagingEDrxCycle,
    pub paging_time_window: Option<PagingTimeWindow>,
}

// PagingEDrxCycle
#[derive(Clone, Copy)]
pub enum PagingEDrxCycle {
    Hfhalf,
    Hf1,
    Hf2,
    Hf4,
    Hf6,
    Hf8,
    Hf10,
    Hf12,
    Hf14,
    Hf16,
    Hf32,
    Hf64,
    Hf128,
    Hf256,
}

// PagingTimeWindow
#[derive(Clone, Copy)]
pub enum PagingTimeWindow {
    S1,
    S2,
    S3,
    S4,
    S5,
    S6,
    S7,
    S8,
    S9,
    S10,
    S11,
    S12,
    S13,
    S14,
    S15,
    S16,
}

// PagingProbabilityInformation
#[derive(Clone, Copy)]
pub enum PagingProbabilityInformation {
    P00,
    P05,
    P10,
    P15,
    P20,
    P25,
    P30,
    P35,
    P40,
    P45,
    P50,
    P55,
    P60,
    P65,
    P70,
    P75,
    P80,
    P85,
    P90,
    P95,
    P100,
}

// PathSwitchRequestAcknowledgeTransfer
#[derive(Clone)]
pub struct PathSwitchRequestAcknowledgeTransfer {
    pub ul_ngu_up_tnl_information: Option<UpTransportLayerInformation>,
    pub security_indication: Option<SecurityIndication>,
}

// PathSwitchRequestSetupFailedTransfer
#[derive(Clone)]
pub struct PathSwitchRequestSetupFailedTransfer {
    pub cause: Cause,
}

// PathSwitchRequestTransfer
#[derive(Clone)]
pub struct PathSwitchRequestTransfer {
    pub dl_ngu_up_tnl_information: UpTransportLayerInformation,
    pub dl_ngu_tnl_information_reused: Option<DlNguTnlInformationReused>,
    pub user_plane_security_information: Option<UserPlaneSecurityInformation>,
    pub qos_flow_accepted_list: QosFlowAcceptedList,
}

// PathSwitchRequestUnsuccessfulTransfer
#[derive(Clone)]
pub struct PathSwitchRequestUnsuccessfulTransfer {
    pub cause: Cause,
}

// Pc5QosParameters
#[derive(Clone)]
pub struct Pc5QosParameters {
    pub pc_5_qos_flow_list: Pc5QosFlowList,
    pub pc_5_link_aggregate_bit_rates: Option<BitRate>,
}

// Pc5QosFlowList
#[derive(Clone)]
pub struct Pc5QosFlowList(pub Vec<Pc5QosFlowItem>);

// Pc5QosFlowItem
#[derive(Clone)]
pub struct Pc5QosFlowItem {
    pub pqi: FiveQi,
    pub pc_5_flow_bit_rates: Option<Pc5FlowBitRates>,
    pub range: Option<Range>,
}

// Pc5FlowBitRates
#[derive(Clone)]
pub struct Pc5FlowBitRates {
    pub guaranteed_flow_bit_rate: BitRate,
    pub maximum_flow_bit_rate: BitRate,
}

// PciListForMdt
#[derive(Clone)]
pub struct PciListForMdt(pub Vec<NrPci>);

// PrivacyIndicator
#[derive(Clone, Copy)]
pub enum PrivacyIndicator {
    ImmediateMdt,
    LoggedMdt,
}

// PduSessionAggregateMaximumBitRate
#[derive(Clone)]
pub struct PduSessionAggregateMaximumBitRate {
    pub pdu_session_aggregate_maximum_bit_rate_dl: BitRate,
    pub pdu_session_aggregate_maximum_bit_rate_ul: BitRate,
}

// PduSessionId
#[derive(Clone)]
pub struct PduSessionId(pub u8);

// PduSessionResourceAdmittedList
#[derive(Clone)]
pub struct PduSessionResourceAdmittedList(pub Vec<PduSessionResourceAdmittedItem>);

// PduSessionResourceAdmittedItem
#[derive(Clone)]
pub struct PduSessionResourceAdmittedItem {
    pub pdu_session_id: PduSessionId,
    pub handover_request_acknowledge_transfer: Vec<u8>,
}

// PduSessionResourceFailedToModifyListModCfm
#[derive(Clone)]
pub struct PduSessionResourceFailedToModifyListModCfm(
    pub Vec<PduSessionResourceFailedToModifyItemModCfm>,
);

// PduSessionResourceFailedToModifyItemModCfm
#[derive(Clone)]
pub struct PduSessionResourceFailedToModifyItemModCfm {
    pub pdu_session_id: PduSessionId,
    pub pdu_session_resource_modify_indication_unsuccessful_transfer: Vec<u8>,
}

// PduSessionResourceFailedToModifyListModRes
#[derive(Clone)]
pub struct PduSessionResourceFailedToModifyListModRes(
    pub Vec<PduSessionResourceFailedToModifyItemModRes>,
);

// PduSessionResourceFailedToModifyItemModRes
#[derive(Clone)]
pub struct PduSessionResourceFailedToModifyItemModRes {
    pub pdu_session_id: PduSessionId,
    pub pdu_session_resource_modify_unsuccessful_transfer: Vec<u8>,
}

// PduSessionResourceFailedToResumeListResReq
#[derive(Clone)]
pub struct PduSessionResourceFailedToResumeListResReq(
    pub Vec<PduSessionResourceFailedToResumeItemResReq>,
);

// PduSessionResourceFailedToResumeItemResReq
#[derive(Clone)]
pub struct PduSessionResourceFailedToResumeItemResReq {
    pub pdu_session_id: PduSessionId,
    pub cause: Cause,
}

// PduSessionResourceFailedToResumeListResRes
#[derive(Clone)]
pub struct PduSessionResourceFailedToResumeListResRes(
    pub Vec<PduSessionResourceFailedToResumeItemResRes>,
);

// PduSessionResourceFailedToResumeItemResRes
#[derive(Clone)]
pub struct PduSessionResourceFailedToResumeItemResRes {
    pub pdu_session_id: PduSessionId,
    pub cause: Cause,
}

// PduSessionResourceFailedToSetupListCxtFail
#[derive(Clone)]
pub struct PduSessionResourceFailedToSetupListCxtFail(
    pub Vec<PduSessionResourceFailedToSetupItemCxtFail>,
);

// PduSessionResourceFailedToSetupItemCxtFail
#[derive(Clone)]
pub struct PduSessionResourceFailedToSetupItemCxtFail {
    pub pdu_session_id: PduSessionId,
    pub pdu_session_resource_setup_unsuccessful_transfer: Vec<u8>,
}

// PduSessionResourceFailedToSetupListCxtRes
#[derive(Clone)]
pub struct PduSessionResourceFailedToSetupListCxtRes(
    pub Vec<PduSessionResourceFailedToSetupItemCxtRes>,
);

// PduSessionResourceFailedToSetupItemCxtRes
#[derive(Clone)]
pub struct PduSessionResourceFailedToSetupItemCxtRes {
    pub pdu_session_id: PduSessionId,
    pub pdu_session_resource_setup_unsuccessful_transfer: Vec<u8>,
}

// PduSessionResourceFailedToSetupListHoAck
#[derive(Clone)]
pub struct PduSessionResourceFailedToSetupListHoAck(
    pub Vec<PduSessionResourceFailedToSetupItemHoAck>,
);

// PduSessionResourceFailedToSetupItemHoAck
#[derive(Clone)]
pub struct PduSessionResourceFailedToSetupItemHoAck {
    pub pdu_session_id: PduSessionId,
    pub handover_resource_allocation_unsuccessful_transfer: Vec<u8>,
}

// PduSessionResourceFailedToSetupListPsReq
#[derive(Clone)]
pub struct PduSessionResourceFailedToSetupListPsReq(
    pub Vec<PduSessionResourceFailedToSetupItemPsReq>,
);

// PduSessionResourceFailedToSetupItemPsReq
#[derive(Clone)]
pub struct PduSessionResourceFailedToSetupItemPsReq {
    pub pdu_session_id: PduSessionId,
    pub path_switch_request_setup_failed_transfer: Vec<u8>,
}

// PduSessionResourceFailedToSetupListSuRes
#[derive(Clone)]
pub struct PduSessionResourceFailedToSetupListSuRes(
    pub Vec<PduSessionResourceFailedToSetupItemSuRes>,
);

// PduSessionResourceFailedToSetupItemSuRes
#[derive(Clone)]
pub struct PduSessionResourceFailedToSetupItemSuRes {
    pub pdu_session_id: PduSessionId,
    pub pdu_session_resource_setup_unsuccessful_transfer: Vec<u8>,
}

// PduSessionResourceHandoverList
#[derive(Clone)]
pub struct PduSessionResourceHandoverList(pub Vec<PduSessionResourceHandoverItem>);

// PduSessionResourceHandoverItem
#[derive(Clone)]
pub struct PduSessionResourceHandoverItem {
    pub pdu_session_id: PduSessionId,
    pub handover_command_transfer: Vec<u8>,
}

// PduSessionResourceInformationList
#[derive(Clone)]
pub struct PduSessionResourceInformationList(pub Vec<PduSessionResourceInformationItem>);

// PduSessionResourceInformationItem
#[derive(Clone)]
pub struct PduSessionResourceInformationItem {
    pub pdu_session_id: PduSessionId,
    pub qos_flow_information_list: QosFlowInformationList,
    pub dr_bs_to_qos_flows_mapping_list: Option<DrBsToQosFlowsMappingList>,
}

// PduSessionResourceListCxtRelCpl
#[derive(Clone)]
pub struct PduSessionResourceListCxtRelCpl(pub Vec<PduSessionResourceItemCxtRelCpl>);

// PduSessionResourceItemCxtRelCpl
#[derive(Clone)]
pub struct PduSessionResourceItemCxtRelCpl {
    pub pdu_session_id: PduSessionId,
}

// PduSessionResourceListCxtRelReq
#[derive(Clone)]
pub struct PduSessionResourceListCxtRelReq(pub Vec<PduSessionResourceItemCxtRelReq>);

// PduSessionResourceItemCxtRelReq
#[derive(Clone)]
pub struct PduSessionResourceItemCxtRelReq {
    pub pdu_session_id: PduSessionId,
}

// PduSessionResourceListHoRqd
#[derive(Clone)]
pub struct PduSessionResourceListHoRqd(pub Vec<PduSessionResourceItemHoRqd>);

// PduSessionResourceItemHoRqd
#[derive(Clone)]
pub struct PduSessionResourceItemHoRqd {
    pub pdu_session_id: PduSessionId,
    pub handover_required_transfer: Vec<u8>,
}

// PduSessionResourceModifyConfirmTransfer
#[derive(Clone)]
pub struct PduSessionResourceModifyConfirmTransfer {
    pub qos_flow_modify_confirm_list: QosFlowModifyConfirmList,
    pub ulngu_up_tnl_information: UpTransportLayerInformation,
    pub additional_ng_uuptnl_information: Option<UpTransportLayerInformationPairList>,
    pub qos_flow_failed_to_modify_list: Option<QosFlowListWithCause>,
}

// PduSessionResourceModifyIndicationUnsuccessfulTransfer
#[derive(Clone)]
pub struct PduSessionResourceModifyIndicationUnsuccessfulTransfer {
    pub cause: Cause,
}

// PduSessionResourceModifyRequestTransfer
#[derive(Clone)]
pub struct PduSessionResourceModifyRequestTransfer {
    pub pdu_session_aggregate_maximum_bit_rate: Option<PduSessionAggregateMaximumBitRate>,
    pub ul_ngu_up_tnl_modify_list: Option<UlNguUpTnlModifyList>,
    pub network_instance: Option<NetworkInstance>,
    pub qos_flow_add_or_modify_request_list: Option<QosFlowAddOrModifyRequestList>,
    pub qos_flow_to_release_list: Option<QosFlowListWithCause>,
    pub additional_ul_ngu_up_tnl_information: Option<UpTransportLayerInformationList>,
    pub common_network_instance: Option<CommonNetworkInstance>,
    pub additional_redundant_ul_ngu_up_tnl_information: Option<UpTransportLayerInformationList>,
    pub redundant_common_network_instance: Option<CommonNetworkInstance>,
    pub redundant_ul_ngu_up_tnl_information: Option<UpTransportLayerInformation>,
    pub security_indication: Option<SecurityIndication>,
}

impl AperCodec for PduSessionResourceModifyRequestTransfer {
    type Output = PduSessionResourceModifyRequestTransfer;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        // extension marker TODO
        let len = decoder.decode_length()?;
        let mut pdu_session_aggregate_maximum_bit_rate: Option<PduSessionAggregateMaximumBitRate> =
            None;
        let mut ul_ngu_up_tnl_modify_list: Option<UlNguUpTnlModifyList> = None;
        let mut network_instance: Option<NetworkInstance> = None;
        let mut qos_flow_add_or_modify_request_list: Option<QosFlowAddOrModifyRequestList> = None;
        let mut qos_flow_to_release_list: Option<QosFlowListWithCause> = None;
        let mut additional_ul_ngu_up_tnl_information: Option<UpTransportLayerInformationList> =
            None;
        let mut common_network_instance: Option<CommonNetworkInstance> = None;
        let mut additional_redundant_ul_ngu_up_tnl_information: Option<
            UpTransportLayerInformationList,
        > = None;
        let mut redundant_common_network_instance: Option<CommonNetworkInstance> = None;
        let mut redundant_ul_ngu_up_tnl_information: Option<UpTransportLayerInformation> = None;
        let mut security_indication: Option<SecurityIndication> = None;

        for _ in 0..len {
            let id = u16::from_aper(decoder, UNCONSTRAINED)?;
            let criticality = Criticality::from_aper(decoder, UNCONSTRAINED)?;
            match id {
                130 => {
                    pdu_session_aggregate_maximum_bit_rate = Some(
                        PduSessionAggregateMaximumBitRate::from_aper(decoder, UNCONSTRAINED)?,
                    );
                }
                140 => {
                    ul_ngu_up_tnl_modify_list =
                        Some(UlNguUpTnlModifyList::from_aper(decoder, UNCONSTRAINED)?);
                }
                129 => {
                    network_instance = Some(NetworkInstance::from_aper(decoder, UNCONSTRAINED)?);
                }
                135 => {
                    qos_flow_add_or_modify_request_list = Some(
                        QosFlowAddOrModifyRequestList::from_aper(decoder, UNCONSTRAINED)?,
                    );
                }
                137 => {
                    qos_flow_to_release_list =
                        Some(QosFlowListWithCause::from_aper(decoder, UNCONSTRAINED)?);
                }
                126 => {
                    additional_ul_ngu_up_tnl_information = Some(
                        UpTransportLayerInformationList::from_aper(decoder, UNCONSTRAINED)?,
                    );
                }
                166 => {
                    common_network_instance =
                        Some(CommonNetworkInstance::from_aper(decoder, UNCONSTRAINED)?);
                }
                186 => {
                    additional_redundant_ul_ngu_up_tnl_information = Some(
                        UpTransportLayerInformationList::from_aper(decoder, UNCONSTRAINED)?,
                    );
                }
                190 => {
                    redundant_common_network_instance =
                        Some(CommonNetworkInstance::from_aper(decoder, UNCONSTRAINED)?);
                }
                195 => {
                    redundant_ul_ngu_up_tnl_information = Some(
                        UpTransportLayerInformation::from_aper(decoder, UNCONSTRAINED)?,
                    );
                }
                138 => {
                    security_indication =
                        Some(SecurityIndication::from_aper(decoder, UNCONSTRAINED)?);
                }
                _ => {
                    if let Criticality::Reject = criticality {
                        return Err(DecodeError::InvalidChoice);
                    }
                }
            }
        }
        Ok(Self {
            pdu_session_aggregate_maximum_bit_rate,
            ul_ngu_up_tnl_modify_list,
            network_instance,
            qos_flow_add_or_modify_request_list,
            qos_flow_to_release_list,
            additional_ul_ngu_up_tnl_information,
            common_network_instance,
            additional_redundant_ul_ngu_up_tnl_information,
            redundant_common_network_instance,
            redundant_ul_ngu_up_tnl_information,
            security_indication,
        })
    }
}

// PduSessionResourceModifyResponseTransfer
#[derive(Clone)]
pub struct PduSessionResourceModifyResponseTransfer {
    pub dl_ngu_up_tnl_information: Option<UpTransportLayerInformation>,
    pub ul_ngu_up_tnl_information: Option<UpTransportLayerInformation>,
    pub qos_flow_add_or_modify_response_list: Option<QosFlowAddOrModifyResponseList>,
    pub additional_dl_qos_flow_per_tnl_information: Option<QosFlowPerTnlInformationList>,
    pub qos_flow_failed_to_add_or_modify_list: Option<QosFlowListWithCause>,
}

// PduSessionResourceModifyIndicationTransfer
#[derive(Clone)]
pub struct PduSessionResourceModifyIndicationTransfer {
    pub dl_qos_flow_per_tnl_information: QosFlowPerTnlInformation,
    pub additional_dl_qos_flow_per_tnl_information: Option<QosFlowPerTnlInformationList>,
}

// PduSessionResourceModifyListModCfm
#[derive(Clone)]
pub struct PduSessionResourceModifyListModCfm(pub Vec<PduSessionResourceModifyItemModCfm>);

// PduSessionResourceModifyItemModCfm
#[derive(Clone)]
pub struct PduSessionResourceModifyItemModCfm {
    pub pdu_session_id: PduSessionId,
    pub pdu_session_resource_modify_confirm_transfer: Vec<u8>,
}

// PduSessionResourceModifyListModInd
#[derive(Clone)]
pub struct PduSessionResourceModifyListModInd(pub Vec<PduSessionResourceModifyItemModInd>);

// PduSessionResourceModifyItemModInd
#[derive(Clone)]
pub struct PduSessionResourceModifyItemModInd {
    pub pdu_session_id: PduSessionId,
    pub pdu_session_resource_modify_indication_transfer: Vec<u8>,
}

// PduSessionResourceModifyListModReq
#[derive(Clone)]
pub struct PduSessionResourceModifyListModReq(pub Vec<PduSessionResourceModifyItemModReq>);

// PduSessionResourceModifyItemModReq
#[derive(Clone)]
pub struct PduSessionResourceModifyItemModReq {
    pub pdu_session_id: PduSessionId,
    pub nas_pdu: Option<NasPdu>,
    pub pdu_session_resource_modify_request_transfer: Vec<u8>,
}

// PduSessionResourceModifyListModRes
#[derive(Clone)]
pub struct PduSessionResourceModifyListModRes(pub Vec<PduSessionResourceModifyItemModRes>);

// PduSessionResourceModifyItemModRes
#[derive(Clone)]
pub struct PduSessionResourceModifyItemModRes {
    pub pdu_session_id: PduSessionId,
    pub pdu_session_resource_modify_response_transfer: Vec<u8>,
}

// PduSessionResourceModifyUnsuccessfulTransfer
#[derive(Clone)]
pub struct PduSessionResourceModifyUnsuccessfulTransfer {
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

// PduSessionResourceNotifyList
#[derive(Clone)]
pub struct PduSessionResourceNotifyList(pub Vec<PduSessionResourceNotifyItem>);

// PduSessionResourceNotifyItem
#[derive(Clone)]
pub struct PduSessionResourceNotifyItem {
    pub pdu_session_id: PduSessionId,
    pub pdu_session_resource_notify_transfer: Vec<u8>,
}

// PduSessionResourceNotifyReleasedTransfer
#[derive(Clone)]
pub struct PduSessionResourceNotifyReleasedTransfer {
    pub cause: Cause,
}

// PduSessionResourceNotifyTransfer
#[derive(Clone)]
pub struct PduSessionResourceNotifyTransfer {
    pub qos_flow_notify_list: Option<QosFlowNotifyList>,
    pub qos_flow_released_list: Option<QosFlowListWithCause>,
}

// PduSessionResourceReleaseCommandTransfer
#[derive(Clone)]
pub struct PduSessionResourceReleaseCommandTransfer {
    pub cause: Cause,
}

// PduSessionResourceReleasedListNot
#[derive(Clone)]
pub struct PduSessionResourceReleasedListNot(pub Vec<PduSessionResourceReleasedItemNot>);

// PduSessionResourceReleasedItemNot
#[derive(Clone)]
pub struct PduSessionResourceReleasedItemNot {
    pub pdu_session_id: PduSessionId,
    pub pdu_session_resource_notify_released_transfer: Vec<u8>,
}

// PduSessionResourceReleasedListPsAck
#[derive(Clone)]
pub struct PduSessionResourceReleasedListPsAck(pub Vec<PduSessionResourceReleasedItemPsAck>);

// PduSessionResourceReleasedItemPsAck
#[derive(Clone)]
pub struct PduSessionResourceReleasedItemPsAck {
    pub pdu_session_id: PduSessionId,
    pub path_switch_request_unsuccessful_transfer: Vec<u8>,
}

// PduSessionResourceReleasedListPsFail
#[derive(Clone)]
pub struct PduSessionResourceReleasedListPsFail(pub Vec<PduSessionResourceReleasedItemPsFail>);

// PduSessionResourceReleasedItemPsFail
#[derive(Clone)]
pub struct PduSessionResourceReleasedItemPsFail {
    pub pdu_session_id: PduSessionId,
    pub path_switch_request_unsuccessful_transfer: Vec<u8>,
}

// PduSessionResourceReleasedListRelRes
#[derive(Clone)]
pub struct PduSessionResourceReleasedListRelRes(pub Vec<PduSessionResourceReleasedItemRelRes>);

// PduSessionResourceReleasedItemRelRes
#[derive(Clone)]
pub struct PduSessionResourceReleasedItemRelRes {
    pub pdu_session_id: PduSessionId,
    pub pdu_session_resource_release_response_transfer: Vec<u8>,
}
// PduSessionResourceReleaseResponseTransfer - omitted

// PduSessionResourceResumeListResReq
#[derive(Clone)]
pub struct PduSessionResourceResumeListResReq(pub Vec<PduSessionResourceResumeItemResReq>);

// PduSessionResourceResumeItemResReq
#[derive(Clone)]
pub struct PduSessionResourceResumeItemResReq {
    pub pdu_session_id: PduSessionId,
    pub ue_context_resume_request_transfer: Vec<u8>,
}

// PduSessionResourceResumeListResRes
#[derive(Clone)]
pub struct PduSessionResourceResumeListResRes(pub Vec<PduSessionResourceResumeItemResRes>);

// PduSessionResourceResumeItemResRes
#[derive(Clone)]
pub struct PduSessionResourceResumeItemResRes {
    pub pdu_session_id: PduSessionId,
    pub ue_context_resume_response_transfer: Vec<u8>,
}

// PduSessionResourceSecondaryRatUsageList
#[derive(Clone)]
pub struct PduSessionResourceSecondaryRatUsageList(
    pub Vec<PduSessionResourceSecondaryRatUsageItem>,
);

// PduSessionResourceSecondaryRatUsageItem
#[derive(Clone)]
pub struct PduSessionResourceSecondaryRatUsageItem {
    pub pdu_session_id: PduSessionId,
    pub secondary_rat_data_usage_report_transfer: Vec<u8>,
}

// PduSessionResourceSetupListCxtReq
#[derive(Clone)]
pub struct PduSessionResourceSetupListCxtReq(pub Vec<PduSessionResourceSetupItemCxtReq>);

// PduSessionResourceSetupItemCxtReq
#[derive(Clone)]
pub struct PduSessionResourceSetupItemCxtReq {
    pub pdu_session_id: PduSessionId,
    pub nas_pdu: Option<NasPdu>,
    pub s_nssai: SNssai,
    pub pdu_session_resource_setup_request_transfer: Vec<u8>,
}

// PduSessionResourceSetupListCxtRes
#[derive(Clone)]
pub struct PduSessionResourceSetupListCxtRes(pub Vec<PduSessionResourceSetupItemCxtRes>);

// PduSessionResourceSetupItemCxtRes
#[derive(Clone)]
pub struct PduSessionResourceSetupItemCxtRes {
    pub pdu_session_id: PduSessionId,
    pub pdu_session_resource_setup_response_transfer: Vec<u8>,
}

// PduSessionResourceSetupListHoReq
#[derive(Clone)]
pub struct PduSessionResourceSetupListHoReq(pub Vec<PduSessionResourceSetupItemHoReq>);

// PduSessionResourceSetupItemHoReq
#[derive(Clone)]
pub struct PduSessionResourceSetupItemHoReq {
    pub pdu_session_id: PduSessionId,
    pub s_nssai: SNssai,
    pub handover_request_transfer: Vec<u8>,
}

// PduSessionResourceSetupListSuReq
#[derive(Clone)]
pub struct PduSessionResourceSetupListSuReq(pub Vec<PduSessionResourceSetupItemSuReq>);

// PduSessionResourceSetupItemSuReq
#[derive(Clone)]
pub struct PduSessionResourceSetupItemSuReq {
    pub pdu_session_id: PduSessionId,
    pub pdu_session_nas_pdu: Option<NasPdu>,
    pub s_nssai: SNssai,
    pub pdu_session_resource_setup_request_transfer: Vec<u8>,
}

// PduSessionResourceSetupListSuRes
#[derive(Clone)]
pub struct PduSessionResourceSetupListSuRes(pub Vec<PduSessionResourceSetupItemSuRes>);

// PduSessionResourceSetupItemSuRes
#[derive(Clone)]
pub struct PduSessionResourceSetupItemSuRes {
    pub pdu_session_id: PduSessionId,
    pub pdu_session_resource_setup_response_transfer: Vec<u8>,
}

// PduSessionResourceSetupRequestTransfer
#[derive(Clone)]
pub struct PduSessionResourceSetupRequestTransfer {
    pub pdu_session_aggregate_maximum_bit_rate: Option<PduSessionAggregateMaximumBitRate>,
    pub ul_ngu_up_tnl_information: UpTransportLayerInformation,
    pub additional_ul_ngu_up_tnl_information: Option<UpTransportLayerInformationList>,
    pub data_forwarding_not_possible: Option<DataForwardingNotPossible>,
    pub pdu_session_type: PduSessionType,
    pub security_indication: Option<SecurityIndication>,
    pub network_instance: Option<NetworkInstance>,
    pub qos_flow_setup_request_list: QosFlowSetupRequestList,
    pub common_network_instance: Option<CommonNetworkInstance>,
    pub direct_forwarding_path_availability: Option<DirectForwardingPathAvailability>,
    pub redundant_ul_ngu_up_tnl_information: Option<UpTransportLayerInformation>,
    pub additional_redundant_ul_ngu_up_tnl_information: Option<UpTransportLayerInformationList>,
    pub redundant_common_network_instance: Option<CommonNetworkInstance>,
    pub redundant_pdu_session_information: Option<RedundantPduSessionInformation>,
}

impl AperCodec for PduSessionResourceSetupRequestTransfer {
    type Output = PduSessionResourceSetupRequestTransfer;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        // extension marker TODO
        let len = decoder.decode_length()?;
        let mut pdu_session_aggregate_maximum_bit_rate: Option<PduSessionAggregateMaximumBitRate> =
            None;
        let mut ul_ngu_up_tnl_information: Option<UpTransportLayerInformation> = None;
        let mut additional_ul_ngu_up_tnl_information: Option<UpTransportLayerInformationList> =
            None;
        let mut data_forwarding_not_possible: Option<DataForwardingNotPossible> = None;
        let mut pdu_session_type: Option<PduSessionType> = None;
        let mut security_indication: Option<SecurityIndication> = None;
        let mut network_instance: Option<NetworkInstance> = None;
        let mut qos_flow_setup_request_list: Option<QosFlowSetupRequestList> = None;
        let mut common_network_instance: Option<CommonNetworkInstance> = None;
        let mut direct_forwarding_path_availability: Option<DirectForwardingPathAvailability> =
            None;
        let mut redundant_ul_ngu_up_tnl_information: Option<UpTransportLayerInformation> = None;
        let mut additional_redundant_ul_ngu_up_tnl_information: Option<
            UpTransportLayerInformationList,
        > = None;
        let mut redundant_common_network_instance: Option<CommonNetworkInstance> = None;
        let mut redundant_pdu_session_information: Option<RedundantPduSessionInformation> = None;

        for _ in 0..len {
            let id = u16::from_aper(decoder, UNCONSTRAINED)?;
            let criticality = Criticality::from_aper(decoder, UNCONSTRAINED)?;
            match id {
                130 => {
                    pdu_session_aggregate_maximum_bit_rate = Some(
                        PduSessionAggregateMaximumBitRate::from_aper(decoder, UNCONSTRAINED)?,
                    );
                }
                139 => {
                    ul_ngu_up_tnl_information = Some(UpTransportLayerInformation::from_aper(
                        decoder,
                        UNCONSTRAINED,
                    )?);
                }
                126 => {
                    additional_ul_ngu_up_tnl_information = Some(
                        UpTransportLayerInformationList::from_aper(decoder, UNCONSTRAINED)?,
                    );
                }
                127 => {
                    data_forwarding_not_possible = Some(DataForwardingNotPossible::from_aper(
                        decoder,
                        UNCONSTRAINED,
                    )?);
                }
                134 => {
                    pdu_session_type = Some(PduSessionType::from_aper(decoder, UNCONSTRAINED)?);
                }
                138 => {
                    security_indication =
                        Some(SecurityIndication::from_aper(decoder, UNCONSTRAINED)?);
                }
                129 => {
                    network_instance = Some(NetworkInstance::from_aper(decoder, UNCONSTRAINED)?);
                }
                136 => {
                    qos_flow_setup_request_list =
                        Some(QosFlowSetupRequestList::from_aper(decoder, UNCONSTRAINED)?);
                }
                166 => {
                    common_network_instance =
                        Some(CommonNetworkInstance::from_aper(decoder, UNCONSTRAINED)?);
                }
                22 => {
                    direct_forwarding_path_availability = Some(
                        DirectForwardingPathAvailability::from_aper(decoder, UNCONSTRAINED)?,
                    );
                }
                195 => {
                    redundant_ul_ngu_up_tnl_information = Some(
                        UpTransportLayerInformation::from_aper(decoder, UNCONSTRAINED)?,
                    );
                }
                186 => {
                    additional_redundant_ul_ngu_up_tnl_information = Some(
                        UpTransportLayerInformationList::from_aper(decoder, UNCONSTRAINED)?,
                    );
                }
                190 => {
                    redundant_common_network_instance =
                        Some(CommonNetworkInstance::from_aper(decoder, UNCONSTRAINED)?);
                }
                197 => {
                    redundant_pdu_session_information = Some(
                        RedundantPduSessionInformation::from_aper(decoder, UNCONSTRAINED)?,
                    );
                }
                _ => {
                    if let Criticality::Reject = criticality {
                        return Err(DecodeError::InvalidChoice);
                    }
                }
            }
        }
        let ul_ngu_up_tnl_information =
            ul_ngu_up_tnl_information.ok_or(DecodeError::InvalidChoice)?;
        let pdu_session_type = pdu_session_type.ok_or(DecodeError::InvalidChoice)?;
        let qos_flow_setup_request_list =
            qos_flow_setup_request_list.ok_or(DecodeError::InvalidChoice)?;
        Ok(Self {
            pdu_session_aggregate_maximum_bit_rate,
            ul_ngu_up_tnl_information,
            additional_ul_ngu_up_tnl_information,
            data_forwarding_not_possible,
            pdu_session_type,
            security_indication,
            network_instance,
            qos_flow_setup_request_list,
            common_network_instance,
            direct_forwarding_path_availability,
            redundant_ul_ngu_up_tnl_information,
            additional_redundant_ul_ngu_up_tnl_information,
            redundant_common_network_instance,
            redundant_pdu_session_information,
        })
    }
}

// PduSessionResourceSetupResponseTransfer
#[derive(Clone)]
pub struct PduSessionResourceSetupResponseTransfer {
    pub dl_qos_flow_per_tnl_information: QosFlowPerTnlInformation,
    pub additional_dl_qos_flow_per_tnl_information: Option<QosFlowPerTnlInformationList>,
    pub security_result: Option<SecurityResult>,
    pub qos_flow_failed_to_setup_list: Option<QosFlowListWithCause>,
}

// PduSessionResourceSetupUnsuccessfulTransfer
#[derive(Clone)]
pub struct PduSessionResourceSetupUnsuccessfulTransfer {
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

// PduSessionResourceSuspendListSusReq
#[derive(Clone)]
pub struct PduSessionResourceSuspendListSusReq(pub Vec<PduSessionResourceSuspendItemSusReq>);

// PduSessionResourceSuspendItemSusReq
#[derive(Clone)]
pub struct PduSessionResourceSuspendItemSusReq {
    pub pdu_session_id: PduSessionId,
    pub ue_context_suspend_request_transfer: Vec<u8>,
}

// PduSessionResourceSwitchedList
#[derive(Clone)]
pub struct PduSessionResourceSwitchedList(pub Vec<PduSessionResourceSwitchedItem>);

// PduSessionResourceSwitchedItem
#[derive(Clone)]
pub struct PduSessionResourceSwitchedItem {
    pub pdu_session_id: PduSessionId,
    pub path_switch_request_acknowledge_transfer: Vec<u8>,
}

// PduSessionResourceToBeSwitchedDlList
#[derive(Clone)]
pub struct PduSessionResourceToBeSwitchedDlList(pub Vec<PduSessionResourceToBeSwitchedDlItem>);

// PduSessionResourceToBeSwitchedDlItem
#[derive(Clone)]
pub struct PduSessionResourceToBeSwitchedDlItem {
    pub pdu_session_id: PduSessionId,
    pub path_switch_request_transfer: Vec<u8>,
}

// PduSessionResourceToReleaseListHoCmd
#[derive(Clone)]
pub struct PduSessionResourceToReleaseListHoCmd(pub Vec<PduSessionResourceToReleaseItemHoCmd>);

// PduSessionResourceToReleaseItemHoCmd
#[derive(Clone)]
pub struct PduSessionResourceToReleaseItemHoCmd {
    pub pdu_session_id: PduSessionId,
    pub handover_preparation_unsuccessful_transfer: Vec<u8>,
}

// PduSessionResourceToReleaseListRelCmd
#[derive(Clone)]
pub struct PduSessionResourceToReleaseListRelCmd(pub Vec<PduSessionResourceToReleaseItemRelCmd>);

// PduSessionResourceToReleaseItemRelCmd
#[derive(Clone)]
pub struct PduSessionResourceToReleaseItemRelCmd {
    pub pdu_session_id: PduSessionId,
    pub pdu_session_resource_release_command_transfer: Vec<u8>,
}

// PduSessionType
#[derive(Clone, Copy)]
pub enum PduSessionType {
    Ipv4,
    Ipv6,
    Ipv4v6,
    Ethernet,
    Unstructured,
}

// PduSessionUsageReport
#[derive(Clone)]
pub struct PduSessionUsageReport {
    pub rat_type: RatType,
    pub pdu_session_timed_report_list: VolumeTimedReportList,
}

// Periodicity
#[derive(Clone)]
pub struct Periodicity(pub u32);

// PeriodicRegistrationUpdateTimer
#[derive(Clone)]
pub struct PeriodicRegistrationUpdateTimer(pub BitString);

// PlmnIdentity
#[derive(Clone)]
pub struct PlmnIdentity(pub Vec<u8>);

// PlmnSupportList
#[derive(Clone)]
pub struct PlmnSupportList(pub Vec<PlmnSupportItem>);

// PlmnSupportItem
#[derive(Clone)]
pub struct PlmnSupportItem {
    pub plmn_identity: PlmnIdentity,
    pub slice_support_list: SliceSupportList,
}

// PniNpnMobilityInformation
#[derive(Clone)]
pub struct PniNpnMobilityInformation {
    pub allowed_pni_npi_list: AllowedPniNpnList,
}

// PortNumber
#[derive(Clone)]
pub struct PortNumber(pub Vec<u8>);

// PreEmptionCapability
#[derive(Clone, Copy)]
pub enum PreEmptionCapability {
    ShallNotTriggerPreEmption,
    MayTriggerPreEmption,
}

// PreEmptionVulnerability
#[derive(Clone, Copy)]
pub enum PreEmptionVulnerability {
    NotPreEmptable,
    PreEmptable,
}

// PriorityLevelArp
#[derive(Clone)]
pub struct PriorityLevelArp(pub u8);

// PriorityLevelQos
#[derive(Clone)]
pub struct PriorityLevelQos(pub u8);

// PwsFailedCellIdList
#[derive(Clone)]
pub enum PwsFailedCellIdList {
    EutraCgiPwsFailedList(EutraCgiList),
    NrCgiPwsFailedList(NrCgiList),
}

// QosCharacteristics
#[derive(Clone)]
pub enum QosCharacteristics {
    NonDynamic5qi(NonDynamic5qiDescriptor),
    Dynamic5qi(Dynamic5qiDescriptor),
}

// QosFlowAcceptedList
#[derive(Clone)]
pub struct QosFlowAcceptedList(pub Vec<QosFlowAcceptedItem>);

// QosFlowAcceptedItem
#[derive(Clone)]
pub struct QosFlowAcceptedItem {
    pub qos_flow_identifier: QosFlowIdentifier,
}

// QosFlowAddOrModifyRequestList
#[derive(Clone)]
pub struct QosFlowAddOrModifyRequestList(pub Vec<QosFlowAddOrModifyRequestItem>);

// QosFlowAddOrModifyRequestItem
#[derive(Clone)]
pub struct QosFlowAddOrModifyRequestItem {
    pub qos_flow_identifier: QosFlowIdentifier,
    pub qos_flow_level_qos_parameters: Option<QosFlowLevelQosParameters>,
    pub e_rab_id: Option<ERabId>,
}

// QosFlowAddOrModifyResponseList
#[derive(Clone)]
pub struct QosFlowAddOrModifyResponseList(pub Vec<QosFlowAddOrModifyResponseItem>);

// QosFlowAddOrModifyResponseItem
#[derive(Clone)]
pub struct QosFlowAddOrModifyResponseItem {
    pub qos_flow_identifier: QosFlowIdentifier,
}

// QosFlowFeedbackList
#[derive(Clone)]
pub struct QosFlowFeedbackList(pub Vec<QosFlowFeedbackItem>);

// QosFlowFeedbackItem
#[derive(Clone)]
pub struct QosFlowFeedbackItem {
    pub qos_flow_identifier: QosFlowIdentifier,
    pub update_feedback: Option<UpdateFeedback>,
    pub c_npacket_delay_budget_dl: Option<ExtendedPacketDelayBudget>,
    pub c_npacket_delay_budget_ul: Option<ExtendedPacketDelayBudget>,
}

// QosFlowIdentifier
#[derive(Clone)]
pub struct QosFlowIdentifier(pub u8);

// QosFlowInformationList
#[derive(Clone)]
pub struct QosFlowInformationList(pub Vec<QosFlowInformationItem>);

// QosFlowInformationItem
#[derive(Clone)]
pub struct QosFlowInformationItem {
    pub qos_flow_identifier: QosFlowIdentifier,
    pub dl_forwarding: Option<DlForwarding>,
}

// QosFlowLevelQosParameters
#[derive(Clone)]
pub struct QosFlowLevelQosParameters {
    pub qos_characteristics: QosCharacteristics,
    pub allocation_and_retention_priority: AllocationAndRetentionPriority,
    pub gbr_qos_information: Option<GbrQosInformation>,
    pub reflective_qos_attribute: Option<ReflectiveQosAttribute>,
    pub additional_qos_flow_information: Option<AdditionalQosFlowInformation>,
}

// QosMonitoringRequest
#[derive(Clone, Copy)]
pub enum QosMonitoringRequest {
    Ul,
    Dl,
    Both,
}

// QosMonitoringReportingFrequency
#[derive(Clone)]
pub struct QosMonitoringReportingFrequency(pub u16);

// QosFlowListWithCause
#[derive(Clone)]
pub struct QosFlowListWithCause(pub Vec<QosFlowWithCauseItem>);

// QosFlowWithCauseItem
#[derive(Clone)]
pub struct QosFlowWithCauseItem {
    pub qos_flow_identifier: QosFlowIdentifier,
    pub cause: Cause,
}

// QosFlowModifyConfirmList
#[derive(Clone)]
pub struct QosFlowModifyConfirmList(pub Vec<QosFlowModifyConfirmItem>);

// QosFlowModifyConfirmItem
#[derive(Clone)]
pub struct QosFlowModifyConfirmItem {
    pub qos_flow_identifier: QosFlowIdentifier,
}

// QosFlowNotifyList
#[derive(Clone)]
pub struct QosFlowNotifyList(pub Vec<QosFlowNotifyItem>);

// QosFlowNotifyItem
#[derive(Clone)]
pub struct QosFlowNotifyItem {
    pub qos_flow_identifier: QosFlowIdentifier,
    pub notification_cause: NotificationCause,
}

// QosFlowParametersList
#[derive(Clone)]
pub struct QosFlowParametersList(pub Vec<QosFlowParametersItem>);

// QosFlowParametersItem
#[derive(Clone)]
pub struct QosFlowParametersItem {
    pub qos_flow_identifier: QosFlowIdentifier,
    pub alternative_qos_para_set_list: Option<AlternativeQosParaSetList>,
}

// QosFlowPerTnlInformation
#[derive(Clone)]
pub struct QosFlowPerTnlInformation {
    pub up_transport_layer_information: UpTransportLayerInformation,
    pub associated_qos_flow_list: AssociatedQosFlowList,
}

// QosFlowPerTnlInformationList
#[derive(Clone)]
pub struct QosFlowPerTnlInformationList(pub Vec<QosFlowPerTnlInformationItem>);

// QosFlowPerTnlInformationItem
#[derive(Clone)]
pub struct QosFlowPerTnlInformationItem {
    pub qos_flow_per_tnl_information: QosFlowPerTnlInformation,
}

// QosFlowSetupRequestList
#[derive(Clone)]
pub struct QosFlowSetupRequestList(pub Vec<QosFlowSetupRequestItem>);

// QosFlowSetupRequestItem
#[derive(Clone)]
pub struct QosFlowSetupRequestItem {
    pub qos_flow_identifier: QosFlowIdentifier,
    pub qos_flow_level_qos_parameters: QosFlowLevelQosParameters,
    pub e_rab_id: Option<ERabId>,
}

// QosFlowListWithDataForwarding
#[derive(Clone)]
pub struct QosFlowListWithDataForwarding(pub Vec<QosFlowItemWithDataForwarding>);

// QosFlowItemWithDataForwarding
#[derive(Clone)]
pub struct QosFlowItemWithDataForwarding {
    pub qos_flow_identifier: QosFlowIdentifier,
    pub data_forwarding_accepted: Option<DataForwardingAccepted>,
}

// QosFlowToBeForwardedList
#[derive(Clone)]
pub struct QosFlowToBeForwardedList(pub Vec<QosFlowToBeForwardedItem>);

// QosFlowToBeForwardedItem
#[derive(Clone)]
pub struct QosFlowToBeForwardedItem {
    pub qos_flow_identifier: QosFlowIdentifier,
}

// QosFlowsUsageReportList
#[derive(Clone)]
pub struct QosFlowsUsageReportList(pub Vec<QosFlowsUsageReportItem>);

// QosFlowsUsageReportItem
#[derive(Clone)]
pub struct QosFlowsUsageReportItem {
    pub qos_flow_identifier: QosFlowIdentifier,
    pub rat_type: RatType1,
    pub qos_flows_timed_report_list: VolumeTimedReportList,
}

// Range
#[derive(Clone, Copy)]
pub enum Range {
    M50,
    M80,
    M180,
    M200,
    M350,
    M400,
    M500,
    M700,
    M1000,
}

// RanNodeName
#[derive(Clone)]
pub struct RanNodeName(pub String);

// RanNodeNameVisibleString
#[derive(Clone)]
pub struct RanNodeNameVisibleString(pub String);

// RanNodeNameUtf8String
#[derive(Clone)]
pub struct RanNodeNameUtf8String(pub String);

// RanPagingPriority
#[derive(Clone)]
pub struct RanPagingPriority(pub u8);

// RanStatusTransferTransparentContainer
#[derive(Clone)]
pub struct RanStatusTransferTransparentContainer {
    pub dr_bs_subject_to_status_transfer_list: DrBsSubjectToStatusTransferList,
}

// RanUeNgapId
#[derive(Clone)]
pub struct RanUeNgapId(pub u64);

// RatInformation
#[derive(Clone, Copy)]
pub enum RatInformation {
    Unlicensed,
    NbIot,
}

// RatRestrictions
#[derive(Clone)]
pub struct RatRestrictions(pub Vec<RatRestrictionsItem>);

// RatRestrictionsItem
#[derive(Clone)]
pub struct RatRestrictionsItem {
    pub plmn_identity: PlmnIdentity,
    pub rat_restriction_information: RatRestrictionInformation,
}

// RatRestrictionInformation
#[derive(Clone)]
pub struct RatRestrictionInformation(pub BitString);

// RecommendedCellsForPaging
#[derive(Clone)]
pub struct RecommendedCellsForPaging {
    pub recommended_cell_list: RecommendedCellList,
}

// RecommendedCellList
#[derive(Clone)]
pub struct RecommendedCellList(pub Vec<RecommendedCellItem>);

// RecommendedCellItem
#[derive(Clone)]
pub struct RecommendedCellItem {
    pub ngran_cgi: NgranCgi,
    pub time_stayed_in_cell: Option<u16>,
}

// RecommendedRanNodesForPaging
#[derive(Clone)]
pub struct RecommendedRanNodesForPaging {
    pub recommended_ran_node_list: RecommendedRanNodeList,
}

// RecommendedRanNodeList
#[derive(Clone)]
pub struct RecommendedRanNodeList(pub Vec<RecommendedRanNodeItem>);

// RecommendedRanNodeItem
#[derive(Clone)]
pub struct RecommendedRanNodeItem {
    pub amf_paging_target: AmfPagingTarget,
}

// RedirectionVoiceFallback
#[derive(Clone, Copy)]
pub enum RedirectionVoiceFallback {
    Possible,
    NotPossible,
}

// RedundantPduSessionInformation
#[derive(Clone)]
pub struct RedundantPduSessionInformation {
    pub rsn: Rsn,
}

// RedundantQosFlowIndicator
#[derive(Clone, Copy)]
pub enum RedundantQosFlowIndicator {
    True,
    False,
}

// ReflectiveQosAttribute
#[derive(Clone, Copy)]
pub enum ReflectiveQosAttribute {
    SubjectTo,
}

// RelativeAmfCapacity
#[derive(Clone)]
pub struct RelativeAmfCapacity(pub u8);

// ReportArea
#[derive(Clone, Copy)]
pub enum ReportArea {
    Cell,
}

// RepetitionPeriod
#[derive(Clone)]
pub struct RepetitionPeriod(pub u32);

// ResetAll
#[derive(Clone, Copy)]
pub enum ResetAll {
    ResetAll,
}

// ReportAmountMdt
#[derive(Clone, Copy)]
pub enum ReportAmountMdt {
    R1,
    R2,
    R4,
    R8,
    R16,
    R32,
    R64,
    Rinfinity,
}

// ReportIntervalMdt
#[derive(Clone, Copy)]
pub enum ReportIntervalMdt {
    Ms120,
    Ms240,
    Ms480,
    Ms640,
    Ms1024,
    Ms2048,
    Ms5120,
    Ms10240,
    Min1,
    Min6,
    Min12,
    Min30,
    Min60,
}

// ResetType
#[derive(Clone)]
pub enum ResetType {
    NgInterface(ResetAll),
    PartOfNgInterface(UeAssociatedLogicalNgConnectionList),
}

// RgLevelWirelineAccessCharacteristics
#[derive(Clone)]
pub struct RgLevelWirelineAccessCharacteristics(pub Vec<u8>);

// RncId
#[derive(Clone)]
pub struct RncId(pub u16);

// RoutingId
#[derive(Clone)]
pub struct RoutingId(pub Vec<u8>);

// RrcContainer
#[derive(Clone)]
pub struct RrcContainer(pub Vec<u8>);

// RrcEstablishmentCause
#[derive(Clone, Copy)]
pub enum RrcEstablishmentCause {
    Emergency,
    HighPriorityAccess,
    MtAccess,
    MoSignalling,
    MoData,
    MoVoiceCall,
    MoVideoCall,
    MoSms,
    MpsPriorityAccess,
    McsPriorityAccess,
}

// RrcInactiveTransitionReportRequest
#[derive(Clone, Copy)]
pub enum RrcInactiveTransitionReportRequest {
    SubsequentStateTransitionReport,
    SingleRrcConnectedStateReport,
    CancelReport,
}

// RrcState
#[derive(Clone, Copy)]
pub enum RrcState {
    Inactive,
    Connected,
}

// Rsn
#[derive(Clone, Copy)]
pub enum Rsn {
    V1,
    V2,
}

// RimInformationTransfer
#[derive(Clone)]
pub struct RimInformationTransfer {
    pub target_ran_node_id: TargetRanNodeId,
    pub source_ran_node_id: SourceRanNodeId,
    pub rim_information: RimInformation,
}

// RimInformation
#[derive(Clone)]
pub struct RimInformation {
    pub target_gnb_set_id: GnbSetId,
    pub rim_rs_detection: RimRsDetection,
}

// GnbSetId
#[derive(Clone)]
pub struct GnbSetId(pub BitString);

// ScheduledCommunicationTime
#[derive(Clone)]
pub struct ScheduledCommunicationTime {
    pub dayof_week: Option<BitString>,
    pub timeof_day_start: Option<u32>,
    pub timeof_day_end: Option<u32>,
}

// SctpTlAs
#[derive(Clone)]
pub struct SctpTlAs(pub Vec<TransportLayerAddress>);

// Sd
#[derive(Clone)]
pub struct Sd(pub Vec<u8>);

// SecondaryRatUsageInformation
#[derive(Clone)]
pub struct SecondaryRatUsageInformation {
    pub pdu_session_usage_report: Option<PduSessionUsageReport>,
    pub qos_flows_usage_report_list: Option<QosFlowsUsageReportList>,
}

// SecondaryRatDataUsageReportTransfer
#[derive(Clone)]
pub struct SecondaryRatDataUsageReportTransfer {
    pub secondary_rat_usage_information: Option<SecondaryRatUsageInformation>,
}

// SecurityContext
#[derive(Clone)]
pub struct SecurityContext {
    pub next_hop_chaining_count: NextHopChainingCount,
    pub next_hop_nh: SecurityKey,
}

// SecurityIndication
#[derive(Clone)]
pub struct SecurityIndication {
    pub integrity_protection_indication: IntegrityProtectionIndication,
    pub confidentiality_protection_indication: ConfidentialityProtectionIndication,
    pub maximum_integrity_protected_data_rate_ul: Option<MaximumIntegrityProtectedDataRate>,
}

// SecurityKey
#[derive(Clone)]
pub struct SecurityKey(pub BitString);

// SecurityResult
#[derive(Clone)]
pub struct SecurityResult {
    pub integrity_protection_result: IntegrityProtectionResult,
    pub confidentiality_protection_result: ConfidentialityProtectionResult,
}

// SensorMeasurementConfiguration
#[derive(Clone)]
pub struct SensorMeasurementConfiguration {
    pub sensor_meas_config: SensorMeasConfig,
    pub sensor_meas_config_name_list: Option<SensorMeasConfigNameList>,
}

// SensorMeasConfigNameList
#[derive(Clone)]
pub struct SensorMeasConfigNameList(pub Vec<SensorMeasConfigNameItem>);

// SensorMeasConfigNameItem
#[derive(Clone)]
pub struct SensorMeasConfigNameItem {
    pub sensor_name_config: SensorNameConfig,
}

// SensorMeasConfig
#[derive(Clone, Copy)]
pub enum SensorMeasConfig {
    Setup,
}

// SensorNameConfig
#[derive(Clone)]
pub enum SensorNameConfig {
    UncompensatedBarometricConfig(UncompensatedBarometricConfig),
    UeSpeedConfig(UeSpeedConfig),
    UeOrientationConfig(UeOrientationConfig),
}

// SerialNumber
#[derive(Clone)]
pub struct SerialNumber(pub BitString);

// ServedGuamiList
#[derive(Clone)]
pub struct ServedGuamiList(pub Vec<ServedGuamiItem>);

// ServedGuamiItem
#[derive(Clone)]
pub struct ServedGuamiItem {
    pub guami: Guami,
    pub backup_amf_name: Option<AmfName>,
}

// ServiceAreaInformation
#[derive(Clone)]
pub struct ServiceAreaInformation(pub Vec<ServiceAreaInformationItem>);

// ServiceAreaInformationItem
#[derive(Clone)]
pub struct ServiceAreaInformationItem {
    pub plmn_identity: PlmnIdentity,
    pub allowed_ta_cs: Option<AllowedTaCs>,
    pub not_allowed_ta_cs: Option<NotAllowedTaCs>,
}

// SGnbUeX2apId
#[derive(Clone)]
pub struct SGnbUeX2apId(pub u64);

// SliceOverloadList
#[derive(Clone)]
pub struct SliceOverloadList(pub Vec<SliceOverloadItem>);

// SliceOverloadItem
#[derive(Clone)]
pub struct SliceOverloadItem {
    pub s_nssai: SNssai,
}

// SliceSupportList
#[derive(Clone)]
pub struct SliceSupportList(pub Vec<SliceSupportItem>);

// SliceSupportItem
#[derive(Clone)]
pub struct SliceSupportItem {
    pub s_nssai: SNssai,
}

// SnpnMobilityInformation
#[derive(Clone)]
pub struct SnpnMobilityInformation {
    pub serving_nid: Nid,
}

// SNssai
#[derive(Clone)]
pub struct SNssai {
    pub sst: Sst,
    pub sd: Option<Sd>,
}

// SonConfigurationTransfer
#[derive(Clone)]
pub struct SonConfigurationTransfer {
    pub target_ran_node_id: TargetRanNodeId,
    pub source_ran_node_id: SourceRanNodeId,
    pub son_information: SonInformation,
    pub xn_tnl_configuration_info: Option<XnTnlConfigurationInfo>,
}

// SonInformation
#[derive(Clone)]
pub enum SonInformation {
    SonInformationRequest(SonInformationRequest),
    SonInformationReply(SonInformationReply),
}

// SonInformationReply
#[derive(Clone)]
pub struct SonInformationReply {
    pub xn_tnl_configuration_info: Option<XnTnlConfigurationInfo>,
}

// SonInformationReport
#[derive(Clone)]
pub enum SonInformationReport {
    FailureIndicationInformation(FailureIndication),
    HoReportInformation(HoReport),
}

// SonInformationRequest
#[derive(Clone, Copy)]
pub enum SonInformationRequest {
    XnTnlConfigurationInfo,
}

// SourceNgranNodeToTargetNgranNodeTransparentContainer
#[derive(Clone)]
pub struct SourceNgranNodeToTargetNgranNodeTransparentContainer {
    pub rrc_container: RrcContainer,
    pub pdu_session_resource_information_list: Option<PduSessionResourceInformationList>,
    pub e_rab_information_list: Option<ERabInformationList>,
    pub target_cell_id: NgranCgi,
    pub index_to_rfsp: Option<IndexToRfsp>,
    pub ue_history_information: UeHistoryInformation,
}

// SourceOfUeActivityBehaviourInformation
#[derive(Clone, Copy)]
pub enum SourceOfUeActivityBehaviourInformation {
    SubscriptionInformation,
    Statistics,
}

// SourceRanNodeId
#[derive(Clone)]
pub struct SourceRanNodeId {
    pub global_ran_node_id: GlobalRanNodeId,
    pub selected_tai: Tai,
}

// SourceToTargetTransparentContainer
#[derive(Clone)]
pub struct SourceToTargetTransparentContainer(pub Vec<u8>);

// SourceToTargetAmfInformationReroute
#[derive(Clone)]
pub struct SourceToTargetAmfInformationReroute {
    pub configured_nssai: Option<ConfiguredNssai>,
    pub rejected_nssa_iin_plmn: Option<RejectedNssaIinPlmn>,
    pub rejected_nssa_iin_ta: Option<RejectedNssaIinTa>,
}

// SrvccOperationPossible
#[derive(Clone, Copy)]
pub enum SrvccOperationPossible {
    Possible,
    NotPossible,
}

// ConfiguredNssai
#[derive(Clone)]
pub struct ConfiguredNssai(pub Vec<u8>);

// RejectedNssaIinPlmn
#[derive(Clone)]
pub struct RejectedNssaIinPlmn(pub Vec<u8>);

// RejectedNssaIinTa
#[derive(Clone)]
pub struct RejectedNssaIinTa(pub Vec<u8>);

// Sst
#[derive(Clone)]
pub struct Sst(pub Vec<u8>);

// SupportedTaList
#[derive(Clone)]
pub struct SupportedTaList(pub Vec<SupportedTaItem>);

// SupportedTaItem
#[derive(Clone)]
pub struct SupportedTaItem {
    pub tac: Tac,
    pub broadcast_plmn_list: BroadcastPlmnList,
}

// SuspendIndicator
#[derive(Clone, Copy)]
pub enum SuspendIndicator {
    True,
}

// SuspendRequestIndication
#[derive(Clone, Copy)]
pub enum SuspendRequestIndication {
    SuspendRequested,
}

// SuspendResponseIndication
#[derive(Clone, Copy)]
pub enum SuspendResponseIndication {
    SuspendIndicated,
}

// Tac
#[derive(Clone)]
pub struct Tac(pub Vec<u8>);

// Tai
#[derive(Clone)]
pub struct Tai {
    pub plmn_identity: PlmnIdentity,
    pub tac: Tac,
}

// TaiBroadcastEutra
#[derive(Clone)]
pub struct TaiBroadcastEutra(pub Vec<TaiBroadcastEutraItem>);

// TaiBroadcastEutraItem
#[derive(Clone)]
pub struct TaiBroadcastEutraItem {
    pub tai: Tai,
    pub completed_cells_in_tai_eutra: CompletedCellsInTaiEutra,
}

// TaiBroadcastNr
#[derive(Clone)]
pub struct TaiBroadcastNr(pub Vec<TaiBroadcastNrItem>);

// TaiBroadcastNrItem
#[derive(Clone)]
pub struct TaiBroadcastNrItem {
    pub tai: Tai,
    pub completed_cells_in_tai_nr: CompletedCellsInTaiNr,
}

// TaiCancelledEutra
#[derive(Clone)]
pub struct TaiCancelledEutra(pub Vec<TaiCancelledEutraItem>);

// TaiCancelledEutraItem
#[derive(Clone)]
pub struct TaiCancelledEutraItem {
    pub tai: Tai,
    pub cancelled_cells_in_tai_eutra: CancelledCellsInTaiEutra,
}

// TaiCancelledNr
#[derive(Clone)]
pub struct TaiCancelledNr(pub Vec<TaiCancelledNrItem>);

// TaiCancelledNrItem
#[derive(Clone)]
pub struct TaiCancelledNrItem {
    pub tai: Tai,
    pub cancelled_cells_in_tai_nr: CancelledCellsInTaiNr,
}

// TaiListForInactive
#[derive(Clone)]
pub struct TaiListForInactive(pub Vec<TaiListForInactiveItem>);

// TaiListForInactiveItem
#[derive(Clone)]
pub struct TaiListForInactiveItem {
    pub tai: Tai,
}

// TaiListForPaging
#[derive(Clone)]
pub struct TaiListForPaging(pub Vec<TaiListForPagingItem>);

// TaiListForPagingItem
#[derive(Clone)]
pub struct TaiListForPagingItem {
    pub tai: Tai,
}

// TaiListForRestart
#[derive(Clone)]
pub struct TaiListForRestart(pub Vec<Tai>);

// TaiListForWarning
#[derive(Clone)]
pub struct TaiListForWarning(pub Vec<Tai>);

// TargetEnbId
#[derive(Clone)]
pub struct TargetEnbId {
    pub global_enb_id: GlobalNgEnbId,
    pub selected_eps_tai: EpsTai,
}

// TargetId
#[derive(Clone)]
pub enum TargetId {
    TargetRanNodeId(TargetRanNodeId),
    TargetEnbId(TargetEnbId),
}

// TargetNgranNodeToSourceNgranNodeTransparentContainer
#[derive(Clone)]
pub struct TargetNgranNodeToSourceNgranNodeTransparentContainer {
    pub rrc_container: RrcContainer,
}

// TargetNgranNodeToSourceNgranNodeFailureTransparentContainer
#[derive(Clone)]
pub struct TargetNgranNodeToSourceNgranNodeFailureTransparentContainer {
    pub cell_cag_information: CellCagInformation,
}

// TargetRanNodeId
#[derive(Clone)]
pub struct TargetRanNodeId {
    pub global_ran_node_id: GlobalRanNodeId,
    pub selected_tai: Tai,
}

// TargetRncId
#[derive(Clone)]
pub struct TargetRncId {
    pub lai: Lai,
    pub rnc_id: RncId,
    pub extended_rnc_id: Option<ExtendedRncId>,
}

// TargetToSourceTransparentContainer
#[derive(Clone)]
pub struct TargetToSourceTransparentContainer(pub Vec<u8>);

// TargettoSourceFailureTransparentContainer
#[derive(Clone)]
pub struct TargettoSourceFailureTransparentContainer(pub Vec<u8>);

// TimerApproachForGuamiRemoval
#[derive(Clone, Copy)]
pub enum TimerApproachForGuamiRemoval {
    ApplyTimer,
}

// TimeStamp
#[derive(Clone)]
pub struct TimeStamp(pub Vec<u8>);

// TimeToWait
#[derive(Clone, Copy)]
pub enum TimeToWait {
    V1s,
    V2s,
    V5s,
    V10s,
    V20s,
    V60s,
}

// TimeUeStayedInCell
#[derive(Clone)]
pub struct TimeUeStayedInCell(pub u16);

// TimeUeStayedInCellEnhancedGranularity
#[derive(Clone)]
pub struct TimeUeStayedInCellEnhancedGranularity(pub u16);

// TnapId
#[derive(Clone)]
pub struct TnapId(pub Vec<u8>);

// TngfId
#[derive(Clone)]
pub enum TngfId {
    TngfId(BitString),
}

// TnlAddressWeightFactor
#[derive(Clone)]
pub struct TnlAddressWeightFactor(pub u8);

// TnlAssociationList
#[derive(Clone)]
pub struct TnlAssociationList(pub Vec<TnlAssociationItem>);

// TnlAssociationItem
#[derive(Clone)]
pub struct TnlAssociationItem {
    pub tnl_association_address: CpTransportLayerInformation,
    pub cause: Cause,
}

// TnlAssociationUsage
#[derive(Clone, Copy)]
pub enum TnlAssociationUsage {
    Ue,
    NonUe,
    Both,
}

// TooearlyIntersystemHo
#[derive(Clone)]
pub struct TooearlyIntersystemHo {
    pub sourcecell_id: EutraCgi,
    pub failurecell_id: NgranCgi,
    pub ue_rlf_report_container: Option<UeRlfReportContainer>,
}

// TraceActivation
#[derive(Clone)]
pub struct TraceActivation {
    pub ngran_trace_id: NgranTraceId,
    pub interfaces_to_trace: InterfacesToTrace,
    pub trace_depth: TraceDepth,
    pub trace_collection_entity_ip_address: TransportLayerAddress,
}

// TraceDepth
#[derive(Clone, Copy)]
pub enum TraceDepth {
    Minimum,
    Medium,
    Maximum,
    MinimumWithoutVendorSpecificExtension,
    MediumWithoutVendorSpecificExtension,
    MaximumWithoutVendorSpecificExtension,
}

// TrafficLoadReductionIndication
#[derive(Clone)]
pub struct TrafficLoadReductionIndication(pub u8);

// TransportLayerAddress
#[derive(Clone)]
pub struct TransportLayerAddress(pub BitString);

// TypeOfError
#[derive(Clone, Copy)]
pub enum TypeOfError {
    NotUnderstood,
    Missing,
}

// TaiBasedMdt
#[derive(Clone)]
pub struct TaiBasedMdt {
    pub tai_listfor_mdt: TaiListforMdt,
}

// TaiListforMdt
#[derive(Clone)]
pub struct TaiListforMdt(pub Vec<Tai>);

// TaBasedMdt
#[derive(Clone)]
pub struct TaBasedMdt {
    pub ta_listfor_mdt: TaListforMdt,
}

// TaListforMdt
#[derive(Clone)]
pub struct TaListforMdt(pub Vec<Tac>);

// ThresholdRsrp
#[derive(Clone)]
pub struct ThresholdRsrp(pub u8);

// ThresholdRsrq
#[derive(Clone)]
pub struct ThresholdRsrq(pub u8);

// ThresholdSinr
#[derive(Clone)]
pub struct ThresholdSinr(pub u8);

// TimeToTrigger
#[derive(Clone, Copy)]
pub enum TimeToTrigger {
    Ms0,
    Ms40,
    Ms64,
    Ms80,
    Ms100,
    Ms128,
    Ms160,
    Ms256,
    Ms320,
    Ms480,
    Ms512,
    Ms640,
    Ms1024,
    Ms1280,
    Ms2560,
    Ms5120,
}

// TwapId
#[derive(Clone)]
pub struct TwapId(pub Vec<u8>);

// TwifId
#[derive(Clone)]
pub enum TwifId {
    TwifId(BitString),
}

// TscAssistanceInformation
#[derive(Clone)]
pub struct TscAssistanceInformation {
    pub periodicity: Periodicity,
    pub burst_arrival_time: Option<BurstArrivalTime>,
}

// TscTrafficCharacteristics
#[derive(Clone)]
pub struct TscTrafficCharacteristics {
    pub tsc_assistance_information_dl: Option<TscAssistanceInformation>,
    pub tsc_assistance_information_ul: Option<TscAssistanceInformation>,
}

// UeAggregateMaximumBitRate
#[derive(Clone)]
pub struct UeAggregateMaximumBitRate {
    pub ue_aggregate_maximum_bit_rate_dl: BitRate,
    pub ue_aggregate_maximum_bit_rate_ul: BitRate,
}

// UeAssociatedLogicalNgConnectionList
#[derive(Clone)]
pub struct UeAssociatedLogicalNgConnectionList(pub Vec<UeAssociatedLogicalNgConnectionItem>);

// UeAssociatedLogicalNgConnectionItem
#[derive(Clone)]
pub struct UeAssociatedLogicalNgConnectionItem {
    pub amf_ue_ngap_id: Option<AmfUeNgapId>,
    pub ran_ue_ngap_id: Option<RanUeNgapId>,
}

// UeCapabilityInfoRequest
#[derive(Clone, Copy)]
pub enum UeCapabilityInfoRequest {
    Requested,
}

// UeContextRequest
#[derive(Clone, Copy)]
pub enum UeContextRequest {
    Requested,
}

// UeContextResumeRequestTransfer
#[derive(Clone)]
pub struct UeContextResumeRequestTransfer {
    pub qos_flow_failed_to_resume_list: Option<QosFlowListWithCause>,
}

// UeContextResumeResponseTransfer
#[derive(Clone)]
pub struct UeContextResumeResponseTransfer {
    pub qos_flow_failed_to_resume_list: Option<QosFlowListWithCause>,
}

// UeContextSuspendRequestTransfer
#[derive(Clone)]
pub struct UeContextSuspendRequestTransfer {
    pub suspend_indicator: Option<SuspendIndicator>,
}

// UeDifferentiationInfo
#[derive(Clone)]
pub struct UeDifferentiationInfo {
    pub periodic_communication_indicator: Option<PeriodicCommunicationIndicator>,
    pub periodic_time: Option<u16>,
    pub scheduled_communication_time: Option<ScheduledCommunicationTime>,
    pub stationary_indication: Option<StationaryIndication>,
    pub traffic_profile: Option<TrafficProfile>,
    pub battery_indication: Option<BatteryIndication>,
}

// UeHistoryInformation
#[derive(Clone)]
pub struct UeHistoryInformation(pub Vec<LastVisitedCellItem>);

// UeHistoryInformationFromTheUe
#[derive(Clone)]
pub enum UeHistoryInformationFromTheUe {
    Nr(NrMobilityHistoryReport),
}

// UeIdentityIndexValue
#[derive(Clone)]
pub enum UeIdentityIndexValue {
    IndexLength10(BitString),
}

// UeNgapIDs
#[derive(Clone)]
pub enum UeNgapIDs {
    UeNgapIdPair(UeNgapIdPair),
    AmfUeNgapId(AmfUeNgapId),
}

// UeNgapIdPair
#[derive(Clone)]
pub struct UeNgapIdPair {
    pub amf_ue_ngap_id: AmfUeNgapId,
    pub ran_ue_ngap_id: RanUeNgapId,
}

// UePagingIdentity
#[derive(Clone)]
pub enum UePagingIdentity {
    FiveGSTmsi(FiveGSTmsi),
}

// UePresence
#[derive(Clone, Copy)]
pub enum UePresence {
    In,
    Out,
    Unknown,
}

// UePresenceInAreaOfInterestList
#[derive(Clone)]
pub struct UePresenceInAreaOfInterestList(pub Vec<UePresenceInAreaOfInterestItem>);

// UePresenceInAreaOfInterestItem
#[derive(Clone)]
pub struct UePresenceInAreaOfInterestItem {
    pub location_reporting_reference_id: LocationReportingReferenceId,
    pub ue_presence: UePresence,
}

// UeRadioCapability
#[derive(Clone)]
pub struct UeRadioCapability(pub Vec<u8>);

// UeRadioCapabilityForPaging
#[derive(Clone)]
pub struct UeRadioCapabilityForPaging {
    pub ue_radio_capability_for_paging_of_nr: Option<UeRadioCapabilityForPagingOfNr>,
    pub ue_radio_capability_for_paging_of_eutra: Option<UeRadioCapabilityForPagingOfEutra>,
}

// UeRadioCapabilityForPagingOfNbIot
#[derive(Clone)]
pub struct UeRadioCapabilityForPagingOfNbIot(pub Vec<u8>);

// UeRadioCapabilityForPagingOfNr
#[derive(Clone)]
pub struct UeRadioCapabilityForPagingOfNr(pub Vec<u8>);

// UeRadioCapabilityForPagingOfEutra
#[derive(Clone)]
pub struct UeRadioCapabilityForPagingOfEutra(pub Vec<u8>);

// UeRadioCapabilityId
#[derive(Clone)]
pub struct UeRadioCapabilityId(pub Vec<u8>);

// UeRetentionInformation
#[derive(Clone, Copy)]
pub enum UeRetentionInformation {
    UesRetained,
}

// UeRlfReportContainer
#[derive(Clone)]
pub enum UeRlfReportContainer {
    Nr(NrueRlfReportContainer),
    Lte(LteueRlfReportContainer),
}

// UeSecurityCapabilities
#[derive(Clone)]
pub struct UeSecurityCapabilities {
    pub n_rencryption_algorithms: NRencryptionAlgorithms,
    pub n_rintegrity_protection_algorithms: NRintegrityProtectionAlgorithms,
    pub eutr_aencryption_algorithms: EutrAencryptionAlgorithms,
    pub eutr_aintegrity_protection_algorithms: EutrAintegrityProtectionAlgorithms,
}

// UeUpCIotSupport
#[derive(Clone, Copy)]
pub enum UeUpCIotSupport {
    Supported,
}

// UlCpSecurityInformation
#[derive(Clone)]
pub struct UlCpSecurityInformation {
    pub ul_nas_mac: UlNasMac,
    pub ul_nas_count: UlNasCount,
}

// UlNasMac
#[derive(Clone)]
pub struct UlNasMac(pub BitString);

// UlNasCount
#[derive(Clone)]
pub struct UlNasCount(pub BitString);

// UlNguUpTnlModifyList
#[derive(Clone)]
pub struct UlNguUpTnlModifyList(pub Vec<UlNguUpTnlModifyItem>);

// UlNguUpTnlModifyItem
#[derive(Clone)]
pub struct UlNguUpTnlModifyItem {
    pub ul_ngu_up_tnl_information: UpTransportLayerInformation,
    pub dl_ngu_up_tnl_information: UpTransportLayerInformation,
}

// UnavailableGuamiList
#[derive(Clone)]
pub struct UnavailableGuamiList(pub Vec<UnavailableGuamiItem>);

// UnavailableGuamiItem
#[derive(Clone)]
pub struct UnavailableGuamiItem {
    pub guami: Guami,
    pub timer_approach_for_guami_removal: Option<TimerApproachForGuamiRemoval>,
    pub backup_amf_name: Option<AmfName>,
}

// UlForwarding
#[derive(Clone, Copy)]
pub enum UlForwarding {
    UlForwardingProposed,
}

// UpdateFeedback
#[derive(Clone)]
pub struct UpdateFeedback(pub BitString);

// UpTransportLayerInformation
#[derive(Clone)]
pub enum UpTransportLayerInformation {
    GtpTunnel(GtpTunnel),
}

// UpTransportLayerInformationList
#[derive(Clone)]
pub struct UpTransportLayerInformationList(pub Vec<UpTransportLayerInformationItem>);

// UpTransportLayerInformationItem
#[derive(Clone)]
pub struct UpTransportLayerInformationItem {
    pub ngu_up_tnl_information: UpTransportLayerInformation,
}

// UpTransportLayerInformationPairList
#[derive(Clone)]
pub struct UpTransportLayerInformationPairList(pub Vec<UpTransportLayerInformationPairItem>);

// UpTransportLayerInformationPairItem
#[derive(Clone)]
pub struct UpTransportLayerInformationPairItem {
    pub ul_ngu_up_tnl_information: UpTransportLayerInformation,
    pub dl_ngu_up_tnl_information: UpTransportLayerInformation,
}

// UriAddress
#[derive(Clone)]
pub struct UriAddress(pub String);

// UserLocationInformation
#[derive(Clone)]
pub enum UserLocationInformation {
    UserLocationInformationEutra(UserLocationInformationEutra),
    UserLocationInformationNr(UserLocationInformationNr),
    UserLocationInformationN3Iwf(UserLocationInformationN3Iwf),
}

// UserLocationInformationEutra
#[derive(Clone)]
pub struct UserLocationInformationEutra {
    pub eutra_cgi: EutraCgi,
    pub tai: Tai,
    pub time_stamp: Option<TimeStamp>,
}

// UserLocationInformationN3Iwf
#[derive(Clone)]
pub struct UserLocationInformationN3Iwf {
    pub ip_address: TransportLayerAddress,
    pub port_number: PortNumber,
}

// UserLocationInformationTngf
#[derive(Clone)]
pub struct UserLocationInformationTngf {
    pub tnap_id: TnapId,
    pub ip_address: TransportLayerAddress,
    pub port_number: Option<PortNumber>,
}

// UserLocationInformationTwif
#[derive(Clone)]
pub struct UserLocationInformationTwif {
    pub twap_id: TwapId,
    pub ip_address: TransportLayerAddress,
    pub port_number: Option<PortNumber>,
}

// UserLocationInformationWAgf
#[derive(Clone)]
pub enum UserLocationInformationWAgf {
    GlobalLineId(GlobalLineId),
    HfcNodeId(HfcNodeId),
}

// UserLocationInformationNr
#[derive(Clone)]
pub struct UserLocationInformationNr {
    pub nr_cgi: NrCgi,
    pub tai: Tai,
    pub time_stamp: Option<TimeStamp>,
}

// UserPlaneSecurityInformation
#[derive(Clone)]
pub struct UserPlaneSecurityInformation {
    pub security_result: SecurityResult,
    pub security_indication: SecurityIndication,
}

// VolumeTimedReportList
#[derive(Clone)]
pub struct VolumeTimedReportList(pub Vec<VolumeTimedReportItem>);

// VolumeTimedReportItem
#[derive(Clone)]
pub struct VolumeTimedReportItem {
    pub start_time_stamp: Vec<u8>,
    pub end_time_stamp: Vec<u8>,
    pub usage_count_ul: u64,
    pub usage_count_dl: u64,
}

// WAgfId
#[derive(Clone)]
pub enum WAgfId {
    WAgfId(BitString),
}

// WarningAreaCoordinates
#[derive(Clone)]
pub struct WarningAreaCoordinates(pub Vec<u8>);

// WarningAreaList
#[derive(Clone)]
pub enum WarningAreaList {
    EutraCgiListForWarning(EutraCgiListForWarning),
    NrCgiListForWarning(NrCgiListForWarning),
    TaiListForWarning(TaiListForWarning),
    EmergencyAreaIdList(EmergencyAreaIdList),
}

// WarningMessageContents
#[derive(Clone)]
pub struct WarningMessageContents(pub Vec<u8>);

// WarningSecurityInfo
#[derive(Clone)]
pub struct WarningSecurityInfo(pub Vec<u8>);

// WarningType
#[derive(Clone)]
pub struct WarningType(pub Vec<u8>);

// WlanMeasurementConfiguration
#[derive(Clone)]
pub struct WlanMeasurementConfiguration {
    pub wlan_meas_config: WlanMeasConfig,
    pub wlan_meas_config_name_list: Option<WlanMeasConfigNameList>,
    pub wlan_rssi: Option<WlanRssi>,
    pub wlan_rtt: Option<WlanRtt>,
}

// WlanMeasConfigNameList
#[derive(Clone)]
pub struct WlanMeasConfigNameList(pub Vec<WlanMeasConfigNameItem>);

// WlanMeasConfigNameItem
#[derive(Clone)]
pub struct WlanMeasConfigNameItem {
    pub wlan_name: WlanName,
}

// WlanMeasConfig
#[derive(Clone, Copy)]
pub enum WlanMeasConfig {
    Setup,
}

// WlanName
#[derive(Clone)]
pub struct WlanName(pub Vec<u8>);

// WusAssistanceInformation
#[derive(Clone)]
pub struct WusAssistanceInformation {
    pub paging_probability_information: PagingProbabilityInformation,
}

// XnExtTlAs
#[derive(Clone)]
pub struct XnExtTlAs(pub Vec<XnExtTlaItem>);

// XnExtTlaItem
#[derive(Clone)]
pub struct XnExtTlaItem {
    pub i_psec_tla: Option<TransportLayerAddress>,
    pub gtp_tl_as: Option<XnGtpTlAs>,
}

// XnGtpTlAs
#[derive(Clone)]
pub struct XnGtpTlAs(pub Vec<TransportLayerAddress>);

// XnTlAs
#[derive(Clone)]
pub struct XnTlAs(pub Vec<TransportLayerAddress>);

// XnTnlConfigurationInfo
#[derive(Clone)]
pub struct XnTnlConfigurationInfo {
    pub xn_transport_layer_addresses: XnTlAs,
    pub xn_extended_transport_layer_addresses: Option<XnExtTlAs>,
}

// PniNpnRestricted
#[derive(Clone, Copy)]
pub enum PniNpnRestricted {
    Restricted,
    NotRestricted,
}

// QosFlowMappingIndication
#[derive(Clone, Copy)]
pub enum QosFlowMappingIndication {
    Ul,
    Dl,
}

// BtRssi
#[derive(Clone, Copy)]
pub enum BtRssi {
    True,
}

// CnType
#[derive(Clone, Copy)]
pub enum CnType {
    EpcForbidden,
    FiveGcForbidden,
}

// DapsIndicator
#[derive(Clone, Copy)]
pub enum DapsIndicator {
    DapsHoRequired,
}

// Dapsresponseindicator
#[derive(Clone, Copy)]
pub enum Dapsresponseindicator {
    DapsHoAccepted,
    DapsHoNotAccepted,
}

// OutOfCoverage
#[derive(Clone, Copy)]
pub enum OutOfCoverage {
    True,
}

// HandoverReportType
#[derive(Clone, Copy)]
pub enum HandoverReportType {
    HoTooEarly,
    HoToWrongCell,
    IntersystemPingPong,
}

// EarlyIratho
#[derive(Clone, Copy)]
pub enum EarlyIratho {
    True,
    False,
}

// RatType
#[derive(Clone, Copy)]
pub enum RatType {
    Nr,
    Eutra,
}

// RatType1
#[derive(Clone, Copy)]
pub enum RatType1 {
    Nr,
    Eutra,
}

// RimRsDetection
#[derive(Clone, Copy)]
pub enum RimRsDetection {
    RsDetected,
    RsDisappeared,
}

// UncompensatedBarometricConfig
#[derive(Clone, Copy)]
pub enum UncompensatedBarometricConfig {
    True,
}

// UeSpeedConfig
#[derive(Clone, Copy)]
pub enum UeSpeedConfig {
    True,
}

// UeOrientationConfig
#[derive(Clone, Copy)]
pub enum UeOrientationConfig {
    True,
}

// PeriodicCommunicationIndicator
#[derive(Clone, Copy)]
pub enum PeriodicCommunicationIndicator {
    Periodically,
    Ondemand,
}

// StationaryIndication
#[derive(Clone, Copy)]
pub enum StationaryIndication {
    Stationary,
    Mobile,
}

// TrafficProfile
#[derive(Clone, Copy)]
pub enum TrafficProfile {
    SinglePacket,
    DualPackets,
    MultiplePackets,
}

// BatteryIndication
#[derive(Clone, Copy)]
pub enum BatteryIndication {
    BatteryPowered,
    BatteryPoweredNotRechargeableOrReplaceable,
    NotBatteryPowered,
}

// WlanRssi
#[derive(Clone, Copy)]
pub enum WlanRssi {
    True,
}

// WlanRtt
#[derive(Clone, Copy)]
pub enum WlanRtt {
    True,
}
