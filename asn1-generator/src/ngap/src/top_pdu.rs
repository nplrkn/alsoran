// Copyright (c) Nicholas Larkin
// Autogenerated from NGAP-PDU-Descriptions.asn
use bitvec::prelude::*;
pub type BitString = BitVec<Msb0, u8>;
use super::pdu::*;
use asn1_codecs::aper::{self, AperCodec, AperCodecData, AperCodecError};

// NgapPdu
#[derive(Clone, Debug)]
pub enum NgapPdu {
    InitiatingMessage(InitiatingMessage),
    SuccessfulOutcome(SuccessfulOutcome),
    UnsuccessfulOutcome(UnsuccessfulOutcome),
}

impl AperCodec for NgapPdu {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, true)?;
        if extended {
            return Err(aper::AperCodecError::new(
                "CHOICE additions not implemented",
            ));
        }
        match idx {
            0 => Ok(Self::InitiatingMessage(InitiatingMessage::decode(data)?)),
            1 => Ok(Self::SuccessfulOutcome(SuccessfulOutcome::decode(data)?)),
            2 => Ok(Self::UnsuccessfulOutcome(UnsuccessfulOutcome::decode(
                data,
            )?)),
            _ => Err(AperCodecError::new("Unknown choice idx")),
        }
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        match self {
            Self::InitiatingMessage(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, true, 0, false)?;
                x.encode(data)
            }
            Self::SuccessfulOutcome(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, true, 1, false)?;
                x.encode(data)
            }
            Self::UnsuccessfulOutcome(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, true, 2, false)?;
                x.encode(data)
            }
        }
    }
}

#[derive(Clone, Debug)]
enum InitiatingMessage {
    AmfConfigurationUpdate(AmfConfigurationUpdate),
    AmfcpRelocationIndication(AmfcpRelocationIndication),
    AmfStatusIndication(AmfStatusIndication),
    CellTrafficTrace(CellTrafficTrace),
    ConnectionEstablishmentIndication(ConnectionEstablishmentIndication),
    DeactivateTrace(DeactivateTrace),
    DownlinkNasTransport(DownlinkNasTransport),
    DownlinkNonUeAssociatedNrpPaTransport(DownlinkNonUeAssociatedNrpPaTransport),
    DownlinkRanConfigurationTransfer(DownlinkRanConfigurationTransfer),
    DownlinkRanEarlyStatusTransfer(DownlinkRanEarlyStatusTransfer),
    DownlinkRanStatusTransfer(DownlinkRanStatusTransfer),
    DownlinkUeAssociatedNrpPaTransport(DownlinkUeAssociatedNrpPaTransport),
    ErrorIndication(ErrorIndication),
    HandoverCancel(HandoverCancel),
    HandoverNotify(HandoverNotify),
    HandoverRequired(HandoverRequired),
    HandoverRequest(HandoverRequest),
    HandoverSuccess(HandoverSuccess),
    InitialContextSetupRequest(InitialContextSetupRequest),
    InitialUeMessage(InitialUeMessage),
    LocationReport(LocationReport),
    LocationReportingControl(LocationReportingControl),
    LocationReportingFailureIndication(LocationReportingFailureIndication),
    NasNonDeliveryIndication(NasNonDeliveryIndication),
    NgReset(NgReset),
    NgSetupRequest(NgSetupRequest),
    OverloadStart(OverloadStart),
    OverloadStop(OverloadStop),
    Paging(Paging),
    PathSwitchRequest(PathSwitchRequest),
    PduSessionResourceModifyRequest(PduSessionResourceModifyRequest),
    PduSessionResourceModifyIndication(PduSessionResourceModifyIndication),
    PduSessionResourceNotify(PduSessionResourceNotify),
    PduSessionResourceReleaseCommand(PduSessionResourceReleaseCommand),
    PduSessionResourceSetupRequest(PduSessionResourceSetupRequest),
    PrivateMessage(PrivateMessage),
    PwsCancelRequest(PwsCancelRequest),
    PwsFailureIndication(PwsFailureIndication),
    PwsRestartIndication(PwsRestartIndication),
    RanConfigurationUpdate(RanConfigurationUpdate),
    RancpRelocationIndication(RancpRelocationIndication),
    RerouteNasRequest(RerouteNasRequest),
    RetrieveUeInformation(RetrieveUeInformation),
    RrcInactiveTransitionReport(RrcInactiveTransitionReport),
    SecondaryRatDataUsageReport(SecondaryRatDataUsageReport),
    TraceFailureIndication(TraceFailureIndication),
    TraceStart(TraceStart),
    UeContextModificationRequest(UeContextModificationRequest),
    UeContextReleaseCommand(UeContextReleaseCommand),
    UeContextReleaseRequest(UeContextReleaseRequest),
    UeContextResumeRequest(UeContextResumeRequest),
    UeContextSuspendRequest(UeContextSuspendRequest),
    UeInformationTransfer(UeInformationTransfer),
    UeRadioCapabilityCheckRequest(UeRadioCapabilityCheckRequest),
    UeRadioCapabilityIdMappingRequest(UeRadioCapabilityIdMappingRequest),
    UeRadioCapabilityInfoIndication(UeRadioCapabilityInfoIndication),
    UetnlaBindingReleaseRequest(UetnlaBindingReleaseRequest),
    UplinkNasTransport(UplinkNasTransport),
    UplinkNonUeAssociatedNrpPaTransport(UplinkNonUeAssociatedNrpPaTransport),
    UplinkRanConfigurationTransfer(UplinkRanConfigurationTransfer),
    UplinkRanEarlyStatusTransfer(UplinkRanEarlyStatusTransfer),
    UplinkRanStatusTransfer(UplinkRanStatusTransfer),
    UplinkUeAssociatedNrpPaTransport(UplinkUeAssociatedNrpPaTransport),
    WriteReplaceWarningRequest(WriteReplaceWarningRequest),
    UplinkRimInformationTransfer(UplinkRimInformationTransfer),
    DownlinkRimInformationTransfer(DownlinkRimInformationTransfer),
}

impl AperCodec for InitiatingMessage {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        todo!()
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        todo!()
    }
}

#[derive(Clone, Debug)]
enum SuccessfulOutcome {
    AmfConfigurationUpdateAcknowledge(AmfConfigurationUpdateAcknowledge),
    HandoverCancelAcknowledge(HandoverCancelAcknowledge),
    HandoverCommand(HandoverCommand),
    HandoverRequestAcknowledge(HandoverRequestAcknowledge),
    InitialContextSetupResponse(InitialContextSetupResponse),
    NgResetAcknowledge(NgResetAcknowledge),
    NgSetupResponse(NgSetupResponse),
    PathSwitchRequestAcknowledge(PathSwitchRequestAcknowledge),
    PduSessionResourceModifyResponse(PduSessionResourceModifyResponse),
    PduSessionResourceModifyConfirm(PduSessionResourceModifyConfirm),
    PduSessionResourceReleaseResponse(PduSessionResourceReleaseResponse),
    PduSessionResourceSetupResponse(PduSessionResourceSetupResponse),
    PwsCancelResponse(PwsCancelResponse),
    RanConfigurationUpdateAcknowledge(RanConfigurationUpdateAcknowledge),
    UeContextModificationResponse(UeContextModificationResponse),
    UeContextReleaseComplete(UeContextReleaseComplete),
    UeContextResumeResponse(UeContextResumeResponse),
    UeContextSuspendResponse(UeContextSuspendResponse),
    UeRadioCapabilityCheckResponse(UeRadioCapabilityCheckResponse),
    UeRadioCapabilityIdMappingResponse(UeRadioCapabilityIdMappingResponse),
    WriteReplaceWarningResponse(WriteReplaceWarningResponse),
}

impl AperCodec for SuccessfulOutcome {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        todo!()
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        todo!()
    }
}

#[derive(Clone, Debug)]
enum UnsuccessfulOutcome {
    AmfConfigurationUpdateFailure(AmfConfigurationUpdateFailure),
    HandoverPreparationFailure(HandoverPreparationFailure),
    HandoverFailure(HandoverFailure),
    InitialContextSetupFailure(InitialContextSetupFailure),
    NgSetupFailure(NgSetupFailure),
    PathSwitchRequestFailure(PathSwitchRequestFailure),
    RanConfigurationUpdateFailure(RanConfigurationUpdateFailure),
    UeContextModificationFailure(UeContextModificationFailure),
    UeContextResumeFailure(UeContextResumeFailure),
    UeContextSuspendFailure(UeContextSuspendFailure),
}

impl AperCodec for UnsuccessfulOutcome {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        todo!()
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        todo!()
    }
}
