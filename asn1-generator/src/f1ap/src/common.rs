// Copyright (c) Nicholas Larkin
// Autogenerated from F1AP-CommonDataTypes.asn
#[allow(unused_imports)]
use asn1::*;
use asn1::aper::*;
#[allow(unused_imports)]
use num_derive::FromPrimitive;
#[allow(unused_imports)]
use num_traits::FromPrimitive;

// Criticality
# [derive(Clone, Copy, FromPrimitive)]
pub enum Criticality {
    Reject,
    Ignore,
    Notify,
}

impl APerElement for Criticality {
    fn from_aper(decoder: &mut Decoder, _constraints: Constraints) -> Result<Self, DecodeError> {
        let v = u8::from_aper(decoder, Constraints::value(Some(0), Some(2), false))?;
        FromPrimitive::from_u8(v).ok_or(DecodeError::MalformedInt)
    }
    fn to_aper(&self, enc: &mut Encoding, _constraints: Constraints) -> Result<(), EncodeError> {
        (*self as u8).to_aper(enc, Constraints::value(Some(0), Some(2), false))?;
        Ok(())
    }
}

// Presence
# [derive(Clone, Copy, FromPrimitive)]
pub enum Presence {
    Optional,
    Conditional,
    Mandatory,
}

impl APerElement for Presence {
    fn from_aper(decoder: &mut Decoder, _constraints: Constraints) -> Result<Self, DecodeError> {
        let v = u8::from_aper(decoder, Constraints::value(Some(0), Some(2), false))?;
        FromPrimitive::from_u8(v).ok_or(DecodeError::MalformedInt)
    }
    fn to_aper(&self, enc: &mut Encoding, _constraints: Constraints) -> Result<(), EncodeError> {
        (*self as u8).to_aper(enc, Constraints::value(Some(0), Some(2), false))?;
        Ok(())
    }
}

// PrivateIeId
# [derive(Clone)]
pub enum PrivateIeId {
    Local(u16),
    Global(Vec<u8>),
}

impl APerElement for PrivateIeId {
    fn from_aper(decoder: &mut Decoder, _constraints: Constraints) -> Result<Self, DecodeError> {
        match u8::from_aper(decoder, UNCONSTRAINED)? {
            0 => Ok(Self::Local(u16::from_aper(decoder, Constraints::value(Some(0), Some(65535), false))?)),
            1 => Ok(Self::Global(Vec::<u8>::from_aper(decoder, UNCONSTRAINED)?)),
            _ => Err(DecodeError::InvalidChoice),
        }
    }
    fn to_aper(&self, enc: &mut Encoding, _constraints: Constraints) -> Result<(), EncodeError> {
        match self {
            Self::Local(x) => {
                (0 as u8).to_aper(enc, UNCONSTRAINED)?;
                x.to_aper(enc, Constraints::value(Some(0), Some(65535), false))?;
            }
            Self::Global(x) => {
                (1 as u8).to_aper(enc, UNCONSTRAINED)?;
                x.to_aper(enc, UNCONSTRAINED)?;
            }
        }
        Ok(())
    }
}


// ProcedureCode
# [derive(Clone)]
pub struct ProcedureCode(pub u8);

impl APerElement for ProcedureCode {
    fn from_aper(decoder: &mut Decoder, _constraints: Constraints) -> Result<Self, DecodeError> {
        Ok(Self(u8::from_aper(decoder, Constraints::value(Some(0), Some(255), false))?))
    }
    fn to_aper(&self, enc: &mut Encoding, _constraints: Constraints) -> Result<(), EncodeError> {
        self.0.to_aper(enc, Constraints::value(Some(0), Some(255), false))
    }
}

// ProtocolExtensionId
# [derive(Clone)]
pub struct ProtocolExtensionId(pub u16);

impl APerElement for ProtocolExtensionId {
    fn from_aper(decoder: &mut Decoder, _constraints: Constraints) -> Result<Self, DecodeError> {
        Ok(Self(u16::from_aper(decoder, Constraints::value(Some(0), Some(65535), false))?))
    }
    fn to_aper(&self, enc: &mut Encoding, _constraints: Constraints) -> Result<(), EncodeError> {
        self.0.to_aper(enc, Constraints::value(Some(0), Some(65535), false))
    }
}

// ProtocolIeId
# [derive(Clone)]
pub struct ProtocolIeId(pub u16);

impl APerElement for ProtocolIeId {
    fn from_aper(decoder: &mut Decoder, _constraints: Constraints) -> Result<Self, DecodeError> {
        Ok(Self(u16::from_aper(decoder, Constraints::value(Some(0), Some(65535), false))?))
    }
    fn to_aper(&self, enc: &mut Encoding, _constraints: Constraints) -> Result<(), EncodeError> {
        self.0.to_aper(enc, Constraints::value(Some(0), Some(65535), false))
    }
}

// TriggeringMessage
# [derive(Clone, Copy, FromPrimitive)]
pub enum TriggeringMessage {
    InitiatingMessage,
    SuccessfulOutcome,
    UnsuccessfulOutcome,
}

impl APerElement for TriggeringMessage {
    fn from_aper(decoder: &mut Decoder, _constraints: Constraints) -> Result<Self, DecodeError> {
        let v = u8::from_aper(decoder, Constraints::value(Some(0), Some(2), false))?;
        FromPrimitive::from_u8(v).ok_or(DecodeError::MalformedInt)
    }
    fn to_aper(&self, enc: &mut Encoding, _constraints: Constraints) -> Result<(), EncodeError> {
        (*self as u8).to_aper(enc, Constraints::value(Some(0), Some(2), false))?;
        Ok(())
    }
}

