// Copyright (c) Nicholas Larkin
// Autogenerated from F1AP-PDU-Contents.asn

use bitvec::prelude::*;
pub type BitString = BitVec<u8, Msb0>;

use super::common::*;
use super::ies::*;
use asn1_codecs::aper::{AperCodec, AperCodecData, AperCodecError};

// Reset
#[derive(Clone)]
pub struct Reset {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub reset_type: ResetType,
}

impl AperCodec for Reset {
    type Output = Reset;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut reset_type: Option<ResetType> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                48 => {
                    reset_type = Some(ResetType::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        let reset_type = reset_type.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE reset_type"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            reset_type,
        })
    }
}

// ResetType
#[derive(Clone)]
pub enum ResetType {
    F1Interface(ResetAll),
    PartOfF1Interface(UeAssociatedLogicalF1ConnectionListRes),
}

// ResetAll
#[derive(Clone, Copy)]
pub enum ResetAll {
    ResetAll,
}

// UeAssociatedLogicalF1ConnectionListRes
#[derive(Clone)]
pub struct UeAssociatedLogicalF1ConnectionListRes(pub Vec<UeAssociatedLogicalF1ConnectionItemRes>);

// ResetAcknowledge
#[derive(Clone)]
pub struct ResetAcknowledge {
    pub transaction_id: TransactionId,
    pub ue_associated_logical_f1_connection_list_res_ack:
        Option<UeAssociatedLogicalF1ConnectionListResAck>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for ResetAcknowledge {
    type Output = ResetAcknowledge;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut ue_associated_logical_f1_connection_list_res_ack: Option<
            UeAssociatedLogicalF1ConnectionListResAck,
        > = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                81 => {
                    ue_associated_logical_f1_connection_list_res_ack =
                        Some(UeAssociatedLogicalF1ConnectionListResAck::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            ue_associated_logical_f1_connection_list_res_ack,
            criticality_diagnostics,
        })
    }
}

// UeAssociatedLogicalF1ConnectionListResAck
#[derive(Clone)]
pub struct UeAssociatedLogicalF1ConnectionListResAck(
    pub Vec<UeAssociatedLogicalF1ConnectionItemResAck>,
);

// ErrorIndication
#[derive(Clone)]
pub struct ErrorIndication {
    pub transaction_id: TransactionId,
    pub gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId>,
    pub gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId>,
    pub cause: Option<Cause>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for ErrorIndication {
    type Output = ErrorIndication;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            cause,
            criticality_diagnostics,
        })
    }
}

// F1SetupRequest
#[derive(Clone)]
pub struct F1SetupRequest {
    pub transaction_id: TransactionId,
    pub gnb_du_id: GnbDuId,
    pub gnb_du_name: Option<GnbDuName>,
    pub gnb_du_served_cells_list: Option<GnbDuServedCellsList>,
    pub gnb_du_rrc_version: RrcVersion,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
    pub bap_address: Option<BapAddress>,
    pub extended_gnb_cu_name: Option<ExtendedGnbCuName>,
}

impl AperCodec for F1SetupRequest {
    type Output = F1SetupRequest;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_du_id: Option<GnbDuId> = None;
        let mut gnb_du_name: Option<GnbDuName> = None;
        let mut gnb_du_served_cells_list: Option<GnbDuServedCellsList> = None;
        let mut gnb_du_rrc_version: Option<RrcVersion> = None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;
        let mut bap_address: Option<BapAddress> = None;
        let mut extended_gnb_cu_name: Option<ExtendedGnbCuName> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                42 => {
                    gnb_du_id = Some(GnbDuId::decode(data)?);
                }
                45 => {
                    gnb_du_name = Some(GnbDuName::decode(data)?);
                }
                44 => {
                    gnb_du_served_cells_list = Some(GnbDuServedCellsList::decode(data)?);
                }
                171 => {
                    gnb_du_rrc_version = Some(RrcVersion::decode(data)?);
                }
                254 => {
                    transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?);
                }
                281 => {
                    bap_address = Some(BapAddress::decode(data)?);
                }
                427 => {
                    extended_gnb_cu_name = Some(ExtendedGnbCuName::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_du_id = gnb_du_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_id"
        )))?;
        let gnb_du_rrc_version = gnb_du_rrc_version.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_rrc_version"
        )))?;
        Ok(Self {
            transaction_id,
            gnb_du_id,
            gnb_du_name,
            gnb_du_served_cells_list,
            gnb_du_rrc_version,
            transport_layer_address_info,
            bap_address,
            extended_gnb_cu_name,
        })
    }
}

// GnbDuServedCellsList
#[derive(Clone)]
pub struct GnbDuServedCellsList(pub Vec<GnbDuServedCellsItem>);

// F1SetupResponse
#[derive(Clone)]
pub struct F1SetupResponse {
    pub transaction_id: TransactionId,
    pub gnb_cu_name: Option<GnbCuName>,
    pub cells_to_be_activated_list: Option<CellsToBeActivatedList>,
    pub gnb_cu_rrc_version: RrcVersion,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
    pub ul_bh_non_up_traffic_mapping: Option<UlBhNonUpTrafficMapping>,
    pub bap_address: Option<BapAddress>,
    pub extended_gnb_du_name: Option<ExtendedGnbDuName>,
}

impl AperCodec for F1SetupResponse {
    type Output = F1SetupResponse;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_name: Option<GnbCuName> = None;
        let mut cells_to_be_activated_list: Option<CellsToBeActivatedList> = None;
        let mut gnb_cu_rrc_version: Option<RrcVersion> = None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;
        let mut ul_bh_non_up_traffic_mapping: Option<UlBhNonUpTrafficMapping> = None;
        let mut bap_address: Option<BapAddress> = None;
        let mut extended_gnb_du_name: Option<ExtendedGnbDuName> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                82 => {
                    gnb_cu_name = Some(GnbCuName::decode(data)?);
                }
                3 => {
                    cells_to_be_activated_list = Some(CellsToBeActivatedList::decode(data)?);
                }
                170 => {
                    gnb_cu_rrc_version = Some(RrcVersion::decode(data)?);
                }
                254 => {
                    transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?);
                }
                287 => {
                    ul_bh_non_up_traffic_mapping = Some(UlBhNonUpTrafficMapping::decode(data)?);
                }
                281 => {
                    bap_address = Some(BapAddress::decode(data)?);
                }
                426 => {
                    extended_gnb_du_name = Some(ExtendedGnbDuName::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_cu_rrc_version = gnb_cu_rrc_version.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_rrc_version"
        )))?;
        Ok(Self {
            transaction_id,
            gnb_cu_name,
            cells_to_be_activated_list,
            gnb_cu_rrc_version,
            transport_layer_address_info,
            ul_bh_non_up_traffic_mapping,
            bap_address,
            extended_gnb_du_name,
        })
    }
}

// CellsToBeActivatedList
#[derive(Clone)]
pub struct CellsToBeActivatedList(pub Vec<CellsToBeActivatedListItem>);

// F1SetupFailure
#[derive(Clone)]
pub struct F1SetupFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for F1SetupFailure {
    type Output = F1SetupFailure;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                77 => {
                    time_to_wait = Some(TimeToWait::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
}

// GnbDuConfigurationUpdate
#[derive(Clone)]
pub struct GnbDuConfigurationUpdate {
    pub transaction_id: TransactionId,
    pub served_cells_to_add_list: Option<ServedCellsToAddList>,
    pub served_cells_to_modify_list: Option<ServedCellsToModifyList>,
    pub served_cells_to_delete_list: Option<ServedCellsToDeleteList>,
    pub cells_status_list: Option<CellsStatusList>,
    pub dedicated_si_delivery_needed_ue_list: Option<DedicatedSiDeliveryNeededUeList>,
    pub gnb_du_id: Option<GnbDuId>,
    pub gnb_du_tnl_association_to_remove_list: Option<GnbDuTnlAssociationToRemoveList>,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
}

impl AperCodec for GnbDuConfigurationUpdate {
    type Output = GnbDuConfigurationUpdate;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut served_cells_to_add_list: Option<ServedCellsToAddList> = None;
        let mut served_cells_to_modify_list: Option<ServedCellsToModifyList> = None;
        let mut served_cells_to_delete_list: Option<ServedCellsToDeleteList> = None;
        let mut cells_status_list: Option<CellsStatusList> = None;
        let mut dedicated_si_delivery_needed_ue_list: Option<DedicatedSiDeliveryNeededUeList> =
            None;
        let mut gnb_du_id: Option<GnbDuId> = None;
        let mut gnb_du_tnl_association_to_remove_list: Option<GnbDuTnlAssociationToRemoveList> =
            None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                58 => {
                    served_cells_to_add_list = Some(ServedCellsToAddList::decode(data)?);
                }
                62 => {
                    served_cells_to_modify_list = Some(ServedCellsToModifyList::decode(data)?);
                }
                60 => {
                    served_cells_to_delete_list = Some(ServedCellsToDeleteList::decode(data)?);
                }
                89 => {
                    cells_status_list = Some(CellsStatusList::decode(data)?);
                }
                189 => {
                    dedicated_si_delivery_needed_ue_list =
                        Some(DedicatedSiDeliveryNeededUeList::decode(data)?);
                }
                42 => {
                    gnb_du_id = Some(GnbDuId::decode(data)?);
                }
                228 => {
                    gnb_du_tnl_association_to_remove_list =
                        Some(GnbDuTnlAssociationToRemoveList::decode(data)?);
                }
                254 => {
                    transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            served_cells_to_add_list,
            served_cells_to_modify_list,
            served_cells_to_delete_list,
            cells_status_list,
            dedicated_si_delivery_needed_ue_list,
            gnb_du_id,
            gnb_du_tnl_association_to_remove_list,
            transport_layer_address_info,
        })
    }
}

// ServedCellsToAddList
#[derive(Clone)]
pub struct ServedCellsToAddList(pub Vec<ServedCellsToAddItem>);

// ServedCellsToModifyList
#[derive(Clone)]
pub struct ServedCellsToModifyList(pub Vec<ServedCellsToModifyItem>);

// ServedCellsToDeleteList
#[derive(Clone)]
pub struct ServedCellsToDeleteList(pub Vec<ServedCellsToDeleteItem>);

// CellsStatusList
#[derive(Clone)]
pub struct CellsStatusList(pub Vec<CellsStatusItem>);

// DedicatedSiDeliveryNeededUeList
#[derive(Clone)]
pub struct DedicatedSiDeliveryNeededUeList(pub Vec<DedicatedSiDeliveryNeededUeItem>);

// GnbDuTnlAssociationToRemoveList
#[derive(Clone)]
pub struct GnbDuTnlAssociationToRemoveList(pub Vec<GnbDuTnlAssociationToRemoveItem>);

// GnbDuConfigurationUpdateAcknowledge
#[derive(Clone)]
pub struct GnbDuConfigurationUpdateAcknowledge {
    pub transaction_id: TransactionId,
    pub cells_to_be_activated_list: Option<CellsToBeActivatedList>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub cells_to_be_deactivated_list: Option<CellsToBeDeactivatedList>,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
    pub ul_bh_non_up_traffic_mapping: Option<UlBhNonUpTrafficMapping>,
    pub bap_address: Option<BapAddress>,
}

impl AperCodec for GnbDuConfigurationUpdateAcknowledge {
    type Output = GnbDuConfigurationUpdateAcknowledge;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cells_to_be_activated_list: Option<CellsToBeActivatedList> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut cells_to_be_deactivated_list: Option<CellsToBeDeactivatedList> = None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;
        let mut ul_bh_non_up_traffic_mapping: Option<UlBhNonUpTrafficMapping> = None;
        let mut bap_address: Option<BapAddress> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                3 => {
                    cells_to_be_activated_list = Some(CellsToBeActivatedList::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                5 => {
                    cells_to_be_deactivated_list = Some(CellsToBeDeactivatedList::decode(data)?);
                }
                254 => {
                    transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?);
                }
                287 => {
                    ul_bh_non_up_traffic_mapping = Some(UlBhNonUpTrafficMapping::decode(data)?);
                }
                281 => {
                    bap_address = Some(BapAddress::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            cells_to_be_activated_list,
            criticality_diagnostics,
            cells_to_be_deactivated_list,
            transport_layer_address_info,
            ul_bh_non_up_traffic_mapping,
            bap_address,
        })
    }
}

// GnbDuConfigurationUpdateFailure
#[derive(Clone)]
pub struct GnbDuConfigurationUpdateFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for GnbDuConfigurationUpdateFailure {
    type Output = GnbDuConfigurationUpdateFailure;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                77 => {
                    time_to_wait = Some(TimeToWait::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
}

// GnbCuConfigurationUpdate
#[derive(Clone)]
pub struct GnbCuConfigurationUpdate {
    pub transaction_id: TransactionId,
    pub cells_to_be_activated_list: Option<CellsToBeActivatedList>,
    pub cells_to_be_deactivated_list: Option<CellsToBeDeactivatedList>,
    pub gnb_cu_tnl_association_to_add_list: Option<GnbCuTnlAssociationToAddList>,
    pub gnb_cu_tnl_association_to_remove_list: Option<GnbCuTnlAssociationToRemoveList>,
    pub gnb_cu_tnl_association_to_update_list: Option<GnbCuTnlAssociationToUpdateList>,
    pub cells_to_be_barred_list: Option<CellsToBeBarredList>,
    pub protected_eutra_resources_list: Option<ProtectedEutraResourcesList>,
    pub neighbour_cell_information_list: Option<NeighbourCellInformationList>,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
    pub ul_bh_non_up_traffic_mapping: Option<UlBhNonUpTrafficMapping>,
    pub bap_address: Option<BapAddress>,
}

impl AperCodec for GnbCuConfigurationUpdate {
    type Output = GnbCuConfigurationUpdate;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cells_to_be_activated_list: Option<CellsToBeActivatedList> = None;
        let mut cells_to_be_deactivated_list: Option<CellsToBeDeactivatedList> = None;
        let mut gnb_cu_tnl_association_to_add_list: Option<GnbCuTnlAssociationToAddList> = None;
        let mut gnb_cu_tnl_association_to_remove_list: Option<GnbCuTnlAssociationToRemoveList> =
            None;
        let mut gnb_cu_tnl_association_to_update_list: Option<GnbCuTnlAssociationToUpdateList> =
            None;
        let mut cells_to_be_barred_list: Option<CellsToBeBarredList> = None;
        let mut protected_eutra_resources_list: Option<ProtectedEutraResourcesList> = None;
        let mut neighbour_cell_information_list: Option<NeighbourCellInformationList> = None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;
        let mut ul_bh_non_up_traffic_mapping: Option<UlBhNonUpTrafficMapping> = None;
        let mut bap_address: Option<BapAddress> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                3 => {
                    cells_to_be_activated_list = Some(CellsToBeActivatedList::decode(data)?);
                }
                5 => {
                    cells_to_be_deactivated_list = Some(CellsToBeDeactivatedList::decode(data)?);
                }
                121 => {
                    gnb_cu_tnl_association_to_add_list =
                        Some(GnbCuTnlAssociationToAddList::decode(data)?);
                }
                123 => {
                    gnb_cu_tnl_association_to_remove_list =
                        Some(GnbCuTnlAssociationToRemoveList::decode(data)?);
                }
                125 => {
                    gnb_cu_tnl_association_to_update_list =
                        Some(GnbCuTnlAssociationToUpdateList::decode(data)?);
                }
                129 => {
                    cells_to_be_barred_list = Some(CellsToBeBarredList::decode(data)?);
                }
                105 => {
                    protected_eutra_resources_list =
                        Some(ProtectedEutraResourcesList::decode(data)?);
                }
                244 => {
                    neighbour_cell_information_list =
                        Some(NeighbourCellInformationList::decode(data)?);
                }
                254 => {
                    transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?);
                }
                287 => {
                    ul_bh_non_up_traffic_mapping = Some(UlBhNonUpTrafficMapping::decode(data)?);
                }
                281 => {
                    bap_address = Some(BapAddress::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            cells_to_be_activated_list,
            cells_to_be_deactivated_list,
            gnb_cu_tnl_association_to_add_list,
            gnb_cu_tnl_association_to_remove_list,
            gnb_cu_tnl_association_to_update_list,
            cells_to_be_barred_list,
            protected_eutra_resources_list,
            neighbour_cell_information_list,
            transport_layer_address_info,
            ul_bh_non_up_traffic_mapping,
            bap_address,
        })
    }
}

// CellsToBeDeactivatedList
#[derive(Clone)]
pub struct CellsToBeDeactivatedList(pub Vec<CellsToBeDeactivatedListItem>);

// GnbCuTnlAssociationToAddList
#[derive(Clone)]
pub struct GnbCuTnlAssociationToAddList(pub Vec<GnbCuTnlAssociationToAddItem>);

// GnbCuTnlAssociationToRemoveList
#[derive(Clone)]
pub struct GnbCuTnlAssociationToRemoveList(pub Vec<GnbCuTnlAssociationToRemoveItem>);

// GnbCuTnlAssociationToUpdateList
#[derive(Clone)]
pub struct GnbCuTnlAssociationToUpdateList(pub Vec<GnbCuTnlAssociationToUpdateItem>);

// CellsToBeBarredList
#[derive(Clone)]
pub struct CellsToBeBarredList(pub Vec<CellsToBeBarredItem>);

// ProtectedEutraResourcesList
#[derive(Clone)]
pub struct ProtectedEutraResourcesList(pub Vec<ProtectedEutraResourcesItem>);

// NeighbourCellInformationList
#[derive(Clone)]
pub struct NeighbourCellInformationList(pub Vec<NeighbourCellInformationItem>);

// GnbCuConfigurationUpdateAcknowledge
#[derive(Clone)]
pub struct GnbCuConfigurationUpdateAcknowledge {
    pub transaction_id: TransactionId,
    pub cells_failed_to_be_activated_list: Option<CellsFailedToBeActivatedList>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub gnb_cu_tnl_association_setup_list: Option<GnbCuTnlAssociationSetupList>,
    pub gnb_cu_tnl_association_failed_to_setup_list: Option<GnbCuTnlAssociationFailedToSetupList>,
    pub dedicated_si_delivery_needed_ue_list: Option<DedicatedSiDeliveryNeededUeList>,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
}

impl AperCodec for GnbCuConfigurationUpdateAcknowledge {
    type Output = GnbCuConfigurationUpdateAcknowledge;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cells_failed_to_be_activated_list: Option<CellsFailedToBeActivatedList> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut gnb_cu_tnl_association_setup_list: Option<GnbCuTnlAssociationSetupList> = None;
        let mut gnb_cu_tnl_association_failed_to_setup_list: Option<
            GnbCuTnlAssociationFailedToSetupList,
        > = None;
        let mut dedicated_si_delivery_needed_ue_list: Option<DedicatedSiDeliveryNeededUeList> =
            None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                1 => {
                    cells_failed_to_be_activated_list =
                        Some(CellsFailedToBeActivatedList::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                132 => {
                    gnb_cu_tnl_association_setup_list =
                        Some(GnbCuTnlAssociationSetupList::decode(data)?);
                }
                134 => {
                    gnb_cu_tnl_association_failed_to_setup_list =
                        Some(GnbCuTnlAssociationFailedToSetupList::decode(data)?);
                }
                189 => {
                    dedicated_si_delivery_needed_ue_list =
                        Some(DedicatedSiDeliveryNeededUeList::decode(data)?);
                }
                254 => {
                    transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            cells_failed_to_be_activated_list,
            criticality_diagnostics,
            gnb_cu_tnl_association_setup_list,
            gnb_cu_tnl_association_failed_to_setup_list,
            dedicated_si_delivery_needed_ue_list,
            transport_layer_address_info,
        })
    }
}

// CellsFailedToBeActivatedList
#[derive(Clone)]
pub struct CellsFailedToBeActivatedList(pub Vec<CellsFailedToBeActivatedListItem>);

// GnbCuTnlAssociationSetupList
#[derive(Clone)]
pub struct GnbCuTnlAssociationSetupList(pub Vec<GnbCuTnlAssociationSetupItem>);

// GnbCuTnlAssociationFailedToSetupList
#[derive(Clone)]
pub struct GnbCuTnlAssociationFailedToSetupList(pub Vec<GnbCuTnlAssociationFailedToSetupItem>);

// GnbCuConfigurationUpdateFailure
#[derive(Clone)]
pub struct GnbCuConfigurationUpdateFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for GnbCuConfigurationUpdateFailure {
    type Output = GnbCuConfigurationUpdateFailure;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                77 => {
                    time_to_wait = Some(TimeToWait::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
}

// GnbDuResourceCoordinationRequest
#[derive(Clone)]
pub struct GnbDuResourceCoordinationRequest {
    pub transaction_id: TransactionId,
    pub request_type: RequestType,
    pub eutra_nr_cell_resource_coordination_req_container:
        EutraNrCellResourceCoordinationReqContainer,
    pub ignore_resource_coordination_container: Option<IgnoreResourceCoordinationContainer>,
}

impl AperCodec for GnbDuResourceCoordinationRequest {
    type Output = GnbDuResourceCoordinationRequest;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut request_type: Option<RequestType> = None;
        let mut eutra_nr_cell_resource_coordination_req_container: Option<
            EutraNrCellResourceCoordinationReqContainer,
        > = None;
        let mut ignore_resource_coordination_container: Option<
            IgnoreResourceCoordinationContainer,
        > = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                106 => {
                    request_type = Some(RequestType::decode(data)?);
                }
                101 => {
                    eutra_nr_cell_resource_coordination_req_container =
                        Some(EutraNrCellResourceCoordinationReqContainer::decode(data)?);
                }
                213 => {
                    ignore_resource_coordination_container =
                        Some(IgnoreResourceCoordinationContainer::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let request_type = request_type.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE request_type"
        )))?;
        let eutra_nr_cell_resource_coordination_req_container =
            eutra_nr_cell_resource_coordination_req_container.ok_or(aper::AperCodecError::new(
                format!("Missing mandatory IE eutra_nr_cell_resource_coordination_req_container"),
            ))?;
        Ok(Self {
            transaction_id,
            request_type,
            eutra_nr_cell_resource_coordination_req_container,
            ignore_resource_coordination_container,
        })
    }
}

// GnbDuResourceCoordinationResponse
#[derive(Clone)]
pub struct GnbDuResourceCoordinationResponse {
    pub transaction_id: TransactionId,
    pub eutra_nr_cell_resource_coordination_req_ack_container:
        EutraNrCellResourceCoordinationReqAckContainer,
}

impl AperCodec for GnbDuResourceCoordinationResponse {
    type Output = GnbDuResourceCoordinationResponse;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut eutra_nr_cell_resource_coordination_req_ack_container: Option<
            EutraNrCellResourceCoordinationReqAckContainer,
        > = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                102 => {
                    eutra_nr_cell_resource_coordination_req_ack_container = Some(
                        EutraNrCellResourceCoordinationReqAckContainer::decode(data)?,
                    );
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let eutra_nr_cell_resource_coordination_req_ack_container =
            eutra_nr_cell_resource_coordination_req_ack_container.ok_or(
                aper::AperCodecError::new(format!(
                    "Missing mandatory IE eutra_nr_cell_resource_coordination_req_ack_container"
                )),
            )?;
        Ok(Self {
            transaction_id,
            eutra_nr_cell_resource_coordination_req_ack_container,
        })
    }
}

// UeContextSetupRequest
#[derive(Clone)]
pub struct UeContextSetupRequest {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId>,
    pub sp_cell_id: Nrcgi,
    pub serv_cell_index: ServCellIndex,
    pub sp_cell_ul_configured: Option<CellUlConfigured>,
    pub c_uto_durrc_information: CUtoDurrcInformation,
    pub candidate_sp_cell_list: Option<CandidateSpCellList>,
    pub drx_cycle: Option<DrxCycle>,
    pub resource_coordination_transfer_container: Option<ResourceCoordinationTransferContainer>,
    pub s_cell_to_be_setup_list: Option<SCellToBeSetupList>,
    pub sr_bs_to_be_setup_list: Option<SrBsToBeSetupList>,
    pub dr_bs_to_be_setup_list: Option<DrBsToBeSetupList>,
    pub inactivity_monitoring_request: Option<InactivityMonitoringRequest>,
    pub rat_frequency_priority_information: Option<RatFrequencyPriorityInformation>,
    pub rrc_container: Option<RrcContainer>,
    pub masked_imeisv: Option<MaskedImeisv>,
    pub serving_plmn: Option<PlmnIdentity>,
    pub gnb_du_ue_ambr_ul: Option<BitRate>,
    pub rrc_delivery_status_request: Option<RrcDeliveryStatusRequest>,
    pub resource_coordination_transfer_information: Option<ResourceCoordinationTransferInformation>,
    pub serving_cell_mo: Option<ServingCellMo>,
    pub new_gnb_cu_ue_f1ap_id: Option<GnbDuUeF1apId>,
    pub ranueid: Option<Ranueid>,
    pub trace_activation: Option<TraceActivation>,
    pub additional_rrm_priority_index: Option<AdditionalRrmPriorityIndex>,
    pub bh_channels_to_be_setup_list: Option<BhChannelsToBeSetupList>,
    pub configured_bap_address: Option<BapAddress>,
    pub nrv2x_services_authorized: Option<Nrv2xServicesAuthorized>,
    pub ltev2x_services_authorized: Option<Ltev2xServicesAuthorized>,
    pub nrue_sidelink_aggregate_maximum_bitrate: Option<NrueSidelinkAggregateMaximumBitrate>,
    pub lteue_sidelink_aggregate_maximum_bitrate: Option<LteueSidelinkAggregateMaximumBitrate>,
    pub pc5_link_ambr: Option<BitRate>,
    pub sldr_bs_to_be_setup_list: Option<SldrBsToBeSetupList>,
    pub conditional_inter_du_mobility_information: Option<ConditionalInterDuMobilityInformation>,
    pub management_based_mdt_plmn_list: Option<MdtPlmnList>,
    pub serving_nid: Option<Nid>,
    pub f1c_transfer_path: Option<F1cTransferPath>,
}

impl AperCodec for UeContextSetupRequest {
    type Output = UeContextSetupRequest;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut sp_cell_id: Option<Nrcgi> = None;
        let mut serv_cell_index: Option<ServCellIndex> = None;
        let mut sp_cell_ul_configured: Option<CellUlConfigured> = None;
        let mut c_uto_durrc_information: Option<CUtoDurrcInformation> = None;
        let mut candidate_sp_cell_list: Option<CandidateSpCellList> = None;
        let mut drx_cycle: Option<DrxCycle> = None;
        let mut resource_coordination_transfer_container: Option<
            ResourceCoordinationTransferContainer,
        > = None;
        let mut s_cell_to_be_setup_list: Option<SCellToBeSetupList> = None;
        let mut sr_bs_to_be_setup_list: Option<SrBsToBeSetupList> = None;
        let mut dr_bs_to_be_setup_list: Option<DrBsToBeSetupList> = None;
        let mut inactivity_monitoring_request: Option<InactivityMonitoringRequest> = None;
        let mut rat_frequency_priority_information: Option<RatFrequencyPriorityInformation> = None;
        let mut rrc_container: Option<RrcContainer> = None;
        let mut masked_imeisv: Option<MaskedImeisv> = None;
        let mut serving_plmn: Option<PlmnIdentity> = None;
        let mut gnb_du_ue_ambr_ul: Option<BitRate> = None;
        let mut rrc_delivery_status_request: Option<RrcDeliveryStatusRequest> = None;
        let mut resource_coordination_transfer_information: Option<
            ResourceCoordinationTransferInformation,
        > = None;
        let mut serving_cell_mo: Option<ServingCellMo> = None;
        let mut new_gnb_cu_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut ranueid: Option<Ranueid> = None;
        let mut trace_activation: Option<TraceActivation> = None;
        let mut additional_rrm_priority_index: Option<AdditionalRrmPriorityIndex> = None;
        let mut bh_channels_to_be_setup_list: Option<BhChannelsToBeSetupList> = None;
        let mut configured_bap_address: Option<BapAddress> = None;
        let mut nrv2x_services_authorized: Option<Nrv2xServicesAuthorized> = None;
        let mut ltev2x_services_authorized: Option<Ltev2xServicesAuthorized> = None;
        let mut nrue_sidelink_aggregate_maximum_bitrate: Option<
            NrueSidelinkAggregateMaximumBitrate,
        > = None;
        let mut lteue_sidelink_aggregate_maximum_bitrate: Option<
            LteueSidelinkAggregateMaximumBitrate,
        > = None;
        let mut pc5_link_ambr: Option<BitRate> = None;
        let mut sldr_bs_to_be_setup_list: Option<SldrBsToBeSetupList> = None;
        let mut conditional_inter_du_mobility_information: Option<
            ConditionalInterDuMobilityInformation,
        > = None;
        let mut management_based_mdt_plmn_list: Option<MdtPlmnList> = None;
        let mut serving_nid: Option<Nid> = None;
        let mut f1c_transfer_path: Option<F1cTransferPath> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                63 => {
                    sp_cell_id = Some(Nrcgi::decode(data)?);
                }
                107 => {
                    serv_cell_index = Some(ServCellIndex::decode(data)?);
                }
                96 => {
                    sp_cell_ul_configured = Some(CellUlConfigured::decode(data)?);
                }
                9 => {
                    c_uto_durrc_information = Some(CUtoDurrcInformation::decode(data)?);
                }
                90 => {
                    candidate_sp_cell_list = Some(CandidateSpCellList::decode(data)?);
                }
                38 => {
                    drx_cycle = Some(DrxCycle::decode(data)?);
                }
                49 => {
                    resource_coordination_transfer_container =
                        Some(ResourceCoordinationTransferContainer::decode(data)?);
                }
                54 => {
                    s_cell_to_be_setup_list = Some(SCellToBeSetupList::decode(data)?);
                }
                74 => {
                    sr_bs_to_be_setup_list = Some(SrBsToBeSetupList::decode(data)?);
                }
                35 => {
                    dr_bs_to_be_setup_list = Some(DrBsToBeSetupList::decode(data)?);
                }
                97 => {
                    inactivity_monitoring_request =
                        Some(InactivityMonitoringRequest::decode(data)?);
                }
                108 => {
                    rat_frequency_priority_information =
                        Some(RatFrequencyPriorityInformation::decode(data)?);
                }
                50 => {
                    rrc_container = Some(RrcContainer::decode(data)?);
                }
                126 => {
                    masked_imeisv = Some(MaskedImeisv::decode(data)?);
                }
                165 => {
                    serving_plmn = Some(PlmnIdentity::decode(data)?);
                }
                158 => {
                    gnb_du_ue_ambr_ul = Some(BitRate::decode(data)?);
                }
                184 => {
                    rrc_delivery_status_request = Some(RrcDeliveryStatusRequest::decode(data)?);
                }
                195 => {
                    resource_coordination_transfer_information =
                        Some(ResourceCoordinationTransferInformation::decode(data)?);
                }
                182 => {
                    serving_cell_mo = Some(ServingCellMo::decode(data)?);
                }
                217 => {
                    new_gnb_cu_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                226 => {
                    ranueid = Some(Ranueid::decode(data)?);
                }
                242 => {
                    trace_activation = Some(TraceActivation::decode(data)?);
                }
                248 => {
                    additional_rrm_priority_index = Some(AdditionalRrmPriorityIndex::decode(data)?);
                }
                258 => {
                    bh_channels_to_be_setup_list = Some(BhChannelsToBeSetupList::decode(data)?);
                }
                282 => {
                    configured_bap_address = Some(BapAddress::decode(data)?);
                }
                306 => {
                    nrv2x_services_authorized = Some(Nrv2xServicesAuthorized::decode(data)?);
                }
                307 => {
                    ltev2x_services_authorized = Some(Ltev2xServicesAuthorized::decode(data)?);
                }
                308 => {
                    nrue_sidelink_aggregate_maximum_bitrate =
                        Some(NrueSidelinkAggregateMaximumBitrate::decode(data)?);
                }
                309 => {
                    lteue_sidelink_aggregate_maximum_bitrate =
                        Some(LteueSidelinkAggregateMaximumBitrate::decode(data)?);
                }
                340 => {
                    pc5_link_ambr = Some(BitRate::decode(data)?);
                }
                330 => {
                    sldr_bs_to_be_setup_list = Some(SldrBsToBeSetupList::decode(data)?);
                }
                373 => {
                    conditional_inter_du_mobility_information =
                        Some(ConditionalInterDuMobilityInformation::decode(data)?);
                }
                377 => {
                    management_based_mdt_plmn_list = Some(MdtPlmnList::decode(data)?);
                }
                382 => {
                    serving_nid = Some(Nid::decode(data)?);
                }
                428 => {
                    f1c_transfer_path = Some(F1cTransferPath::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let sp_cell_id = sp_cell_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE sp_cell_id"
        )))?;
        let serv_cell_index = serv_cell_index.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE serv_cell_index"
        )))?;
        let c_uto_durrc_information = c_uto_durrc_information.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE c_uto_durrc_information"),
        ))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            sp_cell_id,
            serv_cell_index,
            sp_cell_ul_configured,
            c_uto_durrc_information,
            candidate_sp_cell_list,
            drx_cycle,
            resource_coordination_transfer_container,
            s_cell_to_be_setup_list,
            sr_bs_to_be_setup_list,
            dr_bs_to_be_setup_list,
            inactivity_monitoring_request,
            rat_frequency_priority_information,
            rrc_container,
            masked_imeisv,
            serving_plmn,
            gnb_du_ue_ambr_ul,
            rrc_delivery_status_request,
            resource_coordination_transfer_information,
            serving_cell_mo,
            new_gnb_cu_ue_f1ap_id,
            ranueid,
            trace_activation,
            additional_rrm_priority_index,
            bh_channels_to_be_setup_list,
            configured_bap_address,
            nrv2x_services_authorized,
            ltev2x_services_authorized,
            nrue_sidelink_aggregate_maximum_bitrate,
            lteue_sidelink_aggregate_maximum_bitrate,
            pc5_link_ambr,
            sldr_bs_to_be_setup_list,
            conditional_inter_du_mobility_information,
            management_based_mdt_plmn_list,
            serving_nid,
            f1c_transfer_path,
        })
    }
}

// CandidateSpCellList
#[derive(Clone)]
pub struct CandidateSpCellList(pub Vec<CandidateSpCellItem>);

// SCellToBeSetupList
#[derive(Clone)]
pub struct SCellToBeSetupList(pub Vec<SCellToBeSetupItem>);

// SrBsToBeSetupList
#[derive(Clone)]
pub struct SrBsToBeSetupList(pub Vec<SrBsToBeSetupItem>);

// DrBsToBeSetupList
#[derive(Clone)]
pub struct DrBsToBeSetupList(pub Vec<DrBsToBeSetupItem>);

// BhChannelsToBeSetupList
#[derive(Clone)]
pub struct BhChannelsToBeSetupList(pub Vec<BhChannelsToBeSetupItem>);

// SldrBsToBeSetupList
#[derive(Clone)]
pub struct SldrBsToBeSetupList(pub Vec<SldrBsToBeSetupItem>);

// UeContextSetupResponse
#[derive(Clone)]
pub struct UeContextSetupResponse {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub d_uto_currc_information: DUtoCurrcInformation,
    pub c_rnti: Option<CRnti>,
    pub resource_coordination_transfer_container: Option<ResourceCoordinationTransferContainer>,
    pub full_configuration: Option<FullConfiguration>,
    pub dr_bs_setup_list: Option<DrBsSetupList>,
    pub sr_bs_failed_to_be_setup_list: Option<SrBsFailedToBeSetupList>,
    pub dr_bs_failed_to_be_setup_list: Option<DrBsFailedToBeSetupList>,
    pub s_cell_failedto_setup_list: Option<SCellFailedtoSetupList>,
    pub inactivity_monitoring_response: Option<InactivityMonitoringResponse>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub sr_bs_setup_list: Option<SrBsSetupList>,
    pub bh_channels_setup_list: Option<BhChannelsSetupList>,
    pub bh_channels_failed_to_be_setup_list: Option<BhChannelsFailedToBeSetupList>,
    pub sldr_bs_setup_list: Option<SldrBsSetupList>,
    pub sldr_bs_failed_to_be_setup_list: Option<SldrBsFailedToBeSetupList>,
    pub requested_target_cell_global_id: Option<Nrcgi>,
}

impl AperCodec for UeContextSetupResponse {
    type Output = UeContextSetupResponse;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut d_uto_currc_information: Option<DUtoCurrcInformation> = None;
        let mut c_rnti: Option<CRnti> = None;
        let mut resource_coordination_transfer_container: Option<
            ResourceCoordinationTransferContainer,
        > = None;
        let mut full_configuration: Option<FullConfiguration> = None;
        let mut dr_bs_setup_list: Option<DrBsSetupList> = None;
        let mut sr_bs_failed_to_be_setup_list: Option<SrBsFailedToBeSetupList> = None;
        let mut dr_bs_failed_to_be_setup_list: Option<DrBsFailedToBeSetupList> = None;
        let mut s_cell_failedto_setup_list: Option<SCellFailedtoSetupList> = None;
        let mut inactivity_monitoring_response: Option<InactivityMonitoringResponse> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut sr_bs_setup_list: Option<SrBsSetupList> = None;
        let mut bh_channels_setup_list: Option<BhChannelsSetupList> = None;
        let mut bh_channels_failed_to_be_setup_list: Option<BhChannelsFailedToBeSetupList> = None;
        let mut sldr_bs_setup_list: Option<SldrBsSetupList> = None;
        let mut sldr_bs_failed_to_be_setup_list: Option<SldrBsFailedToBeSetupList> = None;
        let mut requested_target_cell_global_id: Option<Nrcgi> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                39 => {
                    d_uto_currc_information = Some(DUtoCurrcInformation::decode(data)?);
                }
                95 => {
                    c_rnti = Some(CRnti::decode(data)?);
                }
                49 => {
                    resource_coordination_transfer_container =
                        Some(ResourceCoordinationTransferContainer::decode(data)?);
                }
                94 => {
                    full_configuration = Some(FullConfiguration::decode(data)?);
                }
                27 => {
                    dr_bs_setup_list = Some(DrBsSetupList::decode(data)?);
                }
                66 => {
                    sr_bs_failed_to_be_setup_list = Some(SrBsFailedToBeSetupList::decode(data)?);
                }
                15 => {
                    dr_bs_failed_to_be_setup_list = Some(DrBsFailedToBeSetupList::decode(data)?);
                }
                83 => {
                    s_cell_failedto_setup_list = Some(SCellFailedtoSetupList::decode(data)?);
                }
                98 => {
                    inactivity_monitoring_response =
                        Some(InactivityMonitoringResponse::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                202 => {
                    sr_bs_setup_list = Some(SrBsSetupList::decode(data)?);
                }
                260 => {
                    bh_channels_setup_list = Some(BhChannelsSetupList::decode(data)?);
                }
                279 => {
                    bh_channels_failed_to_be_setup_list =
                        Some(BhChannelsFailedToBeSetupList::decode(data)?);
                }
                324 => {
                    sldr_bs_setup_list = Some(SldrBsSetupList::decode(data)?);
                }
                316 => {
                    sldr_bs_failed_to_be_setup_list =
                        Some(SldrBsFailedToBeSetupList::decode(data)?);
                }
                376 => {
                    requested_target_cell_global_id = Some(Nrcgi::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let d_uto_currc_information = d_uto_currc_information.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE d_uto_currc_information"),
        ))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            d_uto_currc_information,
            c_rnti,
            resource_coordination_transfer_container,
            full_configuration,
            dr_bs_setup_list,
            sr_bs_failed_to_be_setup_list,
            dr_bs_failed_to_be_setup_list,
            s_cell_failedto_setup_list,
            inactivity_monitoring_response,
            criticality_diagnostics,
            sr_bs_setup_list,
            bh_channels_setup_list,
            bh_channels_failed_to_be_setup_list,
            sldr_bs_setup_list,
            sldr_bs_failed_to_be_setup_list,
            requested_target_cell_global_id,
        })
    }
}

// DrBsSetupList
#[derive(Clone)]
pub struct DrBsSetupList(pub Vec<DrBsSetupItem>);

// SrBsFailedToBeSetupList
#[derive(Clone)]
pub struct SrBsFailedToBeSetupList(pub Vec<SrBsFailedToBeSetupItem>);

// DrBsFailedToBeSetupList
#[derive(Clone)]
pub struct DrBsFailedToBeSetupList(pub Vec<DrBsFailedToBeSetupItem>);

// SCellFailedtoSetupList
#[derive(Clone)]
pub struct SCellFailedtoSetupList(pub Vec<SCellFailedtoSetupItem>);

// SrBsSetupList
#[derive(Clone)]
pub struct SrBsSetupList(pub Vec<SrBsSetupItem>);

// BhChannelsSetupList
#[derive(Clone)]
pub struct BhChannelsSetupList(pub Vec<BhChannelsSetupItem>);

// BhChannelsFailedToBeSetupList
#[derive(Clone)]
pub struct BhChannelsFailedToBeSetupList(pub Vec<BhChannelsFailedToBeSetupItem>);

// SldrBsSetupList
#[derive(Clone)]
pub struct SldrBsSetupList(pub Vec<SldrBsSetupItem>);

// SldrBsFailedToBeSetupList
#[derive(Clone)]
pub struct SldrBsFailedToBeSetupList(pub Vec<SldrBsFailedToBeSetupItem>);

// UeContextSetupFailure
#[derive(Clone)]
pub struct UeContextSetupFailure {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId>,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub potential_sp_cell_list: Option<PotentialSpCellList>,
    pub requested_target_cell_global_id: Option<Nrcgi>,
}

impl AperCodec for UeContextSetupFailure {
    type Output = UeContextSetupFailure;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut potential_sp_cell_list: Option<PotentialSpCellList> = None;
        let mut requested_target_cell_global_id: Option<Nrcgi> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                92 => {
                    potential_sp_cell_list = Some(PotentialSpCellList::decode(data)?);
                }
                376 => {
                    requested_target_cell_global_id = Some(Nrcgi::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            cause,
            criticality_diagnostics,
            potential_sp_cell_list,
            requested_target_cell_global_id,
        })
    }
}

// PotentialSpCellList
#[derive(Clone)]
pub struct PotentialSpCellList(pub Vec<PotentialSpCellItem>);

// UeContextReleaseRequest
#[derive(Clone)]
pub struct UeContextReleaseRequest {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub cause: Cause,
    pub target_cells_to_cancel: Option<TargetCellList>,
}

impl AperCodec for UeContextReleaseRequest {
    type Output = UeContextReleaseRequest;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut target_cells_to_cancel: Option<TargetCellList> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                375 => {
                    target_cells_to_cancel = Some(TargetCellList::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            cause,
            target_cells_to_cancel,
        })
    }
}

// UeContextReleaseCommand
#[derive(Clone)]
pub struct UeContextReleaseCommand {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub cause: Cause,
    pub rrc_container: Option<RrcContainer>,
    pub srbid: Option<Srbid>,
    pub old_gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId>,
    pub execute_duplication: Option<ExecuteDuplication>,
    pub rrc_delivery_status_request: Option<RrcDeliveryStatusRequest>,
    pub target_cells_to_cancel: Option<TargetCellList>,
}

impl AperCodec for UeContextReleaseCommand {
    type Output = UeContextReleaseCommand;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut rrc_container: Option<RrcContainer> = None;
        let mut srbid: Option<Srbid> = None;
        let mut old_gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut execute_duplication: Option<ExecuteDuplication> = None;
        let mut rrc_delivery_status_request: Option<RrcDeliveryStatusRequest> = None;
        let mut target_cells_to_cancel: Option<TargetCellList> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                50 => {
                    rrc_container = Some(RrcContainer::decode(data)?);
                }
                64 => {
                    srbid = Some(Srbid::decode(data)?);
                }
                47 => {
                    old_gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                109 => {
                    execute_duplication = Some(ExecuteDuplication::decode(data)?);
                }
                184 => {
                    rrc_delivery_status_request = Some(RrcDeliveryStatusRequest::decode(data)?);
                }
                375 => {
                    target_cells_to_cancel = Some(TargetCellList::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            cause,
            rrc_container,
            srbid,
            old_gnb_du_ue_f1ap_id,
            execute_duplication,
            rrc_delivery_status_request,
            target_cells_to_cancel,
        })
    }
}

// UeContextReleaseComplete
#[derive(Clone)]
pub struct UeContextReleaseComplete {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for UeContextReleaseComplete {
    type Output = UeContextReleaseComplete;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            criticality_diagnostics,
        })
    }
}

// UeContextModificationRequest
#[derive(Clone)]
pub struct UeContextModificationRequest {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub sp_cell_id: Option<Nrcgi>,
    pub serv_cell_index: Option<ServCellIndex>,
    pub sp_cell_ul_configured: Option<CellUlConfigured>,
    pub drx_cycle: Option<DrxCycle>,
    pub c_uto_durrc_information: Option<CUtoDurrcInformation>,
    pub transmission_action_indicator: Option<TransmissionActionIndicator>,
    pub resource_coordination_transfer_container: Option<ResourceCoordinationTransferContainer>,
    pub rrc_reconfiguration_complete_indicator: Option<RrcReconfigurationCompleteIndicator>,
    pub rrc_container: Option<RrcContainer>,
    pub s_cell_to_be_setup_mod_list: Option<SCellToBeSetupModList>,
    pub s_cell_to_be_removed_list: Option<SCellToBeRemovedList>,
    pub sr_bs_to_be_setup_mod_list: Option<SrBsToBeSetupModList>,
    pub dr_bs_to_be_setup_mod_list: Option<DrBsToBeSetupModList>,
    pub dr_bs_to_be_modified_list: Option<DrBsToBeModifiedList>,
    pub sr_bs_to_be_released_list: Option<SrBsToBeReleasedList>,
    pub dr_bs_to_be_released_list: Option<DrBsToBeReleasedList>,
    pub inactivity_monitoring_request: Option<InactivityMonitoringRequest>,
    pub rat_frequency_priority_information: Option<RatFrequencyPriorityInformation>,
    pub drx_configuration_indicator: Option<DrxConfigurationIndicator>,
    pub rlc_failure_indication: Option<RlcFailureIndication>,
    pub uplink_tx_direct_current_list_information: Option<UplinkTxDirectCurrentListInformation>,
    pub gnb_du_configuration_query: Option<GnbDuConfigurationQuery>,
    pub gnb_du_ue_ambr_ul: Option<BitRate>,
    pub execute_duplication: Option<ExecuteDuplication>,
    pub rrc_delivery_status_request: Option<RrcDeliveryStatusRequest>,
    pub resource_coordination_transfer_information: Option<ResourceCoordinationTransferInformation>,
    pub serving_cell_mo: Option<ServingCellMo>,
    pub needfor_gap: Option<NeedforGap>,
    pub full_configuration: Option<FullConfiguration>,
    pub additional_rrm_priority_index: Option<AdditionalRrmPriorityIndex>,
    pub lower_layer_presence_status_change: Option<LowerLayerPresenceStatusChange>,
    pub bh_channels_to_be_setup_mod_list: Option<BhChannelsToBeSetupModList>,
    pub bh_channels_to_be_modified_list: Option<BhChannelsToBeModifiedList>,
    pub bh_channels_to_be_released_list: Option<BhChannelsToBeReleasedList>,
    pub nrv2x_services_authorized: Option<Nrv2xServicesAuthorized>,
    pub ltev2x_services_authorized: Option<Ltev2xServicesAuthorized>,
    pub nrue_sidelink_aggregate_maximum_bitrate: Option<NrueSidelinkAggregateMaximumBitrate>,
    pub lteue_sidelink_aggregate_maximum_bitrate: Option<LteueSidelinkAggregateMaximumBitrate>,
    pub pc5_link_ambr: Option<BitRate>,
    pub sldr_bs_to_be_setup_mod_list: Option<SldrBsToBeSetupModList>,
    pub sldr_bs_to_be_modified_list: Option<SldrBsToBeModifiedList>,
    pub sldr_bs_to_be_released_list: Option<SldrBsToBeReleasedList>,
    pub conditional_intra_du_mobility_information: Option<ConditionalIntraDuMobilityInformation>,
    pub f1c_transfer_path: Option<F1cTransferPath>,
    pub scg_indicator: Option<ScgIndicator>,
}

impl AperCodec for UeContextModificationRequest {
    type Output = UeContextModificationRequest;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut sp_cell_id: Option<Nrcgi> = None;
        let mut serv_cell_index: Option<ServCellIndex> = None;
        let mut sp_cell_ul_configured: Option<CellUlConfigured> = None;
        let mut drx_cycle: Option<DrxCycle> = None;
        let mut c_uto_durrc_information: Option<CUtoDurrcInformation> = None;
        let mut transmission_action_indicator: Option<TransmissionActionIndicator> = None;
        let mut resource_coordination_transfer_container: Option<
            ResourceCoordinationTransferContainer,
        > = None;
        let mut rrc_reconfiguration_complete_indicator: Option<
            RrcReconfigurationCompleteIndicator,
        > = None;
        let mut rrc_container: Option<RrcContainer> = None;
        let mut s_cell_to_be_setup_mod_list: Option<SCellToBeSetupModList> = None;
        let mut s_cell_to_be_removed_list: Option<SCellToBeRemovedList> = None;
        let mut sr_bs_to_be_setup_mod_list: Option<SrBsToBeSetupModList> = None;
        let mut dr_bs_to_be_setup_mod_list: Option<DrBsToBeSetupModList> = None;
        let mut dr_bs_to_be_modified_list: Option<DrBsToBeModifiedList> = None;
        let mut sr_bs_to_be_released_list: Option<SrBsToBeReleasedList> = None;
        let mut dr_bs_to_be_released_list: Option<DrBsToBeReleasedList> = None;
        let mut inactivity_monitoring_request: Option<InactivityMonitoringRequest> = None;
        let mut rat_frequency_priority_information: Option<RatFrequencyPriorityInformation> = None;
        let mut drx_configuration_indicator: Option<DrxConfigurationIndicator> = None;
        let mut rlc_failure_indication: Option<RlcFailureIndication> = None;
        let mut uplink_tx_direct_current_list_information: Option<
            UplinkTxDirectCurrentListInformation,
        > = None;
        let mut gnb_du_configuration_query: Option<GnbDuConfigurationQuery> = None;
        let mut gnb_du_ue_ambr_ul: Option<BitRate> = None;
        let mut execute_duplication: Option<ExecuteDuplication> = None;
        let mut rrc_delivery_status_request: Option<RrcDeliveryStatusRequest> = None;
        let mut resource_coordination_transfer_information: Option<
            ResourceCoordinationTransferInformation,
        > = None;
        let mut serving_cell_mo: Option<ServingCellMo> = None;
        let mut needfor_gap: Option<NeedforGap> = None;
        let mut full_configuration: Option<FullConfiguration> = None;
        let mut additional_rrm_priority_index: Option<AdditionalRrmPriorityIndex> = None;
        let mut lower_layer_presence_status_change: Option<LowerLayerPresenceStatusChange> = None;
        let mut bh_channels_to_be_setup_mod_list: Option<BhChannelsToBeSetupModList> = None;
        let mut bh_channels_to_be_modified_list: Option<BhChannelsToBeModifiedList> = None;
        let mut bh_channels_to_be_released_list: Option<BhChannelsToBeReleasedList> = None;
        let mut nrv2x_services_authorized: Option<Nrv2xServicesAuthorized> = None;
        let mut ltev2x_services_authorized: Option<Ltev2xServicesAuthorized> = None;
        let mut nrue_sidelink_aggregate_maximum_bitrate: Option<
            NrueSidelinkAggregateMaximumBitrate,
        > = None;
        let mut lteue_sidelink_aggregate_maximum_bitrate: Option<
            LteueSidelinkAggregateMaximumBitrate,
        > = None;
        let mut pc5_link_ambr: Option<BitRate> = None;
        let mut sldr_bs_to_be_setup_mod_list: Option<SldrBsToBeSetupModList> = None;
        let mut sldr_bs_to_be_modified_list: Option<SldrBsToBeModifiedList> = None;
        let mut sldr_bs_to_be_released_list: Option<SldrBsToBeReleasedList> = None;
        let mut conditional_intra_du_mobility_information: Option<
            ConditionalIntraDuMobilityInformation,
        > = None;
        let mut f1c_transfer_path: Option<F1cTransferPath> = None;
        let mut scg_indicator: Option<ScgIndicator> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                63 => {
                    sp_cell_id = Some(Nrcgi::decode(data)?);
                }
                107 => {
                    serv_cell_index = Some(ServCellIndex::decode(data)?);
                }
                96 => {
                    sp_cell_ul_configured = Some(CellUlConfigured::decode(data)?);
                }
                38 => {
                    drx_cycle = Some(DrxCycle::decode(data)?);
                }
                9 => {
                    c_uto_durrc_information = Some(CUtoDurrcInformation::decode(data)?);
                }
                79 => {
                    transmission_action_indicator =
                        Some(TransmissionActionIndicator::decode(data)?);
                }
                49 => {
                    resource_coordination_transfer_container =
                        Some(ResourceCoordinationTransferContainer::decode(data)?);
                }
                87 => {
                    rrc_reconfiguration_complete_indicator =
                        Some(RrcReconfigurationCompleteIndicator::decode(data)?);
                }
                50 => {
                    rrc_container = Some(RrcContainer::decode(data)?);
                }
                56 => {
                    s_cell_to_be_setup_mod_list = Some(SCellToBeSetupModList::decode(data)?);
                }
                52 => {
                    s_cell_to_be_removed_list = Some(SCellToBeRemovedList::decode(data)?);
                }
                76 => {
                    sr_bs_to_be_setup_mod_list = Some(SrBsToBeSetupModList::decode(data)?);
                }
                37 => {
                    dr_bs_to_be_setup_mod_list = Some(DrBsToBeSetupModList::decode(data)?);
                }
                31 => {
                    dr_bs_to_be_modified_list = Some(DrBsToBeModifiedList::decode(data)?);
                }
                72 => {
                    sr_bs_to_be_released_list = Some(SrBsToBeReleasedList::decode(data)?);
                }
                33 => {
                    dr_bs_to_be_released_list = Some(DrBsToBeReleasedList::decode(data)?);
                }
                97 => {
                    inactivity_monitoring_request =
                        Some(InactivityMonitoringRequest::decode(data)?);
                }
                108 => {
                    rat_frequency_priority_information =
                        Some(RatFrequencyPriorityInformation::decode(data)?);
                }
                159 => {
                    drx_configuration_indicator = Some(DrxConfigurationIndicator::decode(data)?);
                }
                174 => {
                    rlc_failure_indication = Some(RlcFailureIndication::decode(data)?);
                }
                175 => {
                    uplink_tx_direct_current_list_information =
                        Some(UplinkTxDirectCurrentListInformation::decode(data)?);
                }
                162 => {
                    gnb_du_configuration_query = Some(GnbDuConfigurationQuery::decode(data)?);
                }
                158 => {
                    gnb_du_ue_ambr_ul = Some(BitRate::decode(data)?);
                }
                109 => {
                    execute_duplication = Some(ExecuteDuplication::decode(data)?);
                }
                184 => {
                    rrc_delivery_status_request = Some(RrcDeliveryStatusRequest::decode(data)?);
                }
                195 => {
                    resource_coordination_transfer_information =
                        Some(ResourceCoordinationTransferInformation::decode(data)?);
                }
                182 => {
                    serving_cell_mo = Some(ServingCellMo::decode(data)?);
                }
                215 => {
                    needfor_gap = Some(NeedforGap::decode(data)?);
                }
                94 => {
                    full_configuration = Some(FullConfiguration::decode(data)?);
                }
                248 => {
                    additional_rrm_priority_index = Some(AdditionalRrmPriorityIndex::decode(data)?);
                }
                253 => {
                    lower_layer_presence_status_change =
                        Some(LowerLayerPresenceStatusChange::decode(data)?);
                }
                267 => {
                    bh_channels_to_be_setup_mod_list =
                        Some(BhChannelsToBeSetupModList::decode(data)?);
                }
                263 => {
                    bh_channels_to_be_modified_list =
                        Some(BhChannelsToBeModifiedList::decode(data)?);
                }
                265 => {
                    bh_channels_to_be_released_list =
                        Some(BhChannelsToBeReleasedList::decode(data)?);
                }
                306 => {
                    nrv2x_services_authorized = Some(Nrv2xServicesAuthorized::decode(data)?);
                }
                307 => {
                    ltev2x_services_authorized = Some(Ltev2xServicesAuthorized::decode(data)?);
                }
                308 => {
                    nrue_sidelink_aggregate_maximum_bitrate =
                        Some(NrueSidelinkAggregateMaximumBitrate::decode(data)?);
                }
                309 => {
                    lteue_sidelink_aggregate_maximum_bitrate =
                        Some(LteueSidelinkAggregateMaximumBitrate::decode(data)?);
                }
                340 => {
                    pc5_link_ambr = Some(BitRate::decode(data)?);
                }
                332 => {
                    sldr_bs_to_be_setup_mod_list = Some(SldrBsToBeSetupModList::decode(data)?);
                }
                326 => {
                    sldr_bs_to_be_modified_list = Some(SldrBsToBeModifiedList::decode(data)?);
                }
                328 => {
                    sldr_bs_to_be_released_list = Some(SldrBsToBeReleasedList::decode(data)?);
                }
                374 => {
                    conditional_intra_du_mobility_information =
                        Some(ConditionalIntraDuMobilityInformation::decode(data)?);
                }
                428 => {
                    f1c_transfer_path = Some(F1cTransferPath::decode(data)?);
                }
                432 => {
                    scg_indicator = Some(ScgIndicator::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            sp_cell_id,
            serv_cell_index,
            sp_cell_ul_configured,
            drx_cycle,
            c_uto_durrc_information,
            transmission_action_indicator,
            resource_coordination_transfer_container,
            rrc_reconfiguration_complete_indicator,
            rrc_container,
            s_cell_to_be_setup_mod_list,
            s_cell_to_be_removed_list,
            sr_bs_to_be_setup_mod_list,
            dr_bs_to_be_setup_mod_list,
            dr_bs_to_be_modified_list,
            sr_bs_to_be_released_list,
            dr_bs_to_be_released_list,
            inactivity_monitoring_request,
            rat_frequency_priority_information,
            drx_configuration_indicator,
            rlc_failure_indication,
            uplink_tx_direct_current_list_information,
            gnb_du_configuration_query,
            gnb_du_ue_ambr_ul,
            execute_duplication,
            rrc_delivery_status_request,
            resource_coordination_transfer_information,
            serving_cell_mo,
            needfor_gap,
            full_configuration,
            additional_rrm_priority_index,
            lower_layer_presence_status_change,
            bh_channels_to_be_setup_mod_list,
            bh_channels_to_be_modified_list,
            bh_channels_to_be_released_list,
            nrv2x_services_authorized,
            ltev2x_services_authorized,
            nrue_sidelink_aggregate_maximum_bitrate,
            lteue_sidelink_aggregate_maximum_bitrate,
            pc5_link_ambr,
            sldr_bs_to_be_setup_mod_list,
            sldr_bs_to_be_modified_list,
            sldr_bs_to_be_released_list,
            conditional_intra_du_mobility_information,
            f1c_transfer_path,
            scg_indicator,
        })
    }
}

// SCellToBeSetupModList
#[derive(Clone)]
pub struct SCellToBeSetupModList(pub Vec<SCellToBeSetupModItem>);

// SCellToBeRemovedList
#[derive(Clone)]
pub struct SCellToBeRemovedList(pub Vec<SCellToBeRemovedItem>);

// SrBsToBeSetupModList
#[derive(Clone)]
pub struct SrBsToBeSetupModList(pub Vec<SrBsToBeSetupModItem>);

// DrBsToBeSetupModList
#[derive(Clone)]
pub struct DrBsToBeSetupModList(pub Vec<DrBsToBeSetupModItem>);

// BhChannelsToBeSetupModList
#[derive(Clone)]
pub struct BhChannelsToBeSetupModList(pub Vec<BhChannelsToBeSetupModItem>);

// DrBsToBeModifiedList
#[derive(Clone)]
pub struct DrBsToBeModifiedList(pub Vec<DrBsToBeModifiedItem>);

// BhChannelsToBeModifiedList
#[derive(Clone)]
pub struct BhChannelsToBeModifiedList(pub Vec<BhChannelsToBeModifiedItem>);

// SrBsToBeReleasedList
#[derive(Clone)]
pub struct SrBsToBeReleasedList(pub Vec<SrBsToBeReleasedItem>);

// DrBsToBeReleasedList
#[derive(Clone)]
pub struct DrBsToBeReleasedList(pub Vec<DrBsToBeReleasedItem>);

// BhChannelsToBeReleasedList
#[derive(Clone)]
pub struct BhChannelsToBeReleasedList(pub Vec<BhChannelsToBeReleasedItem>);

// SldrBsToBeSetupModList
#[derive(Clone)]
pub struct SldrBsToBeSetupModList(pub Vec<SldrBsToBeSetupModItem>);

// SldrBsToBeModifiedList
#[derive(Clone)]
pub struct SldrBsToBeModifiedList(pub Vec<SldrBsToBeModifiedItem>);

// SldrBsToBeReleasedList
#[derive(Clone)]
pub struct SldrBsToBeReleasedList(pub Vec<SldrBsToBeReleasedItem>);

// UeContextModificationResponse
#[derive(Clone)]
pub struct UeContextModificationResponse {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub resource_coordination_transfer_container: Option<ResourceCoordinationTransferContainer>,
    pub d_uto_currc_information: Option<DUtoCurrcInformation>,
    pub dr_bs_setup_mod_list: Option<DrBsSetupModList>,
    pub dr_bs_modified_list: Option<DrBsModifiedList>,
    pub sr_bs_failed_to_be_setup_mod_list: Option<SrBsFailedToBeSetupModList>,
    pub dr_bs_failed_to_be_setup_mod_list: Option<DrBsFailedToBeSetupModList>,
    pub s_cell_failedto_setup_mod_list: Option<SCellFailedtoSetupModList>,
    pub dr_bs_failed_to_be_modified_list: Option<DrBsFailedToBeModifiedList>,
    pub inactivity_monitoring_response: Option<InactivityMonitoringResponse>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub c_rnti: Option<CRnti>,
    pub associated_s_cell_list: Option<AssociatedSCellList>,
    pub sr_bs_setup_mod_list: Option<SrBsSetupModList>,
    pub sr_bs_modified_list: Option<SrBsModifiedList>,
    pub full_configuration: Option<FullConfiguration>,
    pub bh_channels_setup_mod_list: Option<BhChannelsSetupModList>,
    pub bh_channels_modified_list: Option<BhChannelsModifiedList>,
    pub bh_channels_failed_to_be_setup_mod_list: Option<BhChannelsFailedToBeSetupModList>,
    pub bh_channels_failed_to_be_modified_list: Option<BhChannelsFailedToBeModifiedList>,
    pub sldr_bs_setup_mod_list: Option<SldrBsSetupModList>,
    pub sldr_bs_modified_list: Option<SldrBsModifiedList>,
    pub sldr_bs_failed_to_be_setup_mod_list: Option<SldrBsFailedToBeSetupModList>,
    pub sldr_bs_failed_to_be_modified_list: Option<SldrBsFailedToBeModifiedList>,
    pub requested_target_cell_global_id: Option<Nrcgi>,
}

impl AperCodec for UeContextModificationResponse {
    type Output = UeContextModificationResponse;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut resource_coordination_transfer_container: Option<
            ResourceCoordinationTransferContainer,
        > = None;
        let mut d_uto_currc_information: Option<DUtoCurrcInformation> = None;
        let mut dr_bs_setup_mod_list: Option<DrBsSetupModList> = None;
        let mut dr_bs_modified_list: Option<DrBsModifiedList> = None;
        let mut sr_bs_failed_to_be_setup_mod_list: Option<SrBsFailedToBeSetupModList> = None;
        let mut dr_bs_failed_to_be_setup_mod_list: Option<DrBsFailedToBeSetupModList> = None;
        let mut s_cell_failedto_setup_mod_list: Option<SCellFailedtoSetupModList> = None;
        let mut dr_bs_failed_to_be_modified_list: Option<DrBsFailedToBeModifiedList> = None;
        let mut inactivity_monitoring_response: Option<InactivityMonitoringResponse> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut c_rnti: Option<CRnti> = None;
        let mut associated_s_cell_list: Option<AssociatedSCellList> = None;
        let mut sr_bs_setup_mod_list: Option<SrBsSetupModList> = None;
        let mut sr_bs_modified_list: Option<SrBsModifiedList> = None;
        let mut full_configuration: Option<FullConfiguration> = None;
        let mut bh_channels_setup_mod_list: Option<BhChannelsSetupModList> = None;
        let mut bh_channels_modified_list: Option<BhChannelsModifiedList> = None;
        let mut bh_channels_failed_to_be_setup_mod_list: Option<BhChannelsFailedToBeSetupModList> =
            None;
        let mut bh_channels_failed_to_be_modified_list: Option<BhChannelsFailedToBeModifiedList> =
            None;
        let mut sldr_bs_setup_mod_list: Option<SldrBsSetupModList> = None;
        let mut sldr_bs_modified_list: Option<SldrBsModifiedList> = None;
        let mut sldr_bs_failed_to_be_setup_mod_list: Option<SldrBsFailedToBeSetupModList> = None;
        let mut sldr_bs_failed_to_be_modified_list: Option<SldrBsFailedToBeModifiedList> = None;
        let mut requested_target_cell_global_id: Option<Nrcgi> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                49 => {
                    resource_coordination_transfer_container =
                        Some(ResourceCoordinationTransferContainer::decode(data)?);
                }
                39 => {
                    d_uto_currc_information = Some(DUtoCurrcInformation::decode(data)?);
                }
                29 => {
                    dr_bs_setup_mod_list = Some(DrBsSetupModList::decode(data)?);
                }
                21 => {
                    dr_bs_modified_list = Some(DrBsModifiedList::decode(data)?);
                }
                68 => {
                    sr_bs_failed_to_be_setup_mod_list =
                        Some(SrBsFailedToBeSetupModList::decode(data)?);
                }
                17 => {
                    dr_bs_failed_to_be_setup_mod_list =
                        Some(DrBsFailedToBeSetupModList::decode(data)?);
                }
                85 => {
                    s_cell_failedto_setup_mod_list = Some(SCellFailedtoSetupModList::decode(data)?);
                }
                13 => {
                    dr_bs_failed_to_be_modified_list =
                        Some(DrBsFailedToBeModifiedList::decode(data)?);
                }
                98 => {
                    inactivity_monitoring_response =
                        Some(InactivityMonitoringResponse::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                95 => {
                    c_rnti = Some(CRnti::decode(data)?);
                }
                198 => {
                    associated_s_cell_list = Some(AssociatedSCellList::decode(data)?);
                }
                204 => {
                    sr_bs_setup_mod_list = Some(SrBsSetupModList::decode(data)?);
                }
                206 => {
                    sr_bs_modified_list = Some(SrBsModifiedList::decode(data)?);
                }
                94 => {
                    full_configuration = Some(FullConfiguration::decode(data)?);
                }
                275 => {
                    bh_channels_setup_mod_list = Some(BhChannelsSetupModList::decode(data)?);
                }
                273 => {
                    bh_channels_modified_list = Some(BhChannelsModifiedList::decode(data)?);
                }
                271 => {
                    bh_channels_failed_to_be_setup_mod_list =
                        Some(BhChannelsFailedToBeSetupModList::decode(data)?);
                }
                269 => {
                    bh_channels_failed_to_be_modified_list =
                        Some(BhChannelsFailedToBeModifiedList::decode(data)?);
                }
                333 => {
                    sldr_bs_setup_mod_list = Some(SldrBsSetupModList::decode(data)?);
                }
                318 => {
                    sldr_bs_modified_list = Some(SldrBsModifiedList::decode(data)?);
                }
                334 => {
                    sldr_bs_failed_to_be_setup_mod_list =
                        Some(SldrBsFailedToBeSetupModList::decode(data)?);
                }
                314 => {
                    sldr_bs_failed_to_be_modified_list =
                        Some(SldrBsFailedToBeModifiedList::decode(data)?);
                }
                376 => {
                    requested_target_cell_global_id = Some(Nrcgi::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            resource_coordination_transfer_container,
            d_uto_currc_information,
            dr_bs_setup_mod_list,
            dr_bs_modified_list,
            sr_bs_failed_to_be_setup_mod_list,
            dr_bs_failed_to_be_setup_mod_list,
            s_cell_failedto_setup_mod_list,
            dr_bs_failed_to_be_modified_list,
            inactivity_monitoring_response,
            criticality_diagnostics,
            c_rnti,
            associated_s_cell_list,
            sr_bs_setup_mod_list,
            sr_bs_modified_list,
            full_configuration,
            bh_channels_setup_mod_list,
            bh_channels_modified_list,
            bh_channels_failed_to_be_setup_mod_list,
            bh_channels_failed_to_be_modified_list,
            sldr_bs_setup_mod_list,
            sldr_bs_modified_list,
            sldr_bs_failed_to_be_setup_mod_list,
            sldr_bs_failed_to_be_modified_list,
            requested_target_cell_global_id,
        })
    }
}

// DrBsSetupModList
#[derive(Clone)]
pub struct DrBsSetupModList(pub Vec<DrBsSetupModItem>);

// DrBsModifiedList
#[derive(Clone)]
pub struct DrBsModifiedList(pub Vec<DrBsModifiedItem>);

// SrBsSetupModList
#[derive(Clone)]
pub struct SrBsSetupModList(pub Vec<SrBsSetupModItem>);

// SrBsModifiedList
#[derive(Clone)]
pub struct SrBsModifiedList(pub Vec<SrBsModifiedItem>);

// DrBsFailedToBeModifiedList
#[derive(Clone)]
pub struct DrBsFailedToBeModifiedList(pub Vec<DrBsFailedToBeModifiedItem>);

// SrBsFailedToBeSetupModList
#[derive(Clone)]
pub struct SrBsFailedToBeSetupModList(pub Vec<SrBsFailedToBeSetupModItem>);

// DrBsFailedToBeSetupModList
#[derive(Clone)]
pub struct DrBsFailedToBeSetupModList(pub Vec<DrBsFailedToBeSetupModItem>);

// SCellFailedtoSetupModList
#[derive(Clone)]
pub struct SCellFailedtoSetupModList(pub Vec<SCellFailedtoSetupModItem>);

// BhChannelsSetupModList
#[derive(Clone)]
pub struct BhChannelsSetupModList(pub Vec<BhChannelsSetupModItem>);

// BhChannelsModifiedList
#[derive(Clone)]
pub struct BhChannelsModifiedList(pub Vec<BhChannelsModifiedItem>);

// BhChannelsFailedToBeModifiedList
#[derive(Clone)]
pub struct BhChannelsFailedToBeModifiedList(pub Vec<BhChannelsFailedToBeModifiedItem>);

// BhChannelsFailedToBeSetupModList
#[derive(Clone)]
pub struct BhChannelsFailedToBeSetupModList(pub Vec<BhChannelsFailedToBeSetupModItem>);

// AssociatedSCellList
#[derive(Clone)]
pub struct AssociatedSCellList(pub Vec<AssociatedSCellItem>);

// SldrBsSetupModList
#[derive(Clone)]
pub struct SldrBsSetupModList(pub Vec<SldrBsSetupModItem>);

// SldrBsModifiedList
#[derive(Clone)]
pub struct SldrBsModifiedList(pub Vec<SldrBsModifiedItem>);

// SldrBsFailedToBeModifiedList
#[derive(Clone)]
pub struct SldrBsFailedToBeModifiedList(pub Vec<SldrBsFailedToBeModifiedItem>);

// SldrBsFailedToBeSetupModList
#[derive(Clone)]
pub struct SldrBsFailedToBeSetupModList(pub Vec<SldrBsFailedToBeSetupModItem>);

// UeContextModificationFailure
#[derive(Clone)]
pub struct UeContextModificationFailure {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub requested_target_cell_global_id: Option<Nrcgi>,
}

impl AperCodec for UeContextModificationFailure {
    type Output = UeContextModificationFailure;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut requested_target_cell_global_id: Option<Nrcgi> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                376 => {
                    requested_target_cell_global_id = Some(Nrcgi::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            cause,
            criticality_diagnostics,
            requested_target_cell_global_id,
        })
    }
}

// UeContextModificationRequired
#[derive(Clone)]
pub struct UeContextModificationRequired {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub resource_coordination_transfer_container: Option<ResourceCoordinationTransferContainer>,
    pub d_uto_currc_information: Option<DUtoCurrcInformation>,
    pub dr_bs_required_to_be_modified_list: Option<DrBsRequiredToBeModifiedList>,
    pub sr_bs_required_to_be_released_list: Option<SrBsRequiredToBeReleasedList>,
    pub dr_bs_required_to_be_released_list: Option<DrBsRequiredToBeReleasedList>,
    pub cause: Cause,
    pub bh_channels_required_to_be_released_list: Option<BhChannelsRequiredToBeReleasedList>,
    pub sldr_bs_required_to_be_modified_list: Option<SldrBsRequiredToBeModifiedList>,
    pub sldr_bs_required_to_be_released_list: Option<SldrBsRequiredToBeReleasedList>,
    pub target_cells_to_cancel: Option<TargetCellList>,
}

impl AperCodec for UeContextModificationRequired {
    type Output = UeContextModificationRequired;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut resource_coordination_transfer_container: Option<
            ResourceCoordinationTransferContainer,
        > = None;
        let mut d_uto_currc_information: Option<DUtoCurrcInformation> = None;
        let mut dr_bs_required_to_be_modified_list: Option<DrBsRequiredToBeModifiedList> = None;
        let mut sr_bs_required_to_be_released_list: Option<SrBsRequiredToBeReleasedList> = None;
        let mut dr_bs_required_to_be_released_list: Option<DrBsRequiredToBeReleasedList> = None;
        let mut cause: Option<Cause> = None;
        let mut bh_channels_required_to_be_released_list: Option<
            BhChannelsRequiredToBeReleasedList,
        > = None;
        let mut sldr_bs_required_to_be_modified_list: Option<SldrBsRequiredToBeModifiedList> = None;
        let mut sldr_bs_required_to_be_released_list: Option<SldrBsRequiredToBeReleasedList> = None;
        let mut target_cells_to_cancel: Option<TargetCellList> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                49 => {
                    resource_coordination_transfer_container =
                        Some(ResourceCoordinationTransferContainer::decode(data)?);
                }
                39 => {
                    d_uto_currc_information = Some(DUtoCurrcInformation::decode(data)?);
                }
                23 => {
                    dr_bs_required_to_be_modified_list =
                        Some(DrBsRequiredToBeModifiedList::decode(data)?);
                }
                70 => {
                    sr_bs_required_to_be_released_list =
                        Some(SrBsRequiredToBeReleasedList::decode(data)?);
                }
                25 => {
                    dr_bs_required_to_be_released_list =
                        Some(DrBsRequiredToBeReleasedList::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                277 => {
                    bh_channels_required_to_be_released_list =
                        Some(BhChannelsRequiredToBeReleasedList::decode(data)?);
                }
                320 => {
                    sldr_bs_required_to_be_modified_list =
                        Some(SldrBsRequiredToBeModifiedList::decode(data)?);
                }
                322 => {
                    sldr_bs_required_to_be_released_list =
                        Some(SldrBsRequiredToBeReleasedList::decode(data)?);
                }
                375 => {
                    target_cells_to_cancel = Some(TargetCellList::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            resource_coordination_transfer_container,
            d_uto_currc_information,
            dr_bs_required_to_be_modified_list,
            sr_bs_required_to_be_released_list,
            dr_bs_required_to_be_released_list,
            cause,
            bh_channels_required_to_be_released_list,
            sldr_bs_required_to_be_modified_list,
            sldr_bs_required_to_be_released_list,
            target_cells_to_cancel,
        })
    }
}

// DrBsRequiredToBeModifiedList
#[derive(Clone)]
pub struct DrBsRequiredToBeModifiedList(pub Vec<DrBsRequiredToBeModifiedItem>);

// DrBsRequiredToBeReleasedList
#[derive(Clone)]
pub struct DrBsRequiredToBeReleasedList(pub Vec<DrBsRequiredToBeReleasedItem>);

// SrBsRequiredToBeReleasedList
#[derive(Clone)]
pub struct SrBsRequiredToBeReleasedList(pub Vec<SrBsRequiredToBeReleasedItem>);

// BhChannelsRequiredToBeReleasedList
#[derive(Clone)]
pub struct BhChannelsRequiredToBeReleasedList(pub Vec<BhChannelsRequiredToBeReleasedItem>);

// SldrBsRequiredToBeModifiedList
#[derive(Clone)]
pub struct SldrBsRequiredToBeModifiedList(pub Vec<SldrBsRequiredToBeModifiedItem>);

// SldrBsRequiredToBeReleasedList
#[derive(Clone)]
pub struct SldrBsRequiredToBeReleasedList(pub Vec<SldrBsRequiredToBeReleasedItem>);

// UeContextModificationConfirm
#[derive(Clone)]
pub struct UeContextModificationConfirm {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub resource_coordination_transfer_container: Option<ResourceCoordinationTransferContainer>,
    pub dr_bs_modified_conf_list: Option<DrBsModifiedConfList>,
    pub rrc_container: Option<RrcContainer>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub execute_duplication: Option<ExecuteDuplication>,
    pub resource_coordination_transfer_information: Option<ResourceCoordinationTransferInformation>,
    pub sldr_bs_modified_conf_list: Option<SldrBsModifiedConfList>,
}

impl AperCodec for UeContextModificationConfirm {
    type Output = UeContextModificationConfirm;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut resource_coordination_transfer_container: Option<
            ResourceCoordinationTransferContainer,
        > = None;
        let mut dr_bs_modified_conf_list: Option<DrBsModifiedConfList> = None;
        let mut rrc_container: Option<RrcContainer> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut execute_duplication: Option<ExecuteDuplication> = None;
        let mut resource_coordination_transfer_information: Option<
            ResourceCoordinationTransferInformation,
        > = None;
        let mut sldr_bs_modified_conf_list: Option<SldrBsModifiedConfList> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                49 => {
                    resource_coordination_transfer_container =
                        Some(ResourceCoordinationTransferContainer::decode(data)?);
                }
                19 => {
                    dr_bs_modified_conf_list = Some(DrBsModifiedConfList::decode(data)?);
                }
                50 => {
                    rrc_container = Some(RrcContainer::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                109 => {
                    execute_duplication = Some(ExecuteDuplication::decode(data)?);
                }
                195 => {
                    resource_coordination_transfer_information =
                        Some(ResourceCoordinationTransferInformation::decode(data)?);
                }
                337 => {
                    sldr_bs_modified_conf_list = Some(SldrBsModifiedConfList::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            resource_coordination_transfer_container,
            dr_bs_modified_conf_list,
            rrc_container,
            criticality_diagnostics,
            execute_duplication,
            resource_coordination_transfer_information,
            sldr_bs_modified_conf_list,
        })
    }
}

// DrBsModifiedConfList
#[derive(Clone)]
pub struct DrBsModifiedConfList(pub Vec<DrBsModifiedConfItem>);

// SldrBsModifiedConfList
#[derive(Clone)]
pub struct SldrBsModifiedConfList(pub Vec<SldrBsModifiedConfItem>);

// UeContextModificationRefuse
#[derive(Clone)]
pub struct UeContextModificationRefuse {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for UeContextModificationRefuse {
    type Output = UeContextModificationRefuse;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            cause,
            criticality_diagnostics,
        })
    }
}

// WriteReplaceWarningRequest
#[derive(Clone)]
pub struct WriteReplaceWarningRequest {
    pub transaction_id: TransactionId,
    pub pws_system_information: PwsSystemInformation,
    pub repetition_period: RepetitionPeriod,
    pub numberof_broadcast_request: NumberofBroadcastRequest,
    pub cells_to_be_broadcast_list: Option<CellsToBeBroadcastList>,
}

impl AperCodec for WriteReplaceWarningRequest {
    type Output = WriteReplaceWarningRequest;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut pws_system_information: Option<PwsSystemInformation> = None;
        let mut repetition_period: Option<RepetitionPeriod> = None;
        let mut numberof_broadcast_request: Option<NumberofBroadcastRequest> = None;
        let mut cells_to_be_broadcast_list: Option<CellsToBeBroadcastList> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                140 => {
                    pws_system_information = Some(PwsSystemInformation::decode(data)?);
                }
                141 => {
                    repetition_period = Some(RepetitionPeriod::decode(data)?);
                }
                142 => {
                    numberof_broadcast_request = Some(NumberofBroadcastRequest::decode(data)?);
                }
                144 => {
                    cells_to_be_broadcast_list = Some(CellsToBeBroadcastList::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let pws_system_information = pws_system_information.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE pws_system_information"),
        ))?;
        let repetition_period = repetition_period.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE repetition_period"
        )))?;
        let numberof_broadcast_request = numberof_broadcast_request.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE numberof_broadcast_request")),
        )?;
        Ok(Self {
            transaction_id,
            pws_system_information,
            repetition_period,
            numberof_broadcast_request,
            cells_to_be_broadcast_list,
        })
    }
}

// CellsToBeBroadcastList
#[derive(Clone)]
pub struct CellsToBeBroadcastList(pub Vec<CellsToBeBroadcastListItem>);

// WriteReplaceWarningResponse
#[derive(Clone)]
pub struct WriteReplaceWarningResponse {
    pub transaction_id: TransactionId,
    pub cells_broadcast_completed_list: Option<CellsBroadcastCompletedList>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub dedicated_si_delivery_needed_ue_list: Option<DedicatedSiDeliveryNeededUeList>,
}

impl AperCodec for WriteReplaceWarningResponse {
    type Output = WriteReplaceWarningResponse;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cells_broadcast_completed_list: Option<CellsBroadcastCompletedList> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut dedicated_si_delivery_needed_ue_list: Option<DedicatedSiDeliveryNeededUeList> =
            None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                146 => {
                    cells_broadcast_completed_list =
                        Some(CellsBroadcastCompletedList::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                189 => {
                    dedicated_si_delivery_needed_ue_list =
                        Some(DedicatedSiDeliveryNeededUeList::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            cells_broadcast_completed_list,
            criticality_diagnostics,
            dedicated_si_delivery_needed_ue_list,
        })
    }
}

// CellsBroadcastCompletedList
#[derive(Clone)]
pub struct CellsBroadcastCompletedList(pub Vec<CellsBroadcastCompletedListItem>);

// PwsCancelRequest
#[derive(Clone)]
pub struct PwsCancelRequest {
    pub transaction_id: TransactionId,
    pub numberof_broadcast_request: NumberofBroadcastRequest,
    pub broadcast_to_be_cancelled_list: Option<BroadcastToBeCancelledList>,
    pub cancel_all_warning_messages_indicator: Option<CancelAllWarningMessagesIndicator>,
    pub notification_information: Option<NotificationInformation>,
}

impl AperCodec for PwsCancelRequest {
    type Output = PwsCancelRequest;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut numberof_broadcast_request: Option<NumberofBroadcastRequest> = None;
        let mut broadcast_to_be_cancelled_list: Option<BroadcastToBeCancelledList> = None;
        let mut cancel_all_warning_messages_indicator: Option<CancelAllWarningMessagesIndicator> =
            None;
        let mut notification_information: Option<NotificationInformation> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                142 => {
                    numberof_broadcast_request = Some(NumberofBroadcastRequest::decode(data)?);
                }
                148 => {
                    broadcast_to_be_cancelled_list =
                        Some(BroadcastToBeCancelledList::decode(data)?);
                }
                157 => {
                    cancel_all_warning_messages_indicator =
                        Some(CancelAllWarningMessagesIndicator::decode(data)?);
                }
                220 => {
                    notification_information = Some(NotificationInformation::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let numberof_broadcast_request = numberof_broadcast_request.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE numberof_broadcast_request")),
        )?;
        Ok(Self {
            transaction_id,
            numberof_broadcast_request,
            broadcast_to_be_cancelled_list,
            cancel_all_warning_messages_indicator,
            notification_information,
        })
    }
}

// BroadcastToBeCancelledList
#[derive(Clone)]
pub struct BroadcastToBeCancelledList(pub Vec<BroadcastToBeCancelledListItem>);

// PwsCancelResponse
#[derive(Clone)]
pub struct PwsCancelResponse {
    pub transaction_id: TransactionId,
    pub cells_broadcast_cancelled_list: Option<CellsBroadcastCancelledList>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for PwsCancelResponse {
    type Output = PwsCancelResponse;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cells_broadcast_cancelled_list: Option<CellsBroadcastCancelledList> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                150 => {
                    cells_broadcast_cancelled_list =
                        Some(CellsBroadcastCancelledList::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            cells_broadcast_cancelled_list,
            criticality_diagnostics,
        })
    }
}

// CellsBroadcastCancelledList
#[derive(Clone)]
pub struct CellsBroadcastCancelledList(pub Vec<CellsBroadcastCancelledListItem>);

// UeInactivityNotification
#[derive(Clone)]
pub struct UeInactivityNotification {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub drb_activity_list: DrbActivityList,
}

impl AperCodec for UeInactivityNotification {
    type Output = UeInactivityNotification;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut drb_activity_list: Option<DrbActivityList> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                100 => {
                    drb_activity_list = Some(DrbActivityList::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let drb_activity_list = drb_activity_list.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE drb_activity_list"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            drb_activity_list,
        })
    }
}

// DrbActivityList
#[derive(Clone)]
pub struct DrbActivityList(pub Vec<DrbActivityItem>);

// InitialUlrrcMessageTransfer
#[derive(Clone)]
pub struct InitialUlrrcMessageTransfer {
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub nrcgi: Nrcgi,
    pub c_rnti: CRnti,
    pub rrc_container: RrcContainer,
    pub d_uto_currc_container: Option<DUtoCurrcContainer>,
    pub sul_access_indication: Option<SulAccessIndication>,
    pub transaction_id: TransactionId,
    pub ranueid: Option<Ranueid>,
    pub rrc_container_rrc_setup_complete: Option<RrcContainerRrcSetupComplete>,
}

impl AperCodec for InitialUlrrcMessageTransfer {
    type Output = InitialUlrrcMessageTransfer;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut nrcgi: Option<Nrcgi> = None;
        let mut c_rnti: Option<CRnti> = None;
        let mut rrc_container: Option<RrcContainer> = None;
        let mut d_uto_currc_container: Option<DUtoCurrcContainer> = None;
        let mut sul_access_indication: Option<SulAccessIndication> = None;
        let mut transaction_id: Option<TransactionId> = None;
        let mut ranueid: Option<Ranueid> = None;
        let mut rrc_container_rrc_setup_complete: Option<RrcContainerRrcSetupComplete> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                111 => {
                    nrcgi = Some(Nrcgi::decode(data)?);
                }
                95 => {
                    c_rnti = Some(CRnti::decode(data)?);
                }
                50 => {
                    rrc_container = Some(RrcContainer::decode(data)?);
                }
                128 => {
                    d_uto_currc_container = Some(DUtoCurrcContainer::decode(data)?);
                }
                178 => {
                    sul_access_indication = Some(SulAccessIndication::decode(data)?);
                }
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                226 => {
                    ranueid = Some(Ranueid::decode(data)?);
                }
                241 => {
                    rrc_container_rrc_setup_complete =
                        Some(RrcContainerRrcSetupComplete::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let nrcgi = nrcgi.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE nrcgi"
        )))?;
        let c_rnti = c_rnti.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE c_rnti"
        )))?;
        let rrc_container = rrc_container.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE rrc_container"
        )))?;
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            gnb_du_ue_f1ap_id,
            nrcgi,
            c_rnti,
            rrc_container,
            d_uto_currc_container,
            sul_access_indication,
            transaction_id,
            ranueid,
            rrc_container_rrc_setup_complete,
        })
    }
}

// DlrrcMessageTransfer
#[derive(Clone)]
pub struct DlrrcMessageTransfer {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub old_gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId>,
    pub srbid: Srbid,
    pub execute_duplication: Option<ExecuteDuplication>,
    pub rrc_container: RrcContainer,
    pub rat_frequency_priority_information: Option<RatFrequencyPriorityInformation>,
    pub rrc_delivery_status_request: Option<RrcDeliveryStatusRequest>,
    pub ue_context_not_retrievable: Option<UeContextNotRetrievable>,
    pub redirected_rr_cmessage: Option<Vec<u8>>,
    pub plmn_assistance_info_for_net_shar: Option<PlmnIdentity>,
    pub new_gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId>,
    pub additional_rrm_priority_index: Option<AdditionalRrmPriorityIndex>,
}

impl AperCodec for DlrrcMessageTransfer {
    type Output = DlrrcMessageTransfer;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut old_gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut srbid: Option<Srbid> = None;
        let mut execute_duplication: Option<ExecuteDuplication> = None;
        let mut rrc_container: Option<RrcContainer> = None;
        let mut rat_frequency_priority_information: Option<RatFrequencyPriorityInformation> = None;
        let mut rrc_delivery_status_request: Option<RrcDeliveryStatusRequest> = None;
        let mut ue_context_not_retrievable: Option<UeContextNotRetrievable> = None;
        let mut redirected_rr_cmessage: Option<Vec<u8>> = None;
        let mut plmn_assistance_info_for_net_shar: Option<PlmnIdentity> = None;
        let mut new_gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut additional_rrm_priority_index: Option<AdditionalRrmPriorityIndex> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                47 => {
                    old_gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                64 => {
                    srbid = Some(Srbid::decode(data)?);
                }
                109 => {
                    execute_duplication = Some(ExecuteDuplication::decode(data)?);
                }
                50 => {
                    rrc_container = Some(RrcContainer::decode(data)?);
                }
                108 => {
                    rat_frequency_priority_information =
                        Some(RatFrequencyPriorityInformation::decode(data)?);
                }
                184 => {
                    rrc_delivery_status_request = Some(RrcDeliveryStatusRequest::decode(data)?);
                }
                222 => {
                    ue_context_not_retrievable = Some(UeContextNotRetrievable::decode(data)?);
                }
                218 => {
                    redirected_rr_cmessage =
                        Some(aper::decode::decode_octetstring(data, None, None, false)?);
                }
                221 => {
                    plmn_assistance_info_for_net_shar = Some(PlmnIdentity::decode(data)?);
                }
                217 => {
                    new_gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                248 => {
                    additional_rrm_priority_index = Some(AdditionalRrmPriorityIndex::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let srbid = srbid.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE srbid"
        )))?;
        let rrc_container = rrc_container.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE rrc_container"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            old_gnb_du_ue_f1ap_id,
            srbid,
            execute_duplication,
            rrc_container,
            rat_frequency_priority_information,
            rrc_delivery_status_request,
            ue_context_not_retrievable,
            redirected_rr_cmessage,
            plmn_assistance_info_for_net_shar,
            new_gnb_cu_ue_f1ap_id,
            additional_rrm_priority_index,
        })
    }
}

// UlrrcMessageTransfer
#[derive(Clone)]
pub struct UlrrcMessageTransfer {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub srbid: Srbid,
    pub rrc_container: RrcContainer,
    pub selected_plmn_id: Option<PlmnIdentity>,
    pub new_gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId>,
}

impl AperCodec for UlrrcMessageTransfer {
    type Output = UlrrcMessageTransfer;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut srbid: Option<Srbid> = None;
        let mut rrc_container: Option<RrcContainer> = None;
        let mut selected_plmn_id: Option<PlmnIdentity> = None;
        let mut new_gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                64 => {
                    srbid = Some(Srbid::decode(data)?);
                }
                50 => {
                    rrc_container = Some(RrcContainer::decode(data)?);
                }
                224 => {
                    selected_plmn_id = Some(PlmnIdentity::decode(data)?);
                }
                219 => {
                    new_gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let srbid = srbid.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE srbid"
        )))?;
        let rrc_container = rrc_container.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE rrc_container"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            srbid,
            rrc_container,
            selected_plmn_id,
            new_gnb_du_ue_f1ap_id,
        })
    }
}

// PrivateMessage - omitted

// SystemInformationDeliveryCommand
#[derive(Clone)]
pub struct SystemInformationDeliveryCommand {
    pub transaction_id: TransactionId,
    pub nrcgi: Nrcgi,
    pub s_itype_list: SItypeList,
    pub confirmed_ueid: GnbDuUeF1apId,
}

impl AperCodec for SystemInformationDeliveryCommand {
    type Output = SystemInformationDeliveryCommand;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut nrcgi: Option<Nrcgi> = None;
        let mut s_itype_list: Option<SItypeList> = None;
        let mut confirmed_ueid: Option<GnbDuUeF1apId> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                111 => {
                    nrcgi = Some(Nrcgi::decode(data)?);
                }
                116 => {
                    s_itype_list = Some(SItypeList::decode(data)?);
                }
                156 => {
                    confirmed_ueid = Some(GnbDuUeF1apId::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let nrcgi = nrcgi.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE nrcgi"
        )))?;
        let s_itype_list = s_itype_list.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE s_itype_list"
        )))?;
        let confirmed_ueid = confirmed_ueid.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE confirmed_ueid"
        )))?;
        Ok(Self {
            transaction_id,
            nrcgi,
            s_itype_list,
            confirmed_ueid,
        })
    }
}

// Paging
#[derive(Clone)]
pub struct Paging {
    pub ue_identity_index_value: UeIdentityIndexValue,
    pub paging_identity: PagingIdentity,
    pub paging_drx: Option<PagingDrx>,
    pub paging_priority: Option<PagingPriority>,
    pub paging_cell_list: PagingCellList,
    pub paging_origin: Option<PagingOrigin>,
}

impl AperCodec for Paging {
    type Output = Paging;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut ue_identity_index_value: Option<UeIdentityIndexValue> = None;
        let mut paging_identity: Option<PagingIdentity> = None;
        let mut paging_drx: Option<PagingDrx> = None;
        let mut paging_priority: Option<PagingPriority> = None;
        let mut paging_cell_list: Option<PagingCellList> = None;
        let mut paging_origin: Option<PagingOrigin> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                117 => {
                    ue_identity_index_value = Some(UeIdentityIndexValue::decode(data)?);
                }
                127 => {
                    paging_identity = Some(PagingIdentity::decode(data)?);
                }
                114 => {
                    paging_drx = Some(PagingDrx::decode(data)?);
                }
                115 => {
                    paging_priority = Some(PagingPriority::decode(data)?);
                }
                113 => {
                    paging_cell_list = Some(PagingCellList::decode(data)?);
                }
                216 => {
                    paging_origin = Some(PagingOrigin::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let ue_identity_index_value = ue_identity_index_value.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE ue_identity_index_value"),
        ))?;
        let paging_identity = paging_identity.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE paging_identity"
        )))?;
        let paging_cell_list = paging_cell_list.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE paging_cell_list"
        )))?;
        Ok(Self {
            ue_identity_index_value,
            paging_identity,
            paging_drx,
            paging_priority,
            paging_cell_list,
            paging_origin,
        })
    }
}

// PagingCellList
#[derive(Clone)]
pub struct PagingCellList(pub Vec<PagingCellItem>);

// Notify
#[derive(Clone)]
pub struct Notify {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub drb_notify_list: DrbNotifyList,
}

impl AperCodec for Notify {
    type Output = Notify;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut drb_notify_list: Option<DrbNotifyList> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                137 => {
                    drb_notify_list = Some(DrbNotifyList::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let drb_notify_list = drb_notify_list.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE drb_notify_list"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            drb_notify_list,
        })
    }
}

// DrbNotifyList
#[derive(Clone)]
pub struct DrbNotifyList(pub Vec<DrbNotifyItem>);

// NetworkAccessRateReduction
#[derive(Clone)]
pub struct NetworkAccessRateReduction {
    pub transaction_id: TransactionId,
    pub uac_assistance_info: UacAssistanceInfo,
}

impl AperCodec for NetworkAccessRateReduction {
    type Output = NetworkAccessRateReduction;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut uac_assistance_info: Option<UacAssistanceInfo> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                225 => {
                    uac_assistance_info = Some(UacAssistanceInfo::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let uac_assistance_info = uac_assistance_info.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE uac_assistance_info"
        )))?;
        Ok(Self {
            transaction_id,
            uac_assistance_info,
        })
    }
}

// PwsRestartIndication
#[derive(Clone)]
pub struct PwsRestartIndication {
    pub transaction_id: TransactionId,
    pub nr_cgi_list_for_restart_list: NrCgiListForRestartList,
}

impl AperCodec for PwsRestartIndication {
    type Output = PwsRestartIndication;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut nr_cgi_list_for_restart_list: Option<NrCgiListForRestartList> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                152 => {
                    nr_cgi_list_for_restart_list = Some(NrCgiListForRestartList::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let nr_cgi_list_for_restart_list = nr_cgi_list_for_restart_list.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE nr_cgi_list_for_restart_list")),
        )?;
        Ok(Self {
            transaction_id,
            nr_cgi_list_for_restart_list,
        })
    }
}

// NrCgiListForRestartList
#[derive(Clone)]
pub struct NrCgiListForRestartList(pub Vec<NrCgiListForRestartListItem>);

// PwsFailureIndication
#[derive(Clone)]
pub struct PwsFailureIndication {
    pub transaction_id: TransactionId,
    pub pws_failed_nr_cgi_list: Option<PwsFailedNrCgiList>,
}

impl AperCodec for PwsFailureIndication {
    type Output = PwsFailureIndication;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut pws_failed_nr_cgi_list: Option<PwsFailedNrCgiList> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                154 => {
                    pws_failed_nr_cgi_list = Some(PwsFailedNrCgiList::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            pws_failed_nr_cgi_list,
        })
    }
}

// PwsFailedNrCgiList
#[derive(Clone)]
pub struct PwsFailedNrCgiList(pub Vec<PwsFailedNrCgiListItem>);

// GnbDuStatusIndication
#[derive(Clone)]
pub struct GnbDuStatusIndication {
    pub transaction_id: TransactionId,
    pub gnb_du_overload_information: GnbDuOverloadInformation,
}

impl AperCodec for GnbDuStatusIndication {
    type Output = GnbDuStatusIndication;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_du_overload_information: Option<GnbDuOverloadInformation> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                172 => {
                    gnb_du_overload_information = Some(GnbDuOverloadInformation::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_du_overload_information = gnb_du_overload_information.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE gnb_du_overload_information")),
        )?;
        Ok(Self {
            transaction_id,
            gnb_du_overload_information,
        })
    }
}

// RrcDeliveryReport
#[derive(Clone)]
pub struct RrcDeliveryReport {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub rrc_delivery_status: RrcDeliveryStatus,
    pub srbid: Srbid,
}

impl AperCodec for RrcDeliveryReport {
    type Output = RrcDeliveryReport;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut rrc_delivery_status: Option<RrcDeliveryStatus> = None;
        let mut srbid: Option<Srbid> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                185 => {
                    rrc_delivery_status = Some(RrcDeliveryStatus::decode(data)?);
                }
                64 => {
                    srbid = Some(Srbid::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let rrc_delivery_status = rrc_delivery_status.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE rrc_delivery_status"
        )))?;
        let srbid = srbid.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE srbid"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            rrc_delivery_status,
            srbid,
        })
    }
}

// F1RemovalRequest
#[derive(Clone)]
pub struct F1RemovalRequest {
    pub transaction_id: TransactionId,
}

impl AperCodec for F1RemovalRequest {
    type Output = F1RemovalRequest;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self { transaction_id })
    }
}

// F1RemovalResponse
#[derive(Clone)]
pub struct F1RemovalResponse {
    pub transaction_id: TransactionId,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for F1RemovalResponse {
    type Output = F1RemovalResponse;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            criticality_diagnostics,
        })
    }
}

// F1RemovalFailure
#[derive(Clone)]
pub struct F1RemovalFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for F1RemovalFailure {
    type Output = F1RemovalFailure;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            criticality_diagnostics,
        })
    }
}

// TraceStart
#[derive(Clone)]
pub struct TraceStart {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub trace_activation: TraceActivation,
}

impl AperCodec for TraceStart {
    type Output = TraceStart;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut trace_activation: Option<TraceActivation> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                242 => {
                    trace_activation = Some(TraceActivation::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let trace_activation = trace_activation.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE trace_activation"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            trace_activation,
        })
    }
}

// DeactivateTrace
#[derive(Clone)]
pub struct DeactivateTrace {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub trace_id: TraceId,
}

impl AperCodec for DeactivateTrace {
    type Output = DeactivateTrace;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut trace_id: Option<TraceId> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                243 => {
                    trace_id = Some(TraceId::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let trace_id = trace_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE trace_id"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            trace_id,
        })
    }
}

// CellTrafficTrace
#[derive(Clone)]
pub struct CellTrafficTrace {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub trace_id: TraceId,
    pub trace_collection_entity_ip_address: TransportLayerAddress,
    pub privacy_indicator: Option<PrivacyIndicator>,
    pub trace_collection_entity_uri: Option<UriAddress>,
}

impl AperCodec for CellTrafficTrace {
    type Output = CellTrafficTrace;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut trace_id: Option<TraceId> = None;
        let mut trace_collection_entity_ip_address: Option<TransportLayerAddress> = None;
        let mut privacy_indicator: Option<PrivacyIndicator> = None;
        let mut trace_collection_entity_uri: Option<UriAddress> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                243 => {
                    trace_id = Some(TraceId::decode(data)?);
                }
                378 => {
                    trace_collection_entity_ip_address = Some(TransportLayerAddress::decode(data)?);
                }
                379 => {
                    privacy_indicator = Some(PrivacyIndicator::decode(data)?);
                }
                380 => {
                    trace_collection_entity_uri = Some(UriAddress::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let trace_id = trace_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE trace_id"
        )))?;
        let trace_collection_entity_ip_address =
            trace_collection_entity_ip_address.ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE trace_collection_entity_ip_address"
            )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            trace_id,
            trace_collection_entity_ip_address,
            privacy_indicator,
            trace_collection_entity_uri,
        })
    }
}

// DucuRadioInformationTransfer
#[derive(Clone)]
pub struct DucuRadioInformationTransfer {
    pub transaction_id: TransactionId,
    pub ducu_radio_information_type: DucuRadioInformationType,
}

impl AperCodec for DucuRadioInformationTransfer {
    type Output = DucuRadioInformationTransfer;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut ducu_radio_information_type: Option<DucuRadioInformationType> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                249 => {
                    ducu_radio_information_type = Some(DucuRadioInformationType::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let ducu_radio_information_type = ducu_radio_information_type.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE ducu_radio_information_type")),
        )?;
        Ok(Self {
            transaction_id,
            ducu_radio_information_type,
        })
    }
}

// CuduRadioInformationTransfer
#[derive(Clone)]
pub struct CuduRadioInformationTransfer {
    pub transaction_id: TransactionId,
    pub cudu_radio_information_type: CuduRadioInformationType,
}

impl AperCodec for CuduRadioInformationTransfer {
    type Output = CuduRadioInformationTransfer;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cudu_radio_information_type: Option<CuduRadioInformationType> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                250 => {
                    cudu_radio_information_type = Some(CuduRadioInformationType::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cudu_radio_information_type = cudu_radio_information_type.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE cudu_radio_information_type")),
        )?;
        Ok(Self {
            transaction_id,
            cudu_radio_information_type,
        })
    }
}

// BapMappingConfiguration
#[derive(Clone)]
pub struct BapMappingConfiguration {
    pub transaction_id: TransactionId,
    pub bh_routing_information_added_list: Option<BhRoutingInformationAddedList>,
    pub bh_routing_information_removed_list: Option<BhRoutingInformationRemovedList>,
    pub traffic_mapping_information: Option<TrafficMappingInfo>,
}

impl AperCodec for BapMappingConfiguration {
    type Output = BapMappingConfiguration;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut bh_routing_information_added_list: Option<BhRoutingInformationAddedList> = None;
        let mut bh_routing_information_removed_list: Option<BhRoutingInformationRemovedList> = None;
        let mut traffic_mapping_information: Option<TrafficMappingInfo> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                283 => {
                    bh_routing_information_added_list =
                        Some(BhRoutingInformationAddedList::decode(data)?);
                }
                285 => {
                    bh_routing_information_removed_list =
                        Some(BhRoutingInformationRemovedList::decode(data)?);
                }
                299 => {
                    traffic_mapping_information = Some(TrafficMappingInfo::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            bh_routing_information_added_list,
            bh_routing_information_removed_list,
            traffic_mapping_information,
        })
    }
}

// BhRoutingInformationAddedList
#[derive(Clone)]
pub struct BhRoutingInformationAddedList(pub Vec<BhRoutingInformationAddedListItem>);

// BhRoutingInformationRemovedList
#[derive(Clone)]
pub struct BhRoutingInformationRemovedList(pub Vec<BhRoutingInformationRemovedListItem>);

// BapMappingConfigurationAcknowledge
#[derive(Clone)]
pub struct BapMappingConfigurationAcknowledge {
    pub transaction_id: TransactionId,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for BapMappingConfigurationAcknowledge {
    type Output = BapMappingConfigurationAcknowledge;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            criticality_diagnostics,
        })
    }
}

// BapMappingConfigurationFailure
#[derive(Clone)]
pub struct BapMappingConfigurationFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for BapMappingConfigurationFailure {
    type Output = BapMappingConfigurationFailure;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                77 => {
                    time_to_wait = Some(TimeToWait::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
}

// GnbDuResourceConfiguration
#[derive(Clone)]
pub struct GnbDuResourceConfiguration {
    pub transaction_id: TransactionId,
    pub activated_cells_to_be_updated_list: Option<ActivatedCellsToBeUpdatedList>,
    pub child_nodes_list: Option<ChildNodesList>,
}

impl AperCodec for GnbDuResourceConfiguration {
    type Output = GnbDuResourceConfiguration;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut activated_cells_to_be_updated_list: Option<ActivatedCellsToBeUpdatedList> = None;
        let mut child_nodes_list: Option<ChildNodesList> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                288 => {
                    activated_cells_to_be_updated_list =
                        Some(ActivatedCellsToBeUpdatedList::decode(data)?);
                }
                289 => {
                    child_nodes_list = Some(ChildNodesList::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            activated_cells_to_be_updated_list,
            child_nodes_list,
        })
    }
}

// GnbDuResourceConfigurationAcknowledge
#[derive(Clone)]
pub struct GnbDuResourceConfigurationAcknowledge {
    pub transaction_id: TransactionId,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for GnbDuResourceConfigurationAcknowledge {
    type Output = GnbDuResourceConfigurationAcknowledge;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            criticality_diagnostics,
        })
    }
}

// GnbDuResourceConfigurationFailure
#[derive(Clone)]
pub struct GnbDuResourceConfigurationFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for GnbDuResourceConfigurationFailure {
    type Output = GnbDuResourceConfigurationFailure;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                77 => {
                    time_to_wait = Some(TimeToWait::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
}

// IabtnlAddressRequest
#[derive(Clone)]
pub struct IabtnlAddressRequest {
    pub transaction_id: TransactionId,
    pub ia_bv_4_addresses_requested: Option<IaBv4AddressesRequested>,
    pub iabi_pv_6_request_type: Option<IabiPv6RequestType>,
    pub iab_tnl_addresses_to_remove_list: Option<IabTnlAddressesToRemoveList>,
}

impl AperCodec for IabtnlAddressRequest {
    type Output = IabtnlAddressRequest;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut ia_bv_4_addresses_requested: Option<IaBv4AddressesRequested> = None;
        let mut iabi_pv_6_request_type: Option<IabiPv6RequestType> = None;
        let mut iab_tnl_addresses_to_remove_list: Option<IabTnlAddressesToRemoveList> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                297 => {
                    ia_bv_4_addresses_requested = Some(IaBv4AddressesRequested::decode(data)?);
                }
                296 => {
                    iabi_pv_6_request_type = Some(IabiPv6RequestType::decode(data)?);
                }
                292 => {
                    iab_tnl_addresses_to_remove_list =
                        Some(IabTnlAddressesToRemoveList::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            ia_bv_4_addresses_requested,
            iabi_pv_6_request_type,
            iab_tnl_addresses_to_remove_list,
        })
    }
}

// IabTnlAddressesToRemoveList
#[derive(Clone)]
pub struct IabTnlAddressesToRemoveList(pub Vec<IabTnlAddressesToRemoveItem>);

// IabtnlAddressResponse
#[derive(Clone)]
pub struct IabtnlAddressResponse {
    pub transaction_id: TransactionId,
    pub iab_allocated_tnl_address_list: IabAllocatedTnlAddressList,
}

impl AperCodec for IabtnlAddressResponse {
    type Output = IabtnlAddressResponse;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut iab_allocated_tnl_address_list: Option<IabAllocatedTnlAddressList> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                294 => {
                    iab_allocated_tnl_address_list =
                        Some(IabAllocatedTnlAddressList::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let iab_allocated_tnl_address_list =
            iab_allocated_tnl_address_list.ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE iab_allocated_tnl_address_list"
            )))?;
        Ok(Self {
            transaction_id,
            iab_allocated_tnl_address_list,
        })
    }
}

// IabAllocatedTnlAddressList
#[derive(Clone)]
pub struct IabAllocatedTnlAddressList(pub Vec<IabAllocatedTnlAddressListItem>);

// IabtnlAddressFailure
#[derive(Clone)]
pub struct IabtnlAddressFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for IabtnlAddressFailure {
    type Output = IabtnlAddressFailure;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                77 => {
                    time_to_wait = Some(TimeToWait::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
}

// IabupConfigurationUpdateRequest
#[derive(Clone)]
pub struct IabupConfigurationUpdateRequest {
    pub transaction_id: TransactionId,
    pub ul_up_tnl_information_to_update_list: Option<UlUpTnlInformationToUpdateList>,
    pub ul_up_tnl_address_to_update_list: Option<UlUpTnlAddressToUpdateList>,
}

impl AperCodec for IabupConfigurationUpdateRequest {
    type Output = IabupConfigurationUpdateRequest;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut ul_up_tnl_information_to_update_list: Option<UlUpTnlInformationToUpdateList> = None;
        let mut ul_up_tnl_address_to_update_list: Option<UlUpTnlAddressToUpdateList> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                300 => {
                    ul_up_tnl_information_to_update_list =
                        Some(UlUpTnlInformationToUpdateList::decode(data)?);
                }
                302 => {
                    ul_up_tnl_address_to_update_list =
                        Some(UlUpTnlAddressToUpdateList::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            ul_up_tnl_information_to_update_list,
            ul_up_tnl_address_to_update_list,
        })
    }
}

// UlUpTnlInformationToUpdateList
#[derive(Clone)]
pub struct UlUpTnlInformationToUpdateList(pub Vec<UlUpTnlInformationToUpdateListItem>);

// UlUpTnlAddressToUpdateList
#[derive(Clone)]
pub struct UlUpTnlAddressToUpdateList(pub Vec<UlUpTnlAddressToUpdateListItem>);

// IabupConfigurationUpdateResponse
#[derive(Clone)]
pub struct IabupConfigurationUpdateResponse {
    pub transaction_id: TransactionId,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub dl_up_tnl_address_to_update_list: Option<DlUpTnlAddressToUpdateList>,
}

impl AperCodec for IabupConfigurationUpdateResponse {
    type Output = IabupConfigurationUpdateResponse;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut dl_up_tnl_address_to_update_list: Option<DlUpTnlAddressToUpdateList> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                304 => {
                    dl_up_tnl_address_to_update_list =
                        Some(DlUpTnlAddressToUpdateList::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            criticality_diagnostics,
            dl_up_tnl_address_to_update_list,
        })
    }
}

// DlUpTnlAddressToUpdateList
#[derive(Clone)]
pub struct DlUpTnlAddressToUpdateList(pub Vec<DlUpTnlAddressToUpdateListItem>);

// IabupConfigurationUpdateFailure
#[derive(Clone)]
pub struct IabupConfigurationUpdateFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for IabupConfigurationUpdateFailure {
    type Output = IabupConfigurationUpdateFailure;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                77 => {
                    time_to_wait = Some(TimeToWait::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
}

// ResourceStatusRequest
#[derive(Clone)]
pub struct ResourceStatusRequest {
    pub transaction_id: TransactionId,
    pub gnb_cu_measurement_id: GnbCuMeasurementId,
    pub gnb_du_measurement_id: Option<GnbDuMeasurementId>,
    pub registration_request: RegistrationRequest,
    pub report_characteristics: Option<ReportCharacteristics>,
    pub cell_to_report_list: Option<CellToReportList>,
    pub reporting_periodicity: Option<ReportingPeriodicity>,
}

impl AperCodec for ResourceStatusRequest {
    type Output = ResourceStatusRequest;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_measurement_id: Option<GnbCuMeasurementId> = None;
        let mut gnb_du_measurement_id: Option<GnbDuMeasurementId> = None;
        let mut registration_request: Option<RegistrationRequest> = None;
        let mut report_characteristics: Option<ReportCharacteristics> = None;
        let mut cell_to_report_list: Option<CellToReportList> = None;
        let mut reporting_periodicity: Option<ReportingPeriodicity> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                345 => {
                    gnb_cu_measurement_id = Some(GnbCuMeasurementId::decode(data)?);
                }
                346 => {
                    gnb_du_measurement_id = Some(GnbDuMeasurementId::decode(data)?);
                }
                347 => {
                    registration_request = Some(RegistrationRequest::decode(data)?);
                }
                348 => {
                    report_characteristics = Some(ReportCharacteristics::decode(data)?);
                }
                349 => {
                    cell_to_report_list = Some(CellToReportList::decode(data)?);
                }
                352 => {
                    reporting_periodicity = Some(ReportingPeriodicity::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_cu_measurement_id = gnb_cu_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_measurement_id"),
        ))?;
        let registration_request = registration_request.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE registration_request"),
        ))?;
        Ok(Self {
            transaction_id,
            gnb_cu_measurement_id,
            gnb_du_measurement_id,
            registration_request,
            report_characteristics,
            cell_to_report_list,
            reporting_periodicity,
        })
    }
}

// ResourceStatusResponse
#[derive(Clone)]
pub struct ResourceStatusResponse {
    pub transaction_id: TransactionId,
    pub gnb_cu_measurement_id: GnbCuMeasurementId,
    pub gnb_du_measurement_id: GnbDuMeasurementId,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for ResourceStatusResponse {
    type Output = ResourceStatusResponse;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_measurement_id: Option<GnbCuMeasurementId> = None;
        let mut gnb_du_measurement_id: Option<GnbDuMeasurementId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                345 => {
                    gnb_cu_measurement_id = Some(GnbCuMeasurementId::decode(data)?);
                }
                346 => {
                    gnb_du_measurement_id = Some(GnbDuMeasurementId::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_cu_measurement_id = gnb_cu_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_measurement_id"),
        ))?;
        let gnb_du_measurement_id = gnb_du_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_du_measurement_id"),
        ))?;
        Ok(Self {
            transaction_id,
            gnb_cu_measurement_id,
            gnb_du_measurement_id,
            criticality_diagnostics,
        })
    }
}

// ResourceStatusFailure
#[derive(Clone)]
pub struct ResourceStatusFailure {
    pub transaction_id: TransactionId,
    pub gnb_cu_measurement_id: GnbCuMeasurementId,
    pub gnb_du_measurement_id: GnbDuMeasurementId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for ResourceStatusFailure {
    type Output = ResourceStatusFailure;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_measurement_id: Option<GnbCuMeasurementId> = None;
        let mut gnb_du_measurement_id: Option<GnbDuMeasurementId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                345 => {
                    gnb_cu_measurement_id = Some(GnbCuMeasurementId::decode(data)?);
                }
                346 => {
                    gnb_du_measurement_id = Some(GnbDuMeasurementId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_cu_measurement_id = gnb_cu_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_measurement_id"),
        ))?;
        let gnb_du_measurement_id = gnb_du_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_du_measurement_id"),
        ))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            gnb_cu_measurement_id,
            gnb_du_measurement_id,
            cause,
            criticality_diagnostics,
        })
    }
}

// ResourceStatusUpdate
#[derive(Clone)]
pub struct ResourceStatusUpdate {
    pub transaction_id: TransactionId,
    pub gnb_cu_measurement_id: GnbCuMeasurementId,
    pub gnb_du_measurement_id: GnbDuMeasurementId,
    pub hardware_load_indicator: Option<HardwareLoadIndicator>,
    pub tnl_capacity_indicator: Option<TnlCapacityIndicator>,
    pub cell_measurement_result_list: Option<CellMeasurementResultList>,
}

impl AperCodec for ResourceStatusUpdate {
    type Output = ResourceStatusUpdate;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_measurement_id: Option<GnbCuMeasurementId> = None;
        let mut gnb_du_measurement_id: Option<GnbDuMeasurementId> = None;
        let mut hardware_load_indicator: Option<HardwareLoadIndicator> = None;
        let mut tnl_capacity_indicator: Option<TnlCapacityIndicator> = None;
        let mut cell_measurement_result_list: Option<CellMeasurementResultList> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                345 => {
                    gnb_cu_measurement_id = Some(GnbCuMeasurementId::decode(data)?);
                }
                346 => {
                    gnb_du_measurement_id = Some(GnbDuMeasurementId::decode(data)?);
                }
                351 => {
                    hardware_load_indicator = Some(HardwareLoadIndicator::decode(data)?);
                }
                353 => {
                    tnl_capacity_indicator = Some(TnlCapacityIndicator::decode(data)?);
                }
                350 => {
                    cell_measurement_result_list = Some(CellMeasurementResultList::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_cu_measurement_id = gnb_cu_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_measurement_id"),
        ))?;
        let gnb_du_measurement_id = gnb_du_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_du_measurement_id"),
        ))?;
        Ok(Self {
            transaction_id,
            gnb_cu_measurement_id,
            gnb_du_measurement_id,
            hardware_load_indicator,
            tnl_capacity_indicator,
            cell_measurement_result_list,
        })
    }
}

// AccessAndMobilityIndication
#[derive(Clone)]
pub struct AccessAndMobilityIndication {
    pub transaction_id: TransactionId,
    pub rach_report_information_list: Option<RachReportInformationList>,
    pub rlf_report_information_list: Option<RlfReportInformationList>,
}

impl AperCodec for AccessAndMobilityIndication {
    type Output = AccessAndMobilityIndication;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut rach_report_information_list: Option<RachReportInformationList> = None;
        let mut rlf_report_information_list: Option<RlfReportInformationList> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                359 => {
                    rach_report_information_list = Some(RachReportInformationList::decode(data)?);
                }
                360 => {
                    rlf_report_information_list = Some(RlfReportInformationList::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            rach_report_information_list,
            rlf_report_information_list,
        })
    }
}

// ReferenceTimeInformationReportingControl
#[derive(Clone)]
pub struct ReferenceTimeInformationReportingControl {
    pub transaction_id: TransactionId,
    pub reporting_request_type: ReportingRequestType,
}

impl AperCodec for ReferenceTimeInformationReportingControl {
    type Output = ReferenceTimeInformationReportingControl;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut reporting_request_type: Option<ReportingRequestType> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                365 => {
                    reporting_request_type = Some(ReportingRequestType::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let reporting_request_type = reporting_request_type.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE reporting_request_type"),
        ))?;
        Ok(Self {
            transaction_id,
            reporting_request_type,
        })
    }
}

// ReferenceTimeInformationReport
#[derive(Clone)]
pub struct ReferenceTimeInformationReport {
    pub transaction_id: TransactionId,
    pub time_reference_information: TimeReferenceInformation,
}

impl AperCodec for ReferenceTimeInformationReport {
    type Output = ReferenceTimeInformationReport;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut time_reference_information: Option<TimeReferenceInformation> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                366 => {
                    time_reference_information = Some(TimeReferenceInformation::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let time_reference_information = time_reference_information.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE time_reference_information")),
        )?;
        Ok(Self {
            transaction_id,
            time_reference_information,
        })
    }
}

// AccessSuccess
#[derive(Clone)]
pub struct AccessSuccess {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub nrcgi: Nrcgi,
}

impl AperCodec for AccessSuccess {
    type Output = AccessSuccess;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut nrcgi: Option<Nrcgi> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                111 => {
                    nrcgi = Some(Nrcgi::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let nrcgi = nrcgi.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE nrcgi"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            nrcgi,
        })
    }
}

// PositioningAssistanceInformationControl
#[derive(Clone)]
pub struct PositioningAssistanceInformationControl {
    pub transaction_id: TransactionId,
    pub pos_assistance_information: Option<PosAssistanceInformation>,
    pub pos_broadcast: Option<PosBroadcast>,
    pub positioning_broadcast_cells: Option<PositioningBroadcastCells>,
    pub routing_id: Option<RoutingId>,
}

impl AperCodec for PositioningAssistanceInformationControl {
    type Output = PositioningAssistanceInformationControl;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut pos_assistance_information: Option<PosAssistanceInformation> = None;
        let mut pos_broadcast: Option<PosBroadcast> = None;
        let mut positioning_broadcast_cells: Option<PositioningBroadcastCells> = None;
        let mut routing_id: Option<RoutingId> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                392 => {
                    pos_assistance_information = Some(PosAssistanceInformation::decode(data)?);
                }
                393 => {
                    pos_broadcast = Some(PosBroadcast::decode(data)?);
                }
                406 => {
                    positioning_broadcast_cells = Some(PositioningBroadcastCells::decode(data)?);
                }
                394 => {
                    routing_id = Some(RoutingId::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            pos_assistance_information,
            pos_broadcast,
            positioning_broadcast_cells,
            routing_id,
        })
    }
}

// PositioningAssistanceInformationFeedback
#[derive(Clone)]
pub struct PositioningAssistanceInformationFeedback {
    pub transaction_id: TransactionId,
    pub pos_assistance_information_failure_list: Option<PosAssistanceInformationFailureList>,
    pub positioning_broadcast_cells: Option<PositioningBroadcastCells>,
    pub routing_id: Option<RoutingId>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for PositioningAssistanceInformationFeedback {
    type Output = PositioningAssistanceInformationFeedback;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut pos_assistance_information_failure_list: Option<
            PosAssistanceInformationFailureList,
        > = None;
        let mut positioning_broadcast_cells: Option<PositioningBroadcastCells> = None;
        let mut routing_id: Option<RoutingId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                395 => {
                    pos_assistance_information_failure_list =
                        Some(PosAssistanceInformationFailureList::decode(data)?);
                }
                406 => {
                    positioning_broadcast_cells = Some(PositioningBroadcastCells::decode(data)?);
                }
                394 => {
                    routing_id = Some(RoutingId::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            pos_assistance_information_failure_list,
            positioning_broadcast_cells,
            routing_id,
            criticality_diagnostics,
        })
    }
}

// PositioningMeasurementRequest
#[derive(Clone)]
pub struct PositioningMeasurementRequest {
    pub transaction_id: TransactionId,
    pub lmf_measurement_id: LmfMeasurementId,
    pub ran_measurement_id: RanMeasurementId,
    pub trp_measurement_request_list: TrpMeasurementRequestList,
    pub pos_report_characteristics: PosReportCharacteristics,
    pub pos_measurement_periodicity: Option<MeasurementPeriodicity>,
    pub pos_measurement_quantities: PosMeasurementQuantities,
    pub sfn_initialisation_time: Option<RelativeTime1900>,
    pub srs_configuration: Option<SrsConfiguration>,
    pub measurement_beam_info_request: Option<MeasurementBeamInfoRequest>,
    pub system_frame_number: Option<SystemFrameNumber>,
    pub slot_number: Option<SlotNumber>,
}

impl AperCodec for PositioningMeasurementRequest {
    type Output = PositioningMeasurementRequest;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut lmf_measurement_id: Option<LmfMeasurementId> = None;
        let mut ran_measurement_id: Option<RanMeasurementId> = None;
        let mut trp_measurement_request_list: Option<TrpMeasurementRequestList> = None;
        let mut pos_report_characteristics: Option<PosReportCharacteristics> = None;
        let mut pos_measurement_periodicity: Option<MeasurementPeriodicity> = None;
        let mut pos_measurement_quantities: Option<PosMeasurementQuantities> = None;
        let mut sfn_initialisation_time: Option<RelativeTime1900> = None;
        let mut srs_configuration: Option<SrsConfiguration> = None;
        let mut measurement_beam_info_request: Option<MeasurementBeamInfoRequest> = None;
        let mut system_frame_number: Option<SystemFrameNumber> = None;
        let mut slot_number: Option<SlotNumber> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                402 => {
                    lmf_measurement_id = Some(LmfMeasurementId::decode(data)?);
                }
                411 => {
                    ran_measurement_id = Some(RanMeasurementId::decode(data)?);
                }
                422 => {
                    trp_measurement_request_list = Some(TrpMeasurementRequestList::decode(data)?);
                }
                408 => {
                    pos_report_characteristics = Some(PosReportCharacteristics::decode(data)?);
                }
                409 => {
                    pos_measurement_periodicity = Some(MeasurementPeriodicity::decode(data)?);
                }
                396 => {
                    pos_measurement_quantities = Some(PosMeasurementQuantities::decode(data)?);
                }
                419 => {
                    sfn_initialisation_time = Some(RelativeTime1900::decode(data)?);
                }
                407 => {
                    srs_configuration = Some(SrsConfiguration::decode(data)?);
                }
                423 => {
                    measurement_beam_info_request = Some(MeasurementBeamInfoRequest::decode(data)?);
                }
                420 => {
                    system_frame_number = Some(SystemFrameNumber::decode(data)?);
                }
                421 => {
                    slot_number = Some(SlotNumber::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let lmf_measurement_id = lmf_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE lmf_measurement_id"
        )))?;
        let ran_measurement_id = ran_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE ran_measurement_id"
        )))?;
        let trp_measurement_request_list = trp_measurement_request_list.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE trp_measurement_request_list")),
        )?;
        let pos_report_characteristics = pos_report_characteristics.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE pos_report_characteristics")),
        )?;
        let pos_measurement_quantities = pos_measurement_quantities.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE pos_measurement_quantities")),
        )?;
        Ok(Self {
            transaction_id,
            lmf_measurement_id,
            ran_measurement_id,
            trp_measurement_request_list,
            pos_report_characteristics,
            pos_measurement_periodicity,
            pos_measurement_quantities,
            sfn_initialisation_time,
            srs_configuration,
            measurement_beam_info_request,
            system_frame_number,
            slot_number,
        })
    }
}

// PositioningMeasurementResponse
#[derive(Clone)]
pub struct PositioningMeasurementResponse {
    pub transaction_id: TransactionId,
    pub lmf_measurement_id: LmfMeasurementId,
    pub ran_measurement_id: RanMeasurementId,
    pub pos_measurement_result_list: Option<PosMeasurementResultList>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for PositioningMeasurementResponse {
    type Output = PositioningMeasurementResponse;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut lmf_measurement_id: Option<LmfMeasurementId> = None;
        let mut ran_measurement_id: Option<RanMeasurementId> = None;
        let mut pos_measurement_result_list: Option<PosMeasurementResultList> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                402 => {
                    lmf_measurement_id = Some(LmfMeasurementId::decode(data)?);
                }
                411 => {
                    ran_measurement_id = Some(RanMeasurementId::decode(data)?);
                }
                397 => {
                    pos_measurement_result_list = Some(PosMeasurementResultList::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let lmf_measurement_id = lmf_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE lmf_measurement_id"
        )))?;
        let ran_measurement_id = ran_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE ran_measurement_id"
        )))?;
        Ok(Self {
            transaction_id,
            lmf_measurement_id,
            ran_measurement_id,
            pos_measurement_result_list,
            criticality_diagnostics,
        })
    }
}

// PositioningMeasurementFailure
#[derive(Clone)]
pub struct PositioningMeasurementFailure {
    pub transaction_id: TransactionId,
    pub lmf_measurement_id: LmfMeasurementId,
    pub ran_measurement_id: RanMeasurementId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for PositioningMeasurementFailure {
    type Output = PositioningMeasurementFailure;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut lmf_measurement_id: Option<LmfMeasurementId> = None;
        let mut ran_measurement_id: Option<RanMeasurementId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                402 => {
                    lmf_measurement_id = Some(LmfMeasurementId::decode(data)?);
                }
                411 => {
                    ran_measurement_id = Some(RanMeasurementId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let lmf_measurement_id = lmf_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE lmf_measurement_id"
        )))?;
        let ran_measurement_id = ran_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE ran_measurement_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            lmf_measurement_id,
            ran_measurement_id,
            cause,
            criticality_diagnostics,
        })
    }
}

// PositioningMeasurementReport
#[derive(Clone)]
pub struct PositioningMeasurementReport {
    pub transaction_id: TransactionId,
    pub lmf_measurement_id: LmfMeasurementId,
    pub ran_measurement_id: RanMeasurementId,
    pub pos_measurement_result_list: PosMeasurementResultList,
}

impl AperCodec for PositioningMeasurementReport {
    type Output = PositioningMeasurementReport;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut lmf_measurement_id: Option<LmfMeasurementId> = None;
        let mut ran_measurement_id: Option<RanMeasurementId> = None;
        let mut pos_measurement_result_list: Option<PosMeasurementResultList> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                402 => {
                    lmf_measurement_id = Some(LmfMeasurementId::decode(data)?);
                }
                411 => {
                    ran_measurement_id = Some(RanMeasurementId::decode(data)?);
                }
                397 => {
                    pos_measurement_result_list = Some(PosMeasurementResultList::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let lmf_measurement_id = lmf_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE lmf_measurement_id"
        )))?;
        let ran_measurement_id = ran_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE ran_measurement_id"
        )))?;
        let pos_measurement_result_list = pos_measurement_result_list.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE pos_measurement_result_list")),
        )?;
        Ok(Self {
            transaction_id,
            lmf_measurement_id,
            ran_measurement_id,
            pos_measurement_result_list,
        })
    }
}

// PositioningMeasurementAbort
#[derive(Clone)]
pub struct PositioningMeasurementAbort {
    pub transaction_id: TransactionId,
    pub lmf_measurement_id: LmfMeasurementId,
    pub ran_measurement_id: RanMeasurementId,
}

impl AperCodec for PositioningMeasurementAbort {
    type Output = PositioningMeasurementAbort;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut lmf_measurement_id: Option<LmfMeasurementId> = None;
        let mut ran_measurement_id: Option<RanMeasurementId> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                402 => {
                    lmf_measurement_id = Some(LmfMeasurementId::decode(data)?);
                }
                411 => {
                    ran_measurement_id = Some(RanMeasurementId::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let lmf_measurement_id = lmf_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE lmf_measurement_id"
        )))?;
        let ran_measurement_id = ran_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE ran_measurement_id"
        )))?;
        Ok(Self {
            transaction_id,
            lmf_measurement_id,
            ran_measurement_id,
        })
    }
}

// PositioningMeasurementFailureIndication
#[derive(Clone)]
pub struct PositioningMeasurementFailureIndication {
    pub transaction_id: TransactionId,
    pub lmf_measurement_id: LmfMeasurementId,
    pub ran_measurement_id: RanMeasurementId,
    pub cause: Cause,
}

impl AperCodec for PositioningMeasurementFailureIndication {
    type Output = PositioningMeasurementFailureIndication;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut lmf_measurement_id: Option<LmfMeasurementId> = None;
        let mut ran_measurement_id: Option<RanMeasurementId> = None;
        let mut cause: Option<Cause> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                402 => {
                    lmf_measurement_id = Some(LmfMeasurementId::decode(data)?);
                }
                411 => {
                    ran_measurement_id = Some(RanMeasurementId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let lmf_measurement_id = lmf_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE lmf_measurement_id"
        )))?;
        let ran_measurement_id = ran_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE ran_measurement_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            lmf_measurement_id,
            ran_measurement_id,
            cause,
        })
    }
}

// PositioningMeasurementUpdate
#[derive(Clone)]
pub struct PositioningMeasurementUpdate {
    pub transaction_id: TransactionId,
    pub lmf_measurement_id: LmfMeasurementId,
    pub ran_measurement_id: RanMeasurementId,
    pub srs_configuration: Option<SrsConfiguration>,
}

impl AperCodec for PositioningMeasurementUpdate {
    type Output = PositioningMeasurementUpdate;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut lmf_measurement_id: Option<LmfMeasurementId> = None;
        let mut ran_measurement_id: Option<RanMeasurementId> = None;
        let mut srs_configuration: Option<SrsConfiguration> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                402 => {
                    lmf_measurement_id = Some(LmfMeasurementId::decode(data)?);
                }
                411 => {
                    ran_measurement_id = Some(RanMeasurementId::decode(data)?);
                }
                407 => {
                    srs_configuration = Some(SrsConfiguration::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let lmf_measurement_id = lmf_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE lmf_measurement_id"
        )))?;
        let ran_measurement_id = ran_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE ran_measurement_id"
        )))?;
        Ok(Self {
            transaction_id,
            lmf_measurement_id,
            ran_measurement_id,
            srs_configuration,
        })
    }
}

// TrpInformationRequest
#[derive(Clone)]
pub struct TrpInformationRequest {
    pub transaction_id: TransactionId,
    pub trp_list: Option<TrpList>,
    pub trp_information_type_list_trp_req: TrpInformationTypeListTrpReq,
}

impl AperCodec for TrpInformationRequest {
    type Output = TrpInformationRequest;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut trp_list: Option<TrpList> = None;
        let mut trp_information_type_list_trp_req: Option<TrpInformationTypeListTrpReq> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                410 => {
                    trp_list = Some(TrpList::decode(data)?);
                }
                398 => {
                    trp_information_type_list_trp_req =
                        Some(TrpInformationTypeListTrpReq::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let trp_information_type_list_trp_req =
            trp_information_type_list_trp_req.ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE trp_information_type_list_trp_req"
            )))?;
        Ok(Self {
            transaction_id,
            trp_list,
            trp_information_type_list_trp_req,
        })
    }
}

// TrpInformationTypeListTrpReq
#[derive(Clone)]
pub struct TrpInformationTypeListTrpReq(pub Vec<TrpInformationTypeItemTrpReq>);

// TrpInformationResponse
#[derive(Clone)]
pub struct TrpInformationResponse {
    pub transaction_id: TransactionId,
    pub trp_information_list_trp_resp: TrpInformationListTrpResp,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for TrpInformationResponse {
    type Output = TrpInformationResponse;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut trp_information_list_trp_resp: Option<TrpInformationListTrpResp> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                400 => {
                    trp_information_list_trp_resp = Some(TrpInformationListTrpResp::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let trp_information_list_trp_resp =
            trp_information_list_trp_resp.ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE trp_information_list_trp_resp"
            )))?;
        Ok(Self {
            transaction_id,
            trp_information_list_trp_resp,
            criticality_diagnostics,
        })
    }
}

// TrpInformationListTrpResp
#[derive(Clone)]
pub struct TrpInformationListTrpResp(pub Vec<TrpInformationItemTrpResp>);

// TrpInformationFailure
#[derive(Clone)]
pub struct TrpInformationFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for TrpInformationFailure {
    type Output = TrpInformationFailure;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => {
                    transaction_id = Some(TransactionId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            criticality_diagnostics,
        })
    }
}

// PositioningInformationRequest
#[derive(Clone)]
pub struct PositioningInformationRequest {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub requested_srs_transmission_characteristics: Option<RequestedSrsTransmissionCharacteristics>,
}

impl AperCodec for PositioningInformationRequest {
    type Output = PositioningInformationRequest;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut requested_srs_transmission_characteristics: Option<
            RequestedSrsTransmissionCharacteristics,
        > = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                391 => {
                    requested_srs_transmission_characteristics =
                        Some(RequestedSrsTransmissionCharacteristics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            requested_srs_transmission_characteristics,
        })
    }
}

// PositioningInformationResponse
#[derive(Clone)]
pub struct PositioningInformationResponse {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub srs_configuration: Option<SrsConfiguration>,
    pub sfn_initialisation_time: Option<RelativeTime1900>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for PositioningInformationResponse {
    type Output = PositioningInformationResponse;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut srs_configuration: Option<SrsConfiguration> = None;
        let mut sfn_initialisation_time: Option<RelativeTime1900> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                407 => {
                    srs_configuration = Some(SrsConfiguration::decode(data)?);
                }
                419 => {
                    sfn_initialisation_time = Some(RelativeTime1900::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            srs_configuration,
            sfn_initialisation_time,
            criticality_diagnostics,
        })
    }
}

// PositioningInformationFailure
#[derive(Clone)]
pub struct PositioningInformationFailure {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for PositioningInformationFailure {
    type Output = PositioningInformationFailure;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            cause,
            criticality_diagnostics,
        })
    }
}

// PositioningActivationRequest
#[derive(Clone)]
pub struct PositioningActivationRequest {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub srs_type: SrsType,
    pub activation_time: Option<RelativeTime1900>,
}

impl AperCodec for PositioningActivationRequest {
    type Output = PositioningActivationRequest;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut srs_type: Option<SrsType> = None;
        let mut activation_time: Option<RelativeTime1900> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                403 => {
                    srs_type = Some(SrsType::decode(data)?);
                }
                404 => {
                    activation_time = Some(RelativeTime1900::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let srs_type = srs_type.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE srs_type"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            srs_type,
            activation_time,
        })
    }
}

// SrsType
#[derive(Clone)]
pub enum SrsType {
    SemipersistentSrs(SemipersistentSrs),
    AperiodicSrs(AperiodicSrs),
}

// SemipersistentSrs
#[derive(Clone)]
pub struct SemipersistentSrs {
    pub srs_resource_set_id: SrsResourceSetId,
    pub srs_spatial_relation: Option<SpatialRelationInfo>,
}

// AperiodicSrs
#[derive(Clone)]
pub struct AperiodicSrs {
    pub aperiodic: Aperiodic,
    pub srs_resource_trigger: Option<SrsResourceTrigger>,
}

// PositioningActivationResponse
#[derive(Clone)]
pub struct PositioningActivationResponse {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub system_frame_number: Option<SystemFrameNumber>,
    pub slot_number: Option<SlotNumber>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for PositioningActivationResponse {
    type Output = PositioningActivationResponse;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut system_frame_number: Option<SystemFrameNumber> = None;
        let mut slot_number: Option<SlotNumber> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                420 => {
                    system_frame_number = Some(SystemFrameNumber::decode(data)?);
                }
                421 => {
                    slot_number = Some(SlotNumber::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            system_frame_number,
            slot_number,
            criticality_diagnostics,
        })
    }
}

// PositioningActivationFailure
#[derive(Clone)]
pub struct PositioningActivationFailure {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for PositioningActivationFailure {
    type Output = PositioningActivationFailure;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            cause,
            criticality_diagnostics,
        })
    }
}

// PositioningDeactivation
#[derive(Clone)]
pub struct PositioningDeactivation {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub abort_transmission: AbortTransmission,
}

impl AperCodec for PositioningDeactivation {
    type Output = PositioningDeactivation;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut abort_transmission: Option<AbortTransmission> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                405 => {
                    abort_transmission = Some(AbortTransmission::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let abort_transmission = abort_transmission.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE abort_transmission"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            abort_transmission,
        })
    }
}

// PositioningInformationUpdate
#[derive(Clone)]
pub struct PositioningInformationUpdate {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub srs_configuration: Option<SrsConfiguration>,
    pub sfn_initialisation_time: Option<RelativeTime1900>,
}

impl AperCodec for PositioningInformationUpdate {
    type Output = PositioningInformationUpdate;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut srs_configuration: Option<SrsConfiguration> = None;
        let mut sfn_initialisation_time: Option<RelativeTime1900> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                407 => {
                    srs_configuration = Some(SrsConfiguration::decode(data)?);
                }
                419 => {
                    sfn_initialisation_time = Some(RelativeTime1900::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            srs_configuration,
            sfn_initialisation_time,
        })
    }
}

// ECidMeasurementInitiationRequest
#[derive(Clone)]
pub struct ECidMeasurementInitiationRequest {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub lmf_ue_measurement_id: LmfUeMeasurementId,
    pub ran_ue_measurement_id: RanUeMeasurementId,
    pub e_cid_report_characteristics: ECidReportCharacteristics,
    pub e_cid_measurement_periodicity: Option<MeasurementPeriodicity>,
    pub e_cid_measurement_quantities: ECidMeasurementQuantities,
}

impl AperCodec for ECidMeasurementInitiationRequest {
    type Output = ECidMeasurementInitiationRequest;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut lmf_ue_measurement_id: Option<LmfUeMeasurementId> = None;
        let mut ran_ue_measurement_id: Option<RanUeMeasurementId> = None;
        let mut e_cid_report_characteristics: Option<ECidReportCharacteristics> = None;
        let mut e_cid_measurement_periodicity: Option<MeasurementPeriodicity> = None;
        let mut e_cid_measurement_quantities: Option<ECidMeasurementQuantities> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                412 => {
                    lmf_ue_measurement_id = Some(LmfUeMeasurementId::decode(data)?);
                }
                413 => {
                    ran_ue_measurement_id = Some(RanUeMeasurementId::decode(data)?);
                }
                424 => {
                    e_cid_report_characteristics = Some(ECidReportCharacteristics::decode(data)?);
                }
                416 => {
                    e_cid_measurement_periodicity = Some(MeasurementPeriodicity::decode(data)?);
                }
                414 => {
                    e_cid_measurement_quantities = Some(ECidMeasurementQuantities::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let lmf_ue_measurement_id = lmf_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE lmf_ue_measurement_id"),
        ))?;
        let ran_ue_measurement_id = ran_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE ran_ue_measurement_id"),
        ))?;
        let e_cid_report_characteristics = e_cid_report_characteristics.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE e_cid_report_characteristics")),
        )?;
        let e_cid_measurement_quantities = e_cid_measurement_quantities.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE e_cid_measurement_quantities")),
        )?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            lmf_ue_measurement_id,
            ran_ue_measurement_id,
            e_cid_report_characteristics,
            e_cid_measurement_periodicity,
            e_cid_measurement_quantities,
        })
    }
}

// ECidMeasurementInitiationResponse
#[derive(Clone)]
pub struct ECidMeasurementInitiationResponse {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub lmf_ue_measurement_id: LmfUeMeasurementId,
    pub ran_ue_measurement_id: RanUeMeasurementId,
    pub e_cid_measurement_result: Option<ECidMeasurementResult>,
    pub cell_portion_id: Option<CellPortionId>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for ECidMeasurementInitiationResponse {
    type Output = ECidMeasurementInitiationResponse;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut lmf_ue_measurement_id: Option<LmfUeMeasurementId> = None;
        let mut ran_ue_measurement_id: Option<RanUeMeasurementId> = None;
        let mut e_cid_measurement_result: Option<ECidMeasurementResult> = None;
        let mut cell_portion_id: Option<CellPortionId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                412 => {
                    lmf_ue_measurement_id = Some(LmfUeMeasurementId::decode(data)?);
                }
                413 => {
                    ran_ue_measurement_id = Some(RanUeMeasurementId::decode(data)?);
                }
                417 => {
                    e_cid_measurement_result = Some(ECidMeasurementResult::decode(data)?);
                }
                418 => {
                    cell_portion_id = Some(CellPortionId::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let lmf_ue_measurement_id = lmf_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE lmf_ue_measurement_id"),
        ))?;
        let ran_ue_measurement_id = ran_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE ran_ue_measurement_id"),
        ))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            lmf_ue_measurement_id,
            ran_ue_measurement_id,
            e_cid_measurement_result,
            cell_portion_id,
            criticality_diagnostics,
        })
    }
}

// ECidMeasurementInitiationFailure
#[derive(Clone)]
pub struct ECidMeasurementInitiationFailure {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub lmf_ue_measurement_id: LmfUeMeasurementId,
    pub ran_ue_measurement_id: RanUeMeasurementId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl AperCodec for ECidMeasurementInitiationFailure {
    type Output = ECidMeasurementInitiationFailure;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut lmf_ue_measurement_id: Option<LmfUeMeasurementId> = None;
        let mut ran_ue_measurement_id: Option<RanUeMeasurementId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                412 => {
                    lmf_ue_measurement_id = Some(LmfUeMeasurementId::decode(data)?);
                }
                413 => {
                    ran_ue_measurement_id = Some(RanUeMeasurementId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                7 => {
                    criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let lmf_ue_measurement_id = lmf_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE lmf_ue_measurement_id"),
        ))?;
        let ran_ue_measurement_id = ran_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE ran_ue_measurement_id"),
        ))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            lmf_ue_measurement_id,
            ran_ue_measurement_id,
            cause,
            criticality_diagnostics,
        })
    }
}

// ECidMeasurementFailureIndication
#[derive(Clone)]
pub struct ECidMeasurementFailureIndication {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub lmf_ue_measurement_id: LmfUeMeasurementId,
    pub ran_ue_measurement_id: RanUeMeasurementId,
    pub cause: Cause,
}

impl AperCodec for ECidMeasurementFailureIndication {
    type Output = ECidMeasurementFailureIndication;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut lmf_ue_measurement_id: Option<LmfUeMeasurementId> = None;
        let mut ran_ue_measurement_id: Option<RanUeMeasurementId> = None;
        let mut cause: Option<Cause> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                412 => {
                    lmf_ue_measurement_id = Some(LmfUeMeasurementId::decode(data)?);
                }
                413 => {
                    ran_ue_measurement_id = Some(RanUeMeasurementId::decode(data)?);
                }
                0 => {
                    cause = Some(Cause::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let lmf_ue_measurement_id = lmf_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE lmf_ue_measurement_id"),
        ))?;
        let ran_ue_measurement_id = ran_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE ran_ue_measurement_id"),
        ))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            lmf_ue_measurement_id,
            ran_ue_measurement_id,
            cause,
        })
    }
}

// ECidMeasurementReport
#[derive(Clone)]
pub struct ECidMeasurementReport {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub lmf_ue_measurement_id: LmfUeMeasurementId,
    pub ran_ue_measurement_id: RanUeMeasurementId,
    pub e_cid_measurement_result: ECidMeasurementResult,
    pub cell_portion_id: Option<CellPortionId>,
}

impl AperCodec for ECidMeasurementReport {
    type Output = ECidMeasurementReport;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut lmf_ue_measurement_id: Option<LmfUeMeasurementId> = None;
        let mut ran_ue_measurement_id: Option<RanUeMeasurementId> = None;
        let mut e_cid_measurement_result: Option<ECidMeasurementResult> = None;
        let mut cell_portion_id: Option<CellPortionId> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                412 => {
                    lmf_ue_measurement_id = Some(LmfUeMeasurementId::decode(data)?);
                }
                413 => {
                    ran_ue_measurement_id = Some(RanUeMeasurementId::decode(data)?);
                }
                417 => {
                    e_cid_measurement_result = Some(ECidMeasurementResult::decode(data)?);
                }
                418 => {
                    cell_portion_id = Some(CellPortionId::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let lmf_ue_measurement_id = lmf_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE lmf_ue_measurement_id"),
        ))?;
        let ran_ue_measurement_id = ran_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE ran_ue_measurement_id"),
        ))?;
        let e_cid_measurement_result = e_cid_measurement_result.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE e_cid_measurement_result")),
        )?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            lmf_ue_measurement_id,
            ran_ue_measurement_id,
            e_cid_measurement_result,
            cell_portion_id,
        })
    }
}

// ECidMeasurementTerminationCommand
#[derive(Clone)]
pub struct ECidMeasurementTerminationCommand {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub lmf_ue_measurement_id: LmfUeMeasurementId,
    pub ran_ue_measurement_id: RanUeMeasurementId,
}

impl AperCodec for ECidMeasurementTerminationCommand {
    type Output = ECidMeasurementTerminationCommand;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, 0, 65535, false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut lmf_ue_measurement_id: Option<LmfUeMeasurementId> = None;
        let mut ran_ue_measurement_id: Option<RanUeMeasurementId> = None;

        for _ in 0..len {
            let id = aper::decode::decode_integer(data, 0, 65535, false)?;
            let criticality = Criticality::decode(data)?;
            let _length = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => {
                    gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?);
                }
                41 => {
                    gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?);
                }
                412 => {
                    lmf_ue_measurement_id = Some(LmfUeMeasurementId::decode(data)?);
                }
                413 => {
                    ran_ue_measurement_id = Some(RanUeMeasurementId::decode(data)?);
                }
                x => {
                    if let Criticality::Reject = criticality {
                        return Err(aper::AperCodecError::new(format!(
                            "Unrecognised IE type {} with criticality reject",
                            x
                        )));
                    }
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let lmf_ue_measurement_id = lmf_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE lmf_ue_measurement_id"),
        ))?;
        let ran_ue_measurement_id = ran_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE ran_ue_measurement_id"),
        ))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            lmf_ue_measurement_id,
            ran_ue_measurement_id,
        })
    }
}

// Aperiodic
#[derive(Clone, Copy)]
pub enum Aperiodic {
    True,
}
