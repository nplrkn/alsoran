// Copyright (c) Nicholas Larkin
// Autogenerated from F1AP-IEs.asn
use super::common::*;

// AbortTransmission
#[derive(Clone)]
pub enum AbortTransmission {
    SrsResourceSetId(SrsResourceSetId),
    ReleaseAll,
}

// AccessPointPosition
#[derive(Clone)]
pub struct AccessPointPosition {
    pub latitude_sign: LatitudeSign,
    pub latitude: u32,
    pub longitude: u32,
    pub direction_of_altitude: DirectionOfAltitude,
    pub altitude: u16,
    pub uncertainty_semi_major: u8,
    pub uncertainty_semi_minor: u8,
    pub orientation_of_major_axis: u8,
    pub uncertainty_altitude: u8,
    pub confidence: u8,
}

// ActivatedCellsToBeUpdatedList
#[derive(Clone)]
pub struct ActivatedCellsToBeUpdatedList(pub Vec<ActivatedCellsToBeUpdatedListItem>);

// ActivatedCellsToBeUpdatedListItem
#[derive(Clone)]
pub struct ActivatedCellsToBeUpdatedListItem {
    pub nrcgi: Nrcgi,
    pub iab_du_cell_resource_configuration_mode_info: IabDuCellResourceConfigurationModeInfo,
}

// ActiveUlbwp
#[derive(Clone)]
pub struct ActiveUlbwp {
    pub location_and_bandwidth: u16,
    pub subcarrier_spacing: SubcarrierSpacing1,
    pub cyclic_prefix: CyclicPrefix,
    pub tx_direct_current_location: u16,
    pub shift7dot5k_hz: Option<Shift7dot5kHz>,
    pub srs_config: SrsConfig,
}

// AdditionalDuplicationIndication
#[derive(Clone, Copy)]
pub enum AdditionalDuplicationIndication {
    Three,
    Four,
}

// AdditionalPathList
#[derive(Clone)]
pub struct AdditionalPathList(pub Vec<AdditionalPathItem>);

// AdditionalPathItem
#[derive(Clone)]
pub struct AdditionalPathItem {
    pub relative_path_delay: RelativePathDelay,
    pub path_quality: Option<TrpMeasurementQuality>,
}

// AdditionalPdcpDuplicationTnlList
#[derive(Clone)]
pub struct AdditionalPdcpDuplicationTnlList(pub Vec<AdditionalPdcpDuplicationTnlItem>);

// AdditionalPdcpDuplicationTnlItem
#[derive(Clone)]
pub struct AdditionalPdcpDuplicationTnlItem {
    pub additional_pdcp_duplication_uptnl_information: UpTransportLayerInformation,
}

// AdditionalSibMessageList
#[derive(Clone)]
pub struct AdditionalSibMessageList(pub Vec<AdditionalSibMessageListItem>);

// AdditionalSibMessageListItem
#[derive(Clone)]
pub struct AdditionalSibMessageListItem {
    pub additional_sib: Vec<u8>,
}

// AdditionalRrmPriorityIndex
#[derive(Clone)]
pub struct AdditionalRrmPriorityIndex(pub BitString);

// AggressorCellList
#[derive(Clone)]
pub struct AggressorCellList(pub Vec<AggressorCellListItem>);

// AggressorCellListItem
#[derive(Clone)]
pub struct AggressorCellListItem {
    pub aggressor_cell_id: Nrcgi,
}

// AggressorGnbSetId
#[derive(Clone)]
pub struct AggressorGnbSetId {
    pub aggressor_gnb_set_id: GnbSetId,
}

// AllocationAndRetentionPriority
#[derive(Clone)]
pub struct AllocationAndRetentionPriority {
    pub priority_level: PriorityLevel,
    pub pre_emption_capability: PreEmptionCapability,
    pub pre_emption_vulnerability: PreEmptionVulnerability,
}

// AlternativeQosParaSetList
#[derive(Clone)]
pub struct AlternativeQosParaSetList(pub Vec<AlternativeQosParaSetItem>);

// AlternativeQosParaSetItem
#[derive(Clone)]
pub struct AlternativeQosParaSetItem {
    pub alternative_qos_para_set_index: QosParaSetIndex,
    pub guaranteed_flow_bit_rate_dl: Option<BitRate>,
    pub guaranteed_flow_bit_rate_ul: Option<BitRate>,
    pub packet_delay_budget: Option<PacketDelayBudget>,
    pub packet_error_rate: Option<PacketErrorRate>,
}

// AngleMeasurementQuality
#[derive(Clone)]
pub struct AngleMeasurementQuality {
    pub azimuth_quality: u8,
    pub zenith_quality: Option<u8>,
    pub resolution: Resolution,
}

// AperiodicSrsResourceTriggerList
#[derive(Clone)]
pub struct AperiodicSrsResourceTriggerList(pub Vec<AperiodicSrsResourceTrigger>);

// AperiodicSrsResourceTrigger
#[derive(Clone)]
pub struct AperiodicSrsResourceTrigger(pub u8);

// AssociatedSCellItem
#[derive(Clone)]
pub struct AssociatedSCellItem {
    pub s_cell_id: Nrcgi,
}

// AvailablePlmnList
#[derive(Clone)]
pub struct AvailablePlmnList(pub Vec<AvailablePlmnListItem>);

// AvailablePlmnListItem
#[derive(Clone)]
pub struct AvailablePlmnListItem {
    pub plmn_identity: PlmnIdentity,
}

// AvailableSnpnIdList
#[derive(Clone)]
pub struct AvailableSnpnIdList(pub Vec<AvailableSnpnIdListItem>);

// AvailableSnpnIdListItem
#[derive(Clone)]
pub struct AvailableSnpnIdListItem {
    pub plmn_identity: PlmnIdentity,
    pub available_nid_list: BroadcastNidList,
}

// AveragingWindow
#[derive(Clone)]
pub struct AveragingWindow(pub u16);

// AreaScope
#[derive(Clone, Copy)]
pub enum AreaScope {
    True,
}

// BandwidthSrs
#[derive(Clone)]
pub enum BandwidthSrs {
    Fr1(Fr1Bandwidth),
    Fr2(Fr2Bandwidth),
}

// BapAddress
#[derive(Clone)]
pub struct BapAddress(pub BitString);

// BapCtrlPduChannel
#[derive(Clone, Copy)]
pub enum BapCtrlPduChannel {
    True,
}

// BaPlayerBhrlCchannelMappingInfo
#[derive(Clone)]
pub struct BaPlayerBhrlCchannelMappingInfo {
    pub ba_player_bhrl_cchannel_mapping_info_to_add: Option<BaPlayerBhrlCchannelMappingInfoList>,
    pub ba_player_bhrl_cchannel_mapping_info_to_remove: Option<MappingInformationtoRemove>,
}

// BaPlayerBhrlCchannelMappingInfoList
#[derive(Clone)]
pub struct BaPlayerBhrlCchannelMappingInfoList(pub Vec<BaPlayerBhrlCchannelMappingInfoItem>);

// BaPlayerBhrlCchannelMappingInfoItem
#[derive(Clone)]
pub struct BaPlayerBhrlCchannelMappingInfoItem {
    pub mapping_information_index: MappingInformationIndex,
    pub prior_hop_bap_address: Option<BapAddress>,
    pub ingressb_hrlc_channel_id: Option<BhrlcChannelId>,
    pub next_hop_bap_address: Option<BapAddress>,
    pub egressb_hrlc_channel_id: Option<BhrlcChannelId>,
}

// BapPathId
#[derive(Clone)]
pub struct BapPathId(pub BitString);

// BapRoutingId
#[derive(Clone)]
pub struct BapRoutingId {
    pub bap_address: BapAddress,
    pub bap_path_id: BapPathId,
}

// BitRate
#[derive(Clone)]
pub struct BitRate(pub u64);

// BearerTypeChange
#[derive(Clone, Copy)]
pub enum BearerTypeChange {
    True,
}

// BhrlcChannelId
#[derive(Clone)]
pub struct BhrlcChannelId(pub BitString);

// BhChannelsFailedToBeModifiedItem
#[derive(Clone)]
pub struct BhChannelsFailedToBeModifiedItem {
    pub bhrlc_channel_id: BhrlcChannelId,
    pub cause: Option<Cause>,
}

// BhChannelsFailedToBeSetupItem
#[derive(Clone)]
pub struct BhChannelsFailedToBeSetupItem {
    pub bhrlc_channel_id: BhrlcChannelId,
    pub cause: Option<Cause>,
}

// BhChannelsFailedToBeSetupModItem
#[derive(Clone)]
pub struct BhChannelsFailedToBeSetupModItem {
    pub bhrlc_channel_id: BhrlcChannelId,
    pub cause: Option<Cause>,
}

// BhChannelsModifiedItem
#[derive(Clone)]
pub struct BhChannelsModifiedItem {
    pub bhrlc_channel_id: BhrlcChannelId,
}

// BhChannelsRequiredToBeReleasedItem
#[derive(Clone)]
pub struct BhChannelsRequiredToBeReleasedItem {
    pub bhrlc_channel_id: BhrlcChannelId,
}

// BhChannelsSetupItem
#[derive(Clone)]
pub struct BhChannelsSetupItem {
    pub bhrlc_channel_id: BhrlcChannelId,
}

// BhChannelsSetupModItem
#[derive(Clone)]
pub struct BhChannelsSetupModItem {
    pub bhrlc_channel_id: BhrlcChannelId,
}

// BhChannelsToBeModifiedItem
#[derive(Clone)]
pub struct BhChannelsToBeModifiedItem {
    pub bhrlc_channel_id: BhrlcChannelId,
    pub bh_qos_information: BhQosInformation,
    pub rl_cmode: Option<RlcMode>,
    pub bap_ctrl_pdu_channel: Option<BapCtrlPduChannel>,
    pub traffic_mapping_info: Option<TrafficMappingInfo>,
}

// BhChannelsToBeReleasedItem
#[derive(Clone)]
pub struct BhChannelsToBeReleasedItem {
    pub bhrlc_channel_id: BhrlcChannelId,
}

// BhChannelsToBeSetupItem
#[derive(Clone)]
pub struct BhChannelsToBeSetupItem {
    pub bhrlc_channel_id: BhrlcChannelId,
    pub bh_qos_information: BhQosInformation,
    pub rl_cmode: RlcMode,
    pub bap_ctrl_pdu_channel: Option<BapCtrlPduChannel>,
    pub traffic_mapping_info: Option<TrafficMappingInfo>,
}

// BhChannelsToBeSetupModItem
#[derive(Clone)]
pub struct BhChannelsToBeSetupModItem {
    pub bhrlc_channel_id: BhrlcChannelId,
    pub bh_qos_information: BhQosInformation,
    pub rl_cmode: RlcMode,
    pub bap_ctrl_pdu_channel: Option<BapCtrlPduChannel>,
    pub traffic_mapping_info: Option<TrafficMappingInfo>,
}

// BhInfo
#[derive(Clone)]
pub struct BhInfo {
    pub ba_prouting_id: Option<BapRoutingId>,
    pub egress_bhrlcch_list: Option<EgressBhrlcchList>,
}

// BhQosInformation
#[derive(Clone)]
pub enum BhQosInformation {
    BhrlcchQos(QosFlowLevelQosParameters),
    EutranBhrlcchQos(EutranQos),
    CpTrafficType(CpTrafficType),
}

// BhRoutingInformationAddedListItem
#[derive(Clone)]
pub struct BhRoutingInformationAddedListItem {
    pub bap_routing_id: BapRoutingId,
    pub next_hop_bap_address: BapAddress,
}

// BhRoutingInformationRemovedListItem
#[derive(Clone)]
pub struct BhRoutingInformationRemovedListItem {
    pub bap_routing_id: BapRoutingId,
}

// BPlmnIdInfoList
#[derive(Clone)]
pub struct BPlmnIdInfoList(pub Vec<BPlmnIdInfoItem>);

// BPlmnIdInfoItem
#[derive(Clone)]
pub struct BPlmnIdInfoItem {
    pub plmn_identity_list: AvailablePlmnList,
    pub extended_plmn_identity_list: Option<ExtendedAvailablePlmnList>,
    pub five_gs_tac: Option<FiveGsTac>,
    pub nr_cell_id: NrCellIdentity,
    pub ranac: Option<Ranac>,
}

// ServedPlmnSList
#[derive(Clone)]
pub struct ServedPlmnSList(pub Vec<ServedPlmnSItem>);

// ServedPlmnSItem
#[derive(Clone)]
pub struct ServedPlmnSItem {
    pub plmn_identity: PlmnIdentity,
}

// BroadcastCagList
#[derive(Clone)]
pub struct BroadcastCagList(pub Vec<Cagid>);

// BroadcastNidList
#[derive(Clone)]
pub struct BroadcastNidList(pub Vec<Nid>);

// BroadcastSnpnIdList
#[derive(Clone)]
pub struct BroadcastSnpnIdList(pub Vec<BroadcastSnpnIdListItem>);

// BroadcastSnpnIdListItem
#[derive(Clone)]
pub struct BroadcastSnpnIdListItem {
    pub plmn_identity: PlmnIdentity,
    pub broadcast_nid_list: BroadcastNidList,
}

// BroadcastPniNpnIdList
#[derive(Clone)]
pub struct BroadcastPniNpnIdList(pub Vec<BroadcastPniNpnIdListItem>);

// BroadcastPniNpnIdListItem
#[derive(Clone)]
pub struct BroadcastPniNpnIdListItem {
    pub plmn_identity: PlmnIdentity,
    pub broadcast_cag_list: BroadcastCagList,
}

// BurstArrivalTime
#[derive(Clone)]
pub struct BurstArrivalTime(pub Vec<u8>);

// Cagid
#[derive(Clone)]
pub struct Cagid(pub BitString);

// CancelAllWarningMessagesIndicator
#[derive(Clone, Copy)]
pub enum CancelAllWarningMessagesIndicator {
    True,
}

// CandidateSpCellItem
#[derive(Clone)]
pub struct CandidateSpCellItem {
    pub candidate_sp_cell_id: Nrcgi,
}

// CapacityValue
#[derive(Clone)]
pub struct CapacityValue {
    pub capacity_value: u8,
    pub ssb_area_capacity_value_list: Option<SsbAreaCapacityValueList>,
}

// Cause
#[derive(Clone)]
pub enum Cause {
    RadioNetwork(CauseRadioNetwork),
    Transport(CauseTransport),
    Protocol(CauseProtocol),
    Misc(CauseMisc),
}

// CauseMisc
#[derive(Clone, Copy)]
pub enum CauseMisc {
    ControlProcessingOverload,
    NotEnoughUserPlaneProcessingResources,
    HardwareFailure,
    OmIntervention,
    Unspecified,
}

// CauseProtocol
#[derive(Clone, Copy)]
pub enum CauseProtocol {
    TransferSyntaxError,
    AbstractSyntaxErrorReject,
    AbstractSyntaxErrorIgnoreAndNotify,
    MessageNotCompatibleWithReceiverState,
    SemanticError,
    AbstractSyntaxErrorFalselyConstructedMessage,
    Unspecified,
}

// CauseRadioNetwork
#[derive(Clone, Copy)]
pub enum CauseRadioNetwork {
    Unspecified,
    RlFailureRlc,
    UnknownOrAlreadyAllocatedGnbCuUeF1apId,
    UnknownOrAlreadyAllocatedGnbDuUeF1apId,
    UnknownOrInconsistentPairOfUeF1apId,
    InteractionWithOtherProcedure,
    NotSupportedQciValue,
    ActionDesirableForRadioReasons,
    NoRadioResourcesAvailable,
    ProcedureCancelled,
    NormalRelease,
}

// CauseTransport
#[derive(Clone, Copy)]
pub enum CauseTransport {
    Unspecified,
    TransportResourceUnavailable,
}

// CellGroupConfig
#[derive(Clone)]
pub struct CellGroupConfig(pub Vec<u8>);

// CellCapacityClassValue
#[derive(Clone)]
pub struct CellCapacityClassValue(pub u8);

// CellDirection
#[derive(Clone, Copy)]
pub enum CellDirection {
    DlOnly,
    UlOnly,
}

// CellMeasurementResultList
#[derive(Clone)]
pub struct CellMeasurementResultList(pub Vec<CellMeasurementResultItem>);

// CellMeasurementResultItem
#[derive(Clone)]
pub struct CellMeasurementResultItem {
    pub cell_id: Nrcgi,
    pub radio_resource_status: Option<RadioResourceStatus>,
    pub composite_available_capacity_group: Option<CompositeAvailableCapacityGroup>,
    pub slice_available_capacity: Option<SliceAvailableCapacity>,
    pub numberof_active_u_es: Option<NumberofActiveUEs>,
}

// CellPortionId
#[derive(Clone)]
pub struct CellPortionId(pub u16);

// CellsFailedToBeActivatedListItem
#[derive(Clone)]
pub struct CellsFailedToBeActivatedListItem {
    pub nrcgi: Nrcgi,
    pub cause: Cause,
}

// CellsStatusItem
#[derive(Clone)]
pub struct CellsStatusItem {
    pub nrcgi: Nrcgi,
    pub service_status: ServiceStatus,
}

// CellsToBeBroadcastItem
#[derive(Clone)]
pub struct CellsToBeBroadcastItem {
    pub nrcgi: Nrcgi,
}

// CellsBroadcastCompletedItem
#[derive(Clone)]
pub struct CellsBroadcastCompletedItem {
    pub nrcgi: Nrcgi,
}

// BroadcastToBeCancelledItem
#[derive(Clone)]
pub struct BroadcastToBeCancelledItem {
    pub nrcgi: Nrcgi,
}

// CellsBroadcastCancelledItem
#[derive(Clone)]
pub struct CellsBroadcastCancelledItem {
    pub nrcgi: Nrcgi,
    pub number_of_broadcasts: NumberOfBroadcasts,
}

// CellsToBeActivatedListItem
#[derive(Clone)]
pub struct CellsToBeActivatedListItem {
    pub nrcgi: Nrcgi,
    pub nrpci: Option<Nrpci>,
}

// CellsToBeDeactivatedListItem
#[derive(Clone)]
pub struct CellsToBeDeactivatedListItem {
    pub nrcgi: Nrcgi,
}

// CellsToBeBarredItem
#[derive(Clone)]
pub struct CellsToBeBarredItem {
    pub nrcgi: Nrcgi,
    pub cell_barred: CellBarred,
}

// CellBarred
#[derive(Clone, Copy)]
pub enum CellBarred {
    Barred,
    NotBarred,
}

// CellSize
#[derive(Clone, Copy)]
pub enum CellSize {
    Verysmall,
    Small,
    Medium,
    Large,
}

// CellToReportList
#[derive(Clone)]
pub struct CellToReportList(pub Vec<CellToReportItem>);

// CellToReportItem
#[derive(Clone)]
pub struct CellToReportItem {
    pub cell_id: Nrcgi,
    pub ssb_to_report_list: Option<SsbToReportList>,
    pub slice_to_report_list: Option<SliceToReportList>,
}

// CellType
#[derive(Clone)]
pub struct CellType {
    pub cell_size: CellSize,
}

// CellUlConfigured
#[derive(Clone, Copy)]
pub enum CellUlConfigured {
    None,
    Ul,
    Sul,
    UlAndSul,
}

// ChildNodeCellsList
#[derive(Clone)]
pub struct ChildNodeCellsList(pub Vec<ChildNodeCellsListItem>);

// ChildNodeCellsListItem
#[derive(Clone)]
pub struct ChildNodeCellsListItem {
    pub nrcgi: Nrcgi,
    pub iab_du_cell_resource_configuration_mode_info:
        Option<IabDuCellResourceConfigurationModeInfo>,
    pub iab_stc_info: Option<IabStcInfo>,
    pub rach_config_common: Option<RachConfigCommon>,
    pub rach_config_common_iab: Option<RachConfigCommonIab>,
    pub csi_rs_configuration: Option<Vec<u8>>,
    pub sr_configuration: Option<Vec<u8>>,
    pub pdcch_config_sib1: Option<Vec<u8>>,
    pub scs_common: Option<Vec<u8>>,
    pub multiplexing_info: Option<MultiplexingInfo>,
}

// ChildNodesList
#[derive(Clone)]
pub struct ChildNodesList(pub Vec<ChildNodesListItem>);

// ChildNodesListItem
#[derive(Clone)]
pub struct ChildNodesListItem {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub child_node_cells_list: Option<ChildNodeCellsList>,
}

// ChOtriggerInterDu
#[derive(Clone, Copy)]
pub enum ChOtriggerInterDu {
    ChoInitiation,
    ChoReplace,
}

// ChOtriggerIntraDu
#[derive(Clone, Copy)]
pub enum ChOtriggerIntraDu {
    ChoInitiation,
    ChoReplace,
    ChoCancel,
}

// CnuePagingIdentity
#[derive(Clone)]
pub enum CnuePagingIdentity {
    FiveGSTmsi(BitString),
}

// CompositeAvailableCapacityGroup
#[derive(Clone)]
pub struct CompositeAvailableCapacityGroup {
    pub composite_available_capacity_downlink: CompositeAvailableCapacity,
    pub composite_available_capacity_uplink: CompositeAvailableCapacity,
}

// CompositeAvailableCapacity
#[derive(Clone)]
pub struct CompositeAvailableCapacity {
    pub cell_capacity_class_value: Option<CellCapacityClassValue>,
    pub capacity_value: CapacityValue,
}

// ChoProbability
#[derive(Clone)]
pub struct ChoProbability(pub u8);

// ConditionalInterDuMobilityInformation
#[derive(Clone)]
pub struct ConditionalInterDuMobilityInformation {
    pub cho_trigger: ChOtriggerInterDu,
    pub target_gnb_duuef1apid: Option<GnbDuUeF1apId>,
}

// ConditionalIntraDuMobilityInformation
#[derive(Clone)]
pub struct ConditionalIntraDuMobilityInformation {
    pub cho_trigger: ChOtriggerIntraDu,
    pub target_cells_tocancel: Option<TargetCellList>,
}

// ConfiguredTacIndication
#[derive(Clone, Copy)]
pub enum ConfiguredTacIndication {
    True,
}

// CoordinateId
#[derive(Clone)]
pub struct CoordinateId(pub u16);

// CpTransportLayerAddress
#[derive(Clone)]
pub enum CpTransportLayerAddress {
    EndpointIpAddress(TransportLayerAddress),
    EndpointIpAddressAndPort(EndpointIpAddressAndPort),
}

// CpTrafficType
#[derive(Clone)]
pub struct CpTrafficType(pub u8);

// CriticalityDiagnostics
#[derive(Clone)]
pub struct CriticalityDiagnostics {
    pub procedure_code: Option<ProcedureCode>,
    pub triggering_message: Option<TriggeringMessage>,
    pub procedure_criticality: Option<Criticality>,
    pub transaction_id: Option<TransactionId>,
    pub i_es_criticality_diagnostics: Option<CriticalityDiagnosticsIeList>,
}

// CriticalityDiagnosticsIeList
#[derive(Clone)]
pub struct CriticalityDiagnosticsIeList(pub Vec<CriticalityDiagnosticsIeItem>);

// CriticalityDiagnosticsIeItem
#[derive(Clone)]
pub struct CriticalityDiagnosticsIeItem {
    pub ie_criticality: Criticality,
    pub ie_id: ProtocolIeId,
    pub type_of_error: TypeOfError,
}

// CRnti
#[derive(Clone)]
pub struct CRnti(pub u16);

// CuduRadioInformationType
#[derive(Clone)]
pub enum CuduRadioInformationType {
    Rim(CudurimInformation),
}

// CudurimInformation
#[derive(Clone)]
pub struct CudurimInformation {
    pub victim_gnb_set_id: GnbSetId,
    pub rimrs_detection_status: RimrsDetectionStatus,
}

// CUtoDurrcInformation
#[derive(Clone)]
pub struct CUtoDurrcInformation {
    pub cg_config_info: Option<CgConfigInfo>,
    pub ue_capability_rat_container_list: Option<UeCapabilityRatContainerList>,
    pub meas_config: Option<MeasConfig>,
}

// DcBasedDuplicationConfigured
#[derive(Clone, Copy)]
pub enum DcBasedDuplicationConfigured {
    True,
}

// DedicatedSiDeliveryNeededUeItem
#[derive(Clone)]
pub struct DedicatedSiDeliveryNeededUeItem {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub nrcgi: Nrcgi,
}

// DlPrs
#[derive(Clone)]
pub struct DlPrs {
    pub prsid: u8,
    pub dl_prs_resource_set_id: PrsResourceSetId,
    pub dl_prs_resource_id: Option<PrsResourceId>,
}

// DlPrsMutingPattern
#[derive(Clone)]
pub enum DlPrsMutingPattern {
    Two(BitString),
    Four(BitString),
    Six(BitString),
    Eight(BitString),
    Sixteen(BitString),
    ThirtyTwo(BitString),
}

// DlprsResourceCoordinates
#[derive(Clone)]
pub struct DlprsResourceCoordinates {
    pub listof_dl_prs_resource_set_arp: Vec<DlprsResourceSetArp>,
}

// DlprsResourceSetArp
#[derive(Clone)]
pub struct DlprsResourceSetArp {
    pub dl_prs_resource_set_id: PrsResourceSetId,
    pub dl_prs_resource_set_arp_location: DlPrsResourceSetArpLocation,
    pub listof_dl_prs_resource_arp: Vec<DlprsResourceArp>,
}

// DlPrsResourceSetArpLocation
#[derive(Clone)]
pub enum DlPrsResourceSetArpLocation {
    RelativeGeodeticLocation(RelativeGeodeticLocation),
    RelativeCartesianLocation(RelativeCartesianLocation),
}

// DlprsResourceArp
#[derive(Clone)]
pub struct DlprsResourceArp {
    pub dl_prs_resource_id: PrsResourceId,
    pub dl_prs_resource_arp_location: DlPrsResourceArpLocation,
}

// DlPrsResourceArpLocation
#[derive(Clone)]
pub enum DlPrsResourceArpLocation {
    RelativeGeodeticLocation(RelativeGeodeticLocation),
    RelativeCartesianLocation(RelativeCartesianLocation),
}

// DlUpTnlAddressToUpdateListItem
#[derive(Clone)]
pub struct DlUpTnlAddressToUpdateListItem {
    pub old_ip_adress: TransportLayerAddress,
    pub new_ip_adress: TransportLayerAddress,
}

// DluptnlInformationToBeSetupList
#[derive(Clone)]
pub struct DluptnlInformationToBeSetupList(pub Vec<DluptnlInformationToBeSetupItem>);

// DluptnlInformationToBeSetupItem
#[derive(Clone)]
pub struct DluptnlInformationToBeSetupItem {
    pub dluptnl_information: UpTransportLayerInformation,
}

// DrbActivityItem
#[derive(Clone)]
pub struct DrbActivityItem {
    pub drbid: Drbid,
    pub drb_activity: Option<DrbActivity>,
}

// DrbActivity
#[derive(Clone, Copy)]
pub enum DrbActivity {
    Active,
    NotActive,
}

// Drbid
#[derive(Clone)]
pub struct Drbid(pub u8);

// DrBsFailedToBeModifiedItem
#[derive(Clone)]
pub struct DrBsFailedToBeModifiedItem {
    pub drbid: Drbid,
    pub cause: Option<Cause>,
}

// DrBsFailedToBeSetupItem
#[derive(Clone)]
pub struct DrBsFailedToBeSetupItem {
    pub drbid: Drbid,
    pub cause: Option<Cause>,
}

// DrBsFailedToBeSetupModItem
#[derive(Clone)]
pub struct DrBsFailedToBeSetupModItem {
    pub drbid: Drbid,
    pub cause: Option<Cause>,
}

// DrbInformation
#[derive(Clone)]
pub struct DrbInformation {
    pub drb_qos: QosFlowLevelQosParameters,
    pub snssai: Snssai,
    pub notification_control: Option<NotificationControl>,
    pub flows_mapped_to_drb_list: FlowsMappedToDrbList,
}

// DrBsModifiedItem
#[derive(Clone)]
pub struct DrBsModifiedItem {
    pub drbid: Drbid,
    pub lcid: Option<Lcid>,
    pub dluptnl_information_to_be_setup_list: DluptnlInformationToBeSetupList,
}

// DrBsModifiedConfItem
#[derive(Clone)]
pub struct DrBsModifiedConfItem {
    pub drbid: Drbid,
    pub uluptnl_information_to_be_setup_list: UluptnlInformationToBeSetupList,
}

// DrbNotifyItem
#[derive(Clone)]
pub struct DrbNotifyItem {
    pub drbid: Drbid,
    pub notification_cause: NotificationCause,
}

// DrBsRequiredToBeModifiedItem
#[derive(Clone)]
pub struct DrBsRequiredToBeModifiedItem {
    pub drbid: Drbid,
    pub dluptnl_information_to_be_setup_list: DluptnlInformationToBeSetupList,
}

// DrBsRequiredToBeReleasedItem
#[derive(Clone)]
pub struct DrBsRequiredToBeReleasedItem {
    pub drbid: Drbid,
}

// DrBsSetupItem
#[derive(Clone)]
pub struct DrBsSetupItem {
    pub drbid: Drbid,
    pub lcid: Option<Lcid>,
    pub dluptnl_information_to_be_setup_list: DluptnlInformationToBeSetupList,
}

// DrBsSetupModItem
#[derive(Clone)]
pub struct DrBsSetupModItem {
    pub drbid: Drbid,
    pub lcid: Option<Lcid>,
    pub dluptnl_information_to_be_setup_list: DluptnlInformationToBeSetupList,
}

// DrBsToBeModifiedItem
#[derive(Clone)]
pub struct DrBsToBeModifiedItem {
    pub drbid: Drbid,
    pub qos_information: Option<QosInformation>,
    pub uluptnl_information_to_be_setup_list: UluptnlInformationToBeSetupList,
    pub ul_configuration: Option<UlConfiguration>,
}

// DrBsToBeReleasedItem
#[derive(Clone)]
pub struct DrBsToBeReleasedItem {
    pub drbid: Drbid,
}

// DrBsToBeSetupItem
#[derive(Clone)]
pub struct DrBsToBeSetupItem {
    pub drbid: Drbid,
    pub qos_information: QosInformation,
    pub uluptnl_information_to_be_setup_list: UluptnlInformationToBeSetupList,
    pub rlc_mode: RlcMode,
    pub ul_configuration: Option<UlConfiguration>,
    pub duplication_activation: Option<DuplicationActivation>,
}

// DrBsToBeSetupModItem
#[derive(Clone)]
pub struct DrBsToBeSetupModItem {
    pub drbid: Drbid,
    pub qos_information: QosInformation,
    pub uluptnl_information_to_be_setup_list: UluptnlInformationToBeSetupList,
    pub rlc_mode: RlcMode,
    pub ul_configuration: Option<UlConfiguration>,
    pub duplication_activation: Option<DuplicationActivation>,
}

// DrxCycle
#[derive(Clone)]
pub struct DrxCycle {
    pub long_drx_cycle_length: LongDrxCycleLength,
    pub short_drx_cycle_length: Option<ShortDrxCycleLength>,
    pub short_drx_cycle_timer: Option<ShortDrxCycleTimer>,
}

// DrxConfig
#[derive(Clone)]
pub struct DrxConfig(pub Vec<u8>);

// DrxConfigurationIndicator
#[derive(Clone, Copy)]
pub enum DrxConfigurationIndicator {
    Release,
}

// DrxLongCycleStartOffset
#[derive(Clone)]
pub struct DrxLongCycleStartOffset(pub u16);

// DsInformationList
#[derive(Clone)]
pub struct DsInformationList(pub Vec<Dscp>);

// Dscp
#[derive(Clone)]
pub struct Dscp(pub BitString);

// DUtoCurrcContainer
#[derive(Clone)]
pub struct DUtoCurrcContainer(pub Vec<u8>);

// DucuRadioInformationType
#[derive(Clone)]
pub enum DucuRadioInformationType {
    Rim(DucurimInformation),
}

// DucurimInformation
#[derive(Clone)]
pub struct DucurimInformation {
    pub victim_gnb_set_id: GnbSetId,
    pub rimrs_detection_status: RimrsDetectionStatus,
    pub aggressor_cell_list: AggressorCellList,
}

// DufSlotConfigItem
#[derive(Clone)]
pub enum DufSlotConfigItem {
    ExplicitFormat(ExplicitFormat),
    ImplicitFormat(ImplicitFormat),
}

// DufSlotConfigList
#[derive(Clone)]
pub struct DufSlotConfigList(pub Vec<DufSlotConfigItem>);

// DufSlotformatIndex
#[derive(Clone)]
pub struct DufSlotformatIndex(pub u8);

// DufTransmissionPeriodicity
#[derive(Clone, Copy)]
pub enum DufTransmissionPeriodicity {
    Ms0p5,
    Ms0p625,
    Ms1,
    Ms1p25,
    Ms2,
    Ms2p5,
    Ms5,
    Ms10,
}

// DuRxMtRx
#[derive(Clone, Copy)]
pub enum DuRxMtRx {
    Supported,
    NotSupported,
}

// DuTxMtTx
#[derive(Clone, Copy)]
pub enum DuTxMtTx {
    Supported,
    NotSupported,
}

// DuRxMtTx
#[derive(Clone, Copy)]
pub enum DuRxMtTx {
    Supported,
    NotSupported,
}

// DuTxMtRx
#[derive(Clone, Copy)]
pub enum DuTxMtRx {
    Supported,
    NotSupported,
}

// DUtoCurrcInformation
#[derive(Clone)]
pub struct DUtoCurrcInformation {
    pub cell_group_config: CellGroupConfig,
    pub meas_gap_config: Option<MeasGapConfig>,
    pub requested_p_max_fr1: Option<Vec<u8>>,
}

// DuplicationActivation
#[derive(Clone, Copy)]
pub enum DuplicationActivation {
    Active,
    Inactive,
}

// DuplicationIndication
#[derive(Clone, Copy)]
pub enum DuplicationIndication {
    True,
}

// DuplicationState
#[derive(Clone, Copy)]
pub enum DuplicationState {
    Active,
    Inactive,
}

// Dynamic5qiDescriptor
#[derive(Clone)]
pub struct Dynamic5qiDescriptor {
    pub qos_priority_level: u8,
    pub packet_delay_budget: PacketDelayBudget,
    pub packet_error_rate: PacketErrorRate,
    pub five_qi: Option<u8>,
    pub delay_critical: Option<DelayCritical>,
    pub averaging_window: Option<AveragingWindow>,
    pub max_data_burst_volume: Option<MaxDataBurstVolume>,
}

// DynamicPqiDescriptor
#[derive(Clone)]
pub struct DynamicPqiDescriptor {
    pub resource_type: Option<ResourceType1>,
    pub qos_priority_level: u8,
    pub packet_delay_budget: PacketDelayBudget,
    pub packet_error_rate: PacketErrorRate,
    pub averaging_window: Option<AveragingWindow>,
    pub max_data_burst_volume: Option<MaxDataBurstVolume>,
}

// ECidMeasurementQuantities
#[derive(Clone)]
pub struct ECidMeasurementQuantities(pub Vec<ECidMeasurementQuantitiesItem>);

// ECidMeasurementQuantitiesItem
#[derive(Clone)]
pub struct ECidMeasurementQuantitiesItem {
    pub e_ci_dmeasurement_quantities_value: ECidMeasurementQuantitiesValue,
}

// ECidMeasurementQuantitiesValue
#[derive(Clone, Copy)]
pub enum ECidMeasurementQuantitiesValue {
    Default,
    AngleOfArrivalNr,
}

// ECidMeasurementResult
#[derive(Clone)]
pub struct ECidMeasurementResult {
    pub geographical_coordinates: Option<GeographicalCoordinates>,
    pub measured_results_list: Option<ECidMeasuredResultsList>,
}

// ECidMeasuredResultsList
#[derive(Clone)]
pub struct ECidMeasuredResultsList(pub Vec<ECidMeasuredResultsItem>);

// ECidMeasuredResultsItem
#[derive(Clone)]
pub struct ECidMeasuredResultsItem {
    pub e_cid_measured_results_value: ECidMeasuredResultsValue,
}

// ECidMeasuredResultsValue
#[derive(Clone)]
pub enum ECidMeasuredResultsValue {
    ValueAngleofArrivalNr(UlAoA),
}

// ECidReportCharacteristics
#[derive(Clone, Copy)]
pub enum ECidReportCharacteristics {
    OnDemand,
    Periodic,
}

// EgressBhrlcchList
#[derive(Clone)]
pub struct EgressBhrlcchList(pub Vec<EgressBhrlcchItem>);

// EgressBhrlcchItem
#[derive(Clone)]
pub struct EgressBhrlcchItem {
    pub next_hop_bap_address: BapAddress,
    pub bhrlc_channel_id: BhrlcChannelId,
}

// EndpointIpAddressAndPort
#[derive(Clone)]
pub struct EndpointIpAddressAndPort {
    pub endpoint_ip_address: TransportLayerAddress,
}

// ExtendedAvailablePlmnList
#[derive(Clone)]
pub struct ExtendedAvailablePlmnList(pub Vec<ExtendedAvailablePlmnItem>);

// ExtendedAvailablePlmnItem
#[derive(Clone)]
pub struct ExtendedAvailablePlmnItem {
    pub plmn_identity: PlmnIdentity,
}

// ExplicitFormat
#[derive(Clone)]
pub struct ExplicitFormat {
    pub permutation: Permutation,
    pub noof_downlink_symbols: Option<NoofDownlinkSymbols>,
    pub noof_uplink_symbols: Option<NoofUplinkSymbols>,
}

// ExtendedServedPlmnSList
#[derive(Clone)]
pub struct ExtendedServedPlmnSList(pub Vec<ExtendedServedPlmnSItem>);

// ExtendedServedPlmnSItem
#[derive(Clone)]
pub struct ExtendedServedPlmnSItem {
    pub plmn_identity: PlmnIdentity,
    pub tai_slice_support_list: Option<SliceSupportList>,
}

// ExtendedSliceSupportList
#[derive(Clone)]
pub struct ExtendedSliceSupportList(pub Vec<SliceSupportItem>);

// EutraCellsList
#[derive(Clone)]
pub struct EutraCellsList(pub Vec<EutraCellsListItem>);

// EutraCellsListItem
#[derive(Clone)]
pub struct EutraCellsListItem {
    pub eutra_cell_id: EutraCellId,
    pub served_eutra_cells_information: ServedEutraCellsInformation,
}

// EutraCellId
#[derive(Clone)]
pub struct EutraCellId(pub BitString);

// EutraCoexFddInfo
#[derive(Clone)]
pub struct EutraCoexFddInfo {
    pub ul_earfcn: Option<ExtendedEarfcn>,
    pub dl_earfcn: ExtendedEarfcn,
    pub ul_transmission_bandwidth: Option<EutraTransmissionBandwidth>,
    pub dl_transmission_bandwidth: EutraTransmissionBandwidth,
}

// EutraCoexModeInfo
#[derive(Clone)]
pub enum EutraCoexModeInfo {
    Fdd(EutraCoexFddInfo),
    Tdd(EutraCoexTddInfo),
}

// EutraCoexTddInfo
#[derive(Clone)]
pub struct EutraCoexTddInfo {
    pub earfcn: ExtendedEarfcn,
    pub transmission_bandwidth: EutraTransmissionBandwidth,
    pub subframe_assignment: EutraSubframeAssignment,
    pub special_subframe_info: EutraSpecialSubframeInfo,
}

// EutraCyclicPrefixDl
#[derive(Clone, Copy)]
pub enum EutraCyclicPrefixDl {
    Normal,
    Extended,
}

// EutraCyclicPrefixUl
#[derive(Clone, Copy)]
pub enum EutraCyclicPrefixUl {
    Normal,
    Extended,
}

// EutraPrachConfiguration
#[derive(Clone)]
pub struct EutraPrachConfiguration {
    pub root_sequence_index: u16,
    pub zero_correlation_index: u8,
    pub high_speed_flag: bool,
    pub prach_freq_offset: u8,
    pub prach_config_index: Option<u8>,
}

// EutraSpecialSubframeInfo
#[derive(Clone)]
pub struct EutraSpecialSubframeInfo {
    pub special_subframe_patterns: EutraSpecialSubframePatterns,
    pub cyclic_prefix_dl: EutraCyclicPrefixDl,
    pub cyclic_prefix_ul: EutraCyclicPrefixUl,
}

// EutraSpecialSubframePatterns
#[derive(Clone, Copy)]
pub enum EutraSpecialSubframePatterns {
    Ssp0,
    Ssp1,
    Ssp2,
    Ssp3,
    Ssp4,
    Ssp5,
    Ssp6,
    Ssp7,
    Ssp8,
    Ssp9,
    Ssp10,
}

// EutraSubframeAssignment
#[derive(Clone, Copy)]
pub enum EutraSubframeAssignment {
    Sa0,
    Sa1,
    Sa2,
    Sa3,
    Sa4,
    Sa5,
    Sa6,
}

// EutraTransmissionBandwidth
#[derive(Clone, Copy)]
pub enum EutraTransmissionBandwidth {
    Bw6,
    Bw15,
    Bw25,
    Bw50,
    Bw75,
    Bw100,
}

// EutranQos
#[derive(Clone)]
pub struct EutranQos {
    pub qci: Qci,
    pub allocation_and_retention_priority: AllocationAndRetentionPriority,
    pub gbr_qos_information: Option<GbrQosInformation>,
}

// ExecuteDuplication
#[derive(Clone, Copy)]
pub enum ExecuteDuplication {
    True,
}

// ExtendedEarfcn
#[derive(Clone)]
pub struct ExtendedEarfcn(pub u32);

// EutraModeInfo
#[derive(Clone)]
pub enum EutraModeInfo {
    Eutrafdd(EutraFddInfo),
    Eutratdd(EutraTddInfo),
}

// EutraNrCellResourceCoordinationReqContainer
#[derive(Clone)]
pub struct EutraNrCellResourceCoordinationReqContainer(pub Vec<u8>);

// EutraNrCellResourceCoordinationReqAckContainer
#[derive(Clone)]
pub struct EutraNrCellResourceCoordinationReqAckContainer(pub Vec<u8>);

// EutraFddInfo
#[derive(Clone)]
pub struct EutraFddInfo {
    pub ul_offset_to_point_a: OffsetToPointA,
    pub dl_offset_to_point_a: OffsetToPointA,
}

// EutraTddInfo
#[derive(Clone)]
pub struct EutraTddInfo {
    pub offset_to_point_a: OffsetToPointA,
}

// EventType
#[derive(Clone, Copy)]
pub enum EventType {
    OnDemand,
    Periodic,
    Stop,
}

// ExtendedPacketDelayBudget
#[derive(Clone)]
pub struct ExtendedPacketDelayBudget(pub u16);

// F1cPathNsa
#[derive(Clone, Copy)]
pub enum F1cPathNsa {
    Lte,
    Nr,
    Both,
}

// F1cTransferPath
#[derive(Clone)]
pub struct F1cTransferPath {
    pub f1c_path_nsa: F1cPathNsa,
}

// FddInfo
#[derive(Clone)]
pub struct FddInfo {
    pub ul_nr_freq_info: NrFreqInfo,
    pub dl_nr_freq_info: NrFreqInfo,
    pub ul_transmission_bandwidth: TransmissionBandwidth,
    pub dl_transmission_bandwidth: TransmissionBandwidth,
}

// FlowsMappedToDrbList
#[derive(Clone)]
pub struct FlowsMappedToDrbList(pub Vec<FlowsMappedToDrbItem>);

// FlowsMappedToDrbItem
#[derive(Clone)]
pub struct FlowsMappedToDrbItem {
    pub qos_flow_identifier: QosFlowIdentifier,
    pub qos_flow_level_qos_parameters: QosFlowLevelQosParameters,
}

// Fr1Bandwidth
#[derive(Clone, Copy)]
pub enum Fr1Bandwidth {
    Bw5,
    Bw10,
    Bw20,
    Bw40,
    Bw50,
    Bw80,
    Bw100,
}

// Fr2Bandwidth
#[derive(Clone, Copy)]
pub enum Fr2Bandwidth {
    Bw50,
    Bw100,
    Bw200,
    Bw400,
}

// FreqBandNrItem
#[derive(Clone)]
pub struct FreqBandNrItem {
    pub freq_band_indicator_nr: u16,
    pub supported_sul_band_list: Vec<SupportedSulFreqBandItem>,
}

// FreqDomainLength
#[derive(Clone)]
pub enum FreqDomainLength {
    L839(L839Info),
    L139(L139Info),
}

// FrequencyShift7p5khz
#[derive(Clone, Copy)]
pub enum FrequencyShift7p5khz {
    False,
    True,
}

// FullConfiguration
#[derive(Clone, Copy)]
pub enum FullConfiguration {
    Full,
}

// FlowsMappedToSldrbList
#[derive(Clone)]
pub struct FlowsMappedToSldrbList(pub Vec<FlowsMappedToSldrbItem>);

// FlowsMappedToSldrbItem
#[derive(Clone)]
pub struct FlowsMappedToSldrbItem {
    pub pc_5_qos_flow_identifier: Pc5QosFlowIdentifier,
}

// GbrQosInformation
#[derive(Clone)]
pub struct GbrQosInformation {
    pub e_rab_maximum_bitrate_dl: BitRate,
    pub e_rab_maximum_bitrate_ul: BitRate,
    pub e_rab_guaranteed_bitrate_dl: BitRate,
    pub e_rab_guaranteed_bitrate_ul: BitRate,
}

// GbrQosFlowInformation
#[derive(Clone)]
pub struct GbrQosFlowInformation {
    pub max_flow_bit_rate_downlink: BitRate,
    pub max_flow_bit_rate_uplink: BitRate,
    pub guaranteed_flow_bit_rate_downlink: BitRate,
    pub guaranteed_flow_bit_rate_uplink: BitRate,
    pub max_packet_loss_rate_downlink: Option<MaxPacketLossRate>,
    pub max_packet_loss_rate_uplink: Option<MaxPacketLossRate>,
}

// CgConfig
#[derive(Clone)]
pub struct CgConfig(pub Vec<u8>);

// GeographicalCoordinates
#[derive(Clone)]
pub struct GeographicalCoordinates {
    pub trp_position_definition_type: TrpPositionDefinitionType,
    pub dlprs_resource_coordinates: Option<DlprsResourceCoordinates>,
}

// GnbCuMeasurementId
#[derive(Clone)]
pub struct GnbCuMeasurementId(pub u16);

// GnbDuMeasurementId
#[derive(Clone)]
pub struct GnbDuMeasurementId(pub u16);

// GnbCuSystemInformation
#[derive(Clone)]
pub struct GnbCuSystemInformation {
    pub sibtypetobeupdatedlist: Vec<SibtypetobeupdatedListItem>,
}

// GnbCuTnlAssociationSetupItem
#[derive(Clone)]
pub struct GnbCuTnlAssociationSetupItem {
    pub tnl_association_transport_layer_address: CpTransportLayerAddress,
}

// GnbCuTnlAssociationFailedToSetupItem
#[derive(Clone)]
pub struct GnbCuTnlAssociationFailedToSetupItem {
    pub tnl_association_transport_layer_address: CpTransportLayerAddress,
    pub cause: Cause,
}

// GnbCuTnlAssociationToAddItem
#[derive(Clone)]
pub struct GnbCuTnlAssociationToAddItem {
    pub tnl_association_transport_layer_address: CpTransportLayerAddress,
    pub tnl_association_usage: TnlAssociationUsage,
}

// GnbCuTnlAssociationToRemoveItem
#[derive(Clone)]
pub struct GnbCuTnlAssociationToRemoveItem {
    pub tnl_association_transport_layer_address: CpTransportLayerAddress,
}

// GnbCuTnlAssociationToUpdateItem
#[derive(Clone)]
pub struct GnbCuTnlAssociationToUpdateItem {
    pub tnl_association_transport_layer_address: CpTransportLayerAddress,
    pub tnl_association_usage: Option<TnlAssociationUsage>,
}

// GnbCuUeF1apId
#[derive(Clone)]
pub struct GnbCuUeF1apId(pub u64);

// GnbDuCellResourceConfiguration
#[derive(Clone)]
pub struct GnbDuCellResourceConfiguration {
    pub subcarrier_spacing: SubcarrierSpacing,
    pub duf_transmission_periodicity: Option<DufTransmissionPeriodicity>,
    pub duf_slot_config_list: Option<DufSlotConfigList>,
    pub hsna_transmission_periodicity: HsnaTransmissionPeriodicity,
    pub hnsa_slot_config_list: Option<HsnaSlotConfigList>,
}

// GnbDuUeF1apId
#[derive(Clone)]
pub struct GnbDuUeF1apId(pub u64);

// GnbDuId
#[derive(Clone)]
pub struct GnbDuId(pub u64);

// GnbCuName
#[derive(Clone)]
pub struct GnbCuName(pub String);

// GnbDuName
#[derive(Clone)]
pub struct GnbDuName(pub String);

// ExtendedGnbCuName
#[derive(Clone)]
pub struct ExtendedGnbCuName {
    pub gnb_cu_name_visible_string: Option<GnbCuNameVisibleString>,
    pub gnb_cu_name_utf8_string: Option<GnbCuNameUtf8String>,
}

// GnbCuNameVisibleString
#[derive(Clone)]
pub struct GnbCuNameVisibleString(pub String);

// GnbCuNameUtf8String
#[derive(Clone)]
pub struct GnbCuNameUtf8String(pub String);

// ExtendedGnbDuName
#[derive(Clone)]
pub struct ExtendedGnbDuName {
    pub gnb_du_name_visible_string: Option<GnbDuNameVisibleString>,
    pub gnb_du_name_utf8_string: Option<GnbDuNameUtf8String>,
}

// GnbDuNameVisibleString
#[derive(Clone)]
pub struct GnbDuNameVisibleString(pub String);

// GnbDuNameUtf8String
#[derive(Clone)]
pub struct GnbDuNameUtf8String(pub String);

// GnbDuServedCellsItem
#[derive(Clone)]
pub struct GnbDuServedCellsItem {
    pub served_cell_information: ServedCellInformation,
    pub gnb_du_system_information: Option<GnbDuSystemInformation>,
}

// GnbDuSystemInformation
#[derive(Clone)]
pub struct GnbDuSystemInformation {
    pub mib_message: MibMessage,
    pub sib1_message: Sib1Message,
}

// GnbDuConfigurationQuery
#[derive(Clone, Copy)]
pub enum GnbDuConfigurationQuery {
    True,
}

// GnbDuOverloadInformation
#[derive(Clone, Copy)]
pub enum GnbDuOverloadInformation {
    Overloaded,
    NotOverloaded,
}

// GnbDuTnlAssociationToRemoveItem
#[derive(Clone)]
pub struct GnbDuTnlAssociationToRemoveItem {
    pub tnl_association_transport_layer_address: CpTransportLayerAddress,
    pub tnl_association_transport_layer_address_gnb_cu: Option<CpTransportLayerAddress>,
}

// GnbRxTxTimeDiff
#[derive(Clone)]
pub struct GnbRxTxTimeDiff {
    pub rx_tx_time_diff: GnbRxTxTimeDiffMeas,
    pub additional_path_list: Option<AdditionalPathList>,
}

// GnbRxTxTimeDiffMeas
#[derive(Clone)]
pub enum GnbRxTxTimeDiffMeas {
    K0(u32),
    K1(u32),
    K2(u32),
    K3(u32),
    K4(u32),
    K5(u16),
}

// GnbSetId
#[derive(Clone)]
pub struct GnbSetId(pub BitString);

// GtpTeid
#[derive(Clone)]
pub struct GtpTeid(pub Vec<u8>);

// GtptlAs
#[derive(Clone)]
pub struct GtptlAs(pub Vec<GtptlaItem>);

// GtptlaItem
#[derive(Clone)]
pub struct GtptlaItem {
    pub gtp_transport_layer_address: TransportLayerAddress,
}

// GtpTunnel
#[derive(Clone)]
pub struct GtpTunnel {
    pub transport_layer_address: TransportLayerAddress,
    pub gtp_teid: GtpTeid,
}

// HandoverPreparationInformation
#[derive(Clone)]
pub struct HandoverPreparationInformation(pub Vec<u8>);

// HardwareLoadIndicator
#[derive(Clone)]
pub struct HardwareLoadIndicator {
    pub dl_hardware_load_indicator: u8,
    pub ul_hardware_load_indicator: u8,
}

// HsnaSlotConfigList
#[derive(Clone)]
pub struct HsnaSlotConfigList(pub Vec<HsnaSlotConfigItem>);

// HsnaSlotConfigItem
#[derive(Clone)]
pub struct HsnaSlotConfigItem {
    pub hsna_downlink: Option<HsnaDownlink>,
    pub hsna_uplink: Option<HsnaUplink>,
    pub hsna_flexible: Option<HsnaFlexible>,
}

// HsnaDownlink
#[derive(Clone, Copy)]
pub enum HsnaDownlink {
    Hard,
    Soft,
    Notavailable,
}

// HsnaFlexible
#[derive(Clone, Copy)]
pub enum HsnaFlexible {
    Hard,
    Soft,
    Notavailable,
}

// HsnaUplink
#[derive(Clone, Copy)]
pub enum HsnaUplink {
    Hard,
    Soft,
    Notavailable,
}

// HsnaTransmissionPeriodicity
#[derive(Clone, Copy)]
pub enum HsnaTransmissionPeriodicity {
    Ms0p5,
    Ms0p625,
    Ms1,
    Ms1p25,
    Ms2,
    Ms2p5,
    Ms5,
    Ms10,
    Ms20,
    Ms40,
    Ms80,
    Ms160,
}

// IabBarred
#[derive(Clone, Copy)]
pub enum IabBarred {
    Barred,
    NotBarred,
}

// IabInfoIabDonorCu
#[derive(Clone)]
pub struct IabInfoIabDonorCu {
    pub iab_stc_info: Option<IabStcInfo>,
}

// IabInfoIabDu
#[derive(Clone)]
pub struct IabInfoIabDu {
    pub multiplexing_info: Option<MultiplexingInfo>,
    pub iab_stc_info: Option<IabStcInfo>,
}

// IabMtCellList
#[derive(Clone)]
pub struct IabMtCellList(pub Vec<IabMtCellListItem>);

// IabMtCellListItem
#[derive(Clone)]
pub struct IabMtCellListItem {
    pub nr_cell_identity: NrCellIdentity,
    pub du_rx_mt_rx: DuRxMtRx,
    pub du_tx_mt_tx: DuTxMtTx,
    pub du_rx_mt_tx: DuRxMtTx,
    pub du_tx_mt_rx: DuTxMtRx,
}

// IabStcInfo
#[derive(Clone)]
pub struct IabStcInfo {
    pub iab_stc_info_list: IabStcInfoList,
}

// IabStcInfoList
#[derive(Clone)]
pub struct IabStcInfoList(pub Vec<IabStcInfoItem>);

// IabStcInfoItem
#[derive(Clone)]
pub struct IabStcInfoItem {
    pub ssb_freq_info: SsbFreqInfo,
    pub ssb_subcarrier_spacing: SsbSubcarrierSpacing,
    pub ssb_transmission_periodicity: SsbTransmissionPeriodicity,
    pub ssb_transmission_timing_offset: SsbTransmissionTimingOffset,
    pub ssb_transmission_bitmap: SsbTransmissionBitmap,
}

// IabAllocatedTnlAddressItem
#[derive(Clone)]
pub struct IabAllocatedTnlAddressItem {
    pub iabtnl_address: IabtnlAddress,
    pub iabtnl_address_usage: Option<IabtnlAddressUsage>,
}

// IabDuCellResourceConfigurationModeInfo
#[derive(Clone)]
pub enum IabDuCellResourceConfigurationModeInfo {
    Fdd(IabDuCellResourceConfigurationFddInfo),
    Tdd(IabDuCellResourceConfigurationTddInfo),
}

// IabDuCellResourceConfigurationFddInfo
#[derive(Clone)]
pub struct IabDuCellResourceConfigurationFddInfo {
    pub gnb_du_cell_resource_configuration_fdd_ul: GnbDuCellResourceConfiguration,
    pub gnb_du_cell_resource_configuration_fdd_dl: GnbDuCellResourceConfiguration,
}

// IabDuCellResourceConfigurationTddInfo
#[derive(Clone)]
pub struct IabDuCellResourceConfigurationTddInfo {
    pub gnb_du_cell_resourc_configuration_tdd: GnbDuCellResourceConfiguration,
}

// IabiPv6RequestType
#[derive(Clone)]
pub enum IabiPv6RequestType {
    IPv6Address(IabtnlAddressesRequested),
    IPv6Prefix(IabtnlAddressesRequested),
}

// IabtnlAddress
#[derive(Clone)]
pub enum IabtnlAddress {
    IPv4Address(BitString),
    IPv6Address(BitString),
    IPv6Prefix(BitString),
}

// IabtnlAddressesRequested
#[derive(Clone)]
pub struct IabtnlAddressesRequested {
    pub tnl_addresses_or_prefixes_requested_all_traffic: Option<u8>,
    pub tnl_addresses_or_prefixes_requested_f1_c: Option<u8>,
    pub tnl_addresses_or_prefixes_requested_f1_u: Option<u8>,
    pub tnl_addresses_or_prefixes_requested_no_nf1: Option<u8>,
}

// IabTnlAddressesToRemoveItem
#[derive(Clone)]
pub struct IabTnlAddressesToRemoveItem {
    pub iabtnl_address: IabtnlAddress,
}

// IabtnlAddressUsage
#[derive(Clone, Copy)]
pub enum IabtnlAddressUsage {
    F1C,
    F1U,
    NonF1,
}

// IaBv4AddressesRequested
#[derive(Clone)]
pub struct IaBv4AddressesRequested {
    pub ia_bv_4_addresses_requested: IabtnlAddressesRequested,
}

// ImplicitFormat
#[derive(Clone)]
pub struct ImplicitFormat {
    pub duf_slotformat_index: DufSlotformatIndex,
}

// IgnorePrachConfiguration
#[derive(Clone, Copy)]
pub enum IgnorePrachConfiguration {
    True,
}

// IgnoreResourceCoordinationContainer
#[derive(Clone, Copy)]
pub enum IgnoreResourceCoordinationContainer {
    Yes,
}

// InactivityMonitoringRequest
#[derive(Clone, Copy)]
pub enum InactivityMonitoringRequest {
    True,
}

// InactivityMonitoringResponse
#[derive(Clone, Copy)]
pub enum InactivityMonitoringResponse {
    NotSupported,
}

// InterfacesToTrace
#[derive(Clone)]
pub struct InterfacesToTrace(pub BitString);

// IntendedTddDlUlConfig
#[derive(Clone)]
pub struct IntendedTddDlUlConfig {
    pub nrscs: Nrscs1,
    pub nrcp: Nrcp,
    pub nrdlul_tx_periodicity: NrdlulTxPeriodicity,
    pub slot_configuration_list: SlotConfigurationList,
}

// IpHeaderInformation
#[derive(Clone)]
pub struct IpHeaderInformation {
    pub destination_iabtnl_address: IabtnlAddress,
    pub ds_information_list: Option<DsInformationList>,
    pub i_pv_6_flow_label: Option<BitString>,
}

// IPtolayer2TrafficMappingInfo
#[derive(Clone)]
pub struct IPtolayer2TrafficMappingInfo {
    pub i_ptolayer_2_traffic_mapping_info_to_add: Option<IPtolayer2TrafficMappingInfoList>,
    pub i_ptolayer_2_traffic_mapping_info_to_remove: Option<MappingInformationtoRemove>,
}

// IPtolayer2TrafficMappingInfoList
#[derive(Clone)]
pub struct IPtolayer2TrafficMappingInfoList(pub Vec<IPtolayer2TrafficMappingInfoItem>);

// IPtolayer2TrafficMappingInfoItem
#[derive(Clone)]
pub struct IPtolayer2TrafficMappingInfoItem {
    pub mapping_information_index: MappingInformationIndex,
    pub ip_header_information: IpHeaderInformation,
    pub bh_info: BhInfo,
}

// L139Info
#[derive(Clone)]
pub struct L139Info {
    pub msg_1scs: Msg1scs,
    pub root_sequence_index: Option<u8>,
}

// L839Info
#[derive(Clone)]
pub struct L839Info {
    pub root_sequence_index: u16,
    pub restricted_set_config: RestrictedSetConfig,
}

// Lcid
#[derive(Clone)]
pub struct Lcid(pub u8);

// LcsToGcsTranslationAoA
#[derive(Clone)]
pub struct LcsToGcsTranslationAoA {
    pub alpha: u16,
    pub beta: u16,
    pub gamma: u16,
}

// LcStoGcsTranslationList
#[derive(Clone)]
pub struct LcStoGcsTranslationList(pub Vec<LcStoGcsTranslation>);

// LcStoGcsTranslation
#[derive(Clone)]
pub struct LcStoGcsTranslation {
    pub alpha: u16,
    pub alpha_fine: Option<u8>,
    pub beta: u16,
    pub beta_fine: Option<u8>,
    pub gamma: u16,
    pub gamma_fine: Option<u8>,
}

// LmfMeasurementId
#[derive(Clone)]
pub struct LmfMeasurementId(pub u16);

// LmfUeMeasurementId
#[derive(Clone)]
pub struct LmfUeMeasurementId(pub u8);

// LocationUncertainty
#[derive(Clone)]
pub struct LocationUncertainty {
    pub horizontal_uncertainty: u8,
    pub horizontal_confidence: u8,
    pub vertical_uncertainty: u8,
    pub vertical_confidence: u8,
}

// LongDrxCycleLength
#[derive(Clone, Copy)]
pub enum LongDrxCycleLength {
    Ms10,
    Ms20,
    Ms32,
    Ms40,
    Ms60,
    Ms64,
    Ms70,
    Ms80,
    Ms128,
    Ms160,
    Ms256,
    Ms320,
    Ms512,
    Ms640,
    Ms1024,
    Ms1280,
    Ms2048,
    Ms2560,
    Ms5120,
    Ms10240,
}

// LowerLayerPresenceStatusChange
#[derive(Clone, Copy)]
pub enum LowerLayerPresenceStatusChange {
    SuspendLowerLayers,
    ResumeLowerLayers,
}

// LteueSidelinkAggregateMaximumBitrate
#[derive(Clone)]
pub struct LteueSidelinkAggregateMaximumBitrate {
    pub uelte_sidelink_aggregate_maximum_bitrate: BitRate,
}

// Ltev2xServicesAuthorized
#[derive(Clone)]
pub struct Ltev2xServicesAuthorized {
    pub vehicle_ue: Option<VehicleUe>,
    pub pedestrian_ue: Option<PedestrianUe>,
}

// MappingInformationIndex
#[derive(Clone)]
pub struct MappingInformationIndex(pub BitString);

// MappingInformationtoRemove
#[derive(Clone)]
pub struct MappingInformationtoRemove(pub Vec<MappingInformationIndex>);

// MaskedImeisv
#[derive(Clone)]
pub struct MaskedImeisv(pub BitString);

// MaxDataBurstVolume
#[derive(Clone)]
pub struct MaxDataBurstVolume(pub u16);

// MaxPacketLossRate
#[derive(Clone)]
pub struct MaxPacketLossRate(pub u16);

// MibMessage
#[derive(Clone)]
pub struct MibMessage(pub Vec<u8>);

// MeasConfig
#[derive(Clone)]
pub struct MeasConfig(pub Vec<u8>);

// MeasGapConfig
#[derive(Clone)]
pub struct MeasGapConfig(pub Vec<u8>);

// MeasGapSharingConfig
#[derive(Clone)]
pub struct MeasGapSharingConfig(pub Vec<u8>);

// MeasurementBeamInfoRequest
#[derive(Clone, Copy)]
pub enum MeasurementBeamInfoRequest {
    True,
}

// MeasurementBeamInfo
#[derive(Clone)]
pub struct MeasurementBeamInfo {
    pub prs_resource_id: Option<PrsResourceId>,
    pub prs_resource_set_id: Option<PrsResourceSetId>,
    pub ssb_index: Option<SsbIndex>,
}

// MeasurementTimingConfiguration
#[derive(Clone)]
pub struct MeasurementTimingConfiguration(pub Vec<u8>);

// MessageIdentifier
#[derive(Clone)]
pub struct MessageIdentifier(pub BitString);

// MultiplexingInfo
#[derive(Clone)]
pub struct MultiplexingInfo {
    pub iab_mt_cell_list: IabMtCellList,
}

// M2Configuration
#[derive(Clone, Copy)]
pub enum M2Configuration {
    True,
}

// M5Configuration
#[derive(Clone)]
pub struct M5Configuration {
    pub m5period: M5period,
    pub m5_links_to_log: M5LinksToLog,
}

// M5period
#[derive(Clone, Copy)]
pub enum M5period {
    Ms1024,
    Ms2048,
    Ms5120,
    Ms10240,
    Min1,
}

// M5LinksToLog
#[derive(Clone, Copy)]
pub enum M5LinksToLog {
    Uplink,
    Downlink,
    BothUplinkAndDownlink,
}

// M6Configuration
#[derive(Clone)]
pub struct M6Configuration {
    pub m6report_interval: M6reportInterval,
    pub m6_links_to_log: M6LinksToLog,
}

// M6reportInterval
#[derive(Clone, Copy)]
pub enum M6reportInterval {
    Ms120,
    Ms240,
    Ms640,
    Ms1024,
    Ms2048,
    Ms5120,
    Ms10240,
    Ms20480,
    Ms40960,
    Min1,
    Min6,
    Min12,
    Min30,
}

// M6LinksToLog
#[derive(Clone, Copy)]
pub enum M6LinksToLog {
    Uplink,
    Downlink,
    BothUplinkAndDownlink,
}

// M7Configuration
#[derive(Clone)]
pub struct M7Configuration {
    pub m7period: M7period,
    pub m7_links_to_log: M7LinksToLog,
}

// M7period
#[derive(Clone)]
pub struct M7period(pub u8);

// M7LinksToLog
#[derive(Clone, Copy)]
pub enum M7LinksToLog {
    Downlink,
}

// MdtActivation
#[derive(Clone, Copy)]
pub enum MdtActivation {
    ImmediateMdtOnly,
    ImmediateMdtAndTrace,
}

// MdtConfiguration
#[derive(Clone)]
pub struct MdtConfiguration {
    pub mdt_activation: MdtActivation,
    pub measurements_to_activate: MeasurementsToActivate,
    pub m2_configuration: Option<M2Configuration>,
    pub m5_configuration: Option<M5Configuration>,
    pub m6_configuration: Option<M6Configuration>,
    pub m7_configuration: Option<M7Configuration>,
}

// MdtPlmnList
#[derive(Clone)]
pub struct MdtPlmnList(pub Vec<PlmnIdentity>);

// MeasuredResultsValue
#[derive(Clone)]
pub enum MeasuredResultsValue {
    UlAngleOfArrival(UlAoA),
    UlSrsRsrp(UlSrsRsrp),
    UlRtoa(UlRtoaMeasurement),
    GnbRxTxTimeDiff(GnbRxTxTimeDiff),
}

// MeasurementsToActivate
#[derive(Clone)]
pub struct MeasurementsToActivate(pub BitString);

// NeedforGap
#[derive(Clone, Copy)]
pub enum NeedforGap {
    True,
}

// NeighbourCellInformationItem
#[derive(Clone)]
pub struct NeighbourCellInformationItem {
    pub nrcgi: Nrcgi,
    pub intended_tdd_dl_ul_config: Option<IntendedTddDlUlConfig>,
}

// NgranAllocationAndRetentionPriority
#[derive(Clone)]
pub struct NgranAllocationAndRetentionPriority {
    pub priority_level: PriorityLevel,
    pub pre_emption_capability: PreEmptionCapability,
    pub pre_emption_vulnerability: PreEmptionVulnerability,
}

// NgranHighAccuracyAccessPointPosition
#[derive(Clone)]
pub struct NgranHighAccuracyAccessPointPosition {
    pub latitude: u64,
    pub longitude: u64,
    pub altitude: u32,
    pub uncertainty_semi_major: u8,
    pub uncertainty_semi_minor: u8,
    pub orientation_of_major_axis: u8,
    pub horizontal_confidence: u8,
    pub uncertainty_altitude: u8,
    pub vertical_confidence: u8,
}

// Nid
#[derive(Clone)]
pub struct Nid(pub BitString);

// NrCgiListForRestartItem
#[derive(Clone)]
pub struct NrCgiListForRestartItem {
    pub nrcgi: Nrcgi,
}

// NrPrsBeamInformation
#[derive(Clone)]
pub struct NrPrsBeamInformation {
    pub nr_prs_beam_information_list: NrPrsBeamInformationList,
    pub lc_sto_gcs_translation_list: Option<LcStoGcsTranslationList>,
}

// NrPrsBeamInformationList
#[derive(Clone)]
pub struct NrPrsBeamInformationList(pub Vec<NrPrsBeamInformationItem>);

// NrPrsBeamInformationItem
#[derive(Clone)]
pub struct NrPrsBeamInformationItem {
    pub prs_resource_set_id: PrsResourceSetId,
    pub prs_angle_list: PrsAngleList,
}

// NonDynamic5qiDescriptor
#[derive(Clone)]
pub struct NonDynamic5qiDescriptor {
    pub five_qi: u8,
    pub qos_priority_level: Option<u8>,
    pub averaging_window: Option<AveragingWindow>,
    pub max_data_burst_volume: Option<MaxDataBurstVolume>,
}

// NonDynamicPqiDescriptor
#[derive(Clone)]
pub struct NonDynamicPqiDescriptor {
    pub five_qi: u8,
    pub qos_priority_level: Option<u8>,
    pub averaging_window: Option<AveragingWindow>,
    pub max_data_burst_volume: Option<MaxDataBurstVolume>,
}

// NonUpTrafficType
#[derive(Clone, Copy)]
pub enum NonUpTrafficType {
    UeAssociated,
    NonUeAssociated,
    NonF1,
    BapControlPdu,
}

// NoofDownlinkSymbols
#[derive(Clone)]
pub struct NoofDownlinkSymbols(pub u8);

// NoofUplinkSymbols
#[derive(Clone)]
pub struct NoofUplinkSymbols(pub u8);

// NotificationCause
#[derive(Clone, Copy)]
pub enum NotificationCause {
    Fulfilled,
    NotFulfilled,
}

// NotificationControl
#[derive(Clone, Copy)]
pub enum NotificationControl {
    Active,
    NotActive,
}

// NotificationInformation
#[derive(Clone)]
pub struct NotificationInformation {
    pub message_identifier: MessageIdentifier,
    pub serial_number: SerialNumber,
}

// NpnBroadcastInformation
#[derive(Clone)]
pub enum NpnBroadcastInformation {
    SnpnBroadcastInformation(NpnBroadcastInformationSnpn),
    PniNpnBroadcastInformation(NpnBroadcastInformationPniNpn),
}

// NpnBroadcastInformationSnpn
#[derive(Clone)]
pub struct NpnBroadcastInformationSnpn {
    pub broadcast_snpnid_list: BroadcastSnpnIdList,
}

// NpnBroadcastInformationPniNpn
#[derive(Clone)]
pub struct NpnBroadcastInformationPniNpn {
    pub broadcast_pni_npn_id_information: BroadcastPniNpnIdList,
}

// NpnSupportInfo
#[derive(Clone)]
pub enum NpnSupportInfo {
    SnpnInformation(Nid),
}

// NrCarrierList
#[derive(Clone)]
pub struct NrCarrierList(pub Vec<NrCarrierItem>);

// NrCarrierItem
#[derive(Clone)]
pub struct NrCarrierItem {
    pub carrier_scs: Nrscs,
    pub offset_to_carrier: u16,
    pub carrier_bandwidth: u16,
}

// NrFreqInfo
#[derive(Clone)]
pub struct NrFreqInfo {
    pub nrarfcn: u32,
    pub sul_information: Option<SulInformation>,
    pub freq_band_list_nr: Vec<FreqBandNrItem>,
}

// Nrcgi
#[derive(Clone)]
pub struct Nrcgi {
    pub plmn_identity: PlmnIdentity,
    pub nr_cell_identity: NrCellIdentity,
}

// NrModeInfo
#[derive(Clone)]
pub enum NrModeInfo {
    Fdd(FddInfo),
    Tdd(TddInfo),
}

// NrprachConfig
#[derive(Clone)]
pub struct NrprachConfig {
    pub ul_prach_config_list: Option<NrprachConfigList>,
    pub sul_prach_config_list: Option<NrprachConfigList>,
}

// NrCellIdentity
#[derive(Clone)]
pub struct NrCellIdentity(pub BitString);

// Nrnrb
#[derive(Clone, Copy)]
pub enum Nrnrb {
    Nrb11,
    Nrb18,
    Nrb24,
    Nrb25,
    Nrb31,
    Nrb32,
    Nrb38,
    Nrb51,
    Nrb52,
    Nrb65,
    Nrb66,
    Nrb78,
    Nrb79,
    Nrb93,
    Nrb106,
    Nrb107,
    Nrb121,
    Nrb132,
    Nrb133,
    Nrb135,
    Nrb160,
    Nrb162,
    Nrb189,
    Nrb216,
    Nrb217,
    Nrb245,
    Nrb264,
    Nrb270,
    Nrb273,
}

// Nrpci
#[derive(Clone)]
pub struct Nrpci(pub u16);

// NrprachConfigList
#[derive(Clone)]
pub struct NrprachConfigList(pub Vec<NrprachConfigItem>);

// NrprachConfigItem
#[derive(Clone)]
pub struct NrprachConfigItem {
    pub nrscs: Nrscs,
    pub prach_freq_startfrom_carrier: u16,
    pub msg_1fdm: Msg1fdm,
    pub parch_config_index: u8,
    pub ssb_per_rach_occasion: SsbPerRachOccasion,
    pub freq_domain_length: FreqDomainLength,
    pub zero_correl_zone_config: u8,
}

// Nrscs
#[derive(Clone, Copy)]
pub enum Nrscs {
    Scs15,
    Scs30,
    Scs60,
    Scs120,
}

// NrueRlfReportContainer
#[derive(Clone)]
pub struct NrueRlfReportContainer(pub Vec<u8>);

// NumberofActiveUEs
#[derive(Clone)]
pub struct NumberofActiveUEs(pub u32);

// NumberOfBroadcasts
#[derive(Clone)]
pub struct NumberOfBroadcasts(pub u16);

// NumberofBroadcastRequest
#[derive(Clone)]
pub struct NumberofBroadcastRequest(pub u16);

// NumDlulSymbols
#[derive(Clone)]
pub struct NumDlulSymbols {
    pub num_dl_symbols: u8,
    pub num_ul_symbols: u8,
}

// Nrv2xServicesAuthorized
#[derive(Clone)]
pub struct Nrv2xServicesAuthorized {
    pub vehicle_ue: Option<VehicleUe>,
    pub pedestrian_ue: Option<PedestrianUe>,
}

// NrueSidelinkAggregateMaximumBitrate
#[derive(Clone)]
pub struct NrueSidelinkAggregateMaximumBitrate {
    pub uenr_sidelink_aggregate_maximum_bitrate: BitRate,
}

// NzpCsiRsResourceId
#[derive(Clone)]
pub struct NzpCsiRsResourceId(pub u8);

// OffsetToPointA
#[derive(Clone)]
pub struct OffsetToPointA(pub u16);

// PacketDelayBudget
#[derive(Clone)]
pub struct PacketDelayBudget(pub u16);

// PacketErrorRate
#[derive(Clone)]
pub struct PacketErrorRate {
    pub per_scalar: PerScalar,
    pub per_exponent: PerExponent,
}

// PerScalar
#[derive(Clone)]
pub struct PerScalar(pub u8);

// PerExponent
#[derive(Clone)]
pub struct PerExponent(pub u8);

// PagingCellItem
#[derive(Clone)]
pub struct PagingCellItem {
    pub nrcgi: Nrcgi,
}

// PagingDrx
#[derive(Clone, Copy)]
pub enum PagingDrx {
    V32,
    V64,
    V128,
    V256,
}

// PagingIdentity
#[derive(Clone)]
pub enum PagingIdentity {
    RanuePagingIdentity(RanuePagingIdentity),
    CnuePagingIdentity(CnuePagingIdentity),
}

// PagingOrigin
#[derive(Clone, Copy)]
pub enum PagingOrigin {
    Non3gpp,
}

// PagingPriority
#[derive(Clone, Copy)]
pub enum PagingPriority {
    Priolevel1,
    Priolevel2,
    Priolevel3,
    Priolevel4,
    Priolevel5,
    Priolevel6,
    Priolevel7,
    Priolevel8,
}

// RelativePathDelay
#[derive(Clone)]
pub enum RelativePathDelay {
    K0(u16),
    K1(u16),
    K2(u16),
    K3(u16),
    K4(u16),
    K5(u16),
}

// PathlossReferenceInfo
#[derive(Clone)]
pub struct PathlossReferenceInfo {
    pub pathloss_reference_signal: PathlossReferenceSignal,
}

// PathlossReferenceSignal
#[derive(Clone)]
pub enum PathlossReferenceSignal {
    Ssb(Ssb),
    DlPrs(DlPrs),
}

// Pc5QosFlowIdentifier
#[derive(Clone)]
pub struct Pc5QosFlowIdentifier(pub u16);

// Pc5QosCharacteristics
#[derive(Clone)]
pub enum Pc5QosCharacteristics {
    NonDynamicPqi(NonDynamicPqiDescriptor),
    DynamicPqi(DynamicPqiDescriptor),
}

// Pc5QosParameters
#[derive(Clone)]
pub struct Pc5QosParameters {
    pub pc5_qos_characteristics: Pc5QosCharacteristics,
    pub pc5_qos_flow_bit_rates: Option<Pc5FlowBitRates>,
}

// Pc5FlowBitRates
#[derive(Clone)]
pub struct Pc5FlowBitRates {
    pub guaranteed_flow_bit_rate: BitRate,
    pub maximum_flow_bit_rate: BitRate,
}

// PdcchBlindDetectionScg
#[derive(Clone)]
pub struct PdcchBlindDetectionScg(pub Vec<u8>);

// PdcpSn
#[derive(Clone)]
pub struct PdcpSn(pub u16);

// PdcpsnLength
#[derive(Clone, Copy)]
pub enum PdcpsnLength {
    TwelveBits,
    EighteenBits,
}

// PduSessionId
#[derive(Clone)]
pub struct PduSessionId(pub u8);

// ReportingPeriodicityValue
#[derive(Clone)]
pub struct ReportingPeriodicityValue(pub u16);

// Periodicity
#[derive(Clone)]
pub struct Periodicity(pub u32);

// PeriodicitySrs
#[derive(Clone, Copy)]
pub enum PeriodicitySrs {
    Ms0p125,
    Ms0p25,
    Ms0p5,
    Ms0p625,
    Ms1,
    Ms1p25,
    Ms2,
    Ms2p5,
    Ms4,
    Ms5,
    Ms8,
    Ms10,
    Ms16,
    Ms20,
    Ms32,
    Ms40,
    Ms64,
    Ms80,
    Ms160,
    Ms320,
    Ms640,
    Ms1280,
    Ms2560,
    Ms5120,
    Ms10240,
}

// PeriodicityList
#[derive(Clone)]
pub struct PeriodicityList(pub Vec<PeriodicityListItem>);

// PeriodicityListItem
#[derive(Clone)]
pub struct PeriodicityListItem {
    pub periodicity_srs: PeriodicitySrs,
}

// Permutation
#[derive(Clone, Copy)]
pub enum Permutation {
    Dfu,
    Ufd,
}

// PhInfoMcg
#[derive(Clone)]
pub struct PhInfoMcg(pub Vec<u8>);

// PhInfoScg
#[derive(Clone)]
pub struct PhInfoScg(pub Vec<u8>);

// PlmnIdentity
#[derive(Clone)]
pub struct PlmnIdentity(pub Vec<u8>);

// PortNumber
#[derive(Clone)]
pub struct PortNumber(pub BitString);

// PosAssistanceInformation
#[derive(Clone)]
pub struct PosAssistanceInformation(pub Vec<u8>);

// PosAssistanceInformationFailureList
#[derive(Clone)]
pub struct PosAssistanceInformationFailureList(pub Vec<u8>);

// PosBroadcast
#[derive(Clone, Copy)]
pub enum PosBroadcast {
    Start,
    Stop,
}

// PositioningBroadcastCells
#[derive(Clone)]
pub struct PositioningBroadcastCells(pub Vec<Nrcgi>);

// MeasurementPeriodicity
#[derive(Clone, Copy)]
pub enum MeasurementPeriodicity {
    Ms120,
    Ms240,
    Ms480,
    Ms640,
    Ms1024,
    Ms2048,
    Ms5120,
    Ms10240,
    Min1,
    Min6,
    Min12,
    Min30,
}

// PosMeasurementQuantities
#[derive(Clone)]
pub struct PosMeasurementQuantities(pub Vec<PosMeasurementQuantitiesItem>);

// PosMeasurementQuantitiesItem
#[derive(Clone)]
pub struct PosMeasurementQuantitiesItem {
    pub pos_measurement_type: PosMeasurementType,
    pub timing_reporting_granularity_factor: Option<u8>,
}

// PosMeasurementResult
#[derive(Clone)]
pub struct PosMeasurementResult(pub Vec<PosMeasurementResultItem>);

// PosMeasurementResultItem
#[derive(Clone)]
pub struct PosMeasurementResultItem {
    pub measured_results_value: MeasuredResultsValue,
    pub time_stamp: TimeStamp,
    pub measurement_quality: Option<TrpMeasurementQuality>,
    pub measurement_beam_info: Option<MeasurementBeamInfo>,
}

// PosMeasurementResultList
#[derive(Clone)]
pub struct PosMeasurementResultList(pub Vec<PosMeasurementResultListItem>);

// PosMeasurementResultListItem
#[derive(Clone)]
pub struct PosMeasurementResultListItem {
    pub pos_measurement_result: PosMeasurementResult,
    pub trpid: Trpid,
}

// PosMeasurementType
#[derive(Clone, Copy)]
pub enum PosMeasurementType {
    GnbRxTx,
    UlSrsRsrp,
    UlAoa,
    UlRtoa,
}

// PosReportCharacteristics
#[derive(Clone, Copy)]
pub enum PosReportCharacteristics {
    Ondemand,
    Periodic,
}

// PosResourceSetType
#[derive(Clone)]
pub enum PosResourceSetType {
    Periodic(PosResourceSetTypePr),
    SemiPersistent(PosResourceSetTypeSp),
    Aperiodic(PosResourceSetTypeAp),
}

// PosResourceSetTypePr
#[derive(Clone)]
pub struct PosResourceSetTypePr {
    pub posperiodic_set: PosperiodicSet,
}

// PosResourceSetTypeSp
#[derive(Clone)]
pub struct PosResourceSetTypeSp {
    pub possemi_persistent_set: PossemiPersistentSet,
}

// PosResourceSetTypeAp
#[derive(Clone)]
pub struct PosResourceSetTypeAp {
    pub srs_resource_trigger_list: u8,
}

// PosSrsResourceIdList
#[derive(Clone)]
pub struct PosSrsResourceIdList(pub Vec<SrsPosResourceId>);

// PosSrsResourceItem
#[derive(Clone)]
pub struct PosSrsResourceItem {
    pub srs_pos_resource_id: SrsPosResourceId,
    pub transmission_comb_pos: TransmissionCombPos,
    pub start_position: u8,
    pub nrof_symbols: NrofSymbols,
    pub freq_domain_shift: u16,
    pub c_srs: u8,
    pub group_or_sequence_hopping: GroupOrSequenceHopping,
    pub resource_type_pos: ResourceTypePos,
    pub sequence_id: u16,
    pub spatial_relation_pos: Option<SpatialRelationPos>,
}

// PosSrsResourceList
#[derive(Clone)]
pub struct PosSrsResourceList(pub Vec<PosSrsResourceItem>);

// PosSrsResourceSetItem
#[derive(Clone)]
pub struct PosSrsResourceSetItem {
    pub possrs_resource_set_id: u8,
    pub poss_rs_resource_id_list: PosSrsResourceIdList,
    pub posresource_set_type: PosResourceSetType,
}

// PosSrsResourceSetList
#[derive(Clone)]
pub struct PosSrsResourceSetList(pub Vec<PosSrsResourceSetItem>);

// PrimaryPathIndication
#[derive(Clone, Copy)]
pub enum PrimaryPathIndication {
    True,
    False,
}

// PreEmptionCapability
#[derive(Clone, Copy)]
pub enum PreEmptionCapability {
    ShallNotTriggerPreEmption,
    MayTriggerPreEmption,
}

// PreEmptionVulnerability
#[derive(Clone, Copy)]
pub enum PreEmptionVulnerability {
    NotPreEmptable,
    PreEmptable,
}

// PriorityLevel
#[derive(Clone)]
pub struct PriorityLevel(pub u8);

// ProtectedEutraResourceIndication
#[derive(Clone)]
pub struct ProtectedEutraResourceIndication(pub Vec<u8>);

// ProtectedEutraResourcesItem
#[derive(Clone)]
pub struct ProtectedEutraResourcesItem {
    pub spectrum_sharing_group_id: SpectrumSharingGroupId,
    pub eutra_cells_list: EutraCellsList,
}

// PrsConfiguration
#[derive(Clone)]
pub struct PrsConfiguration {
    pub prs_resource_set_list: PrsResourceSetList,
}

// PrsInformationPos
#[derive(Clone)]
pub struct PrsInformationPos {
    pub prs_id_pos: u8,
    pub prs_resource_set_id_pos: u8,
    pub prs_resource_id_pos: Option<u8>,
}

// PotentialSpCellItem
#[derive(Clone)]
pub struct PotentialSpCellItem {
    pub potential_sp_cell_id: Nrcgi,
}

// PrsAngleList
#[derive(Clone)]
pub struct PrsAngleList(pub Vec<PrsAngleItem>);

// PrsAngleItem
#[derive(Clone)]
pub struct PrsAngleItem {
    pub nr_prs_azimuth: u16,
    pub nr_prs_azimuth_fine: u8,
    pub nr_prs_elevation: u8,
    pub nr_prs_elevation_fine: u8,
}

// PrsMuting
#[derive(Clone)]
pub struct PrsMuting {
    pub prs_muting_option_1: PrsMutingOption1,
    pub prs_muting_option_2: PrsMutingOption2,
}

// PrsMutingOption1
#[derive(Clone)]
pub struct PrsMutingOption1 {
    pub muting_pattern: DlPrsMutingPattern,
    pub muting_bit_repetition_factor: MutingBitRepetitionFactor,
}

// PrsMutingOption2
#[derive(Clone)]
pub struct PrsMutingOption2 {
    pub muting_pattern: DlPrsMutingPattern,
}

// PrsResourceId
#[derive(Clone)]
pub struct PrsResourceId(pub u8);

// PrsResourceList
#[derive(Clone)]
pub struct PrsResourceList(pub Vec<PrsResourceItem>);

// PrsResourceItem
#[derive(Clone)]
pub struct PrsResourceItem {
    pub prs_resource_id: PrsResourceId,
    pub sequence_id: u16,
    pub re_offset: u8,
    pub resource_slot_offset: u16,
    pub resource_symbol_offset: u8,
    pub qcl_info: Option<PrsResourceQclInfo>,
}

// PrsResourceQclInfo
#[derive(Clone)]
pub enum PrsResourceQclInfo {
    QclSourceSsb(PrsResourceQclSourceSsb),
    QclSourcePrs(PrsResourceQclSourcePrs),
}

// PrsResourceQclSourceSsb
#[derive(Clone)]
pub struct PrsResourceQclSourceSsb {
    pub pci_nr: u16,
    pub ssb_index: Option<SsbIndex>,
}

// PrsResourceQclSourcePrs
#[derive(Clone)]
pub struct PrsResourceQclSourcePrs {
    pub qcl_source_prs_resource_set_id: PrsResourceSetId,
    pub qcl_source_prs_resource_id: Option<PrsResourceId>,
}

// PrsResourceSetId
#[derive(Clone)]
pub struct PrsResourceSetId(pub u8);

// PrsResourceSetList
#[derive(Clone)]
pub struct PrsResourceSetList(pub Vec<PrsResourceSetItem>);

// PrsResourceSetItem
#[derive(Clone)]
pub struct PrsResourceSetItem {
    pub prs_resource_set_id: PrsResourceSetId,
    pub subcarrier_spacing: SubcarrierSpacing2,
    pub pr_sbandwidth: u8,
    pub start_prb: u16,
    pub point_a: u32,
    pub comb_size: CombSize,
    pub cp_type: CpType,
    pub resource_set_periodicity: ResourceSetPeriodicity,
    pub resource_set_slot_offset: u32,
    pub resource_repetition_factor: ResourceRepetitionFactor,
    pub resource_time_gap: ResourceTimeGap,
    pub resource_numberof_symbols: ResourceNumberofSymbols,
    pub prs_muting: Option<PrsMuting>,
    pub prs_resource_transmit_power: u8,
    pub prs_resource_list: PrsResourceList,
}

// PwsFailedNrCgiItem
#[derive(Clone)]
pub struct PwsFailedNrCgiItem {
    pub nrcgi: Nrcgi,
    pub number_of_broadcasts: NumberOfBroadcasts,
}

// PwsSystemInformation
#[derive(Clone)]
pub struct PwsSystemInformation {
    pub si_btype: SibTypePws,
    pub si_bmessage: Vec<u8>,
}

// PrivacyIndicator
#[derive(Clone, Copy)]
pub enum PrivacyIndicator {
    ImmediateMdt,
    LoggedMdt,
}

// Qci
#[derive(Clone)]
pub struct Qci(pub u8);

// QosCharacteristics
#[derive(Clone)]
pub enum QosCharacteristics {
    NonDynamic5qi(NonDynamic5qiDescriptor),
    Dynamic5qi(Dynamic5qiDescriptor),
}

// QosFlowIdentifier
#[derive(Clone)]
pub struct QosFlowIdentifier(pub u8);

// QosFlowLevelQosParameters
#[derive(Clone)]
pub struct QosFlowLevelQosParameters {
    pub qos_characteristics: QosCharacteristics,
    pub ngran_allocation_retention_priority: NgranAllocationAndRetentionPriority,
    pub gbr_qos_flow_information: Option<GbrQosFlowInformation>,
    pub reflective_qos_attribute: Option<ReflectiveQosAttribute>,
}

// QosFlowMappingIndication
#[derive(Clone, Copy)]
pub enum QosFlowMappingIndication {
    Ul,
    Dl,
}

// QosInformation
#[derive(Clone)]
pub enum QosInformation {
    EutranQos(EutranQos),
}

// QosMonitoringRequest
#[derive(Clone, Copy)]
pub enum QosMonitoringRequest {
    Ul,
    Dl,
    Both,
}

// QosParaSetIndex
#[derive(Clone)]
pub struct QosParaSetIndex(pub u8);

// QosParaSetNotifyIndex
#[derive(Clone)]
pub struct QosParaSetNotifyIndex(pub u8);

// RachConfigCommon
#[derive(Clone)]
pub struct RachConfigCommon(pub Vec<u8>);

// RachConfigCommonIab
#[derive(Clone)]
pub struct RachConfigCommonIab(pub Vec<u8>);

// RachReportContainer
#[derive(Clone)]
pub struct RachReportContainer(pub Vec<u8>);

// RachReportInformationList
#[derive(Clone)]
pub struct RachReportInformationList(pub Vec<RachReportInformationItem>);

// RachReportInformationItem
#[derive(Clone)]
pub struct RachReportInformationItem {
    pub rach_report_container: RachReportContainer,
    pub ue_assitant_identifier: Option<GnbDuUeF1apId>,
}

// RadioResourceStatus
#[derive(Clone)]
pub struct RadioResourceStatus {
    pub ssb_area_radio_resource_status_list: SsbAreaRadioResourceStatusList,
}

// Ranac
#[derive(Clone)]
pub struct Ranac(pub u8);

// RanMeasurementId
#[derive(Clone)]
pub struct RanMeasurementId(pub u16);

// RanUeMeasurementId
#[derive(Clone)]
pub struct RanUeMeasurementId(pub u8);

// Ranueid
#[derive(Clone)]
pub struct Ranueid(pub Vec<u8>);

// RanuePagingIdentity
#[derive(Clone)]
pub struct RanuePagingIdentity {
    pub irnti: BitString,
}

// RatFrequencyPriorityInformation
#[derive(Clone)]
pub enum RatFrequencyPriorityInformation {
    Endc(SubscriberProfileIDforRfp),
    Ngran(RatFrequencySelectionPriority),
}

// RatFrequencySelectionPriority
#[derive(Clone)]
pub struct RatFrequencySelectionPriority(pub u8);

// ReestablishmentIndication
#[derive(Clone, Copy)]
pub enum ReestablishmentIndication {
    Reestablished,
}

// ReferencePoint
#[derive(Clone)]
pub enum ReferencePoint {
    CoordinateId(CoordinateId),
    ReferencePointCoordinate(AccessPointPosition),
    ReferencePointCoordinateHa(NgranHighAccuracyAccessPointPosition),
}

// ReferenceSfn
#[derive(Clone)]
pub struct ReferenceSfn(pub u16);

// ReferenceSignal
#[derive(Clone)]
pub enum ReferenceSignal {
    NzpCsiRs(NzpCsiRsResourceId),
    Ssb(Ssb),
    Srs(SrsResourceId),
    PositioningSrs(SrsPosResourceId),
    DlPrs(DlPrs),
}

// RelativeCartesianLocation
#[derive(Clone)]
pub struct RelativeCartesianLocation {
    pub xy_zunit: XyZunit,
    pub xvalue: u32,
    pub yvalue: u32,
    pub zvalue: u16,
    pub location_uncertainty: LocationUncertainty,
}

// RelativeGeodeticLocation
#[derive(Clone)]
pub struct RelativeGeodeticLocation {
    pub milli_arc_second_units: MilliArcSecondUnits,
    pub height_units: HeightUnits,
    pub delta_latitude: u16,
    pub delta_longitude: u16,
    pub delta_height: u16,
    pub location_uncertainty: LocationUncertainty,
}

// ReferenceTime
#[derive(Clone)]
pub struct ReferenceTime(pub Vec<u8>);

// RegistrationRequest
#[derive(Clone, Copy)]
pub enum RegistrationRequest {
    Start,
    Stop,
    Add,
}

// ReportCharacteristics
#[derive(Clone)]
pub struct ReportCharacteristics(pub BitString);

// ReportingPeriodicity
#[derive(Clone, Copy)]
pub enum ReportingPeriodicity {
    Ms500,
    Ms1000,
    Ms2000,
    Ms5000,
    Ms10000,
}

// RequestedBandCombinationIndex
#[derive(Clone)]
pub struct RequestedBandCombinationIndex(pub Vec<u8>);

// RequestedFeatureSetEntryIndex
#[derive(Clone)]
pub struct RequestedFeatureSetEntryIndex(pub Vec<u8>);

// RequestedPMaxFr2
#[derive(Clone)]
pub struct RequestedPMaxFr2(pub Vec<u8>);

// RequestedPdcchBlindDetectionScg
#[derive(Clone)]
pub struct RequestedPdcchBlindDetectionScg(pub Vec<u8>);

// RequestedSrsTransmissionCharacteristics
#[derive(Clone)]
pub struct RequestedSrsTransmissionCharacteristics {
    pub number_of_transmissions: Option<u16>,
    pub resource_type: ResourceType2,
    pub bandwidth_srs: BandwidthSrs,
    pub srs_resource_set_list: Option<SrsResourceSetList>,
    pub ssb_information: Option<SsbInformation>,
}

// RequestType
#[derive(Clone, Copy)]
pub enum RequestType {
    Offer,
    Execution,
}

// ResourceCoordinationEutraCellInfo
#[derive(Clone)]
pub struct ResourceCoordinationEutraCellInfo {
    pub eutra_mode_info: EutraCoexModeInfo,
    pub eutra_prach_configuration: EutraPrachConfiguration,
}

// ResourceCoordinationTransferInformation
#[derive(Clone)]
pub struct ResourceCoordinationTransferInformation {
    pub m_enb_cell_id: EutraCellId,
    pub resource_coordination_eutra_cell_info: Option<ResourceCoordinationEutraCellInfo>,
}

// ResourceCoordinationTransferContainer
#[derive(Clone)]
pub struct ResourceCoordinationTransferContainer(pub Vec<u8>);

// ResourceSetType
#[derive(Clone)]
pub enum ResourceSetType {
    Periodic(ResourceSetTypePeriodic),
    SemiPersistent(ResourceSetTypeSemiPersistent),
    Aperiodic(ResourceSetTypeAperiodic),
}

// ResourceSetTypePeriodic
#[derive(Clone)]
pub struct ResourceSetTypePeriodic {
    pub periodic_set: PeriodicSet,
}

// ResourceSetTypeSemiPersistent
#[derive(Clone)]
pub struct ResourceSetTypeSemiPersistent {
    pub semi_persistent_set: SemiPersistentSet,
}

// ResourceSetTypeAperiodic
#[derive(Clone)]
pub struct ResourceSetTypeAperiodic {
    pub srs_resource_trigger_list: u8,
    pub slotoffset: u8,
}

// RepetitionPeriod
#[derive(Clone)]
pub struct RepetitionPeriod(pub u32);

// ReportingRequestType
#[derive(Clone)]
pub struct ReportingRequestType {
    pub event_type: EventType,
    pub reporting_periodicity_value: Option<ReportingPeriodicityValue>,
}

// ResourceType
#[derive(Clone)]
pub enum ResourceType {
    Periodic(ResourceTypePeriodic),
    SemiPersistent(ResourceTypeSemiPersistent),
    Aperiodic(ResourceTypeAperiodic),
}

// ResourceTypePeriodic
#[derive(Clone)]
pub struct ResourceTypePeriodic {
    pub periodicity: Periodicity1,
    pub offset: u16,
}

// ResourceTypeSemiPersistent
#[derive(Clone)]
pub struct ResourceTypeSemiPersistent {
    pub periodicity: Periodicity2,
    pub offset: u16,
}

// ResourceTypeAperiodic
#[derive(Clone)]
pub struct ResourceTypeAperiodic {
    pub aperiodic_resource_type: AperiodicResourceType,
}

// ResourceTypePos
#[derive(Clone)]
pub enum ResourceTypePos {
    Periodic(ResourceTypePeriodicPos),
    SemiPersistent(ResourceTypeSemiPersistentPos),
    Aperiodic(ResourceTypeAperiodicPos),
}

// ResourceTypePeriodicPos
#[derive(Clone)]
pub struct ResourceTypePeriodicPos {
    pub periodicity: Periodicity3,
    pub offset: u32,
}

// ResourceTypeSemiPersistentPos
#[derive(Clone)]
pub struct ResourceTypeSemiPersistentPos {
    pub periodicity: Periodicity4,
    pub offset: u32,
}

// ResourceTypeAperiodicPos
#[derive(Clone)]
pub struct ResourceTypeAperiodicPos {
    pub slot_offset: u8,
}

// RlcDuplicationInformation
#[derive(Clone)]
pub struct RlcDuplicationInformation {
    pub rlc_duplication_state_list: RlcDuplicationStateList,
    pub primary_path_indication: Option<PrimaryPathIndication>,
}

// RlcDuplicationStateList
#[derive(Clone)]
pub struct RlcDuplicationStateList(pub Vec<RlcDuplicationStateItem>);

// RlcDuplicationStateItem
#[derive(Clone)]
pub struct RlcDuplicationStateItem {
    pub duplication_state: DuplicationState,
}

// RlcFailureIndication
#[derive(Clone)]
pub struct RlcFailureIndication {
    pub assocated_lcid: Lcid,
}

// RlcMode
#[derive(Clone, Copy)]
pub enum RlcMode {
    RlcAm,
    RlcUmBidirectional,
    RlcUmUnidirectionalUl,
    RlcUmUnidirectionalDl,
}

// RlcStatus
#[derive(Clone)]
pub struct RlcStatus {
    pub reestablishment_indication: ReestablishmentIndication,
}

// RlfReportInformationList
#[derive(Clone)]
pub struct RlfReportInformationList(pub Vec<RlfReportInformationItem>);

// RlfReportInformationItem
#[derive(Clone)]
pub struct RlfReportInformationItem {
    pub nrue_rlf_report_container: NrueRlfReportContainer,
    pub ue_assitant_identifier: Option<GnbDuUeF1apId>,
}

// RimrsDetectionStatus
#[derive(Clone, Copy)]
pub enum RimrsDetectionStatus {
    RsDetected,
    RsDisappeared,
}

// RrcContainer
#[derive(Clone)]
pub struct RrcContainer(pub Vec<u8>);

// RrcContainerRrcSetupComplete
#[derive(Clone)]
pub struct RrcContainerRrcSetupComplete(pub Vec<u8>);

// RrcDeliveryStatus
#[derive(Clone)]
pub struct RrcDeliveryStatus {
    pub delivery_status: PdcpSn,
    pub triggering_message: PdcpSn,
}

// RrcDeliveryStatusRequest
#[derive(Clone, Copy)]
pub enum RrcDeliveryStatusRequest {
    True,
}

// RrcReconfigurationCompleteIndicator
#[derive(Clone, Copy)]
pub enum RrcReconfigurationCompleteIndicator {
    True,
}

// RrcVersion
#[derive(Clone)]
pub struct RrcVersion {
    pub latest_rrc_version: BitString,
}

// RoutingId
#[derive(Clone)]
pub struct RoutingId(pub Vec<u8>);

// SCellFailedtoSetupItem
#[derive(Clone)]
pub struct SCellFailedtoSetupItem {
    pub s_cell_id: Nrcgi,
    pub cause: Option<Cause>,
}

// SCellFailedtoSetupModItem
#[derive(Clone)]
pub struct SCellFailedtoSetupModItem {
    pub s_cell_id: Nrcgi,
    pub cause: Option<Cause>,
}

// SCellToBeRemovedItem
#[derive(Clone)]
pub struct SCellToBeRemovedItem {
    pub s_cell_id: Nrcgi,
}

// SCellToBeSetupItem
#[derive(Clone)]
pub struct SCellToBeSetupItem {
    pub s_cell_id: Nrcgi,
    pub s_cell_index: SCellIndex,
    pub s_cell_ul_configured: Option<CellUlConfigured>,
}

// SCellToBeSetupModItem
#[derive(Clone)]
pub struct SCellToBeSetupModItem {
    pub s_cell_id: Nrcgi,
    pub s_cell_index: SCellIndex,
    pub s_cell_ul_configured: Option<CellUlConfigured>,
}

// SCellIndex
#[derive(Clone)]
pub struct SCellIndex(pub u8);

// ScgIndicator
#[derive(Clone, Copy)]
pub enum ScgIndicator {
    Released,
}

// ScsSpecificCarrier
#[derive(Clone)]
pub struct ScsSpecificCarrier {
    pub offset_to_carrier: u16,
    pub subcarrier_spacing: SubcarrierSpacing3,
    pub carrier_bandwidth: u16,
}

// SearchWindowInformation
#[derive(Clone)]
pub struct SearchWindowInformation {
    pub expected_propagation_delay: u16,
    pub delay_uncertainty: u8,
}

// SerialNumber
#[derive(Clone)]
pub struct SerialNumber(pub BitString);

// SibTypePws
#[derive(Clone)]
pub struct SibTypePws(pub u8);

// SelectedBandCombinationIndex
#[derive(Clone)]
pub struct SelectedBandCombinationIndex(pub Vec<u8>);

// SelectedFeatureSetEntryIndex
#[derive(Clone)]
pub struct SelectedFeatureSetEntryIndex(pub Vec<u8>);

// CgConfigInfo
#[derive(Clone)]
pub struct CgConfigInfo(pub Vec<u8>);

// ServCellIndex
#[derive(Clone)]
pub struct ServCellIndex(pub u8);

// ServingCellMo
#[derive(Clone)]
pub struct ServingCellMo(pub u8);

// ServedCellInformation
#[derive(Clone)]
pub struct ServedCellInformation {
    pub nrcgi: Nrcgi,
    pub nrpci: Nrpci,
    pub five_gs_tac: Option<FiveGsTac>,
    pub configured_eps_tac: Option<ConfiguredEpsTac>,
    pub served_plmn_s: ServedPlmnSList,
    pub nr_mode_info: NrModeInfo,
    pub measurement_timing_configuration: Vec<u8>,
}

// SfnOffset
#[derive(Clone)]
pub struct SfnOffset {
    pub sfn_time_offset: BitString,
}

// ServedCellsToAddItem
#[derive(Clone)]
pub struct ServedCellsToAddItem {
    pub served_cell_information: ServedCellInformation,
    pub gnb_du_system_information: Option<GnbDuSystemInformation>,
}

// ServedCellsToDeleteItem
#[derive(Clone)]
pub struct ServedCellsToDeleteItem {
    pub old_nrcgi: Nrcgi,
}

// ServedCellsToModifyItem
#[derive(Clone)]
pub struct ServedCellsToModifyItem {
    pub old_nrcgi: Nrcgi,
    pub served_cell_information: ServedCellInformation,
    pub gnb_du_system_information: Option<GnbDuSystemInformation>,
}

// ServedEutraCellsInformation
#[derive(Clone)]
pub struct ServedEutraCellsInformation {
    pub eutra_mode_info: EutraModeInfo,
    pub protected_eutra_resource_indication: ProtectedEutraResourceIndication,
}

// ServiceState
#[derive(Clone, Copy)]
pub enum ServiceState {
    InService,
    OutOfService,
}

// ServiceStatus
#[derive(Clone)]
pub struct ServiceStatus {
    pub service_state: ServiceState,
    pub switching_off_ongoing: Option<SwitchingOffOngoing>,
}

// RelativeTime1900
#[derive(Clone)]
pub struct RelativeTime1900(pub BitString);

// ShortDrxCycleLength
#[derive(Clone, Copy)]
pub enum ShortDrxCycleLength {
    Ms2,
    Ms3,
    Ms4,
    Ms5,
    Ms6,
    Ms7,
    Ms8,
    Ms10,
    Ms14,
    Ms16,
    Ms20,
    Ms30,
    Ms32,
    Ms35,
    Ms40,
    Ms64,
    Ms80,
    Ms128,
    Ms160,
    Ms256,
    Ms320,
    Ms512,
    Ms640,
}

// ShortDrxCycleTimer
#[derive(Clone)]
pub struct ShortDrxCycleTimer(pub u8);

// Sib1Message
#[derive(Clone)]
pub struct Sib1Message(pub Vec<u8>);

// Sib10Message
#[derive(Clone)]
pub struct Sib10Message(pub Vec<u8>);

// Sib12Message
#[derive(Clone)]
pub struct Sib12Message(pub Vec<u8>);

// Sib13Message
#[derive(Clone)]
pub struct Sib13Message(pub Vec<u8>);

// Sib14Message
#[derive(Clone)]
pub struct Sib14Message(pub Vec<u8>);

// SItype
#[derive(Clone)]
pub struct SItype(pub u8);

// SItypeList
#[derive(Clone)]
pub struct SItypeList(pub Vec<SItypeItem>);

// SItypeItem
#[derive(Clone)]
pub struct SItypeItem {
    pub s_itype: SItype,
}

// SibtypetobeupdatedListItem
#[derive(Clone)]
pub struct SibtypetobeupdatedListItem {
    pub si_btype: u8,
    pub si_bmessage: Vec<u8>,
    pub value_tag: u8,
}

// Sldrbid
#[derive(Clone)]
pub struct Sldrbid(pub u16);

// SldrbInformation
#[derive(Clone)]
pub struct SldrbInformation {
    pub sldrb_qos: Pc5QosParameters,
    pub flows_mapped_to_sldrb_list: FlowsMappedToSldrbList,
}

// SldrBsFailedToBeModifiedItem
#[derive(Clone)]
pub struct SldrBsFailedToBeModifiedItem {
    pub sldrbid: Sldrbid,
    pub cause: Option<Cause>,
}

// SldrBsFailedToBeSetupItem
#[derive(Clone)]
pub struct SldrBsFailedToBeSetupItem {
    pub sldrbid: Sldrbid,
    pub cause: Option<Cause>,
}

// SldrBsFailedToBeSetupModItem
#[derive(Clone)]
pub struct SldrBsFailedToBeSetupModItem {
    pub sldrbid: Sldrbid,
    pub cause: Option<Cause>,
}

// SldrBsModifiedItem
#[derive(Clone)]
pub struct SldrBsModifiedItem {
    pub sldrbid: Sldrbid,
}

// SldrBsModifiedConfItem
#[derive(Clone)]
pub struct SldrBsModifiedConfItem {
    pub sldrbid: Sldrbid,
}

// SldrBsRequiredToBeModifiedItem
#[derive(Clone)]
pub struct SldrBsRequiredToBeModifiedItem {
    pub sldrbid: Sldrbid,
}

// SldrBsRequiredToBeReleasedItem
#[derive(Clone)]
pub struct SldrBsRequiredToBeReleasedItem {
    pub sldrbid: Sldrbid,
}

// SldrBsSetupItem
#[derive(Clone)]
pub struct SldrBsSetupItem {
    pub sldrbid: Sldrbid,
}

// SldrBsSetupModItem
#[derive(Clone)]
pub struct SldrBsSetupModItem {
    pub sldrbid: Sldrbid,
}

// SldrBsToBeModifiedItem
#[derive(Clone)]
pub struct SldrBsToBeModifiedItem {
    pub sldrbid: Sldrbid,
    pub sldrb_information: Option<SldrbInformation>,
    pub rlc_mode: Option<RlcMode>,
}

// SldrBsToBeReleasedItem
#[derive(Clone)]
pub struct SldrBsToBeReleasedItem {
    pub sldrbid: Sldrbid,
}

// SldrBsToBeSetupItem
#[derive(Clone)]
pub struct SldrBsToBeSetupItem {
    pub sldrbid: Sldrbid,
    pub sldrb_information: SldrbInformation,
    pub rlc_mode: RlcMode,
}

// SldrBsToBeSetupModItem
#[derive(Clone)]
pub struct SldrBsToBeSetupModItem {
    pub sldrbid: Sldrbid,
    pub sldrb_information: SldrbInformation,
    pub rlc_mode: Option<RlcMode>,
}

// SlPhyMacRlcConfig
#[derive(Clone)]
pub struct SlPhyMacRlcConfig(pub Vec<u8>);

// SlConfigDedicatedEutraInfo
#[derive(Clone)]
pub struct SlConfigDedicatedEutraInfo(pub Vec<u8>);

// SliceAvailableCapacity
#[derive(Clone)]
pub struct SliceAvailableCapacity {
    pub slice_available_capacity_list: SliceAvailableCapacityList,
}

// SliceAvailableCapacityList
#[derive(Clone)]
pub struct SliceAvailableCapacityList(pub Vec<SliceAvailableCapacityItem>);

// SliceAvailableCapacityItem
#[derive(Clone)]
pub struct SliceAvailableCapacityItem {
    pub plmn_identity: PlmnIdentity,
    pub snssai_available_capacity_list: SnssaiAvailableCapacityList,
}

// SnssaiAvailableCapacityList
#[derive(Clone)]
pub struct SnssaiAvailableCapacityList(pub Vec<SnssaiAvailableCapacityItem>);

// SnssaiAvailableCapacityItem
#[derive(Clone)]
pub struct SnssaiAvailableCapacityItem {
    pub snssai: Snssai,
    pub slice_available_capacity_value_downlink: Option<u8>,
    pub slice_available_capacity_value_uplink: Option<u8>,
}

// SliceSupportList
#[derive(Clone)]
pub struct SliceSupportList(pub Vec<SliceSupportItem>);

// SliceSupportItem
#[derive(Clone)]
pub struct SliceSupportItem {
    pub snssai: Snssai,
}

// SliceToReportList
#[derive(Clone)]
pub struct SliceToReportList(pub Vec<SliceToReportItem>);

// SliceToReportItem
#[derive(Clone)]
pub struct SliceToReportItem {
    pub plmn_identity: PlmnIdentity,
    pub snssa_ilist: SnssaiList,
}

// SlotNumber
#[derive(Clone)]
pub struct SlotNumber(pub u8);

// SnssaiList
#[derive(Clone)]
pub struct SnssaiList(pub Vec<SnssaiItem>);

// SnssaiItem
#[derive(Clone)]
pub struct SnssaiItem {
    pub snssai: Snssai,
}

// SlotConfigurationList
#[derive(Clone)]
pub struct SlotConfigurationList(pub Vec<SlotConfigurationItem>);

// SlotConfigurationItem
#[derive(Clone)]
pub struct SlotConfigurationItem {
    pub slot_index: u16,
    pub symbol_alloc_in_slot: SymbolAllocInSlot,
}

// Snssai
#[derive(Clone)]
pub struct Snssai {
    pub sst: Vec<u8>,
    pub sd: Option<Vec<u8>>,
}

// SpatialDirectionInformation
#[derive(Clone)]
pub struct SpatialDirectionInformation {
    pub nr_prs_beam_information: NrPrsBeamInformation,
}

// SpatialRelationInfo
#[derive(Clone)]
pub struct SpatialRelationInfo {
    pub spatial_relationfor_resource_id: SpatialRelationforResourceId,
}

// SpatialRelationforResourceId
#[derive(Clone)]
pub struct SpatialRelationforResourceId(pub Vec<SpatialRelationforResourceIdItem>);

// SpatialRelationforResourceIdItem
#[derive(Clone)]
pub struct SpatialRelationforResourceIdItem {
    pub reference_signal: ReferenceSignal,
}

// SpatialRelationPos
#[derive(Clone)]
pub enum SpatialRelationPos {
    SsbPos(Ssb),
    PrsInformationPos(PrsInformationPos),
}

// SpectrumSharingGroupId
#[derive(Clone)]
pub struct SpectrumSharingGroupId(pub u8);

// Srbid
#[derive(Clone)]
pub struct Srbid(pub u8);

// SrBsFailedToBeSetupItem
#[derive(Clone)]
pub struct SrBsFailedToBeSetupItem {
    pub srbid: Srbid,
    pub cause: Option<Cause>,
}

// SrBsFailedToBeSetupModItem
#[derive(Clone)]
pub struct SrBsFailedToBeSetupModItem {
    pub srbid: Srbid,
    pub cause: Option<Cause>,
}

// SrBsModifiedItem
#[derive(Clone)]
pub struct SrBsModifiedItem {
    pub srbid: Srbid,
    pub lcid: Lcid,
}

// SrBsRequiredToBeReleasedItem
#[derive(Clone)]
pub struct SrBsRequiredToBeReleasedItem {
    pub srbid: Srbid,
}

// SrBsSetupItem
#[derive(Clone)]
pub struct SrBsSetupItem {
    pub srbid: Srbid,
    pub lcid: Lcid,
}

// SrBsSetupModItem
#[derive(Clone)]
pub struct SrBsSetupModItem {
    pub srbid: Srbid,
    pub lcid: Lcid,
}

// SrBsToBeReleasedItem
#[derive(Clone)]
pub struct SrBsToBeReleasedItem {
    pub srbid: Srbid,
}

// SrBsToBeSetupItem
#[derive(Clone)]
pub struct SrBsToBeSetupItem {
    pub srbid: Srbid,
    pub duplication_indication: Option<DuplicationIndication>,
}

// SrBsToBeSetupModItem
#[derive(Clone)]
pub struct SrBsToBeSetupModItem {
    pub srbid: Srbid,
    pub duplication_indication: Option<DuplicationIndication>,
}

// SrsCarrierList
#[derive(Clone)]
pub struct SrsCarrierList(pub Vec<SrsCarrierListItem>);

// SrsCarrierListItem
#[derive(Clone)]
pub struct SrsCarrierListItem {
    pub point_a: u32,
    pub uplink_channel_bw_per_scs_list: UplinkChannelBwPerScsList,
    pub active_ulbwp: ActiveUlbwp,
    pub pci: Option<Nrpci>,
}

// SrsConfig
#[derive(Clone)]
pub struct SrsConfig {
    pub srs_resource_list: Option<SrsResourceList>,
    pub pos_srs_resource_list: Option<PosSrsResourceList>,
    pub srs_resource_set_list: Option<SrsResourceSetList1>,
    pub pos_srs_resource_set_list: Option<PosSrsResourceSetList>,
}

// SrsConfiguration
#[derive(Clone)]
pub struct SrsConfiguration {
    pub srs_carrier_list: SrsCarrierList,
}

// SrsFrequency
#[derive(Clone)]
pub struct SrsFrequency(pub u32);

// SrsPosResourceId
#[derive(Clone)]
pub struct SrsPosResourceId(pub u8);

// SrsResource
#[derive(Clone)]
pub struct SrsResource {
    pub srs_resource_id: SrsResourceId,
    pub nrof_srs_ports: NrofSrsPorts,
    pub transmission_comb: TransmissionComb,
    pub start_position: u8,
    pub nrof_symbols: NrofSymbols1,
    pub repetition_factor: RepetitionFactor,
    pub freq_domain_position: u8,
    pub freq_domain_shift: u16,
    pub c_srs: u8,
    pub b_srs: u8,
    pub b_hop: u8,
    pub group_or_sequence_hopping: GroupOrSequenceHopping1,
    pub resource_type: ResourceType,
    pub sequence_id: u16,
}

// SrsResourceId
#[derive(Clone)]
pub struct SrsResourceId(pub u8);

// SrsResourceIdList
#[derive(Clone)]
pub struct SrsResourceIdList(pub Vec<SrsResourceId>);

// SrsResourceList
#[derive(Clone)]
pub struct SrsResourceList(pub Vec<SrsResource>);

// SrsResourceSet
#[derive(Clone)]
pub struct SrsResourceSet {
    pub srs_resource_set_id: SrsResourceSetId,
    pub srs_resource_id_list: SrsResourceIdList,
    pub resource_set_type: ResourceSetType,
}

// SrsResourceSetId
#[derive(Clone)]
pub struct SrsResourceSetId(pub u8);

// SrsResourceSetList
#[derive(Clone)]
pub struct SrsResourceSetList(pub Vec<SrsResourceSetItem>);

// SrsResourceSetItem
#[derive(Clone)]
pub struct SrsResourceSetItem {
    pub num_sr_sresourcesperset: Option<u8>,
    pub periodicity_list: Option<PeriodicityList>,
    pub spatial_relation_info: Option<SpatialRelationInfo>,
    pub pathloss_reference_info: Option<PathlossReferenceInfo>,
}

// SrsResourceSetList1
#[derive(Clone)]
pub struct SrsResourceSetList1(pub Vec<SrsResourceSet>);

// SrsResourceTrigger
#[derive(Clone)]
pub struct SrsResourceTrigger {
    pub aperiodic_srs_resource_trigger_list: AperiodicSrsResourceTriggerList,
}

// Ssb
#[derive(Clone)]
pub struct Ssb {
    pub pci_nr: Nrpci,
    pub ssb_index: Option<SsbIndex>,
}

// SsbFreqInfo
#[derive(Clone)]
pub struct SsbFreqInfo(pub u32);

// SsbIndex
#[derive(Clone)]
pub struct SsbIndex(pub u8);

// SsbSubcarrierSpacing
#[derive(Clone, Copy)]
pub enum SsbSubcarrierSpacing {
    KHz15,
    KHz30,
    KHz120,
    KHz240,
    Spare3,
    Spare2,
    Spare1,
}

// SsbTransmissionPeriodicity
#[derive(Clone, Copy)]
pub enum SsbTransmissionPeriodicity {
    Sf10,
    Sf20,
    Sf40,
    Sf80,
    Sf160,
    Sf320,
    Sf640,
}

// SsbTransmissionTimingOffset
#[derive(Clone)]
pub struct SsbTransmissionTimingOffset(pub u8);

// SsbTransmissionBitmap
#[derive(Clone)]
pub enum SsbTransmissionBitmap {
    ShortBitmap(BitString),
    MediumBitmap(BitString),
    LongBitmap(BitString),
}

// SsbAreaCapacityValueList
#[derive(Clone)]
pub struct SsbAreaCapacityValueList(pub Vec<SsbAreaCapacityValueItem>);

// SsbAreaCapacityValueItem
#[derive(Clone)]
pub struct SsbAreaCapacityValueItem {
    pub ssb_index: u8,
    pub ssb_area_capacity_value: u8,
}

// SsbAreaRadioResourceStatusList
#[derive(Clone)]
pub struct SsbAreaRadioResourceStatusList(pub Vec<SsbAreaRadioResourceStatusItem>);

// SsbAreaRadioResourceStatusItem
#[derive(Clone)]
pub struct SsbAreaRadioResourceStatusItem {
    pub ssb_index: u8,
    pub ssb_area_dlgbrpr_busage: u8,
    pub ssb_area_ulgbrpr_busage: u8,
    pub ssb_area_d_lnon_gbrpr_busage: u8,
    pub ssb_area_u_lnon_gbrpr_busage: u8,
    pub ssb_area_dl_total_pr_busage: u8,
    pub ssb_area_ul_total_pr_busage: u8,
    pub d_lscheduling_pdcchcc_eusage: Option<u8>,
    pub u_lscheduling_pdcchcc_eusage: Option<u8>,
}

// SsbInformation
#[derive(Clone)]
pub struct SsbInformation {
    pub ssb_information_list: SsbInformationList,
}

// SsbInformationList
#[derive(Clone)]
pub struct SsbInformationList(pub Vec<SsbInformationItem>);

// SsbInformationItem
#[derive(Clone)]
pub struct SsbInformationItem {
    pub ssb_configuration: SsbTfConfiguration,
    pub pci_nr: Nrpci,
}

// SsbPositionsInBurst
#[derive(Clone)]
pub enum SsbPositionsInBurst {
    ShortBitmap(BitString),
    MediumBitmap(BitString),
    LongBitmap(BitString),
}

// SsbTfConfiguration
#[derive(Clone)]
pub struct SsbTfConfiguration {
    pub ssb_frequency: u32,
    pub ssb_subcarrier_spacing: SsbSubcarrierSpacing1,
    pub ssb_transmit_power: u8,
    pub ssb_periodicity: SsbPeriodicity,
    pub ssb_half_frame_offset: u8,
    pub ssb_sfn_offset: u8,
    pub ssb_position_in_burst: Option<SsbPositionsInBurst>,
    pub sfn_initialisation_time: Option<RelativeTime1900>,
}

// SsbToReportList
#[derive(Clone)]
pub struct SsbToReportList(pub Vec<SsbToReportItem>);

// SsbToReportItem
#[derive(Clone)]
pub struct SsbToReportItem {
    pub ssb_index: u8,
}

// SulInformation
#[derive(Clone)]
pub struct SulInformation {
    pub sul_nrarfcn: u32,
    pub sul_transmission_bandwidth: TransmissionBandwidth,
}

// SubcarrierSpacing
#[derive(Clone, Copy)]
pub enum SubcarrierSpacing {
    KHz15,
    KHz30,
    KHz60,
    KHz120,
    KHz240,
    Spare3,
    Spare2,
    Spare1,
}

// SubscriberProfileIDforRfp
#[derive(Clone)]
pub struct SubscriberProfileIDforRfp(pub u8);

// SulAccessIndication
#[derive(Clone, Copy)]
pub enum SulAccessIndication {
    True,
}

// SupportedSulFreqBandItem
#[derive(Clone)]
pub struct SupportedSulFreqBandItem {
    pub freq_band_indicator_nr: u16,
}

// SymbolAllocInSlot
#[derive(Clone)]
pub enum SymbolAllocInSlot {
    AllDl,
    AllUl,
    BothDlAndUl(NumDlulSymbols),
}

// SystemFrameNumber
#[derive(Clone)]
pub struct SystemFrameNumber(pub u16);

// SystemInformationAreaId
#[derive(Clone)]
pub struct SystemInformationAreaId(pub BitString);

// FiveGsTac
#[derive(Clone)]
pub struct FiveGsTac(pub Vec<u8>);

// ConfiguredEpsTac
#[derive(Clone)]
pub struct ConfiguredEpsTac(pub Vec<u8>);

// TargetCellList
#[derive(Clone)]
pub struct TargetCellList(pub Vec<TargetCellListItem>);

// TargetCellListItem
#[derive(Clone)]
pub struct TargetCellListItem {
    pub target_cell: Nrcgi,
}

// TddInfo
#[derive(Clone)]
pub struct TddInfo {
    pub nr_freq_info: NrFreqInfo,
    pub transmission_bandwidth: TransmissionBandwidth,
}

// TddUlDlConfigCommonNr
#[derive(Clone)]
pub struct TddUlDlConfigCommonNr(pub Vec<u8>);

// TimeReferenceInformation
#[derive(Clone)]
pub struct TimeReferenceInformation {
    pub reference_time: ReferenceTime,
    pub reference_sfn: ReferenceSfn,
    pub uncertainty: Uncertainty,
    pub time_information_type: TimeInformationType,
}

// TimeInformationType
#[derive(Clone, Copy)]
pub enum TimeInformationType {
    LocalClock,
}

// TimeStamp
#[derive(Clone)]
pub struct TimeStamp {
    pub system_frame_number: SystemFrameNumber,
    pub slot_index: TimeStampSlotIndex,
    pub measurement_time: Option<RelativeTime1900>,
}

// TimeStampSlotIndex
#[derive(Clone)]
pub enum TimeStampSlotIndex {
    Scs15(u8),
    Scs30(u8),
    Scs60(u8),
    Scs120(u8),
}

// TimeToWait
#[derive(Clone, Copy)]
pub enum TimeToWait {
    V1s,
    V2s,
    V5s,
    V10s,
    V20s,
    V60s,
}

// TimingMeasurementQuality
#[derive(Clone)]
pub struct TimingMeasurementQuality {
    pub measurement_quality: u8,
    pub resolution: Resolution1,
}

// TnlAssociationUsage
#[derive(Clone, Copy)]
pub enum TnlAssociationUsage {
    Ue,
    NonUe,
    Both,
}

// TnlCapacityIndicator
#[derive(Clone)]
pub struct TnlCapacityIndicator {
    pub dltnl_offered_capacity: u32,
    pub dltnl_available_capacity: u8,
    pub ultnl_offered_capacity: u32,
    pub ultnl_available_capacity: u8,
}

// TraceActivation
#[derive(Clone)]
pub struct TraceActivation {
    pub trace_id: TraceId,
    pub interfaces_to_trace: InterfacesToTrace,
    pub trace_depth: TraceDepth,
    pub trace_collection_entity_ip_address: TransportLayerAddress,
}

// TraceDepth
#[derive(Clone, Copy)]
pub enum TraceDepth {
    Minimum,
    Medium,
    Maximum,
    MinimumWithoutVendorSpecificExtension,
    MediumWithoutVendorSpecificExtension,
    MaximumWithoutVendorSpecificExtension,
}

// TraceId
#[derive(Clone)]
pub struct TraceId(pub Vec<u8>);

// TrafficMappingInfo
#[derive(Clone)]
pub enum TrafficMappingInfo {
    IPtolayer2TrafficMappingInfo(IPtolayer2TrafficMappingInfo),
    BaPlayerBhrlCchannelMappingInfo(BaPlayerBhrlCchannelMappingInfo),
}

// TransportLayerAddress
#[derive(Clone)]
pub struct TransportLayerAddress(pub BitString);

// TransactionId
#[derive(Clone)]
pub struct TransactionId(pub u8);

// TransmissionBandwidth
#[derive(Clone)]
pub struct TransmissionBandwidth {
    pub nrscs: Nrscs,
    pub nrnrb: Nrnrb,
}

// TransmissionComb
#[derive(Clone)]
pub enum TransmissionComb {
    N2(N2),
    N4(N4),
}

// TransmissionCombPos
#[derive(Clone)]
pub enum TransmissionCombPos {
    N2(N21),
    N4(N41),
    N8(N8),
}

// TransmissionStopIndicator
#[derive(Clone, Copy)]
pub enum TransmissionStopIndicator {
    True,
}

// TransportUpLayerAddressInfoToAddList
#[derive(Clone)]
pub struct TransportUpLayerAddressInfoToAddList(pub Vec<TransportUpLayerAddressInfoToAddItem>);

// TransportUpLayerAddressInfoToAddItem
#[derive(Clone)]
pub struct TransportUpLayerAddressInfoToAddItem {
    pub ip_sec_transport_layer_address: TransportLayerAddress,
    pub gtp_transport_layer_address_to_add: Option<GtptlAs>,
}

// TransportUpLayerAddressInfoToRemoveList
#[derive(Clone)]
pub struct TransportUpLayerAddressInfoToRemoveList(
    pub Vec<TransportUpLayerAddressInfoToRemoveItem>,
);

// TransportUpLayerAddressInfoToRemoveItem
#[derive(Clone)]
pub struct TransportUpLayerAddressInfoToRemoveItem {
    pub ip_sec_transport_layer_address: TransportLayerAddress,
    pub gtp_transport_layer_address_to_remove: Option<GtptlAs>,
}

// TransmissionActionIndicator
#[derive(Clone, Copy)]
pub enum TransmissionActionIndicator {
    Stop,
}

// Trpid
#[derive(Clone)]
pub struct Trpid(pub u16);

// TrpInformation
#[derive(Clone)]
pub struct TrpInformation {
    pub trpid: Trpid,
    pub trp_information_type_response_list: TrpInformationTypeResponseList,
}

// TrpInformationItem
#[derive(Clone)]
pub struct TrpInformationItem {
    pub trp_information: TrpInformation,
}

// TrpInformationTypeItem
#[derive(Clone, Copy)]
pub enum TrpInformationTypeItem {
    NrPci,
    NgRanCgi,
    Arfcn,
    PrsConfig,
    SsbConfig,
    SfnInitTime,
    SpatialDirectInfo,
    GeoCoord,
}

// TrpInformationTypeResponseList
#[derive(Clone)]
pub struct TrpInformationTypeResponseList(pub Vec<TrpInformationTypeResponseItem>);

// TrpInformationTypeResponseItem
#[derive(Clone)]
pub enum TrpInformationTypeResponseItem {
    PciNr(Nrpci),
    NgRanCgi(Nrcgi),
    Nrarfcn(u32),
    PrsConfiguration(PrsConfiguration),
    SsBinformation(SsbInformation),
    SfnInitialisationTime(RelativeTime1900),
    SpatialDirectionInformation(SpatialDirectionInformation),
    GeographicalCoordinates(GeographicalCoordinates),
}

// TrpList
#[derive(Clone)]
pub struct TrpList(pub Vec<TrpListItem>);

// TrpListItem
#[derive(Clone)]
pub struct TrpListItem {
    pub trpid: Trpid,
}

// TrpMeasurementQuality
#[derive(Clone)]
pub struct TrpMeasurementQuality {
    pub tr_pmeasurement_quality_item: TrpMeasurementQualityItem,
}

// TrpMeasurementQualityItem
#[derive(Clone)]
pub enum TrpMeasurementQualityItem {
    TimingMeasurementQuality(TimingMeasurementQuality),
    AngleMeasurementQuality(AngleMeasurementQuality),
}

// TrpMeasurementRequestList
#[derive(Clone)]
pub struct TrpMeasurementRequestList(pub Vec<TrpMeasurementRequestItem>);

// TrpMeasurementRequestItem
#[derive(Clone)]
pub struct TrpMeasurementRequestItem {
    pub trpid: Trpid,
    pub search_window_information: Option<SearchWindowInformation>,
}

// TrpPositionDefinitionType
#[derive(Clone)]
pub enum TrpPositionDefinitionType {
    Direct(TrpPositionDirect),
    Referenced(TrpPositionReferenced),
}

// TrpPositionDirect
#[derive(Clone)]
pub struct TrpPositionDirect {
    pub accuracy: TrpPositionDirectAccuracy,
}

// TrpPositionDirectAccuracy
#[derive(Clone)]
pub enum TrpPositionDirectAccuracy {
    TrpPosition(AccessPointPosition),
    TrphAposition(NgranHighAccuracyAccessPointPosition),
}

// TrpPositionReferenced
#[derive(Clone)]
pub struct TrpPositionReferenced {
    pub reference_point: ReferencePoint,
    pub reference_point_type: TrpReferencePointType,
}

// TrpReferencePointType
#[derive(Clone)]
pub enum TrpReferencePointType {
    TrpPositionRelativeGeodetic(RelativeGeodeticLocation),
    TrpPositionRelativeCartesian(RelativeCartesianLocation),
}

// TypeOfError
#[derive(Clone, Copy)]
pub enum TypeOfError {
    NotUnderstood,
    Missing,
}

// TransportLayerAddressInfo
#[derive(Clone)]
pub struct TransportLayerAddressInfo {
    pub transport_up_layer_address_info_to_add_list: Option<TransportUpLayerAddressInfoToAddList>,
    pub transport_up_layer_address_info_to_remove_list:
        Option<TransportUpLayerAddressInfoToRemoveList>,
}

// TscAssistanceInformation
#[derive(Clone)]
pub struct TscAssistanceInformation {
    pub periodicity: Periodicity,
    pub burst_arrival_time: Option<BurstArrivalTime>,
}

// TscTrafficCharacteristics
#[derive(Clone)]
pub struct TscTrafficCharacteristics {
    pub tsc_assistance_information_dl: Option<TscAssistanceInformation>,
    pub tsc_assistance_information_ul: Option<TscAssistanceInformation>,
}

// UacAssistanceInfo
#[derive(Clone)]
pub struct UacAssistanceInfo {
    pub uac_plmn_list: UacPlmnList,
}

// UacPlmnList
#[derive(Clone)]
pub struct UacPlmnList(pub Vec<UacPlmnItem>);

// UacPlmnItem
#[derive(Clone)]
pub struct UacPlmnItem {
    pub plmn_identity: PlmnIdentity,
    pub uac_type_list: UacTypeList,
}

// UacTypeList
#[derive(Clone)]
pub struct UacTypeList(pub Vec<UacTypeItem>);

// UacTypeItem
#[derive(Clone)]
pub struct UacTypeItem {
    pub uac_reduction_indication: UacReductionIndication,
    pub uac_category_type: UacCategoryType,
}

// UacCategoryType
#[derive(Clone)]
pub enum UacCategoryType {
    UaCstandardized(UacAction),
    UacOperatorDefined(UacOperatorDefined),
}

// UacOperatorDefined
#[derive(Clone)]
pub struct UacOperatorDefined {
    pub access_category: u8,
    pub access_identity: BitString,
}

// UacAction
#[derive(Clone, Copy)]
pub enum UacAction {
    RejectNonEmergencyMoDt,
    RejectRrcCrSignalling,
    PermitEmergencySessionsAndMobileTerminatedServicesOnly,
    PermitHighPrioritySessionsAndMobileTerminatedServicesOnly,
}

// UacReductionIndication
#[derive(Clone)]
pub struct UacReductionIndication(pub u8);

// UeAssociatedLogicalF1ConnectionItem
#[derive(Clone)]
pub struct UeAssociatedLogicalF1ConnectionItem {
    pub gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId>,
    pub gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId>,
}

// UeAssistanceInformation
#[derive(Clone)]
pub struct UeAssistanceInformation(pub Vec<u8>);

// UeAssistanceInformationEutra
#[derive(Clone)]
pub struct UeAssistanceInformationEutra(pub Vec<u8>);

// UeCapabilityRatContainerList
#[derive(Clone)]
pub struct UeCapabilityRatContainerList(pub Vec<u8>);

// UeContextNotRetrievable
#[derive(Clone, Copy)]
pub enum UeContextNotRetrievable {
    True,
}

// UeIdentityIndexValue
#[derive(Clone)]
pub enum UeIdentityIndexValue {
    IndexLength10(BitString),
}

// UlAoA
#[derive(Clone)]
pub struct UlAoA {
    pub azimuth_ao_a: u16,
    pub zenith_ao_a: Option<u16>,
    pub lcs_to_gcs_translation_ao_a: Option<LcsToGcsTranslationAoA>,
}

// UlBhNonUpTrafficMapping
#[derive(Clone)]
pub struct UlBhNonUpTrafficMapping {
    pub ul_bh_non_up_traffic_mapping_list: UlBhNonUpTrafficMappingList,
}

// UlBhNonUpTrafficMappingList
#[derive(Clone)]
pub struct UlBhNonUpTrafficMappingList(pub Vec<UlBhNonUpTrafficMappingItem>);

// UlBhNonUpTrafficMappingItem
#[derive(Clone)]
pub struct UlBhNonUpTrafficMappingItem {
    pub non_up_traffic_type: NonUpTrafficType,
    pub bh_info: BhInfo,
}

// UlConfiguration
#[derive(Clone)]
pub struct UlConfiguration {
    pub ulue_configuration: UlueConfiguration,
}

// UlRtoaMeasurement
#[derive(Clone)]
pub struct UlRtoaMeasurement {
    pub ul_rtoa_measurement_item: UlRtoaMeasurementItem,
    pub additional_path_list: Option<AdditionalPathList>,
}

// UlRtoaMeasurementItem
#[derive(Clone)]
pub enum UlRtoaMeasurementItem {
    K0(u32),
    K1(u32),
    K2(u32),
    K3(u32),
    K4(u32),
    K5(u16),
}

// UlSrsRsrp
#[derive(Clone)]
pub struct UlSrsRsrp(pub u8);

// UlueConfiguration
#[derive(Clone, Copy)]
pub enum UlueConfiguration {
    NoData,
    Shared,
    Only,
}

// UlUpTnlInformationToUpdateListItem
#[derive(Clone)]
pub struct UlUpTnlInformationToUpdateListItem {
    pub uluptnl_information: UpTransportLayerInformation,
    pub new_uluptnl_information: Option<UpTransportLayerInformation>,
    pub bh_info: BhInfo,
}

// UlUpTnlAddressToUpdateListItem
#[derive(Clone)]
pub struct UlUpTnlAddressToUpdateListItem {
    pub old_ip_adress: TransportLayerAddress,
    pub new_ip_adress: TransportLayerAddress,
}

// UluptnlInformationToBeSetupList
#[derive(Clone)]
pub struct UluptnlInformationToBeSetupList(pub Vec<UluptnlInformationToBeSetupItem>);

// UluptnlInformationToBeSetupItem
#[derive(Clone)]
pub struct UluptnlInformationToBeSetupItem {
    pub uluptnl_information: UpTransportLayerInformation,
}

// Uncertainty
#[derive(Clone)]
pub struct Uncertainty(pub u16);

// UplinkChannelBwPerScsList
#[derive(Clone)]
pub struct UplinkChannelBwPerScsList(pub Vec<ScsSpecificCarrier>);

// UplinkTxDirectCurrentListInformation
#[derive(Clone)]
pub struct UplinkTxDirectCurrentListInformation(pub Vec<u8>);

// UpTransportLayerInformation
#[derive(Clone)]
pub enum UpTransportLayerInformation {
    GtpTunnel(GtpTunnel),
}

// UriAddress
#[derive(Clone)]
pub struct UriAddress(pub String);

// VictimGnbSetId
#[derive(Clone)]
pub struct VictimGnbSetId {
    pub victim_gnb_set_id: GnbSetId,
}

// VehicleUe
#[derive(Clone, Copy)]
pub enum VehicleUe {
    Authorized,
    NotAuthorized,
}

// PedestrianUe
#[derive(Clone, Copy)]
pub enum PedestrianUe {
    Authorized,
    NotAuthorized,
}

// LatitudeSign
#[derive(Clone, Copy)]
pub enum LatitudeSign {
    North,
    South,
}

// DirectionOfAltitude
#[derive(Clone, Copy)]
pub enum DirectionOfAltitude {
    Height,
    Depth,
}

// SubcarrierSpacing1
#[derive(Clone, Copy)]
pub enum SubcarrierSpacing1 {
    KHz15,
    KHz30,
    KHz60,
    KHz120,
}

// CyclicPrefix
#[derive(Clone, Copy)]
pub enum CyclicPrefix {
    Normal,
    Extended,
}

// Shift7dot5kHz
#[derive(Clone, Copy)]
pub enum Shift7dot5kHz {
    True,
}

// Resolution
#[derive(Clone, Copy)]
pub enum Resolution {
    Deg0dot1,
}

// DelayCritical
#[derive(Clone, Copy)]
pub enum DelayCritical {
    DelayCritical,
    NonDelayCritical,
}

// ResourceType1
#[derive(Clone, Copy)]
pub enum ResourceType1 {
    Gbr,
    NonGbr,
    DelayCriticalGrb,
}

// Nrscs1
#[derive(Clone, Copy)]
pub enum Nrscs1 {
    Scs15,
    Scs30,
    Scs60,
    Scs120,
}

// Nrcp
#[derive(Clone, Copy)]
pub enum Nrcp {
    Normal,
    Extended,
}

// NrdlulTxPeriodicity
#[derive(Clone, Copy)]
pub enum NrdlulTxPeriodicity {
    Ms0p5,
    Ms0p625,
    Ms1,
    Ms1p25,
    Ms2,
    Ms2p5,
    Ms3,
    Ms4,
    Ms5,
    Ms10,
    Ms20,
    Ms40,
    Ms60,
    Ms80,
    Ms100,
    Ms120,
    Ms140,
    Ms160,
}

// Msg1scs
#[derive(Clone, Copy)]
pub enum Msg1scs {
    Scs15,
    Scs30,
    Scs60,
    Scs120,
}

// RestrictedSetConfig
#[derive(Clone, Copy)]
pub enum RestrictedSetConfig {
    UnrestrictedSet,
    RestrictedSetTypeA,
    RestrictedSetTypeB,
}

// Msg1fdm
#[derive(Clone, Copy)]
pub enum Msg1fdm {
    One,
    Two,
    Four,
    Eight,
}

// SsbPerRachOccasion
#[derive(Clone, Copy)]
pub enum SsbPerRachOccasion {
    OneEighth,
    OneFourth,
    OneHalf,
    One,
    Two,
    Four,
    Eight,
    Sixteen,
}

// PosperiodicSet
#[derive(Clone, Copy)]
pub enum PosperiodicSet {
    True,
}

// PossemiPersistentSet
#[derive(Clone, Copy)]
pub enum PossemiPersistentSet {
    True,
}

// NrofSymbols
#[derive(Clone, Copy)]
pub enum NrofSymbols {
    N1,
    N2,
    N4,
    N8,
    N12,
}

// GroupOrSequenceHopping
#[derive(Clone, Copy)]
pub enum GroupOrSequenceHopping {
    Neither,
    GroupHopping,
    SequenceHopping,
}

// MutingBitRepetitionFactor
#[derive(Clone, Copy)]
pub enum MutingBitRepetitionFactor {
    Rf1,
    Rf2,
    Rf4,
    Rf8,
}

// SubcarrierSpacing2
#[derive(Clone, Copy)]
pub enum SubcarrierSpacing2 {
    KHz15,
    KHz30,
    KHz60,
    KHz120,
}

// CombSize
#[derive(Clone, Copy)]
pub enum CombSize {
    N2,
    N4,
    N6,
    N12,
}

// CpType
#[derive(Clone, Copy)]
pub enum CpType {
    Normal,
    Extended,
}

// ResourceSetPeriodicity
#[derive(Clone, Copy)]
pub enum ResourceSetPeriodicity {
    N4,
    N5,
    N8,
    N10,
    N16,
    N20,
    N32,
    N40,
    N64,
    N80,
    N160,
    N320,
    N640,
    N1280,
    N2560,
    N5120,
    N10240,
    N20480,
    N40960,
    N81920,
}

// ResourceRepetitionFactor
#[derive(Clone, Copy)]
pub enum ResourceRepetitionFactor {
    Rf1,
    Rf2,
    Rf4,
    Rf6,
    Rf8,
    Rf16,
    Rf32,
}

// ResourceTimeGap
#[derive(Clone, Copy)]
pub enum ResourceTimeGap {
    Tg1,
    Tg2,
    Tg4,
    Tg8,
    Tg16,
    Tg32,
}

// ResourceNumberofSymbols
#[derive(Clone, Copy)]
pub enum ResourceNumberofSymbols {
    N2,
    N4,
    N6,
    N12,
}

// ReflectiveQosAttribute
#[derive(Clone, Copy)]
pub enum ReflectiveQosAttribute {
    SubjectTo,
}

// XyZunit
#[derive(Clone, Copy)]
pub enum XyZunit {
    Mm,
    Cm,
    Dm,
}

// MilliArcSecondUnits
#[derive(Clone, Copy)]
pub enum MilliArcSecondUnits {
    Zerodot03,
    Zerodot3,
    Three,
}

// HeightUnits
#[derive(Clone, Copy)]
pub enum HeightUnits {
    Mm,
    Cm,
    M,
}

// ResourceType2
#[derive(Clone, Copy)]
pub enum ResourceType2 {
    Periodic,
    SemiPersistent,
    Aperiodic,
}

// PeriodicSet
#[derive(Clone, Copy)]
pub enum PeriodicSet {
    True,
}

// SemiPersistentSet
#[derive(Clone, Copy)]
pub enum SemiPersistentSet {
    True,
}

// Periodicity1
#[derive(Clone, Copy)]
pub enum Periodicity1 {
    Slot1,
    Slot2,
    Slot4,
    Slot5,
    Slot8,
    Slot10,
    Slot16,
    Slot20,
    Slot32,
    Slot40,
    Slot64,
    Slot80,
    Slot160,
    Slot320,
    Slot640,
    Slot1280,
    Slot2560,
}

// Periodicity2
#[derive(Clone, Copy)]
pub enum Periodicity2 {
    Slot1,
    Slot2,
    Slot4,
    Slot5,
    Slot8,
    Slot10,
    Slot16,
    Slot20,
    Slot32,
    Slot40,
    Slot64,
    Slot80,
    Slot160,
    Slot320,
    Slot640,
    Slot1280,
    Slot2560,
}

// AperiodicResourceType
#[derive(Clone, Copy)]
pub enum AperiodicResourceType {
    True,
}

// Periodicity3
#[derive(Clone, Copy)]
pub enum Periodicity3 {
    Slot1,
    Slot2,
    Slot4,
    Slot5,
    Slot8,
    Slot10,
    Slot16,
    Slot20,
    Slot32,
    Slot40,
    Slot64,
    Slot80,
    Slot160,
    Slot320,
    Slot640,
    Slot1280,
    Slot2560,
    Slot5120,
    Slot10240,
    Slot40960,
    Slot81920,
}

// Periodicity4
#[derive(Clone, Copy)]
pub enum Periodicity4 {
    Slot1,
    Slot2,
    Slot4,
    Slot5,
    Slot8,
    Slot10,
    Slot16,
    Slot20,
    Slot32,
    Slot40,
    Slot64,
    Slot80,
    Slot160,
    Slot320,
    Slot640,
    Slot1280,
    Slot2560,
    Slot5120,
    Slot10240,
    Slot40960,
    Slot81920,
}

// SubcarrierSpacing3
#[derive(Clone, Copy)]
pub enum SubcarrierSpacing3 {
    KHz15,
    KHz30,
    KHz60,
    KHz120,
}

// SwitchingOffOngoing
#[derive(Clone, Copy)]
pub enum SwitchingOffOngoing {
    True,
}

// NrofSrsPorts
#[derive(Clone, Copy)]
pub enum NrofSrsPorts {
    Port1,
    Ports2,
    Ports4,
}

// NrofSymbols1
#[derive(Clone, Copy)]
pub enum NrofSymbols1 {
    N1,
    N2,
    N4,
}

// RepetitionFactor
#[derive(Clone, Copy)]
pub enum RepetitionFactor {
    N1,
    N2,
    N4,
}

// GroupOrSequenceHopping1
#[derive(Clone, Copy)]
pub enum GroupOrSequenceHopping1 {
    Neither,
    GroupHopping,
    SequenceHopping,
}

// SsbSubcarrierSpacing1
#[derive(Clone, Copy)]
pub enum SsbSubcarrierSpacing1 {
    KHz15,
    KHz30,
    KHz60,
    KHz120,
    KHz240,
}

// SsbPeriodicity
#[derive(Clone, Copy)]
pub enum SsbPeriodicity {
    Ms5,
    Ms10,
    Ms20,
    Ms40,
    Ms80,
    Ms160,
}

// Resolution1
#[derive(Clone, Copy)]
pub enum Resolution1 {
    M0dot1,
    M1,
    M10,
    M30,
}

// N2
#[derive(Clone)]
pub struct N2 {
    pub comb_offset_n_2: u8,
    pub cyclic_shift_n_2: u8,
}

// N4
#[derive(Clone)]
pub struct N4 {
    pub comb_offset_n_4: u8,
    pub cyclic_shift_n_4: u8,
}

// N21
#[derive(Clone)]
pub struct N21 {
    pub comb_offset_n_2: u8,
    pub cyclic_shift_n_2: u8,
}

// N41
#[derive(Clone)]
pub struct N41 {
    pub comb_offset_n_4: u8,
    pub cyclic_shift_n_4: u8,
}

// N8
#[derive(Clone)]
pub struct N8 {
    pub comb_offset_n_8: u8,
    pub cyclic_shift_n_8: u8,
}
