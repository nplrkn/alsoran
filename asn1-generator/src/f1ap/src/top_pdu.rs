// Copyright (c) Nicholas Larkin
// Autogenerated from F1AP-PDU-Descriptions.asn
use bitvec::prelude::*;
pub type BitString = BitVec<Msb0, u8>;
use super::pdu::*;
use asn1_codecs::aper::{self, AperCodec, AperCodecData, AperCodecError};

// F1apPdu
#[derive(Clone, Debug)]
pub enum F1apPdu {
    InitiatingMessage(InitiatingMessage),
    SuccessfulOutcome(SuccessfulOutcome),
    UnsuccessfulOutcome(UnsuccessfulOutcome),
}

impl AperCodec for F1apPdu {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 3, false)?;
        if extended {
            return Err(aper::AperCodecError::new(
                "CHOICE additions not implemented",
            ));
        }
        match idx {
            0 => Ok(Self::InitiatingMessage(InitiatingMessage::decode(data)?)),
            1 => Ok(Self::SuccessfulOutcome(SuccessfulOutcome::decode(data)?)),
            2 => Ok(Self::UnsuccessfulOutcome(UnsuccessfulOutcome::decode(
                data,
            )?)),
            3 => Err(AperCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(AperCodecError::new("Unknown choice idx")),
        }
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        match self {
            Self::InitiatingMessage(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 0, false)?;
                x.encode(data)
            }
            Self::SuccessfulOutcome(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 1, false)?;
                x.encode(data)
            }
            Self::UnsuccessfulOutcome(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 2, false)?;
                x.encode(data)
            }
        }
    }
}

#[derive(Clone, Debug)]
enum InitiatingMessage {
    Reset(Reset),
    F1SetupRequest(F1SetupRequest),
    GnbDuConfigurationUpdate(GnbDuConfigurationUpdate),
    GnbCuConfigurationUpdate(GnbCuConfigurationUpdate),
    UeContextSetupRequest(UeContextSetupRequest),
    UeContextReleaseCommand(UeContextReleaseCommand),
    UeContextModificationRequest(UeContextModificationRequest),
    UeContextModificationRequired(UeContextModificationRequired),
    WriteReplaceWarningRequest(WriteReplaceWarningRequest),
    PwsCancelRequest(PwsCancelRequest),
    ErrorIndication(ErrorIndication),
    UeContextReleaseRequest(UeContextReleaseRequest),
    InitialUlrrcMessageTransfer(InitialUlrrcMessageTransfer),
    DlrrcMessageTransfer(DlrrcMessageTransfer),
    UlrrcMessageTransfer(UlrrcMessageTransfer),
    UeInactivityNotification(UeInactivityNotification),
    GnbDuResourceCoordinationRequest(GnbDuResourceCoordinationRequest),
    PrivateMessage(PrivateMessage),
    SystemInformationDeliveryCommand(SystemInformationDeliveryCommand),
    Paging(Paging),
    Notify(Notify),
    NetworkAccessRateReduction(NetworkAccessRateReduction),
    PwsRestartIndication(PwsRestartIndication),
    PwsFailureIndication(PwsFailureIndication),
    GnbDuStatusIndication(GnbDuStatusIndication),
    RrcDeliveryReport(RrcDeliveryReport),
    F1RemovalRequest(F1RemovalRequest),
    TraceStart(TraceStart),
    DeactivateTrace(DeactivateTrace),
    DucuRadioInformationTransfer(DucuRadioInformationTransfer),
    CuduRadioInformationTransfer(CuduRadioInformationTransfer),
    BapMappingConfiguration(BapMappingConfiguration),
    GnbDuResourceConfiguration(GnbDuResourceConfiguration),
    IabtnlAddressRequest(IabtnlAddressRequest),
    IabupConfigurationUpdateRequest(IabupConfigurationUpdateRequest),
    ResourceStatusRequest(ResourceStatusRequest),
    ResourceStatusUpdate(ResourceStatusUpdate),
    AccessAndMobilityIndication(AccessAndMobilityIndication),
    ReferenceTimeInformationReportingControl(ReferenceTimeInformationReportingControl),
    ReferenceTimeInformationReport(ReferenceTimeInformationReport),
    AccessSuccess(AccessSuccess),
    CellTrafficTrace(CellTrafficTrace),
    PositioningAssistanceInformationControl(PositioningAssistanceInformationControl),
    PositioningAssistanceInformationFeedback(PositioningAssistanceInformationFeedback),
    PositioningMeasurementRequest(PositioningMeasurementRequest),
    PositioningMeasurementReport(PositioningMeasurementReport),
    PositioningMeasurementAbort(PositioningMeasurementAbort),
    PositioningMeasurementFailureIndication(PositioningMeasurementFailureIndication),
    PositioningMeasurementUpdate(PositioningMeasurementUpdate),
    TrpInformationRequest(TrpInformationRequest),
    PositioningInformationRequest(PositioningInformationRequest),
    PositioningActivationRequest(PositioningActivationRequest),
    PositioningDeactivation(PositioningDeactivation),
    ECidMeasurementInitiationRequest(ECidMeasurementInitiationRequest),
    ECidMeasurementFailureIndication(ECidMeasurementFailureIndication),
    ECidMeasurementReport(ECidMeasurementReport),
    ECidMeasurementTerminationCommand(ECidMeasurementTerminationCommand),
    PositioningInformationUpdate(PositioningInformationUpdate),
}

impl AperCodec for InitiatingMessage {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        todo!()
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        todo!()
    }
}

#[derive(Clone, Debug)]
enum SuccessfulOutcome {
    ResetAcknowledge(ResetAcknowledge),
    F1SetupResponse(F1SetupResponse),
    GnbDuConfigurationUpdateAcknowledge(GnbDuConfigurationUpdateAcknowledge),
    GnbCuConfigurationUpdateAcknowledge(GnbCuConfigurationUpdateAcknowledge),
    UeContextSetupResponse(UeContextSetupResponse),
    UeContextReleaseComplete(UeContextReleaseComplete),
    UeContextModificationResponse(UeContextModificationResponse),
    UeContextModificationConfirm(UeContextModificationConfirm),
    WriteReplaceWarningResponse(WriteReplaceWarningResponse),
    PwsCancelResponse(PwsCancelResponse),
    GnbDuResourceCoordinationResponse(GnbDuResourceCoordinationResponse),
    F1RemovalResponse(F1RemovalResponse),
    BapMappingConfigurationAcknowledge(BapMappingConfigurationAcknowledge),
    GnbDuResourceConfigurationAcknowledge(GnbDuResourceConfigurationAcknowledge),
    IabtnlAddressResponse(IabtnlAddressResponse),
    IabupConfigurationUpdateResponse(IabupConfigurationUpdateResponse),
    ResourceStatusResponse(ResourceStatusResponse),
    PositioningMeasurementResponse(PositioningMeasurementResponse),
    TrpInformationResponse(TrpInformationResponse),
    PositioningInformationResponse(PositioningInformationResponse),
    PositioningActivationResponse(PositioningActivationResponse),
    ECidMeasurementInitiationResponse(ECidMeasurementInitiationResponse),
}

impl AperCodec for SuccessfulOutcome {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        todo!()
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        todo!()
    }
}

#[derive(Clone, Debug)]
enum UnsuccessfulOutcome {
    F1SetupFailure(F1SetupFailure),
    GnbDuConfigurationUpdateFailure(GnbDuConfigurationUpdateFailure),
    GnbCuConfigurationUpdateFailure(GnbCuConfigurationUpdateFailure),
    UeContextSetupFailure(UeContextSetupFailure),
    UeContextModificationFailure(UeContextModificationFailure),
    UeContextModificationRefuse(UeContextModificationRefuse),
    F1RemovalFailure(F1RemovalFailure),
    BapMappingConfigurationFailure(BapMappingConfigurationFailure),
    GnbDuResourceConfigurationFailure(GnbDuResourceConfigurationFailure),
    IabtnlAddressFailure(IabtnlAddressFailure),
    IabupConfigurationUpdateFailure(IabupConfigurationUpdateFailure),
    ResourceStatusFailure(ResourceStatusFailure),
    PositioningMeasurementFailure(PositioningMeasurementFailure),
    TrpInformationFailure(TrpInformationFailure),
    PositioningInformationFailure(PositioningInformationFailure),
    PositioningActivationFailure(PositioningActivationFailure),
    ECidMeasurementInitiationFailure(ECidMeasurementInitiationFailure),
}

impl AperCodec for UnsuccessfulOutcome {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self::Output, AperCodecError> {
        todo!()
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        todo!()
    }
}
