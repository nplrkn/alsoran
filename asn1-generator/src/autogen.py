#!/usr/bin/env python3

import os
from render import generate
from parse import parse_file
from constants import get_constants_from_file, get_constants

AUTOGENERATED = "// Autogenerated from "
USE_ASN1 = """\
    use asn1_codecs::aper::{self, AperCodec, AperCodecData, AperCodecError};
"""
USE_BITSTRING = """\
use bitvec::prelude::*;
#[allow(dead_code)]
pub type BitString = BitVec<Msb0, u8>;
"""
USE_NUM_ENUM = """\
#[allow(unused_imports)]
use num_enum::TryFromPrimitive;
"""
USE_COMMON = "use super::common::*;\n"
USE_IES = "use super::ies::*;\n"
USE_PDUS = """\
use crate::common::Criticality;
use super::pdu::*;
use net::{AperSerde, Indication, IndicationHandler, Procedure, RequestError, RequestProvider};
use async_trait::async_trait;
use slog::Logger;
use anyhow::Result;
"""
USE_RRC_SETUP_RELEASE = """\
use crate::SetupRelease;
"""


def output_filename(protocol, filename):
    return f"../../{protocol.lower()}/src/{filename}"


def input_filename(protocol, filename_part):
    f = f"{protocol.upper()}-{filename_part}.asn"
    print("Processing " + f)
    return f


def input_file_path(protocol, filename):
    return f"../asn1/{protocol.lower()}/{filename}"


def generate_file(protocol, outfile, infile, header, constants, parse_tree=None):
    i = input_filename(protocol, infile)
    out = output_filename(protocol, outfile)
    f = open(out, "w")
    f.write(AUTOGENERATED + i + "\n")
    f.write(header + "\n\n")
    parse_tree = parse_tree or parse_file(input_file_path(protocol, i))
    f.write(generate(parse_tree, constants))
    f.close()
    os.system('rustfmt --edition 2021 ' + out)


def generate_xxap(protocol):
    constants = get_constants_from_file(
        input_file_path(protocol, input_filename(protocol, "Constants")))

    generate_file(protocol, "top_pdu.rs", "PDU-Descriptions",
                  USE_ASN1 + USE_PDUS, constants)
    generate_file(protocol, "common.rs", "CommonDataTypes",
                  USE_ASN1 + USE_BITSTRING + USE_NUM_ENUM, constants)
    generate_file(protocol, "ies.rs", "IEs", USE_COMMON +
                  USE_ASN1 + USE_BITSTRING + USE_NUM_ENUM, constants)
    generate_file(protocol, "pdu.rs", "PDU-Contents", USE_COMMON +
                  USE_ASN1 + USE_BITSTRING + USE_NUM_ENUM + USE_IES, constants)


def generate_rrc():
    protocol = 'rrc'
    parse_tree = parse_file(input_file_path(
        protocol, input_filename(protocol, "All")))
    constants = get_constants(parse_tree)

    generate_file(protocol, "rrc.rs", "All", USE_ASN1 +
                  USE_BITSTRING + USE_RRC_SETUP_RELEASE + USE_NUM_ENUM, constants, parse_tree)


generate_xxap("ngap")
generate_xxap("f1ap")
generate_rrc()
