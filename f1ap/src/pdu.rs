// Copyright (c) Nicholas Larkin
// Autogenerated from F1AP-PDU-Contents.asn
use super::common::*;
use asn1_codecs::aper::{self, AperCodec, AperCodecData, AperCodecError};
use bitvec::prelude::*;
pub type BitString = BitVec<Msb0, u8>;
use super::ies::*;
#[allow(unused_imports)]
use num_enum::TryFromPrimitive;

// Reset
#[derive(Clone, Debug)]
pub struct Reset {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub reset_type: ResetType,
}

impl Reset {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut reset_type: Option<ResetType> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                48 => reset_type = Some(ResetType::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        let reset_type = reset_type.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE reset_type"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            reset_type,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.reset_type.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 48, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for Reset {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Reset::decode_inner(data).map_err(|e: AperCodecError| e.push_context("Reset"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("Reset"))
    }
}
// ResetType
#[derive(Clone, Debug)]
pub enum ResetType {
    F1Interface(ResetAll),
    PartOfF1Interface(UeAssociatedLogicalF1ConnectionListRes),
}

impl ResetType {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(aper::AperCodecError::new(
                "CHOICE additions not implemented",
            ));
        }
        match idx {
            0 => Ok(Self::F1Interface(ResetAll::decode(data)?)),
            1 => Ok(Self::PartOfF1Interface(
                UeAssociatedLogicalF1ConnectionListRes::decode(data)?,
            )),
            2 => Err(AperCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(AperCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        match self {
            Self::F1Interface(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.encode(data)
            }
            Self::PartOfF1Interface(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.encode(data)
            }
        }
    }
}

impl AperCodec for ResetType {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ResetType::decode_inner(data).map_err(|e: AperCodecError| e.push_context("ResetType"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResetType"))
    }
}
// ResetAll
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ResetAll {
    ResetAll,
}

impl ResetAll {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(aper::AperCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| AperCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for ResetAll {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ResetAll::decode_inner(data).map_err(|e: AperCodecError| e.push_context("ResetAll"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResetAll"))
    }
}
// UeAssociatedLogicalF1ConnectionListRes
#[derive(Clone, Debug)]
pub struct UeAssociatedLogicalF1ConnectionListRes(pub Vec<UeAssociatedLogicalF1ConnectionItem>);

impl UeAssociatedLogicalF1ConnectionListRes {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65536), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(UeAssociatedLogicalF1ConnectionItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65536), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 80, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for UeAssociatedLogicalF1ConnectionListRes {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UeAssociatedLogicalF1ConnectionListRes::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeAssociatedLogicalF1ConnectionListRes"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeAssociatedLogicalF1ConnectionListRes"))
    }
}
// ResetAcknowledge
#[derive(Clone, Debug)]
pub struct ResetAcknowledge {
    pub transaction_id: TransactionId,
    pub ue_associated_logical_f1_connection_list_res_ack:
        Option<UeAssociatedLogicalF1ConnectionListResAck>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl ResetAcknowledge {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut ue_associated_logical_f1_connection_list_res_ack: Option<
            UeAssociatedLogicalF1ConnectionListResAck,
        > = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                81 => {
                    ue_associated_logical_f1_connection_list_res_ack =
                        Some(UeAssociatedLogicalF1ConnectionListResAck::decode(data)?)
                }
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            ue_associated_logical_f1_connection_list_res_ack,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.ue_associated_logical_f1_connection_list_res_ack {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 81, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for ResetAcknowledge {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ResetAcknowledge::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResetAcknowledge"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResetAcknowledge"))
    }
}
// UeAssociatedLogicalF1ConnectionListResAck
#[derive(Clone, Debug)]
pub struct UeAssociatedLogicalF1ConnectionListResAck(pub Vec<UeAssociatedLogicalF1ConnectionItem>);

impl UeAssociatedLogicalF1ConnectionListResAck {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65536), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(UeAssociatedLogicalF1ConnectionItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65536), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 80, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for UeAssociatedLogicalF1ConnectionListResAck {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UeAssociatedLogicalF1ConnectionListResAck::decode_inner(data).map_err(
            |e: AperCodecError| e.push_context("UeAssociatedLogicalF1ConnectionListResAck"),
        )
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data).map_err(|e: AperCodecError| {
            e.push_context("UeAssociatedLogicalF1ConnectionListResAck")
        })
    }
}
// ErrorIndication
#[derive(Clone, Debug)]
pub struct ErrorIndication {
    pub transaction_id: TransactionId,
    pub gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId>,
    pub gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId>,
    pub cause: Option<Cause>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl ErrorIndication {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            cause,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_cu_ue_f1ap_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_du_ue_f1ap_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.cause {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for ErrorIndication {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ErrorIndication::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ErrorIndication"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ErrorIndication"))
    }
}
// F1SetupRequest
#[derive(Clone, Debug)]
pub struct F1SetupRequest {
    pub transaction_id: TransactionId,
    pub gnb_du_id: GnbDuId,
    pub gnb_du_name: Option<GnbDuName>,
    pub gnb_du_served_cells_list: Option<GnbDuServedCellsList>,
    pub gnb_du_rrc_version: RrcVersion,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
    pub bap_address: Option<BapAddress>,
    pub extended_gnb_cu_name: Option<ExtendedGnbCuName>,
}

impl F1SetupRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        data.decode_align()?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_du_id: Option<GnbDuId> = None;
        let mut gnb_du_name: Option<GnbDuName> = None;
        let mut gnb_du_served_cells_list: Option<GnbDuServedCellsList> = None;
        let mut gnb_du_rrc_version: Option<RrcVersion> = None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;
        let mut bap_address: Option<BapAddress> = None;
        let mut extended_gnb_cu_name: Option<ExtendedGnbCuName> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            println!("Next ie will be  {}", id);
            let crit = Criticality::decode(data)?;
            println!("Crit is {:?}", crit);
            let ie_len = aper::decode::decode_length_determinent(data, None, None, false)?;
            println!("YAY got an ie with length {} id {}", ie_len, id);
            data.decode_align()?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                42 => gnb_du_id = Some(GnbDuId::decode(data)?),
                45 => gnb_du_name = Some(GnbDuName::decode(data)?),
                44 => gnb_du_served_cells_list = Some(GnbDuServedCellsList::decode(data)?),
                171 => gnb_du_rrc_version = Some(RrcVersion::decode(data)?),
                254 => {
                    transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?)
                }
                281 => bap_address = Some(BapAddress::decode(data)?),
                427 => extended_gnb_cu_name = Some(ExtendedGnbCuName::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
            data.decode_align()?;
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_du_id = gnb_du_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_id"
        )))?;
        let gnb_du_rrc_version = gnb_du_rrc_version.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_rrc_version"
        )))?;
        Ok(Self {
            transaction_id,
            gnb_du_id,
            gnb_du_name,
            gnb_du_served_cells_list,
            gnb_du_rrc_version,
            transport_layer_address_info,
            bap_address,
            extended_gnb_cu_name,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 42, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_du_name {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 45, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_du_served_cells_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 44, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.gnb_du_rrc_version.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 171, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.transport_layer_address_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 254, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.bap_address {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 281, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.extended_gnb_cu_name {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 427, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for F1SetupRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        F1SetupRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("F1SetupRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("F1SetupRequest"))
    }
}
// GnbDuServedCellsList
#[derive(Clone, Debug)]
pub struct GnbDuServedCellsList(pub Vec<GnbDuServedCellsItem>);

impl GnbDuServedCellsList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(GnbDuServedCellsItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 43, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for GnbDuServedCellsList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbDuServedCellsList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuServedCellsList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuServedCellsList"))
    }
}
// F1SetupResponse
#[derive(Clone, Debug)]
pub struct F1SetupResponse {
    pub transaction_id: TransactionId,
    pub gnb_cu_name: Option<GnbCuName>,
    pub cells_to_be_activated_list: Option<CellsToBeActivatedList>,
    pub gnb_cu_rrc_version: RrcVersion,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
    pub ul_bh_non_up_traffic_mapping: Option<UlBhNonUpTrafficMapping>,
    pub bap_address: Option<BapAddress>,
    pub extended_gnb_du_name: Option<ExtendedGnbDuName>,
}

impl F1SetupResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_name: Option<GnbCuName> = None;
        let mut cells_to_be_activated_list: Option<CellsToBeActivatedList> = None;
        let mut gnb_cu_rrc_version: Option<RrcVersion> = None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;
        let mut ul_bh_non_up_traffic_mapping: Option<UlBhNonUpTrafficMapping> = None;
        let mut bap_address: Option<BapAddress> = None;
        let mut extended_gnb_du_name: Option<ExtendedGnbDuName> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                82 => gnb_cu_name = Some(GnbCuName::decode(data)?),
                3 => cells_to_be_activated_list = Some(CellsToBeActivatedList::decode(data)?),
                170 => gnb_cu_rrc_version = Some(RrcVersion::decode(data)?),
                254 => {
                    transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?)
                }
                287 => ul_bh_non_up_traffic_mapping = Some(UlBhNonUpTrafficMapping::decode(data)?),
                281 => bap_address = Some(BapAddress::decode(data)?),
                426 => extended_gnb_du_name = Some(ExtendedGnbDuName::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_cu_rrc_version = gnb_cu_rrc_version.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_rrc_version"
        )))?;
        Ok(Self {
            transaction_id,
            gnb_cu_name,
            cells_to_be_activated_list,
            gnb_cu_rrc_version,
            transport_layer_address_info,
            ul_bh_non_up_traffic_mapping,
            bap_address,
            extended_gnb_du_name,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_cu_name {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 82, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.cells_to_be_activated_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.gnb_cu_rrc_version.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 170, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.transport_layer_address_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 254, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.ul_bh_non_up_traffic_mapping {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 287, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.bap_address {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 281, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.extended_gnb_du_name {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 426, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for F1SetupResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        F1SetupResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("F1SetupResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("F1SetupResponse"))
    }
}
// CellsToBeActivatedList
#[derive(Clone, Debug)]
pub struct CellsToBeActivatedList(pub Vec<CellsToBeActivatedListItem>);

impl CellsToBeActivatedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(CellsToBeActivatedListItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 4, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for CellsToBeActivatedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        CellsToBeActivatedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellsToBeActivatedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellsToBeActivatedList"))
    }
}
// F1SetupFailure
#[derive(Clone, Debug)]
pub struct F1SetupFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl F1SetupFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                77 => time_to_wait = Some(TimeToWait::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.time_to_wait {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 77, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for F1SetupFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        F1SetupFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("F1SetupFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("F1SetupFailure"))
    }
}
// GnbDuConfigurationUpdate
#[derive(Clone, Debug)]
pub struct GnbDuConfigurationUpdate {
    pub transaction_id: TransactionId,
    pub served_cells_to_add_list: Option<ServedCellsToAddList>,
    pub served_cells_to_modify_list: Option<ServedCellsToModifyList>,
    pub served_cells_to_delete_list: Option<ServedCellsToDeleteList>,
    pub cells_status_list: Option<CellsStatusList>,
    pub dedicated_si_delivery_needed_ue_list: Option<DedicatedSiDeliveryNeededUeList>,
    pub gnb_du_id: Option<GnbDuId>,
    pub gnb_du_tnl_association_to_remove_list: Option<GnbDuTnlAssociationToRemoveList>,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
}

impl GnbDuConfigurationUpdate {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut served_cells_to_add_list: Option<ServedCellsToAddList> = None;
        let mut served_cells_to_modify_list: Option<ServedCellsToModifyList> = None;
        let mut served_cells_to_delete_list: Option<ServedCellsToDeleteList> = None;
        let mut cells_status_list: Option<CellsStatusList> = None;
        let mut dedicated_si_delivery_needed_ue_list: Option<DedicatedSiDeliveryNeededUeList> =
            None;
        let mut gnb_du_id: Option<GnbDuId> = None;
        let mut gnb_du_tnl_association_to_remove_list: Option<GnbDuTnlAssociationToRemoveList> =
            None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                58 => served_cells_to_add_list = Some(ServedCellsToAddList::decode(data)?),
                62 => served_cells_to_modify_list = Some(ServedCellsToModifyList::decode(data)?),
                60 => served_cells_to_delete_list = Some(ServedCellsToDeleteList::decode(data)?),
                89 => cells_status_list = Some(CellsStatusList::decode(data)?),
                189 => {
                    dedicated_si_delivery_needed_ue_list =
                        Some(DedicatedSiDeliveryNeededUeList::decode(data)?)
                }
                42 => gnb_du_id = Some(GnbDuId::decode(data)?),
                228 => {
                    gnb_du_tnl_association_to_remove_list =
                        Some(GnbDuTnlAssociationToRemoveList::decode(data)?)
                }
                254 => {
                    transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            served_cells_to_add_list,
            served_cells_to_modify_list,
            served_cells_to_delete_list,
            cells_status_list,
            dedicated_si_delivery_needed_ue_list,
            gnb_du_id,
            gnb_du_tnl_association_to_remove_list,
            transport_layer_address_info,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.served_cells_to_add_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 58, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.served_cells_to_modify_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 62, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.served_cells_to_delete_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 60, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.cells_status_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 89, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.dedicated_si_delivery_needed_ue_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 189, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_du_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 42, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_du_tnl_association_to_remove_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 228, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.transport_layer_address_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 254, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for GnbDuConfigurationUpdate {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbDuConfigurationUpdate::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuConfigurationUpdate"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuConfigurationUpdate"))
    }
}
// ServedCellsToAddList
#[derive(Clone, Debug)]
pub struct ServedCellsToAddList(pub Vec<ServedCellsToAddItem>);

impl ServedCellsToAddList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(ServedCellsToAddItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 57, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for ServedCellsToAddList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ServedCellsToAddList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ServedCellsToAddList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ServedCellsToAddList"))
    }
}
// ServedCellsToModifyList
#[derive(Clone, Debug)]
pub struct ServedCellsToModifyList(pub Vec<ServedCellsToModifyItem>);

impl ServedCellsToModifyList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(ServedCellsToModifyItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 61, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for ServedCellsToModifyList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ServedCellsToModifyList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ServedCellsToModifyList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ServedCellsToModifyList"))
    }
}
// ServedCellsToDeleteList
#[derive(Clone, Debug)]
pub struct ServedCellsToDeleteList(pub Vec<ServedCellsToDeleteItem>);

impl ServedCellsToDeleteList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(ServedCellsToDeleteItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 59, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for ServedCellsToDeleteList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ServedCellsToDeleteList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ServedCellsToDeleteList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ServedCellsToDeleteList"))
    }
}
// CellsStatusList
#[derive(Clone, Debug)]
pub struct CellsStatusList(pub Vec<CellsStatusItem>);

impl CellsStatusList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(0), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(CellsStatusItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(0), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 88, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for CellsStatusList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        CellsStatusList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellsStatusList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellsStatusList"))
    }
}
// DedicatedSiDeliveryNeededUeList
#[derive(Clone, Debug)]
pub struct DedicatedSiDeliveryNeededUeList(pub Vec<DedicatedSiDeliveryNeededUeItem>);

impl DedicatedSiDeliveryNeededUeList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65536), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(DedicatedSiDeliveryNeededUeItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65536), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 190, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for DedicatedSiDeliveryNeededUeList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DedicatedSiDeliveryNeededUeList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DedicatedSiDeliveryNeededUeList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DedicatedSiDeliveryNeededUeList"))
    }
}
// GnbDuTnlAssociationToRemoveList
#[derive(Clone, Debug)]
pub struct GnbDuTnlAssociationToRemoveList(pub Vec<GnbDuTnlAssociationToRemoveItem>);

impl GnbDuTnlAssociationToRemoveList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(GnbDuTnlAssociationToRemoveItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 227, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for GnbDuTnlAssociationToRemoveList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbDuTnlAssociationToRemoveList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuTnlAssociationToRemoveList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuTnlAssociationToRemoveList"))
    }
}
// GnbDuConfigurationUpdateAcknowledge
#[derive(Clone, Debug)]
pub struct GnbDuConfigurationUpdateAcknowledge {
    pub transaction_id: TransactionId,
    pub cells_to_be_activated_list: Option<CellsToBeActivatedList>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub cells_to_be_deactivated_list: Option<CellsToBeDeactivatedList>,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
    pub ul_bh_non_up_traffic_mapping: Option<UlBhNonUpTrafficMapping>,
    pub bap_address: Option<BapAddress>,
}

impl GnbDuConfigurationUpdateAcknowledge {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cells_to_be_activated_list: Option<CellsToBeActivatedList> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut cells_to_be_deactivated_list: Option<CellsToBeDeactivatedList> = None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;
        let mut ul_bh_non_up_traffic_mapping: Option<UlBhNonUpTrafficMapping> = None;
        let mut bap_address: Option<BapAddress> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                3 => cells_to_be_activated_list = Some(CellsToBeActivatedList::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                5 => cells_to_be_deactivated_list = Some(CellsToBeDeactivatedList::decode(data)?),
                254 => {
                    transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?)
                }
                287 => ul_bh_non_up_traffic_mapping = Some(UlBhNonUpTrafficMapping::decode(data)?),
                281 => bap_address = Some(BapAddress::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            cells_to_be_activated_list,
            criticality_diagnostics,
            cells_to_be_deactivated_list,
            transport_layer_address_info,
            ul_bh_non_up_traffic_mapping,
            bap_address,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.cells_to_be_activated_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.cells_to_be_deactivated_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 5, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.transport_layer_address_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 254, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.ul_bh_non_up_traffic_mapping {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 287, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.bap_address {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 281, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for GnbDuConfigurationUpdateAcknowledge {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbDuConfigurationUpdateAcknowledge::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuConfigurationUpdateAcknowledge"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuConfigurationUpdateAcknowledge"))
    }
}
// GnbDuConfigurationUpdateFailure
#[derive(Clone, Debug)]
pub struct GnbDuConfigurationUpdateFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl GnbDuConfigurationUpdateFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                77 => time_to_wait = Some(TimeToWait::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.time_to_wait {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 77, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for GnbDuConfigurationUpdateFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbDuConfigurationUpdateFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuConfigurationUpdateFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuConfigurationUpdateFailure"))
    }
}
// GnbCuConfigurationUpdate
#[derive(Clone, Debug)]
pub struct GnbCuConfigurationUpdate {
    pub transaction_id: TransactionId,
    pub cells_to_be_activated_list: Option<CellsToBeActivatedList>,
    pub cells_to_be_deactivated_list: Option<CellsToBeDeactivatedList>,
    pub gnb_cu_tnl_association_to_add_list: Option<GnbCuTnlAssociationToAddList>,
    pub gnb_cu_tnl_association_to_remove_list: Option<GnbCuTnlAssociationToRemoveList>,
    pub gnb_cu_tnl_association_to_update_list: Option<GnbCuTnlAssociationToUpdateList>,
    pub cells_to_be_barred_list: Option<CellsToBeBarredList>,
    pub protected_eutra_resources_list: Option<ProtectedEutraResourcesList>,
    pub neighbour_cell_information_list: Option<NeighbourCellInformationList>,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
    pub ul_bh_non_up_traffic_mapping: Option<UlBhNonUpTrafficMapping>,
    pub bap_address: Option<BapAddress>,
}

impl GnbCuConfigurationUpdate {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cells_to_be_activated_list: Option<CellsToBeActivatedList> = None;
        let mut cells_to_be_deactivated_list: Option<CellsToBeDeactivatedList> = None;
        let mut gnb_cu_tnl_association_to_add_list: Option<GnbCuTnlAssociationToAddList> = None;
        let mut gnb_cu_tnl_association_to_remove_list: Option<GnbCuTnlAssociationToRemoveList> =
            None;
        let mut gnb_cu_tnl_association_to_update_list: Option<GnbCuTnlAssociationToUpdateList> =
            None;
        let mut cells_to_be_barred_list: Option<CellsToBeBarredList> = None;
        let mut protected_eutra_resources_list: Option<ProtectedEutraResourcesList> = None;
        let mut neighbour_cell_information_list: Option<NeighbourCellInformationList> = None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;
        let mut ul_bh_non_up_traffic_mapping: Option<UlBhNonUpTrafficMapping> = None;
        let mut bap_address: Option<BapAddress> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                3 => cells_to_be_activated_list = Some(CellsToBeActivatedList::decode(data)?),
                5 => cells_to_be_deactivated_list = Some(CellsToBeDeactivatedList::decode(data)?),
                121 => {
                    gnb_cu_tnl_association_to_add_list =
                        Some(GnbCuTnlAssociationToAddList::decode(data)?)
                }
                123 => {
                    gnb_cu_tnl_association_to_remove_list =
                        Some(GnbCuTnlAssociationToRemoveList::decode(data)?)
                }
                125 => {
                    gnb_cu_tnl_association_to_update_list =
                        Some(GnbCuTnlAssociationToUpdateList::decode(data)?)
                }
                129 => cells_to_be_barred_list = Some(CellsToBeBarredList::decode(data)?),
                105 => {
                    protected_eutra_resources_list =
                        Some(ProtectedEutraResourcesList::decode(data)?)
                }
                244 => {
                    neighbour_cell_information_list =
                        Some(NeighbourCellInformationList::decode(data)?)
                }
                254 => {
                    transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?)
                }
                287 => ul_bh_non_up_traffic_mapping = Some(UlBhNonUpTrafficMapping::decode(data)?),
                281 => bap_address = Some(BapAddress::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            cells_to_be_activated_list,
            cells_to_be_deactivated_list,
            gnb_cu_tnl_association_to_add_list,
            gnb_cu_tnl_association_to_remove_list,
            gnb_cu_tnl_association_to_update_list,
            cells_to_be_barred_list,
            protected_eutra_resources_list,
            neighbour_cell_information_list,
            transport_layer_address_info,
            ul_bh_non_up_traffic_mapping,
            bap_address,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.cells_to_be_activated_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 3, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.cells_to_be_deactivated_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 5, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_cu_tnl_association_to_add_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 121, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_cu_tnl_association_to_remove_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 123, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_cu_tnl_association_to_update_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 125, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.cells_to_be_barred_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 129, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.protected_eutra_resources_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 105, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.neighbour_cell_information_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 244, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.transport_layer_address_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 254, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.ul_bh_non_up_traffic_mapping {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 287, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.bap_address {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 281, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for GnbCuConfigurationUpdate {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuConfigurationUpdate::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuConfigurationUpdate"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuConfigurationUpdate"))
    }
}
// CellsToBeDeactivatedList
#[derive(Clone, Debug)]
pub struct CellsToBeDeactivatedList(pub Vec<CellsToBeDeactivatedListItem>);

impl CellsToBeDeactivatedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(CellsToBeDeactivatedListItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 6, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for CellsToBeDeactivatedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        CellsToBeDeactivatedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellsToBeDeactivatedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellsToBeDeactivatedList"))
    }
}
// GnbCuTnlAssociationToAddList
#[derive(Clone, Debug)]
pub struct GnbCuTnlAssociationToAddList(pub Vec<GnbCuTnlAssociationToAddItem>);

impl GnbCuTnlAssociationToAddList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(GnbCuTnlAssociationToAddItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 120, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for GnbCuTnlAssociationToAddList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuTnlAssociationToAddList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuTnlAssociationToAddList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuTnlAssociationToAddList"))
    }
}
// GnbCuTnlAssociationToRemoveList
#[derive(Clone, Debug)]
pub struct GnbCuTnlAssociationToRemoveList(pub Vec<GnbCuTnlAssociationToRemoveItem>);

impl GnbCuTnlAssociationToRemoveList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(GnbCuTnlAssociationToRemoveItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 122, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for GnbCuTnlAssociationToRemoveList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuTnlAssociationToRemoveList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuTnlAssociationToRemoveList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuTnlAssociationToRemoveList"))
    }
}
// GnbCuTnlAssociationToUpdateList
#[derive(Clone, Debug)]
pub struct GnbCuTnlAssociationToUpdateList(pub Vec<GnbCuTnlAssociationToUpdateItem>);

impl GnbCuTnlAssociationToUpdateList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(GnbCuTnlAssociationToUpdateItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 124, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for GnbCuTnlAssociationToUpdateList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuTnlAssociationToUpdateList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuTnlAssociationToUpdateList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuTnlAssociationToUpdateList"))
    }
}
// CellsToBeBarredList
#[derive(Clone, Debug)]
pub struct CellsToBeBarredList(pub Vec<CellsToBeBarredItem>);

impl CellsToBeBarredList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(CellsToBeBarredItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 130, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for CellsToBeBarredList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        CellsToBeBarredList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellsToBeBarredList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellsToBeBarredList"))
    }
}
// ProtectedEutraResourcesList
#[derive(Clone, Debug)]
pub struct ProtectedEutraResourcesList(pub Vec<ProtectedEutraResourcesItem>);

impl ProtectedEutraResourcesList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(256), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(ProtectedEutraResourcesItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(256), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 168, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for ProtectedEutraResourcesList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ProtectedEutraResourcesList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ProtectedEutraResourcesList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ProtectedEutraResourcesList"))
    }
}
// NeighbourCellInformationList
#[derive(Clone, Debug)]
pub struct NeighbourCellInformationList(pub Vec<NeighbourCellInformationItem>);

impl NeighbourCellInformationList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(NeighbourCellInformationItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 255, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for NeighbourCellInformationList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        NeighbourCellInformationList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NeighbourCellInformationList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NeighbourCellInformationList"))
    }
}
// GnbCuConfigurationUpdateAcknowledge
#[derive(Clone, Debug)]
pub struct GnbCuConfigurationUpdateAcknowledge {
    pub transaction_id: TransactionId,
    pub cells_failed_to_be_activated_list: Option<CellsFailedToBeActivatedList>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub gnb_cu_tnl_association_setup_list: Option<GnbCuTnlAssociationSetupList>,
    pub gnb_cu_tnl_association_failed_to_setup_list: Option<GnbCuTnlAssociationFailedToSetupList>,
    pub dedicated_si_delivery_needed_ue_list: Option<DedicatedSiDeliveryNeededUeList>,
    pub transport_layer_address_info: Option<TransportLayerAddressInfo>,
}

impl GnbCuConfigurationUpdateAcknowledge {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cells_failed_to_be_activated_list: Option<CellsFailedToBeActivatedList> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut gnb_cu_tnl_association_setup_list: Option<GnbCuTnlAssociationSetupList> = None;
        let mut gnb_cu_tnl_association_failed_to_setup_list: Option<
            GnbCuTnlAssociationFailedToSetupList,
        > = None;
        let mut dedicated_si_delivery_needed_ue_list: Option<DedicatedSiDeliveryNeededUeList> =
            None;
        let mut transport_layer_address_info: Option<TransportLayerAddressInfo> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                1 => {
                    cells_failed_to_be_activated_list =
                        Some(CellsFailedToBeActivatedList::decode(data)?)
                }
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                132 => {
                    gnb_cu_tnl_association_setup_list =
                        Some(GnbCuTnlAssociationSetupList::decode(data)?)
                }
                134 => {
                    gnb_cu_tnl_association_failed_to_setup_list =
                        Some(GnbCuTnlAssociationFailedToSetupList::decode(data)?)
                }
                189 => {
                    dedicated_si_delivery_needed_ue_list =
                        Some(DedicatedSiDeliveryNeededUeList::decode(data)?)
                }
                254 => {
                    transport_layer_address_info = Some(TransportLayerAddressInfo::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            cells_failed_to_be_activated_list,
            criticality_diagnostics,
            gnb_cu_tnl_association_setup_list,
            gnb_cu_tnl_association_failed_to_setup_list,
            dedicated_si_delivery_needed_ue_list,
            transport_layer_address_info,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.cells_failed_to_be_activated_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 1, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_cu_tnl_association_setup_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 132, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_cu_tnl_association_failed_to_setup_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 134, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.dedicated_si_delivery_needed_ue_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 189, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.transport_layer_address_info {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 254, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for GnbCuConfigurationUpdateAcknowledge {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuConfigurationUpdateAcknowledge::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuConfigurationUpdateAcknowledge"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuConfigurationUpdateAcknowledge"))
    }
}
// CellsFailedToBeActivatedList
#[derive(Clone, Debug)]
pub struct CellsFailedToBeActivatedList(pub Vec<CellsFailedToBeActivatedListItem>);

impl CellsFailedToBeActivatedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(CellsFailedToBeActivatedListItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 2, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for CellsFailedToBeActivatedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        CellsFailedToBeActivatedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellsFailedToBeActivatedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellsFailedToBeActivatedList"))
    }
}
// GnbCuTnlAssociationSetupList
#[derive(Clone, Debug)]
pub struct GnbCuTnlAssociationSetupList(pub Vec<GnbCuTnlAssociationSetupItem>);

impl GnbCuTnlAssociationSetupList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(GnbCuTnlAssociationSetupItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 133, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for GnbCuTnlAssociationSetupList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuTnlAssociationSetupList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuTnlAssociationSetupList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuTnlAssociationSetupList"))
    }
}
// GnbCuTnlAssociationFailedToSetupList
#[derive(Clone, Debug)]
pub struct GnbCuTnlAssociationFailedToSetupList(pub Vec<GnbCuTnlAssociationFailedToSetupItem>);

impl GnbCuTnlAssociationFailedToSetupList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(GnbCuTnlAssociationFailedToSetupItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 135, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for GnbCuTnlAssociationFailedToSetupList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuTnlAssociationFailedToSetupList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuTnlAssociationFailedToSetupList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuTnlAssociationFailedToSetupList"))
    }
}
// GnbCuConfigurationUpdateFailure
#[derive(Clone, Debug)]
pub struct GnbCuConfigurationUpdateFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl GnbCuConfigurationUpdateFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                77 => time_to_wait = Some(TimeToWait::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.time_to_wait {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 77, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for GnbCuConfigurationUpdateFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbCuConfigurationUpdateFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuConfigurationUpdateFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbCuConfigurationUpdateFailure"))
    }
}
// GnbDuResourceCoordinationRequest
#[derive(Clone, Debug)]
pub struct GnbDuResourceCoordinationRequest {
    pub transaction_id: TransactionId,
    pub request_type: RequestType,
    pub eutra_nr_cell_resource_coordination_req_container:
        EutraNrCellResourceCoordinationReqContainer,
    pub ignore_resource_coordination_container: Option<IgnoreResourceCoordinationContainer>,
}

impl GnbDuResourceCoordinationRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut request_type: Option<RequestType> = None;
        let mut eutra_nr_cell_resource_coordination_req_container: Option<
            EutraNrCellResourceCoordinationReqContainer,
        > = None;
        let mut ignore_resource_coordination_container: Option<
            IgnoreResourceCoordinationContainer,
        > = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                106 => request_type = Some(RequestType::decode(data)?),
                101 => {
                    eutra_nr_cell_resource_coordination_req_container =
                        Some(EutraNrCellResourceCoordinationReqContainer::decode(data)?)
                }
                213 => {
                    ignore_resource_coordination_container =
                        Some(IgnoreResourceCoordinationContainer::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let request_type = request_type.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE request_type"
        )))?;
        let eutra_nr_cell_resource_coordination_req_container =
            eutra_nr_cell_resource_coordination_req_container.ok_or(aper::AperCodecError::new(
                format!("Missing mandatory IE eutra_nr_cell_resource_coordination_req_container"),
            ))?;
        Ok(Self {
            transaction_id,
            request_type,
            eutra_nr_cell_resource_coordination_req_container,
            ignore_resource_coordination_container,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.request_type.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 106, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.eutra_nr_cell_resource_coordination_req_container
            .encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 101, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.ignore_resource_coordination_container {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 213, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for GnbDuResourceCoordinationRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbDuResourceCoordinationRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuResourceCoordinationRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuResourceCoordinationRequest"))
    }
}
// GnbDuResourceCoordinationResponse
#[derive(Clone, Debug)]
pub struct GnbDuResourceCoordinationResponse {
    pub transaction_id: TransactionId,
    pub eutra_nr_cell_resource_coordination_req_ack_container:
        EutraNrCellResourceCoordinationReqAckContainer,
}

impl GnbDuResourceCoordinationResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut eutra_nr_cell_resource_coordination_req_ack_container: Option<
            EutraNrCellResourceCoordinationReqAckContainer,
        > = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                102 => {
                    eutra_nr_cell_resource_coordination_req_ack_container = Some(
                        EutraNrCellResourceCoordinationReqAckContainer::decode(data)?,
                    )
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let eutra_nr_cell_resource_coordination_req_ack_container =
            eutra_nr_cell_resource_coordination_req_ack_container.ok_or(
                aper::AperCodecError::new(format!(
                    "Missing mandatory IE eutra_nr_cell_resource_coordination_req_ack_container"
                )),
            )?;
        Ok(Self {
            transaction_id,
            eutra_nr_cell_resource_coordination_req_ack_container,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.eutra_nr_cell_resource_coordination_req_ack_container
            .encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 102, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for GnbDuResourceCoordinationResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbDuResourceCoordinationResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuResourceCoordinationResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuResourceCoordinationResponse"))
    }
}
// UeContextSetupRequest
#[derive(Clone, Debug)]
pub struct UeContextSetupRequest {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId>,
    pub sp_cell_id: Nrcgi,
    pub serv_cell_index: ServCellIndex,
    pub sp_cell_ul_configured: Option<CellUlConfigured>,
    pub c_uto_durrc_information: CUtoDurrcInformation,
    pub candidate_sp_cell_list: Option<CandidateSpCellList>,
    pub drx_cycle: Option<DrxCycle>,
    pub resource_coordination_transfer_container: Option<ResourceCoordinationTransferContainer>,
    pub s_cell_to_be_setup_list: Option<SCellToBeSetupList>,
    pub sr_bs_to_be_setup_list: Option<SrBsToBeSetupList>,
    pub dr_bs_to_be_setup_list: Option<DrBsToBeSetupList>,
    pub inactivity_monitoring_request: Option<InactivityMonitoringRequest>,
    pub rat_frequency_priority_information: Option<RatFrequencyPriorityInformation>,
    pub rrc_container: Option<RrcContainer>,
    pub masked_imeisv: Option<MaskedImeisv>,
    pub serving_plmn: Option<PlmnIdentity>,
    pub gnb_du_ue_ambr_ul: Option<BitRate>,
    pub rrc_delivery_status_request: Option<RrcDeliveryStatusRequest>,
    pub resource_coordination_transfer_information: Option<ResourceCoordinationTransferInformation>,
    pub serving_cell_mo: Option<ServingCellMo>,
    pub new_gnb_cu_ue_f1ap_id: Option<GnbDuUeF1apId>,
    pub ranueid: Option<Ranueid>,
    pub trace_activation: Option<TraceActivation>,
    pub additional_rrm_priority_index: Option<AdditionalRrmPriorityIndex>,
    pub bh_channels_to_be_setup_list: Option<BhChannelsToBeSetupList>,
    pub configured_bap_address: Option<BapAddress>,
    pub nrv2x_services_authorized: Option<Nrv2xServicesAuthorized>,
    pub ltev2x_services_authorized: Option<Ltev2xServicesAuthorized>,
    pub nrue_sidelink_aggregate_maximum_bitrate: Option<NrueSidelinkAggregateMaximumBitrate>,
    pub lteue_sidelink_aggregate_maximum_bitrate: Option<LteueSidelinkAggregateMaximumBitrate>,
    pub pc5_link_ambr: Option<BitRate>,
    pub sldr_bs_to_be_setup_list: Option<SldrBsToBeSetupList>,
    pub conditional_inter_du_mobility_information: Option<ConditionalInterDuMobilityInformation>,
    pub management_based_mdt_plmn_list: Option<MdtPlmnList>,
    pub serving_nid: Option<Nid>,
    pub f1c_transfer_path: Option<F1cTransferPath>,
}

impl UeContextSetupRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut sp_cell_id: Option<Nrcgi> = None;
        let mut serv_cell_index: Option<ServCellIndex> = None;
        let mut sp_cell_ul_configured: Option<CellUlConfigured> = None;
        let mut c_uto_durrc_information: Option<CUtoDurrcInformation> = None;
        let mut candidate_sp_cell_list: Option<CandidateSpCellList> = None;
        let mut drx_cycle: Option<DrxCycle> = None;
        let mut resource_coordination_transfer_container: Option<
            ResourceCoordinationTransferContainer,
        > = None;
        let mut s_cell_to_be_setup_list: Option<SCellToBeSetupList> = None;
        let mut sr_bs_to_be_setup_list: Option<SrBsToBeSetupList> = None;
        let mut dr_bs_to_be_setup_list: Option<DrBsToBeSetupList> = None;
        let mut inactivity_monitoring_request: Option<InactivityMonitoringRequest> = None;
        let mut rat_frequency_priority_information: Option<RatFrequencyPriorityInformation> = None;
        let mut rrc_container: Option<RrcContainer> = None;
        let mut masked_imeisv: Option<MaskedImeisv> = None;
        let mut serving_plmn: Option<PlmnIdentity> = None;
        let mut gnb_du_ue_ambr_ul: Option<BitRate> = None;
        let mut rrc_delivery_status_request: Option<RrcDeliveryStatusRequest> = None;
        let mut resource_coordination_transfer_information: Option<
            ResourceCoordinationTransferInformation,
        > = None;
        let mut serving_cell_mo: Option<ServingCellMo> = None;
        let mut new_gnb_cu_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut ranueid: Option<Ranueid> = None;
        let mut trace_activation: Option<TraceActivation> = None;
        let mut additional_rrm_priority_index: Option<AdditionalRrmPriorityIndex> = None;
        let mut bh_channels_to_be_setup_list: Option<BhChannelsToBeSetupList> = None;
        let mut configured_bap_address: Option<BapAddress> = None;
        let mut nrv2x_services_authorized: Option<Nrv2xServicesAuthorized> = None;
        let mut ltev2x_services_authorized: Option<Ltev2xServicesAuthorized> = None;
        let mut nrue_sidelink_aggregate_maximum_bitrate: Option<
            NrueSidelinkAggregateMaximumBitrate,
        > = None;
        let mut lteue_sidelink_aggregate_maximum_bitrate: Option<
            LteueSidelinkAggregateMaximumBitrate,
        > = None;
        let mut pc5_link_ambr: Option<BitRate> = None;
        let mut sldr_bs_to_be_setup_list: Option<SldrBsToBeSetupList> = None;
        let mut conditional_inter_du_mobility_information: Option<
            ConditionalInterDuMobilityInformation,
        > = None;
        let mut management_based_mdt_plmn_list: Option<MdtPlmnList> = None;
        let mut serving_nid: Option<Nid> = None;
        let mut f1c_transfer_path: Option<F1cTransferPath> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                63 => sp_cell_id = Some(Nrcgi::decode(data)?),
                107 => serv_cell_index = Some(ServCellIndex::decode(data)?),
                96 => sp_cell_ul_configured = Some(CellUlConfigured::decode(data)?),
                9 => c_uto_durrc_information = Some(CUtoDurrcInformation::decode(data)?),
                90 => candidate_sp_cell_list = Some(CandidateSpCellList::decode(data)?),
                38 => drx_cycle = Some(DrxCycle::decode(data)?),
                49 => {
                    resource_coordination_transfer_container =
                        Some(ResourceCoordinationTransferContainer::decode(data)?)
                }
                54 => s_cell_to_be_setup_list = Some(SCellToBeSetupList::decode(data)?),
                74 => sr_bs_to_be_setup_list = Some(SrBsToBeSetupList::decode(data)?),
                35 => dr_bs_to_be_setup_list = Some(DrBsToBeSetupList::decode(data)?),
                97 => {
                    inactivity_monitoring_request = Some(InactivityMonitoringRequest::decode(data)?)
                }
                108 => {
                    rat_frequency_priority_information =
                        Some(RatFrequencyPriorityInformation::decode(data)?)
                }
                50 => rrc_container = Some(RrcContainer::decode(data)?),
                126 => masked_imeisv = Some(MaskedImeisv::decode(data)?),
                165 => serving_plmn = Some(PlmnIdentity::decode(data)?),
                158 => gnb_du_ue_ambr_ul = Some(BitRate::decode(data)?),
                184 => rrc_delivery_status_request = Some(RrcDeliveryStatusRequest::decode(data)?),
                195 => {
                    resource_coordination_transfer_information =
                        Some(ResourceCoordinationTransferInformation::decode(data)?)
                }
                182 => serving_cell_mo = Some(ServingCellMo::decode(data)?),
                217 => new_gnb_cu_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                226 => ranueid = Some(Ranueid::decode(data)?),
                242 => trace_activation = Some(TraceActivation::decode(data)?),
                248 => {
                    additional_rrm_priority_index = Some(AdditionalRrmPriorityIndex::decode(data)?)
                }
                258 => bh_channels_to_be_setup_list = Some(BhChannelsToBeSetupList::decode(data)?),
                282 => configured_bap_address = Some(BapAddress::decode(data)?),
                306 => nrv2x_services_authorized = Some(Nrv2xServicesAuthorized::decode(data)?),
                307 => ltev2x_services_authorized = Some(Ltev2xServicesAuthorized::decode(data)?),
                308 => {
                    nrue_sidelink_aggregate_maximum_bitrate =
                        Some(NrueSidelinkAggregateMaximumBitrate::decode(data)?)
                }
                309 => {
                    lteue_sidelink_aggregate_maximum_bitrate =
                        Some(LteueSidelinkAggregateMaximumBitrate::decode(data)?)
                }
                340 => pc5_link_ambr = Some(BitRate::decode(data)?),
                330 => sldr_bs_to_be_setup_list = Some(SldrBsToBeSetupList::decode(data)?),
                373 => {
                    conditional_inter_du_mobility_information =
                        Some(ConditionalInterDuMobilityInformation::decode(data)?)
                }
                377 => management_based_mdt_plmn_list = Some(MdtPlmnList::decode(data)?),
                382 => serving_nid = Some(Nid::decode(data)?),
                428 => f1c_transfer_path = Some(F1cTransferPath::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let sp_cell_id = sp_cell_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE sp_cell_id"
        )))?;
        let serv_cell_index = serv_cell_index.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE serv_cell_index"
        )))?;
        let c_uto_durrc_information = c_uto_durrc_information.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE c_uto_durrc_information"),
        ))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            sp_cell_id,
            serv_cell_index,
            sp_cell_ul_configured,
            c_uto_durrc_information,
            candidate_sp_cell_list,
            drx_cycle,
            resource_coordination_transfer_container,
            s_cell_to_be_setup_list,
            sr_bs_to_be_setup_list,
            dr_bs_to_be_setup_list,
            inactivity_monitoring_request,
            rat_frequency_priority_information,
            rrc_container,
            masked_imeisv,
            serving_plmn,
            gnb_du_ue_ambr_ul,
            rrc_delivery_status_request,
            resource_coordination_transfer_information,
            serving_cell_mo,
            new_gnb_cu_ue_f1ap_id,
            ranueid,
            trace_activation,
            additional_rrm_priority_index,
            bh_channels_to_be_setup_list,
            configured_bap_address,
            nrv2x_services_authorized,
            ltev2x_services_authorized,
            nrue_sidelink_aggregate_maximum_bitrate,
            lteue_sidelink_aggregate_maximum_bitrate,
            pc5_link_ambr,
            sldr_bs_to_be_setup_list,
            conditional_inter_du_mobility_information,
            management_based_mdt_plmn_list,
            serving_nid,
            f1c_transfer_path,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_du_ue_f1ap_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.sp_cell_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 63, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.serv_cell_index.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 107, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.sp_cell_ul_configured {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 96, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.c_uto_durrc_information.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 9, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.candidate_sp_cell_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 90, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.drx_cycle {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 38, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.resource_coordination_transfer_container {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 49, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.s_cell_to_be_setup_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 54, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sr_bs_to_be_setup_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 74, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.dr_bs_to_be_setup_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 35, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.inactivity_monitoring_request {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 97, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.rat_frequency_priority_information {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 108, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.rrc_container {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 50, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.masked_imeisv {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 126, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.serving_plmn {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 165, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_du_ue_ambr_ul {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 158, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.rrc_delivery_status_request {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 184, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.resource_coordination_transfer_information {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 195, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.serving_cell_mo {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 182, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.new_gnb_cu_ue_f1ap_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 217, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.ranueid {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 226, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.trace_activation {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 242, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.additional_rrm_priority_index {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 248, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.bh_channels_to_be_setup_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 258, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.configured_bap_address {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 282, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.nrv2x_services_authorized {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 306, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.ltev2x_services_authorized {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 307, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.nrue_sidelink_aggregate_maximum_bitrate {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 308, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.lteue_sidelink_aggregate_maximum_bitrate {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 309, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.pc5_link_ambr {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 340, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sldr_bs_to_be_setup_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 330, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.conditional_inter_du_mobility_information {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 373, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.management_based_mdt_plmn_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 377, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.serving_nid {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 382, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.f1c_transfer_path {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 428, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for UeContextSetupRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UeContextSetupRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextSetupRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextSetupRequest"))
    }
}
// CandidateSpCellList
#[derive(Clone, Debug)]
pub struct CandidateSpCellList(pub Vec<CandidateSpCellItem>);

impl CandidateSpCellList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(CandidateSpCellItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 91, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for CandidateSpCellList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        CandidateSpCellList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CandidateSpCellList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CandidateSpCellList"))
    }
}
// SCellToBeSetupList
#[derive(Clone, Debug)]
pub struct SCellToBeSetupList(pub Vec<SCellToBeSetupItem>);

impl SCellToBeSetupList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SCellToBeSetupItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 53, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SCellToBeSetupList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SCellToBeSetupList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SCellToBeSetupList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SCellToBeSetupList"))
    }
}
// SrBsToBeSetupList
#[derive(Clone, Debug)]
pub struct SrBsToBeSetupList(pub Vec<SrBsToBeSetupItem>);

impl SrBsToBeSetupList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(8), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SrBsToBeSetupItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(8), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 73, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SrBsToBeSetupList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SrBsToBeSetupList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrBsToBeSetupList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrBsToBeSetupList"))
    }
}
// DrBsToBeSetupList
#[derive(Clone, Debug)]
pub struct DrBsToBeSetupList(pub Vec<DrBsToBeSetupItem>);

impl DrBsToBeSetupList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(DrBsToBeSetupItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 34, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for DrBsToBeSetupList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DrBsToBeSetupList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsToBeSetupList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsToBeSetupList"))
    }
}
// BhChannelsToBeSetupList
#[derive(Clone, Debug)]
pub struct BhChannelsToBeSetupList(pub Vec<BhChannelsToBeSetupItem>);

impl BhChannelsToBeSetupList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65536), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(BhChannelsToBeSetupItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65536), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 259, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for BhChannelsToBeSetupList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BhChannelsToBeSetupList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsToBeSetupList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsToBeSetupList"))
    }
}
// SldrBsToBeSetupList
#[derive(Clone, Debug)]
pub struct SldrBsToBeSetupList(pub Vec<SldrBsToBeSetupItem>);

impl SldrBsToBeSetupList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SldrBsToBeSetupItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 329, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SldrBsToBeSetupList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SldrBsToBeSetupList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsToBeSetupList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsToBeSetupList"))
    }
}
// UeContextSetupResponse
#[derive(Clone, Debug)]
pub struct UeContextSetupResponse {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub d_uto_currc_information: DUtoCurrcInformation,
    pub c_rnti: Option<CRnti>,
    pub resource_coordination_transfer_container: Option<ResourceCoordinationTransferContainer>,
    pub full_configuration: Option<FullConfiguration>,
    pub dr_bs_setup_list: Option<DrBsSetupList>,
    pub sr_bs_failed_to_be_setup_list: Option<SrBsFailedToBeSetupList>,
    pub dr_bs_failed_to_be_setup_list: Option<DrBsFailedToBeSetupList>,
    pub s_cell_failedto_setup_list: Option<SCellFailedtoSetupList>,
    pub inactivity_monitoring_response: Option<InactivityMonitoringResponse>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub sr_bs_setup_list: Option<SrBsSetupList>,
    pub bh_channels_setup_list: Option<BhChannelsSetupList>,
    pub bh_channels_failed_to_be_setup_list: Option<BhChannelsFailedToBeSetupList>,
    pub sldr_bs_setup_list: Option<SldrBsSetupList>,
    pub sldr_bs_failed_to_be_setup_list: Option<SldrBsFailedToBeSetupList>,
    pub requested_target_cell_global_id: Option<Nrcgi>,
}

impl UeContextSetupResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut d_uto_currc_information: Option<DUtoCurrcInformation> = None;
        let mut c_rnti: Option<CRnti> = None;
        let mut resource_coordination_transfer_container: Option<
            ResourceCoordinationTransferContainer,
        > = None;
        let mut full_configuration: Option<FullConfiguration> = None;
        let mut dr_bs_setup_list: Option<DrBsSetupList> = None;
        let mut sr_bs_failed_to_be_setup_list: Option<SrBsFailedToBeSetupList> = None;
        let mut dr_bs_failed_to_be_setup_list: Option<DrBsFailedToBeSetupList> = None;
        let mut s_cell_failedto_setup_list: Option<SCellFailedtoSetupList> = None;
        let mut inactivity_monitoring_response: Option<InactivityMonitoringResponse> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut sr_bs_setup_list: Option<SrBsSetupList> = None;
        let mut bh_channels_setup_list: Option<BhChannelsSetupList> = None;
        let mut bh_channels_failed_to_be_setup_list: Option<BhChannelsFailedToBeSetupList> = None;
        let mut sldr_bs_setup_list: Option<SldrBsSetupList> = None;
        let mut sldr_bs_failed_to_be_setup_list: Option<SldrBsFailedToBeSetupList> = None;
        let mut requested_target_cell_global_id: Option<Nrcgi> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                39 => d_uto_currc_information = Some(DUtoCurrcInformation::decode(data)?),
                95 => c_rnti = Some(CRnti::decode(data)?),
                49 => {
                    resource_coordination_transfer_container =
                        Some(ResourceCoordinationTransferContainer::decode(data)?)
                }
                94 => full_configuration = Some(FullConfiguration::decode(data)?),
                27 => dr_bs_setup_list = Some(DrBsSetupList::decode(data)?),
                66 => sr_bs_failed_to_be_setup_list = Some(SrBsFailedToBeSetupList::decode(data)?),
                15 => dr_bs_failed_to_be_setup_list = Some(DrBsFailedToBeSetupList::decode(data)?),
                83 => s_cell_failedto_setup_list = Some(SCellFailedtoSetupList::decode(data)?),
                98 => {
                    inactivity_monitoring_response =
                        Some(InactivityMonitoringResponse::decode(data)?)
                }
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                202 => sr_bs_setup_list = Some(SrBsSetupList::decode(data)?),
                260 => bh_channels_setup_list = Some(BhChannelsSetupList::decode(data)?),
                279 => {
                    bh_channels_failed_to_be_setup_list =
                        Some(BhChannelsFailedToBeSetupList::decode(data)?)
                }
                324 => sldr_bs_setup_list = Some(SldrBsSetupList::decode(data)?),
                316 => {
                    sldr_bs_failed_to_be_setup_list = Some(SldrBsFailedToBeSetupList::decode(data)?)
                }
                376 => requested_target_cell_global_id = Some(Nrcgi::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let d_uto_currc_information = d_uto_currc_information.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE d_uto_currc_information"),
        ))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            d_uto_currc_information,
            c_rnti,
            resource_coordination_transfer_container,
            full_configuration,
            dr_bs_setup_list,
            sr_bs_failed_to_be_setup_list,
            dr_bs_failed_to_be_setup_list,
            s_cell_failedto_setup_list,
            inactivity_monitoring_response,
            criticality_diagnostics,
            sr_bs_setup_list,
            bh_channels_setup_list,
            bh_channels_failed_to_be_setup_list,
            sldr_bs_setup_list,
            sldr_bs_failed_to_be_setup_list,
            requested_target_cell_global_id,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.d_uto_currc_information.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 39, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.c_rnti {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 95, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.resource_coordination_transfer_container {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 49, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.full_configuration {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 94, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.dr_bs_setup_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 27, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sr_bs_failed_to_be_setup_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 66, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.dr_bs_failed_to_be_setup_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 15, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.s_cell_failedto_setup_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 83, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.inactivity_monitoring_response {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 98, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sr_bs_setup_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 202, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.bh_channels_setup_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 260, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.bh_channels_failed_to_be_setup_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 279, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sldr_bs_setup_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 324, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sldr_bs_failed_to_be_setup_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 316, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.requested_target_cell_global_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 376, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for UeContextSetupResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UeContextSetupResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextSetupResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextSetupResponse"))
    }
}
// DrBsSetupList
#[derive(Clone, Debug)]
pub struct DrBsSetupList(pub Vec<DrBsSetupItem>);

impl DrBsSetupList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(DrBsSetupItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 26, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for DrBsSetupList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DrBsSetupList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsSetupList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsSetupList"))
    }
}
// SrBsFailedToBeSetupList
#[derive(Clone, Debug)]
pub struct SrBsFailedToBeSetupList(pub Vec<SrBsFailedToBeSetupItem>);

impl SrBsFailedToBeSetupList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(8), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SrBsFailedToBeSetupItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(8), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 65, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SrBsFailedToBeSetupList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SrBsFailedToBeSetupList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrBsFailedToBeSetupList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrBsFailedToBeSetupList"))
    }
}
// DrBsFailedToBeSetupList
#[derive(Clone, Debug)]
pub struct DrBsFailedToBeSetupList(pub Vec<DrBsFailedToBeSetupItem>);

impl DrBsFailedToBeSetupList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(DrBsFailedToBeSetupItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 14, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for DrBsFailedToBeSetupList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DrBsFailedToBeSetupList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsFailedToBeSetupList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsFailedToBeSetupList"))
    }
}
// SCellFailedtoSetupList
#[derive(Clone, Debug)]
pub struct SCellFailedtoSetupList(pub Vec<SCellFailedtoSetupItem>);

impl SCellFailedtoSetupList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SCellFailedtoSetupItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 84, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SCellFailedtoSetupList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SCellFailedtoSetupList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SCellFailedtoSetupList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SCellFailedtoSetupList"))
    }
}
// SrBsSetupList
#[derive(Clone, Debug)]
pub struct SrBsSetupList(pub Vec<SrBsSetupItem>);

impl SrBsSetupList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(8), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SrBsSetupItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(8), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 203, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SrBsSetupList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SrBsSetupList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrBsSetupList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrBsSetupList"))
    }
}
// BhChannelsSetupList
#[derive(Clone, Debug)]
pub struct BhChannelsSetupList(pub Vec<BhChannelsSetupItem>);

impl BhChannelsSetupList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65536), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(BhChannelsSetupItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65536), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 261, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for BhChannelsSetupList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BhChannelsSetupList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsSetupList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsSetupList"))
    }
}
// BhChannelsFailedToBeSetupList
#[derive(Clone, Debug)]
pub struct BhChannelsFailedToBeSetupList(pub Vec<BhChannelsFailedToBeSetupItem>);

impl BhChannelsFailedToBeSetupList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65536), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(BhChannelsFailedToBeSetupItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65536), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 278, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for BhChannelsFailedToBeSetupList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BhChannelsFailedToBeSetupList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsFailedToBeSetupList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsFailedToBeSetupList"))
    }
}
// SldrBsSetupList
#[derive(Clone, Debug)]
pub struct SldrBsSetupList(pub Vec<SldrBsSetupItem>);

impl SldrBsSetupList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SldrBsSetupItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 323, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SldrBsSetupList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SldrBsSetupList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsSetupList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsSetupList"))
    }
}
// SldrBsFailedToBeSetupList
#[derive(Clone, Debug)]
pub struct SldrBsFailedToBeSetupList(pub Vec<SldrBsFailedToBeSetupItem>);

impl SldrBsFailedToBeSetupList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SldrBsFailedToBeSetupItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 315, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SldrBsFailedToBeSetupList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SldrBsFailedToBeSetupList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsFailedToBeSetupList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsFailedToBeSetupList"))
    }
}
// UeContextSetupFailure
#[derive(Clone, Debug)]
pub struct UeContextSetupFailure {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId>,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub potential_sp_cell_list: Option<PotentialSpCellList>,
    pub requested_target_cell_global_id: Option<Nrcgi>,
}

impl UeContextSetupFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut potential_sp_cell_list: Option<PotentialSpCellList> = None;
        let mut requested_target_cell_global_id: Option<Nrcgi> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                92 => potential_sp_cell_list = Some(PotentialSpCellList::decode(data)?),
                376 => requested_target_cell_global_id = Some(Nrcgi::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            cause,
            criticality_diagnostics,
            potential_sp_cell_list,
            requested_target_cell_global_id,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_du_ue_f1ap_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.potential_sp_cell_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 92, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.requested_target_cell_global_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 376, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for UeContextSetupFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UeContextSetupFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextSetupFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextSetupFailure"))
    }
}
// PotentialSpCellList
#[derive(Clone, Debug)]
pub struct PotentialSpCellList(pub Vec<PotentialSpCellItem>);

impl PotentialSpCellList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(0), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(PotentialSpCellItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(0), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 93, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for PotentialSpCellList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PotentialSpCellList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PotentialSpCellList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PotentialSpCellList"))
    }
}
// UeContextReleaseRequest
#[derive(Clone, Debug)]
pub struct UeContextReleaseRequest {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub cause: Cause,
    pub target_cells_to_cancel: Option<TargetCellList>,
}

impl UeContextReleaseRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut target_cells_to_cancel: Option<TargetCellList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                375 => target_cells_to_cancel = Some(TargetCellList::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            cause,
            target_cells_to_cancel,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.target_cells_to_cancel {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 375, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for UeContextReleaseRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UeContextReleaseRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextReleaseRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextReleaseRequest"))
    }
}
// UeContextReleaseCommand
#[derive(Clone, Debug)]
pub struct UeContextReleaseCommand {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub cause: Cause,
    pub rrc_container: Option<RrcContainer>,
    pub srbid: Option<Srbid>,
    pub old_gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId>,
    pub execute_duplication: Option<ExecuteDuplication>,
    pub rrc_delivery_status_request: Option<RrcDeliveryStatusRequest>,
    pub target_cells_to_cancel: Option<TargetCellList>,
}

impl UeContextReleaseCommand {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut rrc_container: Option<RrcContainer> = None;
        let mut srbid: Option<Srbid> = None;
        let mut old_gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut execute_duplication: Option<ExecuteDuplication> = None;
        let mut rrc_delivery_status_request: Option<RrcDeliveryStatusRequest> = None;
        let mut target_cells_to_cancel: Option<TargetCellList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                50 => rrc_container = Some(RrcContainer::decode(data)?),
                64 => srbid = Some(Srbid::decode(data)?),
                47 => old_gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                109 => execute_duplication = Some(ExecuteDuplication::decode(data)?),
                184 => rrc_delivery_status_request = Some(RrcDeliveryStatusRequest::decode(data)?),
                375 => target_cells_to_cancel = Some(TargetCellList::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            cause,
            rrc_container,
            srbid,
            old_gnb_du_ue_f1ap_id,
            execute_duplication,
            rrc_delivery_status_request,
            target_cells_to_cancel,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.rrc_container {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 50, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.srbid {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 64, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.old_gnb_du_ue_f1ap_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 47, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.execute_duplication {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 109, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.rrc_delivery_status_request {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 184, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.target_cells_to_cancel {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 375, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for UeContextReleaseCommand {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UeContextReleaseCommand::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextReleaseCommand"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextReleaseCommand"))
    }
}
// UeContextReleaseComplete
#[derive(Clone, Debug)]
pub struct UeContextReleaseComplete {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl UeContextReleaseComplete {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for UeContextReleaseComplete {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UeContextReleaseComplete::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextReleaseComplete"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextReleaseComplete"))
    }
}
// UeContextModificationRequest
#[derive(Clone, Debug)]
pub struct UeContextModificationRequest {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub sp_cell_id: Option<Nrcgi>,
    pub serv_cell_index: Option<ServCellIndex>,
    pub sp_cell_ul_configured: Option<CellUlConfigured>,
    pub drx_cycle: Option<DrxCycle>,
    pub c_uto_durrc_information: Option<CUtoDurrcInformation>,
    pub transmission_action_indicator: Option<TransmissionActionIndicator>,
    pub resource_coordination_transfer_container: Option<ResourceCoordinationTransferContainer>,
    pub rrc_reconfiguration_complete_indicator: Option<RrcReconfigurationCompleteIndicator>,
    pub rrc_container: Option<RrcContainer>,
    pub s_cell_to_be_setup_mod_list: Option<SCellToBeSetupModList>,
    pub s_cell_to_be_removed_list: Option<SCellToBeRemovedList>,
    pub sr_bs_to_be_setup_mod_list: Option<SrBsToBeSetupModList>,
    pub dr_bs_to_be_setup_mod_list: Option<DrBsToBeSetupModList>,
    pub dr_bs_to_be_modified_list: Option<DrBsToBeModifiedList>,
    pub sr_bs_to_be_released_list: Option<SrBsToBeReleasedList>,
    pub dr_bs_to_be_released_list: Option<DrBsToBeReleasedList>,
    pub inactivity_monitoring_request: Option<InactivityMonitoringRequest>,
    pub rat_frequency_priority_information: Option<RatFrequencyPriorityInformation>,
    pub drx_configuration_indicator: Option<DrxConfigurationIndicator>,
    pub rlc_failure_indication: Option<RlcFailureIndication>,
    pub uplink_tx_direct_current_list_information: Option<UplinkTxDirectCurrentListInformation>,
    pub gnb_du_configuration_query: Option<GnbDuConfigurationQuery>,
    pub gnb_du_ue_ambr_ul: Option<BitRate>,
    pub execute_duplication: Option<ExecuteDuplication>,
    pub rrc_delivery_status_request: Option<RrcDeliveryStatusRequest>,
    pub resource_coordination_transfer_information: Option<ResourceCoordinationTransferInformation>,
    pub serving_cell_mo: Option<ServingCellMo>,
    pub needfor_gap: Option<NeedforGap>,
    pub full_configuration: Option<FullConfiguration>,
    pub additional_rrm_priority_index: Option<AdditionalRrmPriorityIndex>,
    pub lower_layer_presence_status_change: Option<LowerLayerPresenceStatusChange>,
    pub bh_channels_to_be_setup_mod_list: Option<BhChannelsToBeSetupModList>,
    pub bh_channels_to_be_modified_list: Option<BhChannelsToBeModifiedList>,
    pub bh_channels_to_be_released_list: Option<BhChannelsToBeReleasedList>,
    pub nrv2x_services_authorized: Option<Nrv2xServicesAuthorized>,
    pub ltev2x_services_authorized: Option<Ltev2xServicesAuthorized>,
    pub nrue_sidelink_aggregate_maximum_bitrate: Option<NrueSidelinkAggregateMaximumBitrate>,
    pub lteue_sidelink_aggregate_maximum_bitrate: Option<LteueSidelinkAggregateMaximumBitrate>,
    pub pc5_link_ambr: Option<BitRate>,
    pub sldr_bs_to_be_setup_mod_list: Option<SldrBsToBeSetupModList>,
    pub sldr_bs_to_be_modified_list: Option<SldrBsToBeModifiedList>,
    pub sldr_bs_to_be_released_list: Option<SldrBsToBeReleasedList>,
    pub conditional_intra_du_mobility_information: Option<ConditionalIntraDuMobilityInformation>,
    pub f1c_transfer_path: Option<F1cTransferPath>,
    pub scg_indicator: Option<ScgIndicator>,
}

impl UeContextModificationRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut sp_cell_id: Option<Nrcgi> = None;
        let mut serv_cell_index: Option<ServCellIndex> = None;
        let mut sp_cell_ul_configured: Option<CellUlConfigured> = None;
        let mut drx_cycle: Option<DrxCycle> = None;
        let mut c_uto_durrc_information: Option<CUtoDurrcInformation> = None;
        let mut transmission_action_indicator: Option<TransmissionActionIndicator> = None;
        let mut resource_coordination_transfer_container: Option<
            ResourceCoordinationTransferContainer,
        > = None;
        let mut rrc_reconfiguration_complete_indicator: Option<
            RrcReconfigurationCompleteIndicator,
        > = None;
        let mut rrc_container: Option<RrcContainer> = None;
        let mut s_cell_to_be_setup_mod_list: Option<SCellToBeSetupModList> = None;
        let mut s_cell_to_be_removed_list: Option<SCellToBeRemovedList> = None;
        let mut sr_bs_to_be_setup_mod_list: Option<SrBsToBeSetupModList> = None;
        let mut dr_bs_to_be_setup_mod_list: Option<DrBsToBeSetupModList> = None;
        let mut dr_bs_to_be_modified_list: Option<DrBsToBeModifiedList> = None;
        let mut sr_bs_to_be_released_list: Option<SrBsToBeReleasedList> = None;
        let mut dr_bs_to_be_released_list: Option<DrBsToBeReleasedList> = None;
        let mut inactivity_monitoring_request: Option<InactivityMonitoringRequest> = None;
        let mut rat_frequency_priority_information: Option<RatFrequencyPriorityInformation> = None;
        let mut drx_configuration_indicator: Option<DrxConfigurationIndicator> = None;
        let mut rlc_failure_indication: Option<RlcFailureIndication> = None;
        let mut uplink_tx_direct_current_list_information: Option<
            UplinkTxDirectCurrentListInformation,
        > = None;
        let mut gnb_du_configuration_query: Option<GnbDuConfigurationQuery> = None;
        let mut gnb_du_ue_ambr_ul: Option<BitRate> = None;
        let mut execute_duplication: Option<ExecuteDuplication> = None;
        let mut rrc_delivery_status_request: Option<RrcDeliveryStatusRequest> = None;
        let mut resource_coordination_transfer_information: Option<
            ResourceCoordinationTransferInformation,
        > = None;
        let mut serving_cell_mo: Option<ServingCellMo> = None;
        let mut needfor_gap: Option<NeedforGap> = None;
        let mut full_configuration: Option<FullConfiguration> = None;
        let mut additional_rrm_priority_index: Option<AdditionalRrmPriorityIndex> = None;
        let mut lower_layer_presence_status_change: Option<LowerLayerPresenceStatusChange> = None;
        let mut bh_channels_to_be_setup_mod_list: Option<BhChannelsToBeSetupModList> = None;
        let mut bh_channels_to_be_modified_list: Option<BhChannelsToBeModifiedList> = None;
        let mut bh_channels_to_be_released_list: Option<BhChannelsToBeReleasedList> = None;
        let mut nrv2x_services_authorized: Option<Nrv2xServicesAuthorized> = None;
        let mut ltev2x_services_authorized: Option<Ltev2xServicesAuthorized> = None;
        let mut nrue_sidelink_aggregate_maximum_bitrate: Option<
            NrueSidelinkAggregateMaximumBitrate,
        > = None;
        let mut lteue_sidelink_aggregate_maximum_bitrate: Option<
            LteueSidelinkAggregateMaximumBitrate,
        > = None;
        let mut pc5_link_ambr: Option<BitRate> = None;
        let mut sldr_bs_to_be_setup_mod_list: Option<SldrBsToBeSetupModList> = None;
        let mut sldr_bs_to_be_modified_list: Option<SldrBsToBeModifiedList> = None;
        let mut sldr_bs_to_be_released_list: Option<SldrBsToBeReleasedList> = None;
        let mut conditional_intra_du_mobility_information: Option<
            ConditionalIntraDuMobilityInformation,
        > = None;
        let mut f1c_transfer_path: Option<F1cTransferPath> = None;
        let mut scg_indicator: Option<ScgIndicator> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                63 => sp_cell_id = Some(Nrcgi::decode(data)?),
                107 => serv_cell_index = Some(ServCellIndex::decode(data)?),
                96 => sp_cell_ul_configured = Some(CellUlConfigured::decode(data)?),
                38 => drx_cycle = Some(DrxCycle::decode(data)?),
                9 => c_uto_durrc_information = Some(CUtoDurrcInformation::decode(data)?),
                79 => {
                    transmission_action_indicator = Some(TransmissionActionIndicator::decode(data)?)
                }
                49 => {
                    resource_coordination_transfer_container =
                        Some(ResourceCoordinationTransferContainer::decode(data)?)
                }
                87 => {
                    rrc_reconfiguration_complete_indicator =
                        Some(RrcReconfigurationCompleteIndicator::decode(data)?)
                }
                50 => rrc_container = Some(RrcContainer::decode(data)?),
                56 => s_cell_to_be_setup_mod_list = Some(SCellToBeSetupModList::decode(data)?),
                52 => s_cell_to_be_removed_list = Some(SCellToBeRemovedList::decode(data)?),
                76 => sr_bs_to_be_setup_mod_list = Some(SrBsToBeSetupModList::decode(data)?),
                37 => dr_bs_to_be_setup_mod_list = Some(DrBsToBeSetupModList::decode(data)?),
                31 => dr_bs_to_be_modified_list = Some(DrBsToBeModifiedList::decode(data)?),
                72 => sr_bs_to_be_released_list = Some(SrBsToBeReleasedList::decode(data)?),
                33 => dr_bs_to_be_released_list = Some(DrBsToBeReleasedList::decode(data)?),
                97 => {
                    inactivity_monitoring_request = Some(InactivityMonitoringRequest::decode(data)?)
                }
                108 => {
                    rat_frequency_priority_information =
                        Some(RatFrequencyPriorityInformation::decode(data)?)
                }
                159 => drx_configuration_indicator = Some(DrxConfigurationIndicator::decode(data)?),
                174 => rlc_failure_indication = Some(RlcFailureIndication::decode(data)?),
                175 => {
                    uplink_tx_direct_current_list_information =
                        Some(UplinkTxDirectCurrentListInformation::decode(data)?)
                }
                162 => gnb_du_configuration_query = Some(GnbDuConfigurationQuery::decode(data)?),
                158 => gnb_du_ue_ambr_ul = Some(BitRate::decode(data)?),
                109 => execute_duplication = Some(ExecuteDuplication::decode(data)?),
                184 => rrc_delivery_status_request = Some(RrcDeliveryStatusRequest::decode(data)?),
                195 => {
                    resource_coordination_transfer_information =
                        Some(ResourceCoordinationTransferInformation::decode(data)?)
                }
                182 => serving_cell_mo = Some(ServingCellMo::decode(data)?),
                215 => needfor_gap = Some(NeedforGap::decode(data)?),
                94 => full_configuration = Some(FullConfiguration::decode(data)?),
                248 => {
                    additional_rrm_priority_index = Some(AdditionalRrmPriorityIndex::decode(data)?)
                }
                253 => {
                    lower_layer_presence_status_change =
                        Some(LowerLayerPresenceStatusChange::decode(data)?)
                }
                267 => {
                    bh_channels_to_be_setup_mod_list =
                        Some(BhChannelsToBeSetupModList::decode(data)?)
                }
                263 => {
                    bh_channels_to_be_modified_list =
                        Some(BhChannelsToBeModifiedList::decode(data)?)
                }
                265 => {
                    bh_channels_to_be_released_list =
                        Some(BhChannelsToBeReleasedList::decode(data)?)
                }
                306 => nrv2x_services_authorized = Some(Nrv2xServicesAuthorized::decode(data)?),
                307 => ltev2x_services_authorized = Some(Ltev2xServicesAuthorized::decode(data)?),
                308 => {
                    nrue_sidelink_aggregate_maximum_bitrate =
                        Some(NrueSidelinkAggregateMaximumBitrate::decode(data)?)
                }
                309 => {
                    lteue_sidelink_aggregate_maximum_bitrate =
                        Some(LteueSidelinkAggregateMaximumBitrate::decode(data)?)
                }
                340 => pc5_link_ambr = Some(BitRate::decode(data)?),
                332 => sldr_bs_to_be_setup_mod_list = Some(SldrBsToBeSetupModList::decode(data)?),
                326 => sldr_bs_to_be_modified_list = Some(SldrBsToBeModifiedList::decode(data)?),
                328 => sldr_bs_to_be_released_list = Some(SldrBsToBeReleasedList::decode(data)?),
                374 => {
                    conditional_intra_du_mobility_information =
                        Some(ConditionalIntraDuMobilityInformation::decode(data)?)
                }
                428 => f1c_transfer_path = Some(F1cTransferPath::decode(data)?),
                432 => scg_indicator = Some(ScgIndicator::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            sp_cell_id,
            serv_cell_index,
            sp_cell_ul_configured,
            drx_cycle,
            c_uto_durrc_information,
            transmission_action_indicator,
            resource_coordination_transfer_container,
            rrc_reconfiguration_complete_indicator,
            rrc_container,
            s_cell_to_be_setup_mod_list,
            s_cell_to_be_removed_list,
            sr_bs_to_be_setup_mod_list,
            dr_bs_to_be_setup_mod_list,
            dr_bs_to_be_modified_list,
            sr_bs_to_be_released_list,
            dr_bs_to_be_released_list,
            inactivity_monitoring_request,
            rat_frequency_priority_information,
            drx_configuration_indicator,
            rlc_failure_indication,
            uplink_tx_direct_current_list_information,
            gnb_du_configuration_query,
            gnb_du_ue_ambr_ul,
            execute_duplication,
            rrc_delivery_status_request,
            resource_coordination_transfer_information,
            serving_cell_mo,
            needfor_gap,
            full_configuration,
            additional_rrm_priority_index,
            lower_layer_presence_status_change,
            bh_channels_to_be_setup_mod_list,
            bh_channels_to_be_modified_list,
            bh_channels_to_be_released_list,
            nrv2x_services_authorized,
            ltev2x_services_authorized,
            nrue_sidelink_aggregate_maximum_bitrate,
            lteue_sidelink_aggregate_maximum_bitrate,
            pc5_link_ambr,
            sldr_bs_to_be_setup_mod_list,
            sldr_bs_to_be_modified_list,
            sldr_bs_to_be_released_list,
            conditional_intra_du_mobility_information,
            f1c_transfer_path,
            scg_indicator,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.sp_cell_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 63, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.serv_cell_index {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 107, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sp_cell_ul_configured {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 96, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.drx_cycle {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 38, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.c_uto_durrc_information {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 9, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.transmission_action_indicator {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 79, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.resource_coordination_transfer_container {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 49, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.rrc_reconfiguration_complete_indicator {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 87, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.rrc_container {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 50, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.s_cell_to_be_setup_mod_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 56, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.s_cell_to_be_removed_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 52, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sr_bs_to_be_setup_mod_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 76, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.dr_bs_to_be_setup_mod_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 37, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.dr_bs_to_be_modified_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 31, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sr_bs_to_be_released_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 72, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.dr_bs_to_be_released_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 33, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.inactivity_monitoring_request {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 97, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.rat_frequency_priority_information {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 108, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.drx_configuration_indicator {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 159, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.rlc_failure_indication {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 174, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.uplink_tx_direct_current_list_information {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 175, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_du_configuration_query {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 162, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.gnb_du_ue_ambr_ul {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 158, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.execute_duplication {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 109, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.rrc_delivery_status_request {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 184, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.resource_coordination_transfer_information {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 195, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.serving_cell_mo {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 182, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.needfor_gap {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 215, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.full_configuration {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 94, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.additional_rrm_priority_index {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 248, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.lower_layer_presence_status_change {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 253, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.bh_channels_to_be_setup_mod_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 267, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.bh_channels_to_be_modified_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 263, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.bh_channels_to_be_released_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 265, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.nrv2x_services_authorized {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 306, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.ltev2x_services_authorized {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 307, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.nrue_sidelink_aggregate_maximum_bitrate {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 308, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.lteue_sidelink_aggregate_maximum_bitrate {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 309, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.pc5_link_ambr {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 340, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sldr_bs_to_be_setup_mod_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 332, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sldr_bs_to_be_modified_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 326, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sldr_bs_to_be_released_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 328, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.conditional_intra_du_mobility_information {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 374, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.f1c_transfer_path {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 428, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.scg_indicator {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 432, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for UeContextModificationRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UeContextModificationRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextModificationRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextModificationRequest"))
    }
}
// SCellToBeSetupModList
#[derive(Clone, Debug)]
pub struct SCellToBeSetupModList(pub Vec<SCellToBeSetupModItem>);

impl SCellToBeSetupModList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SCellToBeSetupModItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 55, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SCellToBeSetupModList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SCellToBeSetupModList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SCellToBeSetupModList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SCellToBeSetupModList"))
    }
}
// SCellToBeRemovedList
#[derive(Clone, Debug)]
pub struct SCellToBeRemovedList(pub Vec<SCellToBeRemovedItem>);

impl SCellToBeRemovedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SCellToBeRemovedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 51, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SCellToBeRemovedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SCellToBeRemovedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SCellToBeRemovedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SCellToBeRemovedList"))
    }
}
// SrBsToBeSetupModList
#[derive(Clone, Debug)]
pub struct SrBsToBeSetupModList(pub Vec<SrBsToBeSetupModItem>);

impl SrBsToBeSetupModList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(8), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SrBsToBeSetupModItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(8), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 75, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SrBsToBeSetupModList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SrBsToBeSetupModList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrBsToBeSetupModList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrBsToBeSetupModList"))
    }
}
// DrBsToBeSetupModList
#[derive(Clone, Debug)]
pub struct DrBsToBeSetupModList(pub Vec<DrBsToBeSetupModItem>);

impl DrBsToBeSetupModList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(DrBsToBeSetupModItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 36, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for DrBsToBeSetupModList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DrBsToBeSetupModList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsToBeSetupModList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsToBeSetupModList"))
    }
}
// BhChannelsToBeSetupModList
#[derive(Clone, Debug)]
pub struct BhChannelsToBeSetupModList(pub Vec<BhChannelsToBeSetupModItem>);

impl BhChannelsToBeSetupModList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65536), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(BhChannelsToBeSetupModItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65536), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 266, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for BhChannelsToBeSetupModList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BhChannelsToBeSetupModList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsToBeSetupModList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsToBeSetupModList"))
    }
}
// DrBsToBeModifiedList
#[derive(Clone, Debug)]
pub struct DrBsToBeModifiedList(pub Vec<DrBsToBeModifiedItem>);

impl DrBsToBeModifiedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(DrBsToBeModifiedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 30, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for DrBsToBeModifiedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DrBsToBeModifiedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsToBeModifiedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsToBeModifiedList"))
    }
}
// BhChannelsToBeModifiedList
#[derive(Clone, Debug)]
pub struct BhChannelsToBeModifiedList(pub Vec<BhChannelsToBeModifiedItem>);

impl BhChannelsToBeModifiedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65536), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(BhChannelsToBeModifiedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65536), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 262, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for BhChannelsToBeModifiedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BhChannelsToBeModifiedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsToBeModifiedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsToBeModifiedList"))
    }
}
// SrBsToBeReleasedList
#[derive(Clone, Debug)]
pub struct SrBsToBeReleasedList(pub Vec<SrBsToBeReleasedItem>);

impl SrBsToBeReleasedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(8), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SrBsToBeReleasedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(8), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 71, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SrBsToBeReleasedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SrBsToBeReleasedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrBsToBeReleasedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrBsToBeReleasedList"))
    }
}
// DrBsToBeReleasedList
#[derive(Clone, Debug)]
pub struct DrBsToBeReleasedList(pub Vec<DrBsToBeReleasedItem>);

impl DrBsToBeReleasedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(DrBsToBeReleasedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 32, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for DrBsToBeReleasedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DrBsToBeReleasedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsToBeReleasedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsToBeReleasedList"))
    }
}
// BhChannelsToBeReleasedList
#[derive(Clone, Debug)]
pub struct BhChannelsToBeReleasedList(pub Vec<BhChannelsToBeReleasedItem>);

impl BhChannelsToBeReleasedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65536), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(BhChannelsToBeReleasedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65536), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 264, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for BhChannelsToBeReleasedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BhChannelsToBeReleasedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsToBeReleasedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsToBeReleasedList"))
    }
}
// SldrBsToBeSetupModList
#[derive(Clone, Debug)]
pub struct SldrBsToBeSetupModList(pub Vec<SldrBsToBeSetupModItem>);

impl SldrBsToBeSetupModList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SldrBsToBeSetupModItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 331, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SldrBsToBeSetupModList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SldrBsToBeSetupModList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsToBeSetupModList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsToBeSetupModList"))
    }
}
// SldrBsToBeModifiedList
#[derive(Clone, Debug)]
pub struct SldrBsToBeModifiedList(pub Vec<SldrBsToBeModifiedItem>);

impl SldrBsToBeModifiedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SldrBsToBeModifiedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 325, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SldrBsToBeModifiedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SldrBsToBeModifiedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsToBeModifiedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsToBeModifiedList"))
    }
}
// SldrBsToBeReleasedList
#[derive(Clone, Debug)]
pub struct SldrBsToBeReleasedList(pub Vec<SldrBsToBeReleasedItem>);

impl SldrBsToBeReleasedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SldrBsToBeReleasedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 327, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SldrBsToBeReleasedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SldrBsToBeReleasedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsToBeReleasedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsToBeReleasedList"))
    }
}
// UeContextModificationResponse
#[derive(Clone, Debug)]
pub struct UeContextModificationResponse {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub resource_coordination_transfer_container: Option<ResourceCoordinationTransferContainer>,
    pub d_uto_currc_information: Option<DUtoCurrcInformation>,
    pub dr_bs_setup_mod_list: Option<DrBsSetupModList>,
    pub dr_bs_modified_list: Option<DrBsModifiedList>,
    pub sr_bs_failed_to_be_setup_mod_list: Option<SrBsFailedToBeSetupModList>,
    pub dr_bs_failed_to_be_setup_mod_list: Option<DrBsFailedToBeSetupModList>,
    pub s_cell_failedto_setup_mod_list: Option<SCellFailedtoSetupModList>,
    pub dr_bs_failed_to_be_modified_list: Option<DrBsFailedToBeModifiedList>,
    pub inactivity_monitoring_response: Option<InactivityMonitoringResponse>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub c_rnti: Option<CRnti>,
    pub associated_s_cell_list: Option<AssociatedSCellList>,
    pub sr_bs_setup_mod_list: Option<SrBsSetupModList>,
    pub sr_bs_modified_list: Option<SrBsModifiedList>,
    pub full_configuration: Option<FullConfiguration>,
    pub bh_channels_setup_mod_list: Option<BhChannelsSetupModList>,
    pub bh_channels_modified_list: Option<BhChannelsModifiedList>,
    pub bh_channels_failed_to_be_setup_mod_list: Option<BhChannelsFailedToBeSetupModList>,
    pub bh_channels_failed_to_be_modified_list: Option<BhChannelsFailedToBeModifiedList>,
    pub sldr_bs_setup_mod_list: Option<SldrBsSetupModList>,
    pub sldr_bs_modified_list: Option<SldrBsModifiedList>,
    pub sldr_bs_failed_to_be_setup_mod_list: Option<SldrBsFailedToBeSetupModList>,
    pub sldr_bs_failed_to_be_modified_list: Option<SldrBsFailedToBeModifiedList>,
    pub requested_target_cell_global_id: Option<Nrcgi>,
}

impl UeContextModificationResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut resource_coordination_transfer_container: Option<
            ResourceCoordinationTransferContainer,
        > = None;
        let mut d_uto_currc_information: Option<DUtoCurrcInformation> = None;
        let mut dr_bs_setup_mod_list: Option<DrBsSetupModList> = None;
        let mut dr_bs_modified_list: Option<DrBsModifiedList> = None;
        let mut sr_bs_failed_to_be_setup_mod_list: Option<SrBsFailedToBeSetupModList> = None;
        let mut dr_bs_failed_to_be_setup_mod_list: Option<DrBsFailedToBeSetupModList> = None;
        let mut s_cell_failedto_setup_mod_list: Option<SCellFailedtoSetupModList> = None;
        let mut dr_bs_failed_to_be_modified_list: Option<DrBsFailedToBeModifiedList> = None;
        let mut inactivity_monitoring_response: Option<InactivityMonitoringResponse> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut c_rnti: Option<CRnti> = None;
        let mut associated_s_cell_list: Option<AssociatedSCellList> = None;
        let mut sr_bs_setup_mod_list: Option<SrBsSetupModList> = None;
        let mut sr_bs_modified_list: Option<SrBsModifiedList> = None;
        let mut full_configuration: Option<FullConfiguration> = None;
        let mut bh_channels_setup_mod_list: Option<BhChannelsSetupModList> = None;
        let mut bh_channels_modified_list: Option<BhChannelsModifiedList> = None;
        let mut bh_channels_failed_to_be_setup_mod_list: Option<BhChannelsFailedToBeSetupModList> =
            None;
        let mut bh_channels_failed_to_be_modified_list: Option<BhChannelsFailedToBeModifiedList> =
            None;
        let mut sldr_bs_setup_mod_list: Option<SldrBsSetupModList> = None;
        let mut sldr_bs_modified_list: Option<SldrBsModifiedList> = None;
        let mut sldr_bs_failed_to_be_setup_mod_list: Option<SldrBsFailedToBeSetupModList> = None;
        let mut sldr_bs_failed_to_be_modified_list: Option<SldrBsFailedToBeModifiedList> = None;
        let mut requested_target_cell_global_id: Option<Nrcgi> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                49 => {
                    resource_coordination_transfer_container =
                        Some(ResourceCoordinationTransferContainer::decode(data)?)
                }
                39 => d_uto_currc_information = Some(DUtoCurrcInformation::decode(data)?),
                29 => dr_bs_setup_mod_list = Some(DrBsSetupModList::decode(data)?),
                21 => dr_bs_modified_list = Some(DrBsModifiedList::decode(data)?),
                68 => {
                    sr_bs_failed_to_be_setup_mod_list =
                        Some(SrBsFailedToBeSetupModList::decode(data)?)
                }
                17 => {
                    dr_bs_failed_to_be_setup_mod_list =
                        Some(DrBsFailedToBeSetupModList::decode(data)?)
                }
                85 => {
                    s_cell_failedto_setup_mod_list = Some(SCellFailedtoSetupModList::decode(data)?)
                }
                13 => {
                    dr_bs_failed_to_be_modified_list =
                        Some(DrBsFailedToBeModifiedList::decode(data)?)
                }
                98 => {
                    inactivity_monitoring_response =
                        Some(InactivityMonitoringResponse::decode(data)?)
                }
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                95 => c_rnti = Some(CRnti::decode(data)?),
                198 => associated_s_cell_list = Some(AssociatedSCellList::decode(data)?),
                204 => sr_bs_setup_mod_list = Some(SrBsSetupModList::decode(data)?),
                206 => sr_bs_modified_list = Some(SrBsModifiedList::decode(data)?),
                94 => full_configuration = Some(FullConfiguration::decode(data)?),
                275 => bh_channels_setup_mod_list = Some(BhChannelsSetupModList::decode(data)?),
                273 => bh_channels_modified_list = Some(BhChannelsModifiedList::decode(data)?),
                271 => {
                    bh_channels_failed_to_be_setup_mod_list =
                        Some(BhChannelsFailedToBeSetupModList::decode(data)?)
                }
                269 => {
                    bh_channels_failed_to_be_modified_list =
                        Some(BhChannelsFailedToBeModifiedList::decode(data)?)
                }
                333 => sldr_bs_setup_mod_list = Some(SldrBsSetupModList::decode(data)?),
                318 => sldr_bs_modified_list = Some(SldrBsModifiedList::decode(data)?),
                334 => {
                    sldr_bs_failed_to_be_setup_mod_list =
                        Some(SldrBsFailedToBeSetupModList::decode(data)?)
                }
                314 => {
                    sldr_bs_failed_to_be_modified_list =
                        Some(SldrBsFailedToBeModifiedList::decode(data)?)
                }
                376 => requested_target_cell_global_id = Some(Nrcgi::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            resource_coordination_transfer_container,
            d_uto_currc_information,
            dr_bs_setup_mod_list,
            dr_bs_modified_list,
            sr_bs_failed_to_be_setup_mod_list,
            dr_bs_failed_to_be_setup_mod_list,
            s_cell_failedto_setup_mod_list,
            dr_bs_failed_to_be_modified_list,
            inactivity_monitoring_response,
            criticality_diagnostics,
            c_rnti,
            associated_s_cell_list,
            sr_bs_setup_mod_list,
            sr_bs_modified_list,
            full_configuration,
            bh_channels_setup_mod_list,
            bh_channels_modified_list,
            bh_channels_failed_to_be_setup_mod_list,
            bh_channels_failed_to_be_modified_list,
            sldr_bs_setup_mod_list,
            sldr_bs_modified_list,
            sldr_bs_failed_to_be_setup_mod_list,
            sldr_bs_failed_to_be_modified_list,
            requested_target_cell_global_id,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.resource_coordination_transfer_container {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 49, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.d_uto_currc_information {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 39, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.dr_bs_setup_mod_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 29, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.dr_bs_modified_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 21, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sr_bs_failed_to_be_setup_mod_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 68, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.dr_bs_failed_to_be_setup_mod_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 17, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.s_cell_failedto_setup_mod_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 85, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.dr_bs_failed_to_be_modified_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 13, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.inactivity_monitoring_response {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 98, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.c_rnti {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 95, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.associated_s_cell_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 198, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sr_bs_setup_mod_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 204, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sr_bs_modified_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 206, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.full_configuration {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 94, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.bh_channels_setup_mod_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 275, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.bh_channels_modified_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 273, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.bh_channels_failed_to_be_setup_mod_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 271, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.bh_channels_failed_to_be_modified_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 269, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sldr_bs_setup_mod_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 333, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sldr_bs_modified_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 318, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sldr_bs_failed_to_be_setup_mod_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 334, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sldr_bs_failed_to_be_modified_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 314, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.requested_target_cell_global_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 376, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for UeContextModificationResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UeContextModificationResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextModificationResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextModificationResponse"))
    }
}
// DrBsSetupModList
#[derive(Clone, Debug)]
pub struct DrBsSetupModList(pub Vec<DrBsSetupModItem>);

impl DrBsSetupModList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(DrBsSetupModItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 28, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for DrBsSetupModList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DrBsSetupModList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsSetupModList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsSetupModList"))
    }
}
// DrBsModifiedList
#[derive(Clone, Debug)]
pub struct DrBsModifiedList(pub Vec<DrBsModifiedItem>);

impl DrBsModifiedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(DrBsModifiedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 20, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for DrBsModifiedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DrBsModifiedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsModifiedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsModifiedList"))
    }
}
// SrBsSetupModList
#[derive(Clone, Debug)]
pub struct SrBsSetupModList(pub Vec<SrBsSetupModItem>);

impl SrBsSetupModList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(8), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SrBsSetupModItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(8), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 205, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SrBsSetupModList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SrBsSetupModList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrBsSetupModList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrBsSetupModList"))
    }
}
// SrBsModifiedList
#[derive(Clone, Debug)]
pub struct SrBsModifiedList(pub Vec<SrBsModifiedItem>);

impl SrBsModifiedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(8), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SrBsModifiedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(8), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 207, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SrBsModifiedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SrBsModifiedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrBsModifiedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrBsModifiedList"))
    }
}
// DrBsFailedToBeModifiedList
#[derive(Clone, Debug)]
pub struct DrBsFailedToBeModifiedList(pub Vec<DrBsFailedToBeModifiedItem>);

impl DrBsFailedToBeModifiedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(DrBsFailedToBeModifiedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 12, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for DrBsFailedToBeModifiedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DrBsFailedToBeModifiedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsFailedToBeModifiedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsFailedToBeModifiedList"))
    }
}
// SrBsFailedToBeSetupModList
#[derive(Clone, Debug)]
pub struct SrBsFailedToBeSetupModList(pub Vec<SrBsFailedToBeSetupModItem>);

impl SrBsFailedToBeSetupModList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(8), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SrBsFailedToBeSetupModItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(8), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 67, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SrBsFailedToBeSetupModList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SrBsFailedToBeSetupModList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrBsFailedToBeSetupModList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrBsFailedToBeSetupModList"))
    }
}
// DrBsFailedToBeSetupModList
#[derive(Clone, Debug)]
pub struct DrBsFailedToBeSetupModList(pub Vec<DrBsFailedToBeSetupModItem>);

impl DrBsFailedToBeSetupModList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(DrBsFailedToBeSetupModItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 16, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for DrBsFailedToBeSetupModList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DrBsFailedToBeSetupModList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsFailedToBeSetupModList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsFailedToBeSetupModList"))
    }
}
// SCellFailedtoSetupModList
#[derive(Clone, Debug)]
pub struct SCellFailedtoSetupModList(pub Vec<SCellFailedtoSetupModItem>);

impl SCellFailedtoSetupModList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SCellFailedtoSetupModItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 86, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SCellFailedtoSetupModList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SCellFailedtoSetupModList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SCellFailedtoSetupModList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SCellFailedtoSetupModList"))
    }
}
// BhChannelsSetupModList
#[derive(Clone, Debug)]
pub struct BhChannelsSetupModList(pub Vec<BhChannelsSetupModItem>);

impl BhChannelsSetupModList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65536), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(BhChannelsSetupModItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65536), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 274, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for BhChannelsSetupModList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BhChannelsSetupModList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsSetupModList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsSetupModList"))
    }
}
// BhChannelsModifiedList
#[derive(Clone, Debug)]
pub struct BhChannelsModifiedList(pub Vec<BhChannelsModifiedItem>);

impl BhChannelsModifiedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65536), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(BhChannelsModifiedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65536), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 272, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for BhChannelsModifiedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BhChannelsModifiedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsModifiedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsModifiedList"))
    }
}
// BhChannelsFailedToBeModifiedList
#[derive(Clone, Debug)]
pub struct BhChannelsFailedToBeModifiedList(pub Vec<BhChannelsFailedToBeModifiedItem>);

impl BhChannelsFailedToBeModifiedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65536), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(BhChannelsFailedToBeModifiedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65536), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 268, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for BhChannelsFailedToBeModifiedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BhChannelsFailedToBeModifiedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsFailedToBeModifiedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsFailedToBeModifiedList"))
    }
}
// BhChannelsFailedToBeSetupModList
#[derive(Clone, Debug)]
pub struct BhChannelsFailedToBeSetupModList(pub Vec<BhChannelsFailedToBeSetupModItem>);

impl BhChannelsFailedToBeSetupModList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65536), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(BhChannelsFailedToBeSetupModItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65536), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 270, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for BhChannelsFailedToBeSetupModList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BhChannelsFailedToBeSetupModList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsFailedToBeSetupModList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsFailedToBeSetupModList"))
    }
}
// AssociatedSCellList
#[derive(Clone, Debug)]
pub struct AssociatedSCellList(pub Vec<AssociatedSCellItem>);

impl AssociatedSCellList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(AssociatedSCellItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 200, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for AssociatedSCellList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        AssociatedSCellList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("AssociatedSCellList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("AssociatedSCellList"))
    }
}
// SldrBsSetupModList
#[derive(Clone, Debug)]
pub struct SldrBsSetupModList(pub Vec<SldrBsSetupModItem>);

impl SldrBsSetupModList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SldrBsSetupModItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 335, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SldrBsSetupModList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SldrBsSetupModList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsSetupModList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsSetupModList"))
    }
}
// SldrBsModifiedList
#[derive(Clone, Debug)]
pub struct SldrBsModifiedList(pub Vec<SldrBsModifiedItem>);

impl SldrBsModifiedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SldrBsModifiedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 317, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SldrBsModifiedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SldrBsModifiedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsModifiedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsModifiedList"))
    }
}
// SldrBsFailedToBeModifiedList
#[derive(Clone, Debug)]
pub struct SldrBsFailedToBeModifiedList(pub Vec<SldrBsFailedToBeModifiedItem>);

impl SldrBsFailedToBeModifiedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SldrBsFailedToBeModifiedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 313, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SldrBsFailedToBeModifiedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SldrBsFailedToBeModifiedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsFailedToBeModifiedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsFailedToBeModifiedList"))
    }
}
// SldrBsFailedToBeSetupModList
#[derive(Clone, Debug)]
pub struct SldrBsFailedToBeSetupModList(pub Vec<SldrBsFailedToBeSetupModItem>);

impl SldrBsFailedToBeSetupModList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SldrBsFailedToBeSetupModItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 336, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SldrBsFailedToBeSetupModList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SldrBsFailedToBeSetupModList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsFailedToBeSetupModList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsFailedToBeSetupModList"))
    }
}
// UeContextModificationFailure
#[derive(Clone, Debug)]
pub struct UeContextModificationFailure {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub requested_target_cell_global_id: Option<Nrcgi>,
}

impl UeContextModificationFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut requested_target_cell_global_id: Option<Nrcgi> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                376 => requested_target_cell_global_id = Some(Nrcgi::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            cause,
            criticality_diagnostics,
            requested_target_cell_global_id,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.requested_target_cell_global_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 376, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for UeContextModificationFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UeContextModificationFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextModificationFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextModificationFailure"))
    }
}
// UeContextModificationRequired
#[derive(Clone, Debug)]
pub struct UeContextModificationRequired {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub resource_coordination_transfer_container: Option<ResourceCoordinationTransferContainer>,
    pub d_uto_currc_information: Option<DUtoCurrcInformation>,
    pub dr_bs_required_to_be_modified_list: Option<DrBsRequiredToBeModifiedList>,
    pub sr_bs_required_to_be_released_list: Option<SrBsRequiredToBeReleasedList>,
    pub dr_bs_required_to_be_released_list: Option<DrBsRequiredToBeReleasedList>,
    pub cause: Cause,
    pub bh_channels_required_to_be_released_list: Option<BhChannelsRequiredToBeReleasedList>,
    pub sldr_bs_required_to_be_modified_list: Option<SldrBsRequiredToBeModifiedList>,
    pub sldr_bs_required_to_be_released_list: Option<SldrBsRequiredToBeReleasedList>,
    pub target_cells_to_cancel: Option<TargetCellList>,
}

impl UeContextModificationRequired {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut resource_coordination_transfer_container: Option<
            ResourceCoordinationTransferContainer,
        > = None;
        let mut d_uto_currc_information: Option<DUtoCurrcInformation> = None;
        let mut dr_bs_required_to_be_modified_list: Option<DrBsRequiredToBeModifiedList> = None;
        let mut sr_bs_required_to_be_released_list: Option<SrBsRequiredToBeReleasedList> = None;
        let mut dr_bs_required_to_be_released_list: Option<DrBsRequiredToBeReleasedList> = None;
        let mut cause: Option<Cause> = None;
        let mut bh_channels_required_to_be_released_list: Option<
            BhChannelsRequiredToBeReleasedList,
        > = None;
        let mut sldr_bs_required_to_be_modified_list: Option<SldrBsRequiredToBeModifiedList> = None;
        let mut sldr_bs_required_to_be_released_list: Option<SldrBsRequiredToBeReleasedList> = None;
        let mut target_cells_to_cancel: Option<TargetCellList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                49 => {
                    resource_coordination_transfer_container =
                        Some(ResourceCoordinationTransferContainer::decode(data)?)
                }
                39 => d_uto_currc_information = Some(DUtoCurrcInformation::decode(data)?),
                23 => {
                    dr_bs_required_to_be_modified_list =
                        Some(DrBsRequiredToBeModifiedList::decode(data)?)
                }
                70 => {
                    sr_bs_required_to_be_released_list =
                        Some(SrBsRequiredToBeReleasedList::decode(data)?)
                }
                25 => {
                    dr_bs_required_to_be_released_list =
                        Some(DrBsRequiredToBeReleasedList::decode(data)?)
                }
                0 => cause = Some(Cause::decode(data)?),
                277 => {
                    bh_channels_required_to_be_released_list =
                        Some(BhChannelsRequiredToBeReleasedList::decode(data)?)
                }
                320 => {
                    sldr_bs_required_to_be_modified_list =
                        Some(SldrBsRequiredToBeModifiedList::decode(data)?)
                }
                322 => {
                    sldr_bs_required_to_be_released_list =
                        Some(SldrBsRequiredToBeReleasedList::decode(data)?)
                }
                375 => target_cells_to_cancel = Some(TargetCellList::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            resource_coordination_transfer_container,
            d_uto_currc_information,
            dr_bs_required_to_be_modified_list,
            sr_bs_required_to_be_released_list,
            dr_bs_required_to_be_released_list,
            cause,
            bh_channels_required_to_be_released_list,
            sldr_bs_required_to_be_modified_list,
            sldr_bs_required_to_be_released_list,
            target_cells_to_cancel,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.resource_coordination_transfer_container {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 49, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.d_uto_currc_information {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 39, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.dr_bs_required_to_be_modified_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 23, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sr_bs_required_to_be_released_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 70, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.dr_bs_required_to_be_released_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 25, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.bh_channels_required_to_be_released_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 277, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sldr_bs_required_to_be_modified_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 320, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sldr_bs_required_to_be_released_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 322, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.target_cells_to_cancel {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 375, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for UeContextModificationRequired {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UeContextModificationRequired::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextModificationRequired"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextModificationRequired"))
    }
}
// DrBsRequiredToBeModifiedList
#[derive(Clone, Debug)]
pub struct DrBsRequiredToBeModifiedList(pub Vec<DrBsRequiredToBeModifiedItem>);

impl DrBsRequiredToBeModifiedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(DrBsRequiredToBeModifiedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 22, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for DrBsRequiredToBeModifiedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DrBsRequiredToBeModifiedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsRequiredToBeModifiedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsRequiredToBeModifiedList"))
    }
}
// DrBsRequiredToBeReleasedList
#[derive(Clone, Debug)]
pub struct DrBsRequiredToBeReleasedList(pub Vec<DrBsRequiredToBeReleasedItem>);

impl DrBsRequiredToBeReleasedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(DrBsRequiredToBeReleasedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 24, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for DrBsRequiredToBeReleasedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DrBsRequiredToBeReleasedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsRequiredToBeReleasedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsRequiredToBeReleasedList"))
    }
}
// SrBsRequiredToBeReleasedList
#[derive(Clone, Debug)]
pub struct SrBsRequiredToBeReleasedList(pub Vec<SrBsRequiredToBeReleasedItem>);

impl SrBsRequiredToBeReleasedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(8), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SrBsRequiredToBeReleasedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(8), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 69, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SrBsRequiredToBeReleasedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SrBsRequiredToBeReleasedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrBsRequiredToBeReleasedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrBsRequiredToBeReleasedList"))
    }
}
// BhChannelsRequiredToBeReleasedList
#[derive(Clone, Debug)]
pub struct BhChannelsRequiredToBeReleasedList(pub Vec<BhChannelsRequiredToBeReleasedItem>);

impl BhChannelsRequiredToBeReleasedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65536), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(BhChannelsRequiredToBeReleasedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65536), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 276, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for BhChannelsRequiredToBeReleasedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BhChannelsRequiredToBeReleasedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsRequiredToBeReleasedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhChannelsRequiredToBeReleasedList"))
    }
}
// SldrBsRequiredToBeModifiedList
#[derive(Clone, Debug)]
pub struct SldrBsRequiredToBeModifiedList(pub Vec<SldrBsRequiredToBeModifiedItem>);

impl SldrBsRequiredToBeModifiedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SldrBsRequiredToBeModifiedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 319, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SldrBsRequiredToBeModifiedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SldrBsRequiredToBeModifiedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsRequiredToBeModifiedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsRequiredToBeModifiedList"))
    }
}
// SldrBsRequiredToBeReleasedList
#[derive(Clone, Debug)]
pub struct SldrBsRequiredToBeReleasedList(pub Vec<SldrBsRequiredToBeReleasedItem>);

impl SldrBsRequiredToBeReleasedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SldrBsRequiredToBeReleasedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 321, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SldrBsRequiredToBeReleasedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SldrBsRequiredToBeReleasedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsRequiredToBeReleasedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsRequiredToBeReleasedList"))
    }
}
// UeContextModificationConfirm
#[derive(Clone, Debug)]
pub struct UeContextModificationConfirm {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub resource_coordination_transfer_container: Option<ResourceCoordinationTransferContainer>,
    pub dr_bs_modified_conf_list: Option<DrBsModifiedConfList>,
    pub rrc_container: Option<RrcContainer>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub execute_duplication: Option<ExecuteDuplication>,
    pub resource_coordination_transfer_information: Option<ResourceCoordinationTransferInformation>,
    pub sldr_bs_modified_conf_list: Option<SldrBsModifiedConfList>,
}

impl UeContextModificationConfirm {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut resource_coordination_transfer_container: Option<
            ResourceCoordinationTransferContainer,
        > = None;
        let mut dr_bs_modified_conf_list: Option<DrBsModifiedConfList> = None;
        let mut rrc_container: Option<RrcContainer> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut execute_duplication: Option<ExecuteDuplication> = None;
        let mut resource_coordination_transfer_information: Option<
            ResourceCoordinationTransferInformation,
        > = None;
        let mut sldr_bs_modified_conf_list: Option<SldrBsModifiedConfList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                49 => {
                    resource_coordination_transfer_container =
                        Some(ResourceCoordinationTransferContainer::decode(data)?)
                }
                19 => dr_bs_modified_conf_list = Some(DrBsModifiedConfList::decode(data)?),
                50 => rrc_container = Some(RrcContainer::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                109 => execute_duplication = Some(ExecuteDuplication::decode(data)?),
                195 => {
                    resource_coordination_transfer_information =
                        Some(ResourceCoordinationTransferInformation::decode(data)?)
                }
                337 => sldr_bs_modified_conf_list = Some(SldrBsModifiedConfList::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            resource_coordination_transfer_container,
            dr_bs_modified_conf_list,
            rrc_container,
            criticality_diagnostics,
            execute_duplication,
            resource_coordination_transfer_information,
            sldr_bs_modified_conf_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.resource_coordination_transfer_container {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 49, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.dr_bs_modified_conf_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 19, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.rrc_container {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 50, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.execute_duplication {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 109, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.resource_coordination_transfer_information {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 195, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sldr_bs_modified_conf_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 337, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for UeContextModificationConfirm {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UeContextModificationConfirm::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextModificationConfirm"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextModificationConfirm"))
    }
}
// DrBsModifiedConfList
#[derive(Clone, Debug)]
pub struct DrBsModifiedConfList(pub Vec<DrBsModifiedConfItem>);

impl DrBsModifiedConfList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(DrBsModifiedConfItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 18, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for DrBsModifiedConfList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DrBsModifiedConfList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsModifiedConfList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrBsModifiedConfList"))
    }
}
// SldrBsModifiedConfList
#[derive(Clone, Debug)]
pub struct SldrBsModifiedConfList(pub Vec<SldrBsModifiedConfItem>);

impl SldrBsModifiedConfList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(SldrBsModifiedConfItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 338, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for SldrBsModifiedConfList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SldrBsModifiedConfList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsModifiedConfList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SldrBsModifiedConfList"))
    }
}
// UeContextModificationRefuse
#[derive(Clone, Debug)]
pub struct UeContextModificationRefuse {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl UeContextModificationRefuse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            cause,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for UeContextModificationRefuse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UeContextModificationRefuse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextModificationRefuse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeContextModificationRefuse"))
    }
}
// WriteReplaceWarningRequest
#[derive(Clone, Debug)]
pub struct WriteReplaceWarningRequest {
    pub transaction_id: TransactionId,
    pub pws_system_information: PwsSystemInformation,
    pub repetition_period: RepetitionPeriod,
    pub numberof_broadcast_request: NumberofBroadcastRequest,
    pub cells_to_be_broadcast_list: Option<CellsToBeBroadcastList>,
}

impl WriteReplaceWarningRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut pws_system_information: Option<PwsSystemInformation> = None;
        let mut repetition_period: Option<RepetitionPeriod> = None;
        let mut numberof_broadcast_request: Option<NumberofBroadcastRequest> = None;
        let mut cells_to_be_broadcast_list: Option<CellsToBeBroadcastList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                140 => pws_system_information = Some(PwsSystemInformation::decode(data)?),
                141 => repetition_period = Some(RepetitionPeriod::decode(data)?),
                142 => numberof_broadcast_request = Some(NumberofBroadcastRequest::decode(data)?),
                144 => cells_to_be_broadcast_list = Some(CellsToBeBroadcastList::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let pws_system_information = pws_system_information.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE pws_system_information"),
        ))?;
        let repetition_period = repetition_period.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE repetition_period"
        )))?;
        let numberof_broadcast_request = numberof_broadcast_request.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE numberof_broadcast_request")),
        )?;
        Ok(Self {
            transaction_id,
            pws_system_information,
            repetition_period,
            numberof_broadcast_request,
            cells_to_be_broadcast_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.pws_system_information.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 140, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.repetition_period.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 141, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.numberof_broadcast_request.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 142, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.cells_to_be_broadcast_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 144, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for WriteReplaceWarningRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        WriteReplaceWarningRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("WriteReplaceWarningRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("WriteReplaceWarningRequest"))
    }
}
// CellsToBeBroadcastList
#[derive(Clone, Debug)]
pub struct CellsToBeBroadcastList(pub Vec<CellsToBeBroadcastItem>);

impl CellsToBeBroadcastList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(CellsToBeBroadcastItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 145, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for CellsToBeBroadcastList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        CellsToBeBroadcastList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellsToBeBroadcastList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellsToBeBroadcastList"))
    }
}
// WriteReplaceWarningResponse
#[derive(Clone, Debug)]
pub struct WriteReplaceWarningResponse {
    pub transaction_id: TransactionId,
    pub cells_broadcast_completed_list: Option<CellsBroadcastCompletedList>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub dedicated_si_delivery_needed_ue_list: Option<DedicatedSiDeliveryNeededUeList>,
}

impl WriteReplaceWarningResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cells_broadcast_completed_list: Option<CellsBroadcastCompletedList> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut dedicated_si_delivery_needed_ue_list: Option<DedicatedSiDeliveryNeededUeList> =
            None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                146 => {
                    cells_broadcast_completed_list =
                        Some(CellsBroadcastCompletedList::decode(data)?)
                }
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                189 => {
                    dedicated_si_delivery_needed_ue_list =
                        Some(DedicatedSiDeliveryNeededUeList::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            cells_broadcast_completed_list,
            criticality_diagnostics,
            dedicated_si_delivery_needed_ue_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.cells_broadcast_completed_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 146, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.dedicated_si_delivery_needed_ue_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 189, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for WriteReplaceWarningResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        WriteReplaceWarningResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("WriteReplaceWarningResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("WriteReplaceWarningResponse"))
    }
}
// CellsBroadcastCompletedList
#[derive(Clone, Debug)]
pub struct CellsBroadcastCompletedList(pub Vec<CellsBroadcastCompletedItem>);

impl CellsBroadcastCompletedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(CellsBroadcastCompletedItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 147, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for CellsBroadcastCompletedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        CellsBroadcastCompletedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellsBroadcastCompletedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellsBroadcastCompletedList"))
    }
}
// PwsCancelRequest
#[derive(Clone, Debug)]
pub struct PwsCancelRequest {
    pub transaction_id: TransactionId,
    pub numberof_broadcast_request: NumberofBroadcastRequest,
    pub broadcast_to_be_cancelled_list: Option<BroadcastToBeCancelledList>,
    pub cancel_all_warning_messages_indicator: Option<CancelAllWarningMessagesIndicator>,
    pub notification_information: Option<NotificationInformation>,
}

impl PwsCancelRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut numberof_broadcast_request: Option<NumberofBroadcastRequest> = None;
        let mut broadcast_to_be_cancelled_list: Option<BroadcastToBeCancelledList> = None;
        let mut cancel_all_warning_messages_indicator: Option<CancelAllWarningMessagesIndicator> =
            None;
        let mut notification_information: Option<NotificationInformation> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                142 => numberof_broadcast_request = Some(NumberofBroadcastRequest::decode(data)?),
                148 => {
                    broadcast_to_be_cancelled_list = Some(BroadcastToBeCancelledList::decode(data)?)
                }
                157 => {
                    cancel_all_warning_messages_indicator =
                        Some(CancelAllWarningMessagesIndicator::decode(data)?)
                }
                220 => notification_information = Some(NotificationInformation::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let numberof_broadcast_request = numberof_broadcast_request.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE numberof_broadcast_request")),
        )?;
        Ok(Self {
            transaction_id,
            numberof_broadcast_request,
            broadcast_to_be_cancelled_list,
            cancel_all_warning_messages_indicator,
            notification_information,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.numberof_broadcast_request.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 142, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.broadcast_to_be_cancelled_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 148, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.cancel_all_warning_messages_indicator {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 157, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.notification_information {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 220, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PwsCancelRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PwsCancelRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PwsCancelRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PwsCancelRequest"))
    }
}
// BroadcastToBeCancelledList
#[derive(Clone, Debug)]
pub struct BroadcastToBeCancelledList(pub Vec<BroadcastToBeCancelledItem>);

impl BroadcastToBeCancelledList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(BroadcastToBeCancelledItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 149, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for BroadcastToBeCancelledList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BroadcastToBeCancelledList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BroadcastToBeCancelledList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BroadcastToBeCancelledList"))
    }
}
// PwsCancelResponse
#[derive(Clone, Debug)]
pub struct PwsCancelResponse {
    pub transaction_id: TransactionId,
    pub cells_broadcast_cancelled_list: Option<CellsBroadcastCancelledList>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl PwsCancelResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cells_broadcast_cancelled_list: Option<CellsBroadcastCancelledList> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                150 => {
                    cells_broadcast_cancelled_list =
                        Some(CellsBroadcastCancelledList::decode(data)?)
                }
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            cells_broadcast_cancelled_list,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.cells_broadcast_cancelled_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 150, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PwsCancelResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PwsCancelResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PwsCancelResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PwsCancelResponse"))
    }
}
// CellsBroadcastCancelledList
#[derive(Clone, Debug)]
pub struct CellsBroadcastCancelledList(pub Vec<CellsBroadcastCancelledItem>);

impl CellsBroadcastCancelledList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(CellsBroadcastCancelledItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 151, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for CellsBroadcastCancelledList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        CellsBroadcastCancelledList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellsBroadcastCancelledList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellsBroadcastCancelledList"))
    }
}
// UeInactivityNotification
#[derive(Clone, Debug)]
pub struct UeInactivityNotification {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub drb_activity_list: DrbActivityList,
}

impl UeInactivityNotification {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut drb_activity_list: Option<DrbActivityList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                100 => drb_activity_list = Some(DrbActivityList::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let drb_activity_list = drb_activity_list.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE drb_activity_list"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            drb_activity_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.drb_activity_list.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 100, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for UeInactivityNotification {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UeInactivityNotification::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeInactivityNotification"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UeInactivityNotification"))
    }
}
// DrbActivityList
#[derive(Clone, Debug)]
pub struct DrbActivityList(pub Vec<DrbActivityItem>);

impl DrbActivityList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(DrbActivityItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 99, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for DrbActivityList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DrbActivityList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrbActivityList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrbActivityList"))
    }
}
// InitialUlrrcMessageTransfer
#[derive(Clone, Debug)]
pub struct InitialUlrrcMessageTransfer {
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub nrcgi: Nrcgi,
    pub c_rnti: CRnti,
    pub rrc_container: RrcContainer,
    pub d_uto_currc_container: Option<DUtoCurrcContainer>,
    pub sul_access_indication: Option<SulAccessIndication>,
    pub transaction_id: TransactionId,
    pub ranueid: Option<Ranueid>,
    pub rrc_container_rrc_setup_complete: Option<RrcContainerRrcSetupComplete>,
}

impl InitialUlrrcMessageTransfer {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut nrcgi: Option<Nrcgi> = None;
        let mut c_rnti: Option<CRnti> = None;
        let mut rrc_container: Option<RrcContainer> = None;
        let mut d_uto_currc_container: Option<DUtoCurrcContainer> = None;
        let mut sul_access_indication: Option<SulAccessIndication> = None;
        let mut transaction_id: Option<TransactionId> = None;
        let mut ranueid: Option<Ranueid> = None;
        let mut rrc_container_rrc_setup_complete: Option<RrcContainerRrcSetupComplete> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                111 => nrcgi = Some(Nrcgi::decode(data)?),
                95 => c_rnti = Some(CRnti::decode(data)?),
                50 => rrc_container = Some(RrcContainer::decode(data)?),
                128 => d_uto_currc_container = Some(DUtoCurrcContainer::decode(data)?),
                178 => sul_access_indication = Some(SulAccessIndication::decode(data)?),
                78 => transaction_id = Some(TransactionId::decode(data)?),
                226 => ranueid = Some(Ranueid::decode(data)?),
                241 => {
                    rrc_container_rrc_setup_complete =
                        Some(RrcContainerRrcSetupComplete::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let nrcgi = nrcgi.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE nrcgi"
        )))?;
        let c_rnti = c_rnti.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE c_rnti"
        )))?;
        let rrc_container = rrc_container.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE rrc_container"
        )))?;
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            gnb_du_ue_f1ap_id,
            nrcgi,
            c_rnti,
            rrc_container,
            d_uto_currc_container,
            sul_access_indication,
            transaction_id,
            ranueid,
            rrc_container_rrc_setup_complete,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.nrcgi.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 111, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.c_rnti.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 95, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.rrc_container.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 50, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.d_uto_currc_container {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 128, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sul_access_indication {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 178, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.ranueid {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 226, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.rrc_container_rrc_setup_complete {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 241, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for InitialUlrrcMessageTransfer {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        InitialUlrrcMessageTransfer::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("InitialUlrrcMessageTransfer"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("InitialUlrrcMessageTransfer"))
    }
}
// DlrrcMessageTransfer
#[derive(Clone, Debug)]
pub struct DlrrcMessageTransfer {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub old_gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId>,
    pub srbid: Srbid,
    pub execute_duplication: Option<ExecuteDuplication>,
    pub rrc_container: RrcContainer,
    pub rat_frequency_priority_information: Option<RatFrequencyPriorityInformation>,
    pub rrc_delivery_status_request: Option<RrcDeliveryStatusRequest>,
    pub ue_context_not_retrievable: Option<UeContextNotRetrievable>,
    pub redirected_rr_cmessage: Option<Vec<u8>>,
    pub plmn_assistance_info_for_net_shar: Option<PlmnIdentity>,
    pub new_gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId>,
    pub additional_rrm_priority_index: Option<AdditionalRrmPriorityIndex>,
}

impl DlrrcMessageTransfer {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut old_gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut srbid: Option<Srbid> = None;
        let mut execute_duplication: Option<ExecuteDuplication> = None;
        let mut rrc_container: Option<RrcContainer> = None;
        let mut rat_frequency_priority_information: Option<RatFrequencyPriorityInformation> = None;
        let mut rrc_delivery_status_request: Option<RrcDeliveryStatusRequest> = None;
        let mut ue_context_not_retrievable: Option<UeContextNotRetrievable> = None;
        let mut redirected_rr_cmessage: Option<Vec<u8>> = None;
        let mut plmn_assistance_info_for_net_shar: Option<PlmnIdentity> = None;
        let mut new_gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut additional_rrm_priority_index: Option<AdditionalRrmPriorityIndex> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                47 => old_gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                64 => srbid = Some(Srbid::decode(data)?),
                109 => execute_duplication = Some(ExecuteDuplication::decode(data)?),
                50 => rrc_container = Some(RrcContainer::decode(data)?),
                108 => {
                    rat_frequency_priority_information =
                        Some(RatFrequencyPriorityInformation::decode(data)?)
                }
                184 => rrc_delivery_status_request = Some(RrcDeliveryStatusRequest::decode(data)?),
                222 => ue_context_not_retrievable = Some(UeContextNotRetrievable::decode(data)?),
                218 => {
                    redirected_rr_cmessage =
                        Some(aper::decode::decode_octetstring(data, None, None, false)?)
                }
                221 => plmn_assistance_info_for_net_shar = Some(PlmnIdentity::decode(data)?),
                217 => new_gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                248 => {
                    additional_rrm_priority_index = Some(AdditionalRrmPriorityIndex::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let srbid = srbid.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE srbid"
        )))?;
        let rrc_container = rrc_container.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE rrc_container"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            old_gnb_du_ue_f1ap_id,
            srbid,
            execute_duplication,
            rrc_container,
            rat_frequency_priority_information,
            rrc_delivery_status_request,
            ue_context_not_retrievable,
            redirected_rr_cmessage,
            plmn_assistance_info_for_net_shar,
            new_gnb_cu_ue_f1ap_id,
            additional_rrm_priority_index,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.old_gnb_du_ue_f1ap_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 47, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.srbid.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 64, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.execute_duplication {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 109, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.rrc_container.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 50, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.rat_frequency_priority_information {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 108, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.rrc_delivery_status_request {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 184, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.ue_context_not_retrievable {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 222, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.redirected_rr_cmessage {
            let ie = &mut AperCodecData::new();
            aper::encode::encode_octetstring(ie, None, None, false, &x, false)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 218, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.plmn_assistance_info_for_net_shar {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 221, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.new_gnb_cu_ue_f1ap_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 217, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.additional_rrm_priority_index {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 248, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for DlrrcMessageTransfer {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DlrrcMessageTransfer::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DlrrcMessageTransfer"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DlrrcMessageTransfer"))
    }
}
// UlrrcMessageTransfer
#[derive(Clone, Debug)]
pub struct UlrrcMessageTransfer {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub srbid: Srbid,
    pub rrc_container: RrcContainer,
    pub selected_plmn_id: Option<PlmnIdentity>,
    pub new_gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId>,
}

impl UlrrcMessageTransfer {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut srbid: Option<Srbid> = None;
        let mut rrc_container: Option<RrcContainer> = None;
        let mut selected_plmn_id: Option<PlmnIdentity> = None;
        let mut new_gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                64 => srbid = Some(Srbid::decode(data)?),
                50 => rrc_container = Some(RrcContainer::decode(data)?),
                224 => selected_plmn_id = Some(PlmnIdentity::decode(data)?),
                219 => new_gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let srbid = srbid.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE srbid"
        )))?;
        let rrc_container = rrc_container.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE rrc_container"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            srbid,
            rrc_container,
            selected_plmn_id,
            new_gnb_du_ue_f1ap_id,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.srbid.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 64, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.rrc_container.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 50, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.selected_plmn_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 224, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.new_gnb_du_ue_f1ap_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 219, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for UlrrcMessageTransfer {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UlrrcMessageTransfer::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UlrrcMessageTransfer"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UlrrcMessageTransfer"))
    }
} // PrivateMessage - omitted

// SystemInformationDeliveryCommand
#[derive(Clone, Debug)]
pub struct SystemInformationDeliveryCommand {
    pub transaction_id: TransactionId,
    pub nrcgi: Nrcgi,
    pub s_itype_list: SItypeList,
    pub confirmed_ueid: GnbDuUeF1apId,
}

impl SystemInformationDeliveryCommand {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut nrcgi: Option<Nrcgi> = None;
        let mut s_itype_list: Option<SItypeList> = None;
        let mut confirmed_ueid: Option<GnbDuUeF1apId> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                111 => nrcgi = Some(Nrcgi::decode(data)?),
                116 => s_itype_list = Some(SItypeList::decode(data)?),
                156 => confirmed_ueid = Some(GnbDuUeF1apId::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let nrcgi = nrcgi.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE nrcgi"
        )))?;
        let s_itype_list = s_itype_list.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE s_itype_list"
        )))?;
        let confirmed_ueid = confirmed_ueid.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE confirmed_ueid"
        )))?;
        Ok(Self {
            transaction_id,
            nrcgi,
            s_itype_list,
            confirmed_ueid,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.nrcgi.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 111, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.s_itype_list.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 116, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.confirmed_ueid.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 156, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for SystemInformationDeliveryCommand {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SystemInformationDeliveryCommand::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SystemInformationDeliveryCommand"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SystemInformationDeliveryCommand"))
    }
}
// Paging
#[derive(Clone, Debug)]
pub struct Paging {
    pub ue_identity_index_value: UeIdentityIndexValue,
    pub paging_identity: PagingIdentity,
    pub paging_drx: Option<PagingDrx>,
    pub paging_priority: Option<PagingPriority>,
    pub paging_cell_list: PagingCellList,
    pub paging_origin: Option<PagingOrigin>,
}

impl Paging {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut ue_identity_index_value: Option<UeIdentityIndexValue> = None;
        let mut paging_identity: Option<PagingIdentity> = None;
        let mut paging_drx: Option<PagingDrx> = None;
        let mut paging_priority: Option<PagingPriority> = None;
        let mut paging_cell_list: Option<PagingCellList> = None;
        let mut paging_origin: Option<PagingOrigin> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                117 => ue_identity_index_value = Some(UeIdentityIndexValue::decode(data)?),
                127 => paging_identity = Some(PagingIdentity::decode(data)?),
                114 => paging_drx = Some(PagingDrx::decode(data)?),
                115 => paging_priority = Some(PagingPriority::decode(data)?),
                113 => paging_cell_list = Some(PagingCellList::decode(data)?),
                216 => paging_origin = Some(PagingOrigin::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let ue_identity_index_value = ue_identity_index_value.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE ue_identity_index_value"),
        ))?;
        let paging_identity = paging_identity.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE paging_identity"
        )))?;
        let paging_cell_list = paging_cell_list.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE paging_cell_list"
        )))?;
        Ok(Self {
            ue_identity_index_value,
            paging_identity,
            paging_drx,
            paging_priority,
            paging_cell_list,
            paging_origin,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.ue_identity_index_value.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 117, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.paging_identity.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 127, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.paging_drx {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 114, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.paging_priority {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 115, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.paging_cell_list.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 113, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.paging_origin {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 216, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for Paging {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Paging::decode_inner(data).map_err(|e: AperCodecError| e.push_context("Paging"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("Paging"))
    }
}
// PagingCellList
#[derive(Clone, Debug)]
pub struct PagingCellList(pub Vec<PagingCellItem>);

impl PagingCellList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(PagingCellItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 112, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for PagingCellList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PagingCellList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PagingCellList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PagingCellList"))
    }
}
// Notify
#[derive(Clone, Debug)]
pub struct Notify {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub drb_notify_list: DrbNotifyList,
}

impl Notify {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut drb_notify_list: Option<DrbNotifyList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                137 => drb_notify_list = Some(DrbNotifyList::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let drb_notify_list = drb_notify_list.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE drb_notify_list"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            drb_notify_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.drb_notify_list.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 137, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for Notify {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Notify::decode_inner(data).map_err(|e: AperCodecError| e.push_context("Notify"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("Notify"))
    }
}
// DrbNotifyList
#[derive(Clone, Debug)]
pub struct DrbNotifyList(pub Vec<DrbNotifyItem>);

impl DrbNotifyList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(DrbNotifyItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 136, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for DrbNotifyList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DrbNotifyList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrbNotifyList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DrbNotifyList"))
    }
}
// NetworkAccessRateReduction
#[derive(Clone, Debug)]
pub struct NetworkAccessRateReduction {
    pub transaction_id: TransactionId,
    pub uac_assistance_info: UacAssistanceInfo,
}

impl NetworkAccessRateReduction {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut uac_assistance_info: Option<UacAssistanceInfo> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                225 => uac_assistance_info = Some(UacAssistanceInfo::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let uac_assistance_info = uac_assistance_info.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE uac_assistance_info"
        )))?;
        Ok(Self {
            transaction_id,
            uac_assistance_info,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.uac_assistance_info.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 225, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for NetworkAccessRateReduction {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        NetworkAccessRateReduction::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NetworkAccessRateReduction"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NetworkAccessRateReduction"))
    }
}
// PwsRestartIndication
#[derive(Clone, Debug)]
pub struct PwsRestartIndication {
    pub transaction_id: TransactionId,
    pub nr_cgi_list_for_restart_list: NrCgiListForRestartList,
}

impl PwsRestartIndication {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut nr_cgi_list_for_restart_list: Option<NrCgiListForRestartList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                152 => nr_cgi_list_for_restart_list = Some(NrCgiListForRestartList::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let nr_cgi_list_for_restart_list = nr_cgi_list_for_restart_list.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE nr_cgi_list_for_restart_list")),
        )?;
        Ok(Self {
            transaction_id,
            nr_cgi_list_for_restart_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.nr_cgi_list_for_restart_list.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 152, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PwsRestartIndication {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PwsRestartIndication::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PwsRestartIndication"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PwsRestartIndication"))
    }
}
// NrCgiListForRestartList
#[derive(Clone, Debug)]
pub struct NrCgiListForRestartList(pub Vec<NrCgiListForRestartItem>);

impl NrCgiListForRestartList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(NrCgiListForRestartItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 153, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for NrCgiListForRestartList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        NrCgiListForRestartList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NrCgiListForRestartList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("NrCgiListForRestartList"))
    }
}
// PwsFailureIndication
#[derive(Clone, Debug)]
pub struct PwsFailureIndication {
    pub transaction_id: TransactionId,
    pub pws_failed_nr_cgi_list: Option<PwsFailedNrCgiList>,
}

impl PwsFailureIndication {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut pws_failed_nr_cgi_list: Option<PwsFailedNrCgiList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                154 => pws_failed_nr_cgi_list = Some(PwsFailedNrCgiList::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            pws_failed_nr_cgi_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.pws_failed_nr_cgi_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 154, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PwsFailureIndication {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PwsFailureIndication::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PwsFailureIndication"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PwsFailureIndication"))
    }
}
// PwsFailedNrCgiList
#[derive(Clone, Debug)]
pub struct PwsFailedNrCgiList(pub Vec<PwsFailedNrCgiItem>);

impl PwsFailedNrCgiList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(PwsFailedNrCgiItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 155, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for PwsFailedNrCgiList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PwsFailedNrCgiList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PwsFailedNrCgiList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PwsFailedNrCgiList"))
    }
}
// GnbDuStatusIndication
#[derive(Clone, Debug)]
pub struct GnbDuStatusIndication {
    pub transaction_id: TransactionId,
    pub gnb_du_overload_information: GnbDuOverloadInformation,
}

impl GnbDuStatusIndication {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_du_overload_information: Option<GnbDuOverloadInformation> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                172 => gnb_du_overload_information = Some(GnbDuOverloadInformation::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_du_overload_information = gnb_du_overload_information.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE gnb_du_overload_information")),
        )?;
        Ok(Self {
            transaction_id,
            gnb_du_overload_information,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_overload_information.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 172, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for GnbDuStatusIndication {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbDuStatusIndication::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuStatusIndication"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuStatusIndication"))
    }
}
// RrcDeliveryReport
#[derive(Clone, Debug)]
pub struct RrcDeliveryReport {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub rrc_delivery_status: RrcDeliveryStatus,
    pub srbid: Srbid,
}

impl RrcDeliveryReport {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut rrc_delivery_status: Option<RrcDeliveryStatus> = None;
        let mut srbid: Option<Srbid> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                185 => rrc_delivery_status = Some(RrcDeliveryStatus::decode(data)?),
                64 => srbid = Some(Srbid::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let rrc_delivery_status = rrc_delivery_status.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE rrc_delivery_status"
        )))?;
        let srbid = srbid.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE srbid"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            rrc_delivery_status,
            srbid,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.rrc_delivery_status.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 185, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.srbid.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 64, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for RrcDeliveryReport {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        RrcDeliveryReport::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("RrcDeliveryReport"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("RrcDeliveryReport"))
    }
}
// F1RemovalRequest
#[derive(Clone, Debug)]
pub struct F1RemovalRequest {
    pub transaction_id: TransactionId,
}

impl F1RemovalRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self { transaction_id })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for F1RemovalRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        F1RemovalRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("F1RemovalRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("F1RemovalRequest"))
    }
}
// F1RemovalResponse
#[derive(Clone, Debug)]
pub struct F1RemovalResponse {
    pub transaction_id: TransactionId,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl F1RemovalResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for F1RemovalResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        F1RemovalResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("F1RemovalResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("F1RemovalResponse"))
    }
}
// F1RemovalFailure
#[derive(Clone, Debug)]
pub struct F1RemovalFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl F1RemovalFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for F1RemovalFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        F1RemovalFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("F1RemovalFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("F1RemovalFailure"))
    }
}
// TraceStart
#[derive(Clone, Debug)]
pub struct TraceStart {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub trace_activation: TraceActivation,
}

impl TraceStart {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut trace_activation: Option<TraceActivation> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                242 => trace_activation = Some(TraceActivation::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let trace_activation = trace_activation.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE trace_activation"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            trace_activation,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.trace_activation.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 242, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for TraceStart {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        TraceStart::decode_inner(data).map_err(|e: AperCodecError| e.push_context("TraceStart"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("TraceStart"))
    }
}
// DeactivateTrace
#[derive(Clone, Debug)]
pub struct DeactivateTrace {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub trace_id: TraceId,
}

impl DeactivateTrace {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut trace_id: Option<TraceId> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                243 => trace_id = Some(TraceId::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let trace_id = trace_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE trace_id"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            trace_id,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.trace_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 243, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for DeactivateTrace {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DeactivateTrace::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DeactivateTrace"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DeactivateTrace"))
    }
}
// CellTrafficTrace
#[derive(Clone, Debug)]
pub struct CellTrafficTrace {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub trace_id: TraceId,
    pub trace_collection_entity_ip_address: TransportLayerAddress,
    pub privacy_indicator: Option<PrivacyIndicator>,
    pub trace_collection_entity_uri: Option<UriAddress>,
}

impl CellTrafficTrace {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut trace_id: Option<TraceId> = None;
        let mut trace_collection_entity_ip_address: Option<TransportLayerAddress> = None;
        let mut privacy_indicator: Option<PrivacyIndicator> = None;
        let mut trace_collection_entity_uri: Option<UriAddress> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                243 => trace_id = Some(TraceId::decode(data)?),
                378 => {
                    trace_collection_entity_ip_address = Some(TransportLayerAddress::decode(data)?)
                }
                379 => privacy_indicator = Some(PrivacyIndicator::decode(data)?),
                380 => trace_collection_entity_uri = Some(UriAddress::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let trace_id = trace_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE trace_id"
        )))?;
        let trace_collection_entity_ip_address =
            trace_collection_entity_ip_address.ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE trace_collection_entity_ip_address"
            )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            trace_id,
            trace_collection_entity_ip_address,
            privacy_indicator,
            trace_collection_entity_uri,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.trace_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 243, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.trace_collection_entity_ip_address.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 378, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.privacy_indicator {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 379, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.trace_collection_entity_uri {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 380, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for CellTrafficTrace {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        CellTrafficTrace::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellTrafficTrace"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CellTrafficTrace"))
    }
}
// DucuRadioInformationTransfer
#[derive(Clone, Debug)]
pub struct DucuRadioInformationTransfer {
    pub transaction_id: TransactionId,
    pub ducu_radio_information_type: DucuRadioInformationType,
}

impl DucuRadioInformationTransfer {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut ducu_radio_information_type: Option<DucuRadioInformationType> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                249 => ducu_radio_information_type = Some(DucuRadioInformationType::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let ducu_radio_information_type = ducu_radio_information_type.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE ducu_radio_information_type")),
        )?;
        Ok(Self {
            transaction_id,
            ducu_radio_information_type,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.ducu_radio_information_type.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 249, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for DucuRadioInformationTransfer {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DucuRadioInformationTransfer::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DucuRadioInformationTransfer"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DucuRadioInformationTransfer"))
    }
}
// CuduRadioInformationTransfer
#[derive(Clone, Debug)]
pub struct CuduRadioInformationTransfer {
    pub transaction_id: TransactionId,
    pub cudu_radio_information_type: CuduRadioInformationType,
}

impl CuduRadioInformationTransfer {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cudu_radio_information_type: Option<CuduRadioInformationType> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                250 => cudu_radio_information_type = Some(CuduRadioInformationType::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cudu_radio_information_type = cudu_radio_information_type.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE cudu_radio_information_type")),
        )?;
        Ok(Self {
            transaction_id,
            cudu_radio_information_type,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cudu_radio_information_type.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 250, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for CuduRadioInformationTransfer {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        CuduRadioInformationTransfer::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CuduRadioInformationTransfer"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("CuduRadioInformationTransfer"))
    }
}
// BapMappingConfiguration
#[derive(Clone, Debug)]
pub struct BapMappingConfiguration {
    pub transaction_id: TransactionId,
    pub bh_routing_information_added_list: Option<BhRoutingInformationAddedList>,
    pub bh_routing_information_removed_list: Option<BhRoutingInformationRemovedList>,
    pub traffic_mapping_information: Option<TrafficMappingInfo>,
}

impl BapMappingConfiguration {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut bh_routing_information_added_list: Option<BhRoutingInformationAddedList> = None;
        let mut bh_routing_information_removed_list: Option<BhRoutingInformationRemovedList> = None;
        let mut traffic_mapping_information: Option<TrafficMappingInfo> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                283 => {
                    bh_routing_information_added_list =
                        Some(BhRoutingInformationAddedList::decode(data)?)
                }
                285 => {
                    bh_routing_information_removed_list =
                        Some(BhRoutingInformationRemovedList::decode(data)?)
                }
                299 => traffic_mapping_information = Some(TrafficMappingInfo::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            bh_routing_information_added_list,
            bh_routing_information_removed_list,
            traffic_mapping_information,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.bh_routing_information_added_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 283, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.bh_routing_information_removed_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 285, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.traffic_mapping_information {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 299, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for BapMappingConfiguration {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BapMappingConfiguration::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BapMappingConfiguration"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BapMappingConfiguration"))
    }
}
// BhRoutingInformationAddedList
#[derive(Clone, Debug)]
pub struct BhRoutingInformationAddedList(pub Vec<BhRoutingInformationAddedListItem>);

impl BhRoutingInformationAddedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(1024), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(BhRoutingInformationAddedListItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(1024), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 284, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for BhRoutingInformationAddedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BhRoutingInformationAddedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhRoutingInformationAddedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhRoutingInformationAddedList"))
    }
}
// BhRoutingInformationRemovedList
#[derive(Clone, Debug)]
pub struct BhRoutingInformationRemovedList(pub Vec<BhRoutingInformationRemovedListItem>);

impl BhRoutingInformationRemovedList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(1024), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(BhRoutingInformationRemovedListItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(1024), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 286, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for BhRoutingInformationRemovedList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BhRoutingInformationRemovedList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhRoutingInformationRemovedList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BhRoutingInformationRemovedList"))
    }
}
// BapMappingConfigurationAcknowledge
#[derive(Clone, Debug)]
pub struct BapMappingConfigurationAcknowledge {
    pub transaction_id: TransactionId,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl BapMappingConfigurationAcknowledge {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for BapMappingConfigurationAcknowledge {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BapMappingConfigurationAcknowledge::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BapMappingConfigurationAcknowledge"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BapMappingConfigurationAcknowledge"))
    }
}
// BapMappingConfigurationFailure
#[derive(Clone, Debug)]
pub struct BapMappingConfigurationFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl BapMappingConfigurationFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                77 => time_to_wait = Some(TimeToWait::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.time_to_wait {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 77, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for BapMappingConfigurationFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        BapMappingConfigurationFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BapMappingConfigurationFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("BapMappingConfigurationFailure"))
    }
}
// GnbDuResourceConfiguration
#[derive(Clone, Debug)]
pub struct GnbDuResourceConfiguration {
    pub transaction_id: TransactionId,
    pub activated_cells_to_be_updated_list: Option<ActivatedCellsToBeUpdatedList>,
    pub child_nodes_list: Option<ChildNodesList>,
}

impl GnbDuResourceConfiguration {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut activated_cells_to_be_updated_list: Option<ActivatedCellsToBeUpdatedList> = None;
        let mut child_nodes_list: Option<ChildNodesList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                288 => {
                    activated_cells_to_be_updated_list =
                        Some(ActivatedCellsToBeUpdatedList::decode(data)?)
                }
                289 => child_nodes_list = Some(ChildNodesList::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            activated_cells_to_be_updated_list,
            child_nodes_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.activated_cells_to_be_updated_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 288, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.child_nodes_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 289, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for GnbDuResourceConfiguration {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbDuResourceConfiguration::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuResourceConfiguration"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuResourceConfiguration"))
    }
}
// GnbDuResourceConfigurationAcknowledge
#[derive(Clone, Debug)]
pub struct GnbDuResourceConfigurationAcknowledge {
    pub transaction_id: TransactionId,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl GnbDuResourceConfigurationAcknowledge {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for GnbDuResourceConfigurationAcknowledge {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbDuResourceConfigurationAcknowledge::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuResourceConfigurationAcknowledge"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuResourceConfigurationAcknowledge"))
    }
}
// GnbDuResourceConfigurationFailure
#[derive(Clone, Debug)]
pub struct GnbDuResourceConfigurationFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl GnbDuResourceConfigurationFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                77 => time_to_wait = Some(TimeToWait::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.time_to_wait {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 77, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for GnbDuResourceConfigurationFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        GnbDuResourceConfigurationFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuResourceConfigurationFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("GnbDuResourceConfigurationFailure"))
    }
}
// IabtnlAddressRequest
#[derive(Clone, Debug)]
pub struct IabtnlAddressRequest {
    pub transaction_id: TransactionId,
    pub ia_bv_4_addresses_requested: Option<IaBv4AddressesRequested>,
    pub iabi_pv_6_request_type: Option<IabiPv6RequestType>,
    pub iab_tnl_addresses_to_remove_list: Option<IabTnlAddressesToRemoveList>,
}

impl IabtnlAddressRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut ia_bv_4_addresses_requested: Option<IaBv4AddressesRequested> = None;
        let mut iabi_pv_6_request_type: Option<IabiPv6RequestType> = None;
        let mut iab_tnl_addresses_to_remove_list: Option<IabTnlAddressesToRemoveList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                297 => ia_bv_4_addresses_requested = Some(IaBv4AddressesRequested::decode(data)?),
                296 => iabi_pv_6_request_type = Some(IabiPv6RequestType::decode(data)?),
                292 => {
                    iab_tnl_addresses_to_remove_list =
                        Some(IabTnlAddressesToRemoveList::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            ia_bv_4_addresses_requested,
            iabi_pv_6_request_type,
            iab_tnl_addresses_to_remove_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.ia_bv_4_addresses_requested {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 297, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.iabi_pv_6_request_type {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 296, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.iab_tnl_addresses_to_remove_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 292, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for IabtnlAddressRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        IabtnlAddressRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabtnlAddressRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabtnlAddressRequest"))
    }
}
// IabTnlAddressesToRemoveList
#[derive(Clone, Debug)]
pub struct IabTnlAddressesToRemoveList(pub Vec<IabTnlAddressesToRemoveItem>);

impl IabTnlAddressesToRemoveList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(1024), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(IabTnlAddressesToRemoveItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(1024), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 293, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for IabTnlAddressesToRemoveList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        IabTnlAddressesToRemoveList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabTnlAddressesToRemoveList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabTnlAddressesToRemoveList"))
    }
}
// IabtnlAddressResponse
#[derive(Clone, Debug)]
pub struct IabtnlAddressResponse {
    pub transaction_id: TransactionId,
    pub iab_allocated_tnl_address_list: IabAllocatedTnlAddressList,
}

impl IabtnlAddressResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut iab_allocated_tnl_address_list: Option<IabAllocatedTnlAddressList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                294 => {
                    iab_allocated_tnl_address_list = Some(IabAllocatedTnlAddressList::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let iab_allocated_tnl_address_list =
            iab_allocated_tnl_address_list.ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE iab_allocated_tnl_address_list"
            )))?;
        Ok(Self {
            transaction_id,
            iab_allocated_tnl_address_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.iab_allocated_tnl_address_list.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 294, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for IabtnlAddressResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        IabtnlAddressResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabtnlAddressResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabtnlAddressResponse"))
    }
}
// IabAllocatedTnlAddressList
#[derive(Clone, Debug)]
pub struct IabAllocatedTnlAddressList(pub Vec<IabAllocatedTnlAddressItem>);

impl IabAllocatedTnlAddressList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(1024), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(IabAllocatedTnlAddressItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(1024), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 295, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for IabAllocatedTnlAddressList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        IabAllocatedTnlAddressList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabAllocatedTnlAddressList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabAllocatedTnlAddressList"))
    }
}
// IabtnlAddressFailure
#[derive(Clone, Debug)]
pub struct IabtnlAddressFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl IabtnlAddressFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                77 => time_to_wait = Some(TimeToWait::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.time_to_wait {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 77, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for IabtnlAddressFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        IabtnlAddressFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabtnlAddressFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabtnlAddressFailure"))
    }
}
// IabupConfigurationUpdateRequest
#[derive(Clone, Debug)]
pub struct IabupConfigurationUpdateRequest {
    pub transaction_id: TransactionId,
    pub ul_up_tnl_information_to_update_list: Option<UlUpTnlInformationToUpdateList>,
    pub ul_up_tnl_address_to_update_list: Option<UlUpTnlAddressToUpdateList>,
}

impl IabupConfigurationUpdateRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut ul_up_tnl_information_to_update_list: Option<UlUpTnlInformationToUpdateList> = None;
        let mut ul_up_tnl_address_to_update_list: Option<UlUpTnlAddressToUpdateList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                300 => {
                    ul_up_tnl_information_to_update_list =
                        Some(UlUpTnlInformationToUpdateList::decode(data)?)
                }
                302 => {
                    ul_up_tnl_address_to_update_list =
                        Some(UlUpTnlAddressToUpdateList::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            ul_up_tnl_information_to_update_list,
            ul_up_tnl_address_to_update_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.ul_up_tnl_information_to_update_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 300, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.ul_up_tnl_address_to_update_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 302, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for IabupConfigurationUpdateRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        IabupConfigurationUpdateRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabupConfigurationUpdateRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabupConfigurationUpdateRequest"))
    }
}
// UlUpTnlInformationToUpdateList
#[derive(Clone, Debug)]
pub struct UlUpTnlInformationToUpdateList(pub Vec<UlUpTnlInformationToUpdateListItem>);

impl UlUpTnlInformationToUpdateList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(32678), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(UlUpTnlInformationToUpdateListItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32678), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 301, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for UlUpTnlInformationToUpdateList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UlUpTnlInformationToUpdateList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UlUpTnlInformationToUpdateList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UlUpTnlInformationToUpdateList"))
    }
}
// UlUpTnlAddressToUpdateList
#[derive(Clone, Debug)]
pub struct UlUpTnlAddressToUpdateList(pub Vec<UlUpTnlAddressToUpdateListItem>);

impl UlUpTnlAddressToUpdateList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(8), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(UlUpTnlAddressToUpdateListItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(8), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 303, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for UlUpTnlAddressToUpdateList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        UlUpTnlAddressToUpdateList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UlUpTnlAddressToUpdateList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("UlUpTnlAddressToUpdateList"))
    }
}
// IabupConfigurationUpdateResponse
#[derive(Clone, Debug)]
pub struct IabupConfigurationUpdateResponse {
    pub transaction_id: TransactionId,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
    pub dl_up_tnl_address_to_update_list: Option<DlUpTnlAddressToUpdateList>,
}

impl IabupConfigurationUpdateResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;
        let mut dl_up_tnl_address_to_update_list: Option<DlUpTnlAddressToUpdateList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                304 => {
                    dl_up_tnl_address_to_update_list =
                        Some(DlUpTnlAddressToUpdateList::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            criticality_diagnostics,
            dl_up_tnl_address_to_update_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.dl_up_tnl_address_to_update_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 304, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for IabupConfigurationUpdateResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        IabupConfigurationUpdateResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabupConfigurationUpdateResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabupConfigurationUpdateResponse"))
    }
}
// DlUpTnlAddressToUpdateList
#[derive(Clone, Debug)]
pub struct DlUpTnlAddressToUpdateList(pub Vec<DlUpTnlAddressToUpdateListItem>);

impl DlUpTnlAddressToUpdateList {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(8), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(DlUpTnlAddressToUpdateListItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(8), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 305, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for DlUpTnlAddressToUpdateList {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        DlUpTnlAddressToUpdateList::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DlUpTnlAddressToUpdateList"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("DlUpTnlAddressToUpdateList"))
    }
}
// IabupConfigurationUpdateFailure
#[derive(Clone, Debug)]
pub struct IabupConfigurationUpdateFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub time_to_wait: Option<TimeToWait>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl IabupConfigurationUpdateFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut time_to_wait: Option<TimeToWait> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                77 => time_to_wait = Some(TimeToWait::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            time_to_wait,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.time_to_wait {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 77, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for IabupConfigurationUpdateFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        IabupConfigurationUpdateFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabupConfigurationUpdateFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("IabupConfigurationUpdateFailure"))
    }
}
// ResourceStatusRequest
#[derive(Clone, Debug)]
pub struct ResourceStatusRequest {
    pub transaction_id: TransactionId,
    pub gnb_cu_measurement_id: GnbCuMeasurementId,
    pub gnb_du_measurement_id: Option<GnbDuMeasurementId>,
    pub registration_request: RegistrationRequest,
    pub report_characteristics: Option<ReportCharacteristics>,
    pub cell_to_report_list: Option<CellToReportList>,
    pub reporting_periodicity: Option<ReportingPeriodicity>,
}

impl ResourceStatusRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_measurement_id: Option<GnbCuMeasurementId> = None;
        let mut gnb_du_measurement_id: Option<GnbDuMeasurementId> = None;
        let mut registration_request: Option<RegistrationRequest> = None;
        let mut report_characteristics: Option<ReportCharacteristics> = None;
        let mut cell_to_report_list: Option<CellToReportList> = None;
        let mut reporting_periodicity: Option<ReportingPeriodicity> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                345 => gnb_cu_measurement_id = Some(GnbCuMeasurementId::decode(data)?),
                346 => gnb_du_measurement_id = Some(GnbDuMeasurementId::decode(data)?),
                347 => registration_request = Some(RegistrationRequest::decode(data)?),
                348 => report_characteristics = Some(ReportCharacteristics::decode(data)?),
                349 => cell_to_report_list = Some(CellToReportList::decode(data)?),
                352 => reporting_periodicity = Some(ReportingPeriodicity::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_cu_measurement_id = gnb_cu_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_measurement_id"),
        ))?;
        let registration_request = registration_request.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE registration_request"),
        ))?;
        Ok(Self {
            transaction_id,
            gnb_cu_measurement_id,
            gnb_du_measurement_id,
            registration_request,
            report_characteristics,
            cell_to_report_list,
            reporting_periodicity,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 345, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.gnb_du_measurement_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 346, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.registration_request.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 347, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.report_characteristics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 348, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.cell_to_report_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 349, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.reporting_periodicity {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 352, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for ResourceStatusRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ResourceStatusRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResourceStatusRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResourceStatusRequest"))
    }
}
// ResourceStatusResponse
#[derive(Clone, Debug)]
pub struct ResourceStatusResponse {
    pub transaction_id: TransactionId,
    pub gnb_cu_measurement_id: GnbCuMeasurementId,
    pub gnb_du_measurement_id: GnbDuMeasurementId,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl ResourceStatusResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_measurement_id: Option<GnbCuMeasurementId> = None;
        let mut gnb_du_measurement_id: Option<GnbDuMeasurementId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                345 => gnb_cu_measurement_id = Some(GnbCuMeasurementId::decode(data)?),
                346 => gnb_du_measurement_id = Some(GnbDuMeasurementId::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_cu_measurement_id = gnb_cu_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_measurement_id"),
        ))?;
        let gnb_du_measurement_id = gnb_du_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_du_measurement_id"),
        ))?;
        Ok(Self {
            transaction_id,
            gnb_cu_measurement_id,
            gnb_du_measurement_id,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 345, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 346, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for ResourceStatusResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ResourceStatusResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResourceStatusResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResourceStatusResponse"))
    }
}
// ResourceStatusFailure
#[derive(Clone, Debug)]
pub struct ResourceStatusFailure {
    pub transaction_id: TransactionId,
    pub gnb_cu_measurement_id: GnbCuMeasurementId,
    pub gnb_du_measurement_id: GnbDuMeasurementId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl ResourceStatusFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_measurement_id: Option<GnbCuMeasurementId> = None;
        let mut gnb_du_measurement_id: Option<GnbDuMeasurementId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                345 => gnb_cu_measurement_id = Some(GnbCuMeasurementId::decode(data)?),
                346 => gnb_du_measurement_id = Some(GnbDuMeasurementId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_cu_measurement_id = gnb_cu_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_measurement_id"),
        ))?;
        let gnb_du_measurement_id = gnb_du_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_du_measurement_id"),
        ))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            gnb_cu_measurement_id,
            gnb_du_measurement_id,
            cause,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 345, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 346, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for ResourceStatusFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ResourceStatusFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResourceStatusFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResourceStatusFailure"))
    }
}
// ResourceStatusUpdate
#[derive(Clone, Debug)]
pub struct ResourceStatusUpdate {
    pub transaction_id: TransactionId,
    pub gnb_cu_measurement_id: GnbCuMeasurementId,
    pub gnb_du_measurement_id: GnbDuMeasurementId,
    pub hardware_load_indicator: Option<HardwareLoadIndicator>,
    pub tnl_capacity_indicator: Option<TnlCapacityIndicator>,
    pub cell_measurement_result_list: Option<CellMeasurementResultList>,
}

impl ResourceStatusUpdate {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut gnb_cu_measurement_id: Option<GnbCuMeasurementId> = None;
        let mut gnb_du_measurement_id: Option<GnbDuMeasurementId> = None;
        let mut hardware_load_indicator: Option<HardwareLoadIndicator> = None;
        let mut tnl_capacity_indicator: Option<TnlCapacityIndicator> = None;
        let mut cell_measurement_result_list: Option<CellMeasurementResultList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                345 => gnb_cu_measurement_id = Some(GnbCuMeasurementId::decode(data)?),
                346 => gnb_du_measurement_id = Some(GnbDuMeasurementId::decode(data)?),
                351 => hardware_load_indicator = Some(HardwareLoadIndicator::decode(data)?),
                353 => tnl_capacity_indicator = Some(TnlCapacityIndicator::decode(data)?),
                350 => {
                    cell_measurement_result_list = Some(CellMeasurementResultList::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let gnb_cu_measurement_id = gnb_cu_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_cu_measurement_id"),
        ))?;
        let gnb_du_measurement_id = gnb_du_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE gnb_du_measurement_id"),
        ))?;
        Ok(Self {
            transaction_id,
            gnb_cu_measurement_id,
            gnb_du_measurement_id,
            hardware_load_indicator,
            tnl_capacity_indicator,
            cell_measurement_result_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_cu_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 345, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 346, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.hardware_load_indicator {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 351, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.tnl_capacity_indicator {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 353, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.cell_measurement_result_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 350, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for ResourceStatusUpdate {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ResourceStatusUpdate::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResourceStatusUpdate"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ResourceStatusUpdate"))
    }
}
// AccessAndMobilityIndication
#[derive(Clone, Debug)]
pub struct AccessAndMobilityIndication {
    pub transaction_id: TransactionId,
    pub rach_report_information_list: Option<RachReportInformationList>,
    pub rlf_report_information_list: Option<RlfReportInformationList>,
}

impl AccessAndMobilityIndication {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut rach_report_information_list: Option<RachReportInformationList> = None;
        let mut rlf_report_information_list: Option<RlfReportInformationList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                359 => {
                    rach_report_information_list = Some(RachReportInformationList::decode(data)?)
                }
                360 => rlf_report_information_list = Some(RlfReportInformationList::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            rach_report_information_list,
            rlf_report_information_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.rach_report_information_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 359, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.rlf_report_information_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 360, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for AccessAndMobilityIndication {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        AccessAndMobilityIndication::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("AccessAndMobilityIndication"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("AccessAndMobilityIndication"))
    }
}
// ReferenceTimeInformationReportingControl
#[derive(Clone, Debug)]
pub struct ReferenceTimeInformationReportingControl {
    pub transaction_id: TransactionId,
    pub reporting_request_type: ReportingRequestType,
}

impl ReferenceTimeInformationReportingControl {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut reporting_request_type: Option<ReportingRequestType> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                365 => reporting_request_type = Some(ReportingRequestType::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let reporting_request_type = reporting_request_type.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE reporting_request_type"),
        ))?;
        Ok(Self {
            transaction_id,
            reporting_request_type,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.reporting_request_type.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 365, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for ReferenceTimeInformationReportingControl {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ReferenceTimeInformationReportingControl::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ReferenceTimeInformationReportingControl"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ReferenceTimeInformationReportingControl"))
    }
}
// ReferenceTimeInformationReport
#[derive(Clone, Debug)]
pub struct ReferenceTimeInformationReport {
    pub transaction_id: TransactionId,
    pub time_reference_information: TimeReferenceInformation,
}

impl ReferenceTimeInformationReport {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut time_reference_information: Option<TimeReferenceInformation> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                366 => time_reference_information = Some(TimeReferenceInformation::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let time_reference_information = time_reference_information.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE time_reference_information")),
        )?;
        Ok(Self {
            transaction_id,
            time_reference_information,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.time_reference_information.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 366, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for ReferenceTimeInformationReport {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ReferenceTimeInformationReport::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ReferenceTimeInformationReport"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ReferenceTimeInformationReport"))
    }
}
// AccessSuccess
#[derive(Clone, Debug)]
pub struct AccessSuccess {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub nrcgi: Nrcgi,
}

impl AccessSuccess {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut nrcgi: Option<Nrcgi> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                111 => nrcgi = Some(Nrcgi::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let nrcgi = nrcgi.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE nrcgi"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            nrcgi,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.nrcgi.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 111, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for AccessSuccess {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        AccessSuccess::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("AccessSuccess"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("AccessSuccess"))
    }
}
// PositioningAssistanceInformationControl
#[derive(Clone, Debug)]
pub struct PositioningAssistanceInformationControl {
    pub transaction_id: TransactionId,
    pub pos_assistance_information: Option<PosAssistanceInformation>,
    pub pos_broadcast: Option<PosBroadcast>,
    pub positioning_broadcast_cells: Option<PositioningBroadcastCells>,
    pub routing_id: Option<RoutingId>,
}

impl PositioningAssistanceInformationControl {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut pos_assistance_information: Option<PosAssistanceInformation> = None;
        let mut pos_broadcast: Option<PosBroadcast> = None;
        let mut positioning_broadcast_cells: Option<PositioningBroadcastCells> = None;
        let mut routing_id: Option<RoutingId> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                392 => pos_assistance_information = Some(PosAssistanceInformation::decode(data)?),
                393 => pos_broadcast = Some(PosBroadcast::decode(data)?),
                406 => positioning_broadcast_cells = Some(PositioningBroadcastCells::decode(data)?),
                394 => routing_id = Some(RoutingId::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            pos_assistance_information,
            pos_broadcast,
            positioning_broadcast_cells,
            routing_id,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.pos_assistance_information {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 392, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.pos_broadcast {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 393, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.positioning_broadcast_cells {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 406, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.routing_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 394, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PositioningAssistanceInformationControl {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PositioningAssistanceInformationControl::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningAssistanceInformationControl"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningAssistanceInformationControl"))
    }
}
// PositioningAssistanceInformationFeedback
#[derive(Clone, Debug)]
pub struct PositioningAssistanceInformationFeedback {
    pub transaction_id: TransactionId,
    pub pos_assistance_information_failure_list: Option<PosAssistanceInformationFailureList>,
    pub positioning_broadcast_cells: Option<PositioningBroadcastCells>,
    pub routing_id: Option<RoutingId>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl PositioningAssistanceInformationFeedback {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut pos_assistance_information_failure_list: Option<
            PosAssistanceInformationFailureList,
        > = None;
        let mut positioning_broadcast_cells: Option<PositioningBroadcastCells> = None;
        let mut routing_id: Option<RoutingId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                395 => {
                    pos_assistance_information_failure_list =
                        Some(PosAssistanceInformationFailureList::decode(data)?)
                }
                406 => positioning_broadcast_cells = Some(PositioningBroadcastCells::decode(data)?),
                394 => routing_id = Some(RoutingId::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        Ok(Self {
            transaction_id,
            pos_assistance_information_failure_list,
            positioning_broadcast_cells,
            routing_id,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.pos_assistance_information_failure_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 395, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.positioning_broadcast_cells {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 406, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.routing_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 394, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PositioningAssistanceInformationFeedback {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PositioningAssistanceInformationFeedback::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningAssistanceInformationFeedback"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningAssistanceInformationFeedback"))
    }
}
// PositioningMeasurementRequest
#[derive(Clone, Debug)]
pub struct PositioningMeasurementRequest {
    pub transaction_id: TransactionId,
    pub lmf_measurement_id: LmfMeasurementId,
    pub ran_measurement_id: RanMeasurementId,
    pub trp_measurement_request_list: TrpMeasurementRequestList,
    pub pos_report_characteristics: PosReportCharacteristics,
    pub pos_measurement_periodicity: Option<MeasurementPeriodicity>,
    pub pos_measurement_quantities: PosMeasurementQuantities,
    pub sfn_initialisation_time: Option<RelativeTime1900>,
    pub srs_configuration: Option<SrsConfiguration>,
    pub measurement_beam_info_request: Option<MeasurementBeamInfoRequest>,
    pub system_frame_number: Option<SystemFrameNumber>,
    pub slot_number: Option<SlotNumber>,
}

impl PositioningMeasurementRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut lmf_measurement_id: Option<LmfMeasurementId> = None;
        let mut ran_measurement_id: Option<RanMeasurementId> = None;
        let mut trp_measurement_request_list: Option<TrpMeasurementRequestList> = None;
        let mut pos_report_characteristics: Option<PosReportCharacteristics> = None;
        let mut pos_measurement_periodicity: Option<MeasurementPeriodicity> = None;
        let mut pos_measurement_quantities: Option<PosMeasurementQuantities> = None;
        let mut sfn_initialisation_time: Option<RelativeTime1900> = None;
        let mut srs_configuration: Option<SrsConfiguration> = None;
        let mut measurement_beam_info_request: Option<MeasurementBeamInfoRequest> = None;
        let mut system_frame_number: Option<SystemFrameNumber> = None;
        let mut slot_number: Option<SlotNumber> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                402 => lmf_measurement_id = Some(LmfMeasurementId::decode(data)?),
                411 => ran_measurement_id = Some(RanMeasurementId::decode(data)?),
                422 => {
                    trp_measurement_request_list = Some(TrpMeasurementRequestList::decode(data)?)
                }
                408 => pos_report_characteristics = Some(PosReportCharacteristics::decode(data)?),
                409 => pos_measurement_periodicity = Some(MeasurementPeriodicity::decode(data)?),
                396 => pos_measurement_quantities = Some(PosMeasurementQuantities::decode(data)?),
                419 => sfn_initialisation_time = Some(RelativeTime1900::decode(data)?),
                407 => srs_configuration = Some(SrsConfiguration::decode(data)?),
                423 => {
                    measurement_beam_info_request = Some(MeasurementBeamInfoRequest::decode(data)?)
                }
                420 => system_frame_number = Some(SystemFrameNumber::decode(data)?),
                421 => slot_number = Some(SlotNumber::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let lmf_measurement_id = lmf_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE lmf_measurement_id"
        )))?;
        let ran_measurement_id = ran_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE ran_measurement_id"
        )))?;
        let trp_measurement_request_list = trp_measurement_request_list.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE trp_measurement_request_list")),
        )?;
        let pos_report_characteristics = pos_report_characteristics.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE pos_report_characteristics")),
        )?;
        let pos_measurement_quantities = pos_measurement_quantities.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE pos_measurement_quantities")),
        )?;
        Ok(Self {
            transaction_id,
            lmf_measurement_id,
            ran_measurement_id,
            trp_measurement_request_list,
            pos_report_characteristics,
            pos_measurement_periodicity,
            pos_measurement_quantities,
            sfn_initialisation_time,
            srs_configuration,
            measurement_beam_info_request,
            system_frame_number,
            slot_number,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.lmf_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 402, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.ran_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 411, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.trp_measurement_request_list.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 422, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.pos_report_characteristics.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 408, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.pos_measurement_periodicity {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 409, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.pos_measurement_quantities.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 396, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.sfn_initialisation_time {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 419, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.srs_configuration {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 407, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.measurement_beam_info_request {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 423, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.system_frame_number {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 420, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.slot_number {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 421, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PositioningMeasurementRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PositioningMeasurementRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningMeasurementRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningMeasurementRequest"))
    }
}
// PositioningMeasurementResponse
#[derive(Clone, Debug)]
pub struct PositioningMeasurementResponse {
    pub transaction_id: TransactionId,
    pub lmf_measurement_id: LmfMeasurementId,
    pub ran_measurement_id: RanMeasurementId,
    pub pos_measurement_result_list: Option<PosMeasurementResultList>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl PositioningMeasurementResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut lmf_measurement_id: Option<LmfMeasurementId> = None;
        let mut ran_measurement_id: Option<RanMeasurementId> = None;
        let mut pos_measurement_result_list: Option<PosMeasurementResultList> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                402 => lmf_measurement_id = Some(LmfMeasurementId::decode(data)?),
                411 => ran_measurement_id = Some(RanMeasurementId::decode(data)?),
                397 => pos_measurement_result_list = Some(PosMeasurementResultList::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let lmf_measurement_id = lmf_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE lmf_measurement_id"
        )))?;
        let ran_measurement_id = ran_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE ran_measurement_id"
        )))?;
        Ok(Self {
            transaction_id,
            lmf_measurement_id,
            ran_measurement_id,
            pos_measurement_result_list,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.lmf_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 402, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.ran_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 411, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.pos_measurement_result_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 397, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PositioningMeasurementResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PositioningMeasurementResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningMeasurementResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningMeasurementResponse"))
    }
}
// PositioningMeasurementFailure
#[derive(Clone, Debug)]
pub struct PositioningMeasurementFailure {
    pub transaction_id: TransactionId,
    pub lmf_measurement_id: LmfMeasurementId,
    pub ran_measurement_id: RanMeasurementId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl PositioningMeasurementFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut lmf_measurement_id: Option<LmfMeasurementId> = None;
        let mut ran_measurement_id: Option<RanMeasurementId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                402 => lmf_measurement_id = Some(LmfMeasurementId::decode(data)?),
                411 => ran_measurement_id = Some(RanMeasurementId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let lmf_measurement_id = lmf_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE lmf_measurement_id"
        )))?;
        let ran_measurement_id = ran_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE ran_measurement_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            lmf_measurement_id,
            ran_measurement_id,
            cause,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.lmf_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 402, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.ran_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 411, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PositioningMeasurementFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PositioningMeasurementFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningMeasurementFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningMeasurementFailure"))
    }
}
// PositioningMeasurementReport
#[derive(Clone, Debug)]
pub struct PositioningMeasurementReport {
    pub transaction_id: TransactionId,
    pub lmf_measurement_id: LmfMeasurementId,
    pub ran_measurement_id: RanMeasurementId,
    pub pos_measurement_result_list: PosMeasurementResultList,
}

impl PositioningMeasurementReport {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut lmf_measurement_id: Option<LmfMeasurementId> = None;
        let mut ran_measurement_id: Option<RanMeasurementId> = None;
        let mut pos_measurement_result_list: Option<PosMeasurementResultList> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                402 => lmf_measurement_id = Some(LmfMeasurementId::decode(data)?),
                411 => ran_measurement_id = Some(RanMeasurementId::decode(data)?),
                397 => pos_measurement_result_list = Some(PosMeasurementResultList::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let lmf_measurement_id = lmf_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE lmf_measurement_id"
        )))?;
        let ran_measurement_id = ran_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE ran_measurement_id"
        )))?;
        let pos_measurement_result_list = pos_measurement_result_list.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE pos_measurement_result_list")),
        )?;
        Ok(Self {
            transaction_id,
            lmf_measurement_id,
            ran_measurement_id,
            pos_measurement_result_list,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.lmf_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 402, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.ran_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 411, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.pos_measurement_result_list.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 397, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PositioningMeasurementReport {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PositioningMeasurementReport::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningMeasurementReport"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningMeasurementReport"))
    }
}
// PositioningMeasurementAbort
#[derive(Clone, Debug)]
pub struct PositioningMeasurementAbort {
    pub transaction_id: TransactionId,
    pub lmf_measurement_id: LmfMeasurementId,
    pub ran_measurement_id: RanMeasurementId,
}

impl PositioningMeasurementAbort {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut lmf_measurement_id: Option<LmfMeasurementId> = None;
        let mut ran_measurement_id: Option<RanMeasurementId> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                402 => lmf_measurement_id = Some(LmfMeasurementId::decode(data)?),
                411 => ran_measurement_id = Some(RanMeasurementId::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let lmf_measurement_id = lmf_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE lmf_measurement_id"
        )))?;
        let ran_measurement_id = ran_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE ran_measurement_id"
        )))?;
        Ok(Self {
            transaction_id,
            lmf_measurement_id,
            ran_measurement_id,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.lmf_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 402, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.ran_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 411, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PositioningMeasurementAbort {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PositioningMeasurementAbort::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningMeasurementAbort"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningMeasurementAbort"))
    }
}
// PositioningMeasurementFailureIndication
#[derive(Clone, Debug)]
pub struct PositioningMeasurementFailureIndication {
    pub transaction_id: TransactionId,
    pub lmf_measurement_id: LmfMeasurementId,
    pub ran_measurement_id: RanMeasurementId,
    pub cause: Cause,
}

impl PositioningMeasurementFailureIndication {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut lmf_measurement_id: Option<LmfMeasurementId> = None;
        let mut ran_measurement_id: Option<RanMeasurementId> = None;
        let mut cause: Option<Cause> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                402 => lmf_measurement_id = Some(LmfMeasurementId::decode(data)?),
                411 => ran_measurement_id = Some(RanMeasurementId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let lmf_measurement_id = lmf_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE lmf_measurement_id"
        )))?;
        let ran_measurement_id = ran_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE ran_measurement_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            lmf_measurement_id,
            ran_measurement_id,
            cause,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.lmf_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 402, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.ran_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 411, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PositioningMeasurementFailureIndication {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PositioningMeasurementFailureIndication::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningMeasurementFailureIndication"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningMeasurementFailureIndication"))
    }
}
// PositioningMeasurementUpdate
#[derive(Clone, Debug)]
pub struct PositioningMeasurementUpdate {
    pub transaction_id: TransactionId,
    pub lmf_measurement_id: LmfMeasurementId,
    pub ran_measurement_id: RanMeasurementId,
    pub srs_configuration: Option<SrsConfiguration>,
}

impl PositioningMeasurementUpdate {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut lmf_measurement_id: Option<LmfMeasurementId> = None;
        let mut ran_measurement_id: Option<RanMeasurementId> = None;
        let mut srs_configuration: Option<SrsConfiguration> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                402 => lmf_measurement_id = Some(LmfMeasurementId::decode(data)?),
                411 => ran_measurement_id = Some(RanMeasurementId::decode(data)?),
                407 => srs_configuration = Some(SrsConfiguration::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let lmf_measurement_id = lmf_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE lmf_measurement_id"
        )))?;
        let ran_measurement_id = ran_measurement_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE ran_measurement_id"
        )))?;
        Ok(Self {
            transaction_id,
            lmf_measurement_id,
            ran_measurement_id,
            srs_configuration,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.lmf_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 402, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.ran_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 411, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.srs_configuration {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 407, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PositioningMeasurementUpdate {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PositioningMeasurementUpdate::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningMeasurementUpdate"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningMeasurementUpdate"))
    }
}
// TrpInformationRequest
#[derive(Clone, Debug)]
pub struct TrpInformationRequest {
    pub transaction_id: TransactionId,
    pub trp_list: Option<TrpList>,
    pub trp_information_type_list_trp_req: TrpInformationTypeListTrpReq,
}

impl TrpInformationRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut trp_list: Option<TrpList> = None;
        let mut trp_information_type_list_trp_req: Option<TrpInformationTypeListTrpReq> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                410 => trp_list = Some(TrpList::decode(data)?),
                398 => {
                    trp_information_type_list_trp_req =
                        Some(TrpInformationTypeListTrpReq::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let trp_information_type_list_trp_req =
            trp_information_type_list_trp_req.ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE trp_information_type_list_trp_req"
            )))?;
        Ok(Self {
            transaction_id,
            trp_list,
            trp_information_type_list_trp_req,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.trp_list {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 410, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.trp_information_type_list_trp_req.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 398, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for TrpInformationRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        TrpInformationRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("TrpInformationRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("TrpInformationRequest"))
    }
}
// TrpInformationTypeListTrpReq
#[derive(Clone, Debug)]
pub struct TrpInformationTypeListTrpReq(pub Vec<TrpInformationTypeItem>);

impl TrpInformationTypeListTrpReq {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(TrpInformationTypeItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 399, false)?;
            Criticality::Reject.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for TrpInformationTypeListTrpReq {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        TrpInformationTypeListTrpReq::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("TrpInformationTypeListTrpReq"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("TrpInformationTypeListTrpReq"))
    }
}
// TrpInformationResponse
#[derive(Clone, Debug)]
pub struct TrpInformationResponse {
    pub transaction_id: TransactionId,
    pub trp_information_list_trp_resp: TrpInformationListTrpResp,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl TrpInformationResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut trp_information_list_trp_resp: Option<TrpInformationListTrpResp> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                400 => {
                    trp_information_list_trp_resp = Some(TrpInformationListTrpResp::decode(data)?)
                }
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let trp_information_list_trp_resp =
            trp_information_list_trp_resp.ok_or(aper::AperCodecError::new(format!(
                "Missing mandatory IE trp_information_list_trp_resp"
            )))?;
        Ok(Self {
            transaction_id,
            trp_information_list_trp_resp,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.trp_information_list_trp_resp.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 400, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for TrpInformationResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        TrpInformationResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("TrpInformationResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("TrpInformationResponse"))
    }
}
// TrpInformationListTrpResp
#[derive(Clone, Debug)]
pub struct TrpInformationListTrpResp(pub Vec<TrpInformationItem>);

impl TrpInformationListTrpResp {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(TrpInformationItem::decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65535), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 401, false)?;
            Criticality::Ignore.encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for TrpInformationListTrpResp {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        TrpInformationListTrpResp::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("TrpInformationListTrpResp"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("TrpInformationListTrpResp"))
    }
}
// TrpInformationFailure
#[derive(Clone, Debug)]
pub struct TrpInformationFailure {
    pub transaction_id: TransactionId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl TrpInformationFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut transaction_id: Option<TransactionId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                78 => transaction_id = Some(TransactionId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let transaction_id = transaction_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE transaction_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            transaction_id,
            cause,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.transaction_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 78, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for TrpInformationFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        TrpInformationFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("TrpInformationFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("TrpInformationFailure"))
    }
}
// PositioningInformationRequest
#[derive(Clone, Debug)]
pub struct PositioningInformationRequest {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub requested_srs_transmission_characteristics: Option<RequestedSrsTransmissionCharacteristics>,
}

impl PositioningInformationRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut requested_srs_transmission_characteristics: Option<
            RequestedSrsTransmissionCharacteristics,
        > = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                391 => {
                    requested_srs_transmission_characteristics =
                        Some(RequestedSrsTransmissionCharacteristics::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            requested_srs_transmission_characteristics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.requested_srs_transmission_characteristics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 391, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PositioningInformationRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PositioningInformationRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningInformationRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningInformationRequest"))
    }
}
// PositioningInformationResponse
#[derive(Clone, Debug)]
pub struct PositioningInformationResponse {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub srs_configuration: Option<SrsConfiguration>,
    pub sfn_initialisation_time: Option<RelativeTime1900>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl PositioningInformationResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut srs_configuration: Option<SrsConfiguration> = None;
        let mut sfn_initialisation_time: Option<RelativeTime1900> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                407 => srs_configuration = Some(SrsConfiguration::decode(data)?),
                419 => sfn_initialisation_time = Some(RelativeTime1900::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            srs_configuration,
            sfn_initialisation_time,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.srs_configuration {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 407, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sfn_initialisation_time {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 419, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PositioningInformationResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PositioningInformationResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningInformationResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningInformationResponse"))
    }
}
// PositioningInformationFailure
#[derive(Clone, Debug)]
pub struct PositioningInformationFailure {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl PositioningInformationFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            cause,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PositioningInformationFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PositioningInformationFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningInformationFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningInformationFailure"))
    }
}
// PositioningActivationRequest
#[derive(Clone, Debug)]
pub struct PositioningActivationRequest {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub srs_type: SrsType,
    pub activation_time: Option<RelativeTime1900>,
}

impl PositioningActivationRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut srs_type: Option<SrsType> = None;
        let mut activation_time: Option<RelativeTime1900> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                403 => srs_type = Some(SrsType::decode(data)?),
                404 => activation_time = Some(RelativeTime1900::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let srs_type = srs_type.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE srs_type"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            srs_type,
            activation_time,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.srs_type.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 403, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.activation_time {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 404, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PositioningActivationRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PositioningActivationRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningActivationRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningActivationRequest"))
    }
}
// SrsType
#[derive(Clone, Debug)]
pub enum SrsType {
    SemipersistentSrs(SemipersistentSrs),
    AperiodicSrs(AperiodicSrs),
}

impl SrsType {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(aper::AperCodecError::new(
                "CHOICE additions not implemented",
            ));
        }
        match idx {
            0 => Ok(Self::SemipersistentSrs(SemipersistentSrs::decode(data)?)),
            1 => Ok(Self::AperiodicSrs(AperiodicSrs::decode(data)?)),
            2 => Err(AperCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(AperCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        match self {
            Self::SemipersistentSrs(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.encode(data)
            }
            Self::AperiodicSrs(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.encode(data)
            }
        }
    }
}

impl AperCodec for SrsType {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SrsType::decode_inner(data).map_err(|e: AperCodecError| e.push_context("SrsType"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SrsType"))
    }
}
// SemipersistentSrs
#[derive(Clone, Debug)]
pub struct SemipersistentSrs {
    pub srs_resource_set_id: SrsResourceSetId,
    pub srs_spatial_relation: Option<SpatialRelationInfo>,
}

impl SemipersistentSrs {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let srs_resource_set_id = SrsResourceSetId::decode(data)?;
        let srs_spatial_relation = if optionals[0] {
            Some(SpatialRelationInfo::decode(data)?)
        } else {
            None
        };

        Ok(Self {
            srs_resource_set_id,
            srs_spatial_relation,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.srs_spatial_relation.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.srs_resource_set_id.encode(data)?;
        if let Some(x) = &self.srs_spatial_relation {
            x.encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SemipersistentSrs {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        SemipersistentSrs::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SemipersistentSrs"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("SemipersistentSrs"))
    }
}
// AperiodicSrs
#[derive(Clone, Debug)]
pub struct AperiodicSrs {
    pub aperiodic: Aperiodic,
    pub srs_resource_trigger: Option<SrsResourceTrigger>,
}

impl AperiodicSrs {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let aperiodic = Aperiodic::decode(data)?;
        let srs_resource_trigger = if optionals[0] {
            Some(SrsResourceTrigger::decode(data)?)
        } else {
            None
        };

        Ok(Self {
            aperiodic,
            srs_resource_trigger,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.srs_resource_trigger.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.aperiodic.encode(data)?;
        if let Some(x) = &self.srs_resource_trigger {
            x.encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for AperiodicSrs {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        AperiodicSrs::decode_inner(data).map_err(|e: AperCodecError| e.push_context("AperiodicSrs"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("AperiodicSrs"))
    }
}
// PositioningActivationResponse
#[derive(Clone, Debug)]
pub struct PositioningActivationResponse {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub system_frame_number: Option<SystemFrameNumber>,
    pub slot_number: Option<SlotNumber>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl PositioningActivationResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut system_frame_number: Option<SystemFrameNumber> = None;
        let mut slot_number: Option<SlotNumber> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                420 => system_frame_number = Some(SystemFrameNumber::decode(data)?),
                421 => slot_number = Some(SlotNumber::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            system_frame_number,
            slot_number,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.system_frame_number {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 420, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.slot_number {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 421, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PositioningActivationResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PositioningActivationResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningActivationResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningActivationResponse"))
    }
}
// PositioningActivationFailure
#[derive(Clone, Debug)]
pub struct PositioningActivationFailure {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl PositioningActivationFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            cause,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PositioningActivationFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PositioningActivationFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningActivationFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningActivationFailure"))
    }
}
// PositioningDeactivation
#[derive(Clone, Debug)]
pub struct PositioningDeactivation {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub abort_transmission: AbortTransmission,
}

impl PositioningDeactivation {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut abort_transmission: Option<AbortTransmission> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                405 => abort_transmission = Some(AbortTransmission::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let abort_transmission = abort_transmission.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE abort_transmission"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            abort_transmission,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.abort_transmission.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 405, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PositioningDeactivation {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PositioningDeactivation::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningDeactivation"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningDeactivation"))
    }
}
// PositioningInformationUpdate
#[derive(Clone, Debug)]
pub struct PositioningInformationUpdate {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub srs_configuration: Option<SrsConfiguration>,
    pub sfn_initialisation_time: Option<RelativeTime1900>,
}

impl PositioningInformationUpdate {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut srs_configuration: Option<SrsConfiguration> = None;
        let mut sfn_initialisation_time: Option<RelativeTime1900> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                407 => srs_configuration = Some(SrsConfiguration::decode(data)?),
                419 => sfn_initialisation_time = Some(RelativeTime1900::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            srs_configuration,
            sfn_initialisation_time,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.srs_configuration {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 407, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.sfn_initialisation_time {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 419, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for PositioningInformationUpdate {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        PositioningInformationUpdate::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningInformationUpdate"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("PositioningInformationUpdate"))
    }
}
// ECidMeasurementInitiationRequest
#[derive(Clone, Debug)]
pub struct ECidMeasurementInitiationRequest {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub lmf_ue_measurement_id: LmfUeMeasurementId,
    pub ran_ue_measurement_id: RanUeMeasurementId,
    pub e_cid_report_characteristics: ECidReportCharacteristics,
    pub e_cid_measurement_periodicity: Option<MeasurementPeriodicity>,
    pub e_cid_measurement_quantities: ECidMeasurementQuantities,
}

impl ECidMeasurementInitiationRequest {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut lmf_ue_measurement_id: Option<LmfUeMeasurementId> = None;
        let mut ran_ue_measurement_id: Option<RanUeMeasurementId> = None;
        let mut e_cid_report_characteristics: Option<ECidReportCharacteristics> = None;
        let mut e_cid_measurement_periodicity: Option<MeasurementPeriodicity> = None;
        let mut e_cid_measurement_quantities: Option<ECidMeasurementQuantities> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                412 => lmf_ue_measurement_id = Some(LmfUeMeasurementId::decode(data)?),
                413 => ran_ue_measurement_id = Some(RanUeMeasurementId::decode(data)?),
                424 => {
                    e_cid_report_characteristics = Some(ECidReportCharacteristics::decode(data)?)
                }
                416 => e_cid_measurement_periodicity = Some(MeasurementPeriodicity::decode(data)?),
                414 => {
                    e_cid_measurement_quantities = Some(ECidMeasurementQuantities::decode(data)?)
                }
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let lmf_ue_measurement_id = lmf_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE lmf_ue_measurement_id"),
        ))?;
        let ran_ue_measurement_id = ran_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE ran_ue_measurement_id"),
        ))?;
        let e_cid_report_characteristics = e_cid_report_characteristics.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE e_cid_report_characteristics")),
        )?;
        let e_cid_measurement_quantities = e_cid_measurement_quantities.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE e_cid_measurement_quantities")),
        )?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            lmf_ue_measurement_id,
            ran_ue_measurement_id,
            e_cid_report_characteristics,
            e_cid_measurement_periodicity,
            e_cid_measurement_quantities,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.lmf_ue_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 412, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.ran_ue_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 413, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.e_cid_report_characteristics.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 424, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.e_cid_measurement_periodicity {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 416, false)?;
            Criticality::Reject.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let ie = &mut AperCodecData::new();
        self.e_cid_measurement_quantities.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 414, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for ECidMeasurementInitiationRequest {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ECidMeasurementInitiationRequest::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ECidMeasurementInitiationRequest"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ECidMeasurementInitiationRequest"))
    }
}
// ECidMeasurementInitiationResponse
#[derive(Clone, Debug)]
pub struct ECidMeasurementInitiationResponse {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub lmf_ue_measurement_id: LmfUeMeasurementId,
    pub ran_ue_measurement_id: RanUeMeasurementId,
    pub e_cid_measurement_result: Option<ECidMeasurementResult>,
    pub cell_portion_id: Option<CellPortionId>,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl ECidMeasurementInitiationResponse {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut lmf_ue_measurement_id: Option<LmfUeMeasurementId> = None;
        let mut ran_ue_measurement_id: Option<RanUeMeasurementId> = None;
        let mut e_cid_measurement_result: Option<ECidMeasurementResult> = None;
        let mut cell_portion_id: Option<CellPortionId> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                412 => lmf_ue_measurement_id = Some(LmfUeMeasurementId::decode(data)?),
                413 => ran_ue_measurement_id = Some(RanUeMeasurementId::decode(data)?),
                417 => e_cid_measurement_result = Some(ECidMeasurementResult::decode(data)?),
                418 => cell_portion_id = Some(CellPortionId::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let lmf_ue_measurement_id = lmf_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE lmf_ue_measurement_id"),
        ))?;
        let ran_ue_measurement_id = ran_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE ran_ue_measurement_id"),
        ))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            lmf_ue_measurement_id,
            ran_ue_measurement_id,
            e_cid_measurement_result,
            cell_portion_id,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.lmf_ue_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 412, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.ran_ue_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 413, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.e_cid_measurement_result {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 417, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.cell_portion_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 418, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for ECidMeasurementInitiationResponse {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ECidMeasurementInitiationResponse::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ECidMeasurementInitiationResponse"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ECidMeasurementInitiationResponse"))
    }
}
// ECidMeasurementInitiationFailure
#[derive(Clone, Debug)]
pub struct ECidMeasurementInitiationFailure {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub lmf_ue_measurement_id: LmfUeMeasurementId,
    pub ran_ue_measurement_id: RanUeMeasurementId,
    pub cause: Cause,
    pub criticality_diagnostics: Option<CriticalityDiagnostics>,
}

impl ECidMeasurementInitiationFailure {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut lmf_ue_measurement_id: Option<LmfUeMeasurementId> = None;
        let mut ran_ue_measurement_id: Option<RanUeMeasurementId> = None;
        let mut cause: Option<Cause> = None;
        let mut criticality_diagnostics: Option<CriticalityDiagnostics> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                412 => lmf_ue_measurement_id = Some(LmfUeMeasurementId::decode(data)?),
                413 => ran_ue_measurement_id = Some(RanUeMeasurementId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                7 => criticality_diagnostics = Some(CriticalityDiagnostics::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let lmf_ue_measurement_id = lmf_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE lmf_ue_measurement_id"),
        ))?;
        let ran_ue_measurement_id = ran_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE ran_ue_measurement_id"),
        ))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            lmf_ue_measurement_id,
            ran_ue_measurement_id,
            cause,
            criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.lmf_ue_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 412, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.ran_ue_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 413, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.criticality_diagnostics {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 7, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for ECidMeasurementInitiationFailure {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ECidMeasurementInitiationFailure::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ECidMeasurementInitiationFailure"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ECidMeasurementInitiationFailure"))
    }
}
// ECidMeasurementFailureIndication
#[derive(Clone, Debug)]
pub struct ECidMeasurementFailureIndication {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub lmf_ue_measurement_id: LmfUeMeasurementId,
    pub ran_ue_measurement_id: RanUeMeasurementId,
    pub cause: Cause,
}

impl ECidMeasurementFailureIndication {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut lmf_ue_measurement_id: Option<LmfUeMeasurementId> = None;
        let mut ran_ue_measurement_id: Option<RanUeMeasurementId> = None;
        let mut cause: Option<Cause> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                412 => lmf_ue_measurement_id = Some(LmfUeMeasurementId::decode(data)?),
                413 => ran_ue_measurement_id = Some(RanUeMeasurementId::decode(data)?),
                0 => cause = Some(Cause::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let lmf_ue_measurement_id = lmf_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE lmf_ue_measurement_id"),
        ))?;
        let ran_ue_measurement_id = ran_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE ran_ue_measurement_id"),
        ))?;
        let cause = cause.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE cause"
        )))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            lmf_ue_measurement_id,
            ran_ue_measurement_id,
            cause,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.lmf_ue_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 412, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.ran_ue_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 413, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.cause.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 0, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for ECidMeasurementFailureIndication {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ECidMeasurementFailureIndication::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ECidMeasurementFailureIndication"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ECidMeasurementFailureIndication"))
    }
}
// ECidMeasurementReport
#[derive(Clone, Debug)]
pub struct ECidMeasurementReport {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub lmf_ue_measurement_id: LmfUeMeasurementId,
    pub ran_ue_measurement_id: RanUeMeasurementId,
    pub e_cid_measurement_result: ECidMeasurementResult,
    pub cell_portion_id: Option<CellPortionId>,
}

impl ECidMeasurementReport {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut lmf_ue_measurement_id: Option<LmfUeMeasurementId> = None;
        let mut ran_ue_measurement_id: Option<RanUeMeasurementId> = None;
        let mut e_cid_measurement_result: Option<ECidMeasurementResult> = None;
        let mut cell_portion_id: Option<CellPortionId> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                412 => lmf_ue_measurement_id = Some(LmfUeMeasurementId::decode(data)?),
                413 => ran_ue_measurement_id = Some(RanUeMeasurementId::decode(data)?),
                417 => e_cid_measurement_result = Some(ECidMeasurementResult::decode(data)?),
                418 => cell_portion_id = Some(CellPortionId::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let lmf_ue_measurement_id = lmf_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE lmf_ue_measurement_id"),
        ))?;
        let ran_ue_measurement_id = ran_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE ran_ue_measurement_id"),
        ))?;
        let e_cid_measurement_result = e_cid_measurement_result.ok_or(
            aper::AperCodecError::new(format!("Missing mandatory IE e_cid_measurement_result")),
        )?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            lmf_ue_measurement_id,
            ran_ue_measurement_id,
            e_cid_measurement_result,
            cell_portion_id,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.lmf_ue_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 412, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.ran_ue_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 413, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.e_cid_measurement_result.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 417, false)?;
        Criticality::Ignore.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        if let Some(x) = &self.cell_portion_id {
            let ie = &mut AperCodecData::new();
            x.encode(ie)?;
            aper::encode::encode_integer(ies, Some(0), Some(65535), false, 418, false)?;
            Criticality::Ignore.encode(ies)?;
            aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
            ies.append_aligned(ie);
            num_ies += 1;
        }

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for ECidMeasurementReport {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ECidMeasurementReport::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ECidMeasurementReport"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ECidMeasurementReport"))
    }
}
// ECidMeasurementTerminationCommand
#[derive(Clone, Debug)]
pub struct ECidMeasurementTerminationCommand {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub lmf_ue_measurement_id: LmfUeMeasurementId,
    pub ran_ue_measurement_id: RanUeMeasurementId,
}

impl ECidMeasurementTerminationCommand {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
        let _ = aper::decode::decode_sequence_header(data, true, 0)?;
        let len = aper::decode::decode_length_determinent(data, Some(0), Some(65535), false)?;

        let mut gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId> = None;
        let mut gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId> = None;
        let mut lmf_ue_measurement_id: Option<LmfUeMeasurementId> = None;
        let mut ran_ue_measurement_id: Option<RanUeMeasurementId> = None;

        for _ in 0..len {
            let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
            let _ = Criticality::decode(data)?;
            let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
            match id {
                40 => gnb_cu_ue_f1ap_id = Some(GnbCuUeF1apId::decode(data)?),
                41 => gnb_du_ue_f1ap_id = Some(GnbDuUeF1apId::decode(data)?),
                412 => lmf_ue_measurement_id = Some(LmfUeMeasurementId::decode(data)?),
                413 => ran_ue_measurement_id = Some(RanUeMeasurementId::decode(data)?),
                x => {
                    return Err(aper::AperCodecError::new(format!(
                        "Unrecognised IE type {}",
                        x
                    )))
                }
            }
        }
        let gnb_cu_ue_f1ap_id = gnb_cu_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_cu_ue_f1ap_id"
        )))?;
        let gnb_du_ue_f1ap_id = gnb_du_ue_f1ap_id.ok_or(aper::AperCodecError::new(format!(
            "Missing mandatory IE gnb_du_ue_f1ap_id"
        )))?;
        let lmf_ue_measurement_id = lmf_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE lmf_ue_measurement_id"),
        ))?;
        let ran_ue_measurement_id = ran_ue_measurement_id.ok_or(aper::AperCodecError::new(
            format!("Missing mandatory IE ran_ue_measurement_id"),
        ))?;
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            lmf_ue_measurement_id,
            ran_ue_measurement_id,
        })
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        let mut num_ies = 0;
        let ies = &mut AperCodecData::new();

        let ie = &mut AperCodecData::new();
        self.gnb_cu_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 40, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.gnb_du_ue_f1ap_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 41, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.lmf_ue_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 412, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let ie = &mut AperCodecData::new();
        self.ran_ue_measurement_id.encode(ie)?;
        aper::encode::encode_integer(ies, Some(0), Some(65535), false, 413, false)?;
        Criticality::Reject.encode(ies)?;
        aper::encode::encode_length_determinent(ies, None, None, false, ie.length_in_bytes())?;
        ies.append_aligned(ie);
        num_ies += 1;

        let container = &mut AperCodecData::new();
        aper::encode::encode_sequence_header(container, true, &BitVec::new(), false)?;
        aper::encode::encode_length_determinent(container, Some(0), Some(65535), false, num_ies)?;
        container.append_aligned(ies);
        aper::encode::encode_length_determinent(
            data,
            None,
            None,
            false,
            container.length_in_bytes(),
        )?;
        data.append_aligned(container);
        Ok(())
    }
}

impl AperCodec for ECidMeasurementTerminationCommand {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        ECidMeasurementTerminationCommand::decode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ECidMeasurementTerminationCommand"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("ECidMeasurementTerminationCommand"))
    }
}
// Aperiodic
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum Aperiodic {
    True,
}

impl Aperiodic {
    fn decode_inner(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(aper::AperCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| AperCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for Aperiodic {
    type Output = Self;
    fn decode(data: &mut AperCodecData) -> Result<Self, AperCodecError> {
        Aperiodic::decode_inner(data).map_err(|e: AperCodecError| e.push_context("Aperiodic"))
    }
    fn encode(&self, data: &mut AperCodecData) -> Result<(), AperCodecError> {
        self.encode_inner(data)
            .map_err(|e: AperCodecError| e.push_context("Aperiodic"))
    }
}
