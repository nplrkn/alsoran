// Autogenerated from F1AP-PDU-Descriptions.asn
#![allow(clippy::all)]
use super::pdu::*;
use crate::common::Criticality;
use anyhow::Result;
use asn1_per::{aper::*, *};
use async_trait::async_trait;
use slog::Logger;

// F1apPdu
#[derive(Clone, Debug)]
pub enum F1apPdu {
    InitiatingMessage(InitiatingMessage),
    SuccessfulOutcome(SuccessfulOutcome),
    UnsuccessfulOutcome(UnsuccessfulOutcome),
}

impl F1apPdu {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = decode::decode_choice_idx(data, 0, 3, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::InitiatingMessage(InitiatingMessage::decode(data)?)),
            1 => Ok(Self::SuccessfulOutcome(SuccessfulOutcome::decode(data)?)),
            2 => Ok(Self::UnsuccessfulOutcome(UnsuccessfulOutcome::decode(
                data,
            )?)),
            3 => {
                let (id, _ext) = decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::decode(data)?;
                let _ = decode::decode_length_determinent(data, None, None, false)?;
                let result = match id {
                    x => Err(PerCodecError::new(format!("Unrecognised IE type {}", x))),
                };
                data.decode_align()?;
                result
            }
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::InitiatingMessage(x) => {
                encode::encode_choice_idx(data, 0, 3, false, 0, false)?;
                x.encode(data)
            }
            Self::SuccessfulOutcome(x) => {
                encode::encode_choice_idx(data, 0, 3, false, 1, false)?;
                x.encode(data)
            }
            Self::UnsuccessfulOutcome(x) => {
                encode::encode_choice_idx(data, 0, 3, false, 2, false)?;
                x.encode(data)
            }
        }
    }
}

impl PerCodec for F1apPdu {
    type Allocator = Allocator;
    fn decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        F1apPdu::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("F1apPdu");
            e
        })
    }
    fn encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("F1apPdu");
            e
        })
    }
}
pub struct ResetProcedure {}

#[async_trait]
impl Procedure for ResetProcedure {
    type TopPdu = F1apPdu;
    type Request = Reset;
    type Success = ResetAcknowledge;
    type Failure = ();
    const CODE: u8 = 0;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: Reset,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<ResetProcedure>>::request(provider, req, logger).await {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::ResetAcknowledge(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::Reset(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::ResetAcknowledge(x)) => Ok(x),

            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct F1SetupProcedure {}

#[async_trait]
impl Procedure for F1SetupProcedure {
    type TopPdu = F1apPdu;
    type Request = F1SetupRequest;
    type Success = F1SetupResponse;
    type Failure = F1SetupFailure;
    const CODE: u8 = 1;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: F1SetupRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<F1SetupProcedure>>::request(provider, req, logger).await {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::F1SetupResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::F1SetupRequest(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::F1SetupResponse(x)) => Ok(x),
            F1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::F1SetupFailure(x)) => {
                Err(RequestError::UnsuccessfulOutcome(x))
            }
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct GnbDuConfigurationUpdateProcedure {}

#[async_trait]
impl Procedure for GnbDuConfigurationUpdateProcedure {
    type TopPdu = F1apPdu;
    type Request = GnbDuConfigurationUpdate;
    type Success = GnbDuConfigurationUpdateAcknowledge;
    type Failure = GnbDuConfigurationUpdateFailure;
    const CODE: u8 = 3;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: GnbDuConfigurationUpdate,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<GnbDuConfigurationUpdateProcedure>>::request(
            provider, req, logger,
        )
        .await
        {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::GnbDuConfigurationUpdateAcknowledge(
                    r,
                )),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::GnbDuConfigurationUpdate(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::GnbDuConfigurationUpdateAcknowledge(
                x,
            )) => Ok(x),
            F1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::GnbDuConfigurationUpdateFailure(
                x,
            )) => Err(RequestError::UnsuccessfulOutcome(x)),
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct GnbCuConfigurationUpdateProcedure {}

#[async_trait]
impl Procedure for GnbCuConfigurationUpdateProcedure {
    type TopPdu = F1apPdu;
    type Request = GnbCuConfigurationUpdate;
    type Success = GnbCuConfigurationUpdateAcknowledge;
    type Failure = GnbCuConfigurationUpdateFailure;
    const CODE: u8 = 4;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: GnbCuConfigurationUpdate,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<GnbCuConfigurationUpdateProcedure>>::request(
            provider, req, logger,
        )
        .await
        {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::GnbCuConfigurationUpdateAcknowledge(
                    r,
                )),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::GnbCuConfigurationUpdate(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::GnbCuConfigurationUpdateAcknowledge(
                x,
            )) => Ok(x),
            F1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::GnbCuConfigurationUpdateFailure(
                x,
            )) => Err(RequestError::UnsuccessfulOutcome(x)),
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct UeContextSetupProcedure {}

#[async_trait]
impl Procedure for UeContextSetupProcedure {
    type TopPdu = F1apPdu;
    type Request = UeContextSetupRequest;
    type Success = UeContextSetupResponse;
    type Failure = UeContextSetupFailure;
    const CODE: u8 = 5;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: UeContextSetupRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<UeContextSetupProcedure>>::request(provider, req, logger).await
        {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::UeContextSetupResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::UeContextSetupRequest(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::UeContextSetupResponse(x)) => Ok(x),
            F1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::UeContextSetupFailure(x)) => {
                Err(RequestError::UnsuccessfulOutcome(x))
            }
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct UeContextReleaseProcedure {}

#[async_trait]
impl Procedure for UeContextReleaseProcedure {
    type TopPdu = F1apPdu;
    type Request = UeContextReleaseCommand;
    type Success = UeContextReleaseComplete;
    type Failure = ();
    const CODE: u8 = 6;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: UeContextReleaseCommand,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<UeContextReleaseProcedure>>::request(provider, req, logger)
            .await
        {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::UeContextReleaseComplete(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::UeContextReleaseCommand(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::UeContextReleaseComplete(x)) => Ok(x),

            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct UeContextModificationProcedure {}

#[async_trait]
impl Procedure for UeContextModificationProcedure {
    type TopPdu = F1apPdu;
    type Request = UeContextModificationRequest;
    type Success = UeContextModificationResponse;
    type Failure = UeContextModificationFailure;
    const CODE: u8 = 7;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: UeContextModificationRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<UeContextModificationProcedure>>::request(provider, req, logger)
            .await
        {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::UeContextModificationResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::UeContextModificationRequest(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::UeContextModificationResponse(x)) => {
                Ok(x)
            }
            F1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::UeContextModificationFailure(x)) => {
                Err(RequestError::UnsuccessfulOutcome(x))
            }
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct UeContextModificationRequiredProcedure {}

#[async_trait]
impl Procedure for UeContextModificationRequiredProcedure {
    type TopPdu = F1apPdu;
    type Request = UeContextModificationRequired;
    type Success = UeContextModificationConfirm;
    type Failure = UeContextModificationRefuse;
    const CODE: u8 = 8;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: UeContextModificationRequired,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<UeContextModificationRequiredProcedure>>::request(
            provider, req, logger,
        )
        .await
        {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::UeContextModificationConfirm(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::UeContextModificationRequired(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::UeContextModificationConfirm(x)) => Ok(x),
            F1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::UeContextModificationRefuse(x)) => {
                Err(RequestError::UnsuccessfulOutcome(x))
            }
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct WriteReplaceWarningProcedure {}

#[async_trait]
impl Procedure for WriteReplaceWarningProcedure {
    type TopPdu = F1apPdu;
    type Request = WriteReplaceWarningRequest;
    type Success = WriteReplaceWarningResponse;
    type Failure = ();
    const CODE: u8 = 20;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: WriteReplaceWarningRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<WriteReplaceWarningProcedure>>::request(provider, req, logger)
            .await
        {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::WriteReplaceWarningResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::WriteReplaceWarningRequest(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::WriteReplaceWarningResponse(x)) => Ok(x),

            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct PwsCancelProcedure {}

#[async_trait]
impl Procedure for PwsCancelProcedure {
    type TopPdu = F1apPdu;
    type Request = PwsCancelRequest;
    type Success = PwsCancelResponse;
    type Failure = ();
    const CODE: u8 = 21;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: PwsCancelRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<PwsCancelProcedure>>::request(provider, req, logger).await {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::PwsCancelResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::PwsCancelRequest(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::PwsCancelResponse(x)) => Ok(x),

            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct ErrorIndicationProcedure {}

#[async_trait]
impl Indication for ErrorIndicationProcedure {
    type TopPdu = F1apPdu;
    type Request = ErrorIndication;
    const CODE: u8 = 2;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: ErrorIndication,
        logger: &Logger,
    ) {
        <T as IndicationHandler<ErrorIndicationProcedure>>::handle(provider, req, logger).await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::ErrorIndication(r)).into_bytes()
    }
}

pub struct UeContextReleaseRequestProcedure {}

#[async_trait]
impl Indication for UeContextReleaseRequestProcedure {
    type TopPdu = F1apPdu;
    type Request = UeContextReleaseRequest;
    const CODE: u8 = 10;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: UeContextReleaseRequest,
        logger: &Logger,
    ) {
        <T as IndicationHandler<UeContextReleaseRequestProcedure>>::handle(provider, req, logger)
            .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::UeContextReleaseRequest(r)).into_bytes()
    }
}

pub struct InitialUlRrcMessageTransferProcedure {}

#[async_trait]
impl Indication for InitialUlRrcMessageTransferProcedure {
    type TopPdu = F1apPdu;
    type Request = InitialUlRrcMessageTransfer;
    const CODE: u8 = 11;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: InitialUlRrcMessageTransfer,
        logger: &Logger,
    ) {
        <T as IndicationHandler<InitialUlRrcMessageTransferProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::InitialUlRrcMessageTransfer(r)).into_bytes()
    }
}

pub struct DlRrcMessageTransferProcedure {}

#[async_trait]
impl Indication for DlRrcMessageTransferProcedure {
    type TopPdu = F1apPdu;
    type Request = DlRrcMessageTransfer;
    const CODE: u8 = 12;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: DlRrcMessageTransfer,
        logger: &Logger,
    ) {
        <T as IndicationHandler<DlRrcMessageTransferProcedure>>::handle(provider, req, logger)
            .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::DlRrcMessageTransfer(r)).into_bytes()
    }
}

pub struct UlRrcMessageTransferProcedure {}

#[async_trait]
impl Indication for UlRrcMessageTransferProcedure {
    type TopPdu = F1apPdu;
    type Request = UlRrcMessageTransfer;
    const CODE: u8 = 13;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: UlRrcMessageTransfer,
        logger: &Logger,
    ) {
        <T as IndicationHandler<UlRrcMessageTransferProcedure>>::handle(provider, req, logger)
            .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::UlRrcMessageTransfer(r)).into_bytes()
    }
}

pub struct UeInactivityNotificationProcedure {}

#[async_trait]
impl Indication for UeInactivityNotificationProcedure {
    type TopPdu = F1apPdu;
    type Request = UeInactivityNotification;
    const CODE: u8 = 15;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: UeInactivityNotification,
        logger: &Logger,
    ) {
        <T as IndicationHandler<UeInactivityNotificationProcedure>>::handle(provider, req, logger)
            .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::UeInactivityNotification(r)).into_bytes()
    }
}

pub struct GnbDuResourceCoordinationProcedure {}

#[async_trait]
impl Procedure for GnbDuResourceCoordinationProcedure {
    type TopPdu = F1apPdu;
    type Request = GnbDuResourceCoordinationRequest;
    type Success = GnbDuResourceCoordinationResponse;
    type Failure = ();
    const CODE: u8 = 16;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: GnbDuResourceCoordinationRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<GnbDuResourceCoordinationProcedure>>::request(
            provider, req, logger,
        )
        .await
        {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::GnbDuResourceCoordinationResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::GnbDuResourceCoordinationRequest(r))
            .into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::GnbDuResourceCoordinationResponse(x)) => {
                Ok(x)
            }

            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct SystemInformationDeliveryProcedure {}

#[async_trait]
impl Indication for SystemInformationDeliveryProcedure {
    type TopPdu = F1apPdu;
    type Request = SystemInformationDeliveryCommand;
    const CODE: u8 = 17;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: SystemInformationDeliveryCommand,
        logger: &Logger,
    ) {
        <T as IndicationHandler<SystemInformationDeliveryProcedure>>::handle(provider, req, logger)
            .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::SystemInformationDeliveryCommand(r))
            .into_bytes()
    }
}

pub struct PagingProcedure {}

#[async_trait]
impl Indication for PagingProcedure {
    type TopPdu = F1apPdu;
    type Request = Paging;
    const CODE: u8 = 18;

    async fn call_provider<T: IndicationHandler<Self>>(provider: &T, req: Paging, logger: &Logger) {
        <T as IndicationHandler<PagingProcedure>>::handle(provider, req, logger).await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::Paging(r)).into_bytes()
    }
}

pub struct NotifyProcedure {}

#[async_trait]
impl Indication for NotifyProcedure {
    type TopPdu = F1apPdu;
    type Request = Notify;
    const CODE: u8 = 19;

    async fn call_provider<T: IndicationHandler<Self>>(provider: &T, req: Notify, logger: &Logger) {
        <T as IndicationHandler<NotifyProcedure>>::handle(provider, req, logger).await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::Notify(r)).into_bytes()
    }
}

pub struct NetworkAccessRateReductionProcedure {}

#[async_trait]
impl Indication for NetworkAccessRateReductionProcedure {
    type TopPdu = F1apPdu;
    type Request = NetworkAccessRateReduction;
    const CODE: u8 = 27;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: NetworkAccessRateReduction,
        logger: &Logger,
    ) {
        <T as IndicationHandler<NetworkAccessRateReductionProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::NetworkAccessRateReduction(r)).into_bytes()
    }
}

pub struct PwsRestartIndicationProcedure {}

#[async_trait]
impl Indication for PwsRestartIndicationProcedure {
    type TopPdu = F1apPdu;
    type Request = PwsRestartIndication;
    const CODE: u8 = 22;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: PwsRestartIndication,
        logger: &Logger,
    ) {
        <T as IndicationHandler<PwsRestartIndicationProcedure>>::handle(provider, req, logger)
            .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::PwsRestartIndication(r)).into_bytes()
    }
}

pub struct PwsFailureIndicationProcedure {}

#[async_trait]
impl Indication for PwsFailureIndicationProcedure {
    type TopPdu = F1apPdu;
    type Request = PwsFailureIndication;
    const CODE: u8 = 23;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: PwsFailureIndication,
        logger: &Logger,
    ) {
        <T as IndicationHandler<PwsFailureIndicationProcedure>>::handle(provider, req, logger)
            .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::PwsFailureIndication(r)).into_bytes()
    }
}

pub struct GnbDuStatusIndicationProcedure {}

#[async_trait]
impl Indication for GnbDuStatusIndicationProcedure {
    type TopPdu = F1apPdu;
    type Request = GnbDuStatusIndication;
    const CODE: u8 = 24;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: GnbDuStatusIndication,
        logger: &Logger,
    ) {
        <T as IndicationHandler<GnbDuStatusIndicationProcedure>>::handle(provider, req, logger)
            .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::GnbDuStatusIndication(r)).into_bytes()
    }
}

pub struct RrcDeliveryReportProcedure {}

#[async_trait]
impl Indication for RrcDeliveryReportProcedure {
    type TopPdu = F1apPdu;
    type Request = RrcDeliveryReport;
    const CODE: u8 = 25;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: RrcDeliveryReport,
        logger: &Logger,
    ) {
        <T as IndicationHandler<RrcDeliveryReportProcedure>>::handle(provider, req, logger).await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::RrcDeliveryReport(r)).into_bytes()
    }
}

pub struct F1RemovalProcedure {}

#[async_trait]
impl Procedure for F1RemovalProcedure {
    type TopPdu = F1apPdu;
    type Request = F1RemovalRequest;
    type Success = F1RemovalResponse;
    type Failure = F1RemovalFailure;
    const CODE: u8 = 26;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: F1RemovalRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<F1RemovalProcedure>>::request(provider, req, logger).await {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::F1RemovalResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::F1RemovalRequest(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::F1RemovalResponse(x)) => Ok(x),
            F1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::F1RemovalFailure(x)) => {
                Err(RequestError::UnsuccessfulOutcome(x))
            }
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct TraceStartProcedure {}

#[async_trait]
impl Indication for TraceStartProcedure {
    type TopPdu = F1apPdu;
    type Request = TraceStart;
    const CODE: u8 = 28;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: TraceStart,
        logger: &Logger,
    ) {
        <T as IndicationHandler<TraceStartProcedure>>::handle(provider, req, logger).await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::TraceStart(r)).into_bytes()
    }
}

pub struct DeactivateTraceProcedure {}

#[async_trait]
impl Indication for DeactivateTraceProcedure {
    type TopPdu = F1apPdu;
    type Request = DeactivateTrace;
    const CODE: u8 = 29;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: DeactivateTrace,
        logger: &Logger,
    ) {
        <T as IndicationHandler<DeactivateTraceProcedure>>::handle(provider, req, logger).await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::DeactivateTrace(r)).into_bytes()
    }
}

pub struct DuCuRadioInformationTransferProcedure {}

#[async_trait]
impl Indication for DuCuRadioInformationTransferProcedure {
    type TopPdu = F1apPdu;
    type Request = DuCuRadioInformationTransfer;
    const CODE: u8 = 30;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: DuCuRadioInformationTransfer,
        logger: &Logger,
    ) {
        <T as IndicationHandler<DuCuRadioInformationTransferProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::DuCuRadioInformationTransfer(r)).into_bytes()
    }
}

pub struct CuDuRadioInformationTransferProcedure {}

#[async_trait]
impl Indication for CuDuRadioInformationTransferProcedure {
    type TopPdu = F1apPdu;
    type Request = CuDuRadioInformationTransfer;
    const CODE: u8 = 31;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: CuDuRadioInformationTransfer,
        logger: &Logger,
    ) {
        <T as IndicationHandler<CuDuRadioInformationTransferProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::CuDuRadioInformationTransfer(r)).into_bytes()
    }
}

pub struct BapMappingConfigurationProcedure {}

#[async_trait]
impl Procedure for BapMappingConfigurationProcedure {
    type TopPdu = F1apPdu;
    type Request = BapMappingConfiguration;
    type Success = BapMappingConfigurationAcknowledge;
    type Failure = BapMappingConfigurationFailure;
    const CODE: u8 = 32;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: BapMappingConfiguration,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<BapMappingConfigurationProcedure>>::request(
            provider, req, logger,
        )
        .await
        {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::BapMappingConfigurationAcknowledge(
                    r,
                )),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::BapMappingConfiguration(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::BapMappingConfigurationAcknowledge(
                x,
            )) => Ok(x),
            F1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::BapMappingConfigurationFailure(
                x,
            )) => Err(RequestError::UnsuccessfulOutcome(x)),
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct GnbDuResourceConfigurationProcedure {}

#[async_trait]
impl Procedure for GnbDuResourceConfigurationProcedure {
    type TopPdu = F1apPdu;
    type Request = GnbDuResourceConfiguration;
    type Success = GnbDuResourceConfigurationAcknowledge;
    type Failure = GnbDuResourceConfigurationFailure;
    const CODE: u8 = 33;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: GnbDuResourceConfiguration,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<GnbDuResourceConfigurationProcedure>>::request(
            provider, req, logger,
        )
        .await
        {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(
                    SuccessfulOutcome::GnbDuResourceConfigurationAcknowledge(r),
                ),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::GnbDuResourceConfiguration(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(
                SuccessfulOutcome::GnbDuResourceConfigurationAcknowledge(x),
            ) => Ok(x),
            F1apPdu::UnsuccessfulOutcome(
                UnsuccessfulOutcome::GnbDuResourceConfigurationFailure(x),
            ) => Err(RequestError::UnsuccessfulOutcome(x)),
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct IabtnlAddressAllocationProcedure {}

#[async_trait]
impl Procedure for IabtnlAddressAllocationProcedure {
    type TopPdu = F1apPdu;
    type Request = IabtnlAddressRequest;
    type Success = IabtnlAddressResponse;
    type Failure = IabtnlAddressFailure;
    const CODE: u8 = 34;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: IabtnlAddressRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<IabtnlAddressAllocationProcedure>>::request(
            provider, req, logger,
        )
        .await
        {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::IabtnlAddressResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::IabtnlAddressRequest(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::IabtnlAddressResponse(x)) => Ok(x),
            F1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::IabtnlAddressFailure(x)) => {
                Err(RequestError::UnsuccessfulOutcome(x))
            }
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct IabupConfigurationUpdateProcedure {}

#[async_trait]
impl Procedure for IabupConfigurationUpdateProcedure {
    type TopPdu = F1apPdu;
    type Request = IabupConfigurationUpdateRequest;
    type Success = IabupConfigurationUpdateResponse;
    type Failure = IabupConfigurationUpdateFailure;
    const CODE: u8 = 35;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: IabupConfigurationUpdateRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<IabupConfigurationUpdateProcedure>>::request(
            provider, req, logger,
        )
        .await
        {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::IabupConfigurationUpdateResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::IabupConfigurationUpdateRequest(r))
            .into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::IabupConfigurationUpdateResponse(x)) => {
                Ok(x)
            }
            F1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::IabupConfigurationUpdateFailure(
                x,
            )) => Err(RequestError::UnsuccessfulOutcome(x)),
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct ResourceStatusReportingInitiationProcedure {}

#[async_trait]
impl Procedure for ResourceStatusReportingInitiationProcedure {
    type TopPdu = F1apPdu;
    type Request = ResourceStatusRequest;
    type Success = ResourceStatusResponse;
    type Failure = ResourceStatusFailure;
    const CODE: u8 = 36;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: ResourceStatusRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<ResourceStatusReportingInitiationProcedure>>::request(
            provider, req, logger,
        )
        .await
        {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::ResourceStatusResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::ResourceStatusRequest(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::ResourceStatusResponse(x)) => Ok(x),
            F1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::ResourceStatusFailure(x)) => {
                Err(RequestError::UnsuccessfulOutcome(x))
            }
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct ResourceStatusReportingProcedure {}

#[async_trait]
impl Indication for ResourceStatusReportingProcedure {
    type TopPdu = F1apPdu;
    type Request = ResourceStatusUpdate;
    const CODE: u8 = 37;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: ResourceStatusUpdate,
        logger: &Logger,
    ) {
        <T as IndicationHandler<ResourceStatusReportingProcedure>>::handle(provider, req, logger)
            .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::ResourceStatusUpdate(r)).into_bytes()
    }
}

pub struct AccessAndMobilityIndicationProcedure {}

#[async_trait]
impl Indication for AccessAndMobilityIndicationProcedure {
    type TopPdu = F1apPdu;
    type Request = AccessAndMobilityIndication;
    const CODE: u8 = 38;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: AccessAndMobilityIndication,
        logger: &Logger,
    ) {
        <T as IndicationHandler<AccessAndMobilityIndicationProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::AccessAndMobilityIndication(r)).into_bytes()
    }
}

pub struct ReferenceTimeInformationReportingControlProcedure {}

#[async_trait]
impl Indication for ReferenceTimeInformationReportingControlProcedure {
    type TopPdu = F1apPdu;
    type Request = ReferenceTimeInformationReportingControl;
    const CODE: u8 = 58;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: ReferenceTimeInformationReportingControl,
        logger: &Logger,
    ) {
        <T as IndicationHandler<ReferenceTimeInformationReportingControlProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::ReferenceTimeInformationReportingControl(
            r,
        ))
        .into_bytes()
    }
}

pub struct ReferenceTimeInformationReportProcedure {}

#[async_trait]
impl Indication for ReferenceTimeInformationReportProcedure {
    type TopPdu = F1apPdu;
    type Request = ReferenceTimeInformationReport;
    const CODE: u8 = 57;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: ReferenceTimeInformationReport,
        logger: &Logger,
    ) {
        <T as IndicationHandler<ReferenceTimeInformationReportProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::ReferenceTimeInformationReport(r))
            .into_bytes()
    }
}

pub struct AccessSuccessProcedure {}

#[async_trait]
impl Indication for AccessSuccessProcedure {
    type TopPdu = F1apPdu;
    type Request = AccessSuccess;
    const CODE: u8 = 39;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: AccessSuccess,
        logger: &Logger,
    ) {
        <T as IndicationHandler<AccessSuccessProcedure>>::handle(provider, req, logger).await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::AccessSuccess(r)).into_bytes()
    }
}

pub struct CellTrafficTraceProcedure {}

#[async_trait]
impl Indication for CellTrafficTraceProcedure {
    type TopPdu = F1apPdu;
    type Request = CellTrafficTrace;
    const CODE: u8 = 40;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: CellTrafficTrace,
        logger: &Logger,
    ) {
        <T as IndicationHandler<CellTrafficTraceProcedure>>::handle(provider, req, logger).await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::CellTrafficTrace(r)).into_bytes()
    }
}

pub struct PositioningAssistanceInformationControlProcedure {}

#[async_trait]
impl Indication for PositioningAssistanceInformationControlProcedure {
    type TopPdu = F1apPdu;
    type Request = PositioningAssistanceInformationControl;
    const CODE: u8 = 42;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: PositioningAssistanceInformationControl,
        logger: &Logger,
    ) {
        <T as IndicationHandler<PositioningAssistanceInformationControlProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::PositioningAssistanceInformationControl(
            r,
        ))
        .into_bytes()
    }
}

pub struct PositioningAssistanceInformationFeedbackProcedure {}

#[async_trait]
impl Indication for PositioningAssistanceInformationFeedbackProcedure {
    type TopPdu = F1apPdu;
    type Request = PositioningAssistanceInformationFeedback;
    const CODE: u8 = 43;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: PositioningAssistanceInformationFeedback,
        logger: &Logger,
    ) {
        <T as IndicationHandler<PositioningAssistanceInformationFeedbackProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::PositioningAssistanceInformationFeedback(
            r,
        ))
        .into_bytes()
    }
}

pub struct PositioningMeasurementExchangeProcedure {}

#[async_trait]
impl Procedure for PositioningMeasurementExchangeProcedure {
    type TopPdu = F1apPdu;
    type Request = PositioningMeasurementRequest;
    type Success = PositioningMeasurementResponse;
    type Failure = PositioningMeasurementFailure;
    const CODE: u8 = 41;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: PositioningMeasurementRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<PositioningMeasurementExchangeProcedure>>::request(
            provider, req, logger,
        )
        .await
        {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::PositioningMeasurementResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::PositioningMeasurementRequest(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::PositioningMeasurementResponse(x)) => {
                Ok(x)
            }
            F1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::PositioningMeasurementFailure(x)) => {
                Err(RequestError::UnsuccessfulOutcome(x))
            }
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct PositioningMeasurementReportProcedure {}

#[async_trait]
impl Indication for PositioningMeasurementReportProcedure {
    type TopPdu = F1apPdu;
    type Request = PositioningMeasurementReport;
    const CODE: u8 = 44;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: PositioningMeasurementReport,
        logger: &Logger,
    ) {
        <T as IndicationHandler<PositioningMeasurementReportProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::PositioningMeasurementReport(r)).into_bytes()
    }
}

pub struct PositioningMeasurementAbortProcedure {}

#[async_trait]
impl Indication for PositioningMeasurementAbortProcedure {
    type TopPdu = F1apPdu;
    type Request = PositioningMeasurementAbort;
    const CODE: u8 = 45;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: PositioningMeasurementAbort,
        logger: &Logger,
    ) {
        <T as IndicationHandler<PositioningMeasurementAbortProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::PositioningMeasurementAbort(r)).into_bytes()
    }
}

pub struct PositioningMeasurementFailureIndicationProcedure {}

#[async_trait]
impl Indication for PositioningMeasurementFailureIndicationProcedure {
    type TopPdu = F1apPdu;
    type Request = PositioningMeasurementFailureIndication;
    const CODE: u8 = 46;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: PositioningMeasurementFailureIndication,
        logger: &Logger,
    ) {
        <T as IndicationHandler<PositioningMeasurementFailureIndicationProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::PositioningMeasurementFailureIndication(
            r,
        ))
        .into_bytes()
    }
}

pub struct PositioningMeasurementUpdateProcedure {}

#[async_trait]
impl Indication for PositioningMeasurementUpdateProcedure {
    type TopPdu = F1apPdu;
    type Request = PositioningMeasurementUpdate;
    const CODE: u8 = 47;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: PositioningMeasurementUpdate,
        logger: &Logger,
    ) {
        <T as IndicationHandler<PositioningMeasurementUpdateProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::PositioningMeasurementUpdate(r)).into_bytes()
    }
}

pub struct TrpInformationExchangeProcedure {}

#[async_trait]
impl Procedure for TrpInformationExchangeProcedure {
    type TopPdu = F1apPdu;
    type Request = TrpInformationRequest;
    type Success = TrpInformationResponse;
    type Failure = TrpInformationFailure;
    const CODE: u8 = 48;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: TrpInformationRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<TrpInformationExchangeProcedure>>::request(
            provider, req, logger,
        )
        .await
        {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::TrpInformationResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::TrpInformationRequest(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::TrpInformationResponse(x)) => Ok(x),
            F1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::TrpInformationFailure(x)) => {
                Err(RequestError::UnsuccessfulOutcome(x))
            }
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct PositioningInformationExchangeProcedure {}

#[async_trait]
impl Procedure for PositioningInformationExchangeProcedure {
    type TopPdu = F1apPdu;
    type Request = PositioningInformationRequest;
    type Success = PositioningInformationResponse;
    type Failure = PositioningInformationFailure;
    const CODE: u8 = 49;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: PositioningInformationRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<PositioningInformationExchangeProcedure>>::request(
            provider, req, logger,
        )
        .await
        {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::PositioningInformationResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::PositioningInformationRequest(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::PositioningInformationResponse(x)) => {
                Ok(x)
            }
            F1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::PositioningInformationFailure(x)) => {
                Err(RequestError::UnsuccessfulOutcome(x))
            }
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct PositioningActivationProcedure {}

#[async_trait]
impl Procedure for PositioningActivationProcedure {
    type TopPdu = F1apPdu;
    type Request = PositioningActivationRequest;
    type Success = PositioningActivationResponse;
    type Failure = PositioningActivationFailure;
    const CODE: u8 = 50;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: PositioningActivationRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<PositioningActivationProcedure>>::request(provider, req, logger)
            .await
        {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::PositioningActivationResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::PositioningActivationRequest(r)).into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::PositioningActivationResponse(x)) => {
                Ok(x)
            }
            F1apPdu::UnsuccessfulOutcome(UnsuccessfulOutcome::PositioningActivationFailure(x)) => {
                Err(RequestError::UnsuccessfulOutcome(x))
            }
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct PositioningDeactivationProcedure {}

#[async_trait]
impl Indication for PositioningDeactivationProcedure {
    type TopPdu = F1apPdu;
    type Request = PositioningDeactivation;
    const CODE: u8 = 51;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: PositioningDeactivation,
        logger: &Logger,
    ) {
        <T as IndicationHandler<PositioningDeactivationProcedure>>::handle(provider, req, logger)
            .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::PositioningDeactivation(r)).into_bytes()
    }
}

pub struct ECidMeasurementInitiationProcedure {}

#[async_trait]
impl Procedure for ECidMeasurementInitiationProcedure {
    type TopPdu = F1apPdu;
    type Request = ECidMeasurementInitiationRequest;
    type Success = ECidMeasurementInitiationResponse;
    type Failure = ECidMeasurementInitiationFailure;
    const CODE: u8 = 52;

    async fn call_provider<T: RequestProvider<Self>>(
        provider: &T,
        req: ECidMeasurementInitiationRequest,
        logger: &Logger,
    ) -> Option<ResponseAction<F1apPdu>> {
        match <T as RequestProvider<ECidMeasurementInitiationProcedure>>::request(
            provider, req, logger,
        )
        .await
        {
            Ok((r, f)) => Some((
                F1apPdu::SuccessfulOutcome(SuccessfulOutcome::ECidMeasurementInitiationResponse(r)),
                f,
            )),
            Err(_) => todo!(),
        }
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::ECidMeasurementInitiationRequest(r))
            .into_bytes()
    }

    fn decode_response(bytes: &[u8]) -> Result<Self::Success, RequestError<Self::Failure>> {
        let response_pdu = Self::TopPdu::from_bytes(bytes)?;
        match response_pdu {
            F1apPdu::SuccessfulOutcome(SuccessfulOutcome::ECidMeasurementInitiationResponse(x)) => {
                Ok(x)
            }
            F1apPdu::UnsuccessfulOutcome(
                UnsuccessfulOutcome::ECidMeasurementInitiationFailure(x),
            ) => Err(RequestError::UnsuccessfulOutcome(x)),
            _ => Err(RequestError::Other("Unexpected pdu contents".to_string())),
        }
    }
}

pub struct ECidMeasurementFailureIndicationProcedure {}

#[async_trait]
impl Indication for ECidMeasurementFailureIndicationProcedure {
    type TopPdu = F1apPdu;
    type Request = ECidMeasurementFailureIndication;
    const CODE: u8 = 53;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: ECidMeasurementFailureIndication,
        logger: &Logger,
    ) {
        <T as IndicationHandler<ECidMeasurementFailureIndicationProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::ECidMeasurementFailureIndication(r))
            .into_bytes()
    }
}

pub struct ECidMeasurementReportProcedure {}

#[async_trait]
impl Indication for ECidMeasurementReportProcedure {
    type TopPdu = F1apPdu;
    type Request = ECidMeasurementReport;
    const CODE: u8 = 54;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: ECidMeasurementReport,
        logger: &Logger,
    ) {
        <T as IndicationHandler<ECidMeasurementReportProcedure>>::handle(provider, req, logger)
            .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::ECidMeasurementReport(r)).into_bytes()
    }
}

pub struct ECidMeasurementTerminationProcedure {}

#[async_trait]
impl Indication for ECidMeasurementTerminationProcedure {
    type TopPdu = F1apPdu;
    type Request = ECidMeasurementTerminationCommand;
    const CODE: u8 = 55;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: ECidMeasurementTerminationCommand,
        logger: &Logger,
    ) {
        <T as IndicationHandler<ECidMeasurementTerminationProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::ECidMeasurementTerminationCommand(r))
            .into_bytes()
    }
}

pub struct PositioningInformationUpdateProcedure {}

#[async_trait]
impl Indication for PositioningInformationUpdateProcedure {
    type TopPdu = F1apPdu;
    type Request = PositioningInformationUpdate;
    const CODE: u8 = 56;

    async fn call_provider<T: IndicationHandler<Self>>(
        provider: &T,
        req: PositioningInformationUpdate,
        logger: &Logger,
    ) {
        <T as IndicationHandler<PositioningInformationUpdateProcedure>>::handle(
            provider, req, logger,
        )
        .await;
    }

    fn encode_request(r: Self::Request) -> Result<Vec<u8>, PerCodecError> {
        F1apPdu::InitiatingMessage(InitiatingMessage::PositioningInformationUpdate(r)).into_bytes()
    }
}

#[derive(Clone, Debug)]
pub enum InitiatingMessage {
    Reset(Reset),
    F1SetupRequest(F1SetupRequest),
    GnbDuConfigurationUpdate(GnbDuConfigurationUpdate),
    GnbCuConfigurationUpdate(GnbCuConfigurationUpdate),
    UeContextSetupRequest(UeContextSetupRequest),
    UeContextReleaseCommand(UeContextReleaseCommand),
    UeContextModificationRequest(UeContextModificationRequest),
    UeContextModificationRequired(UeContextModificationRequired),
    WriteReplaceWarningRequest(WriteReplaceWarningRequest),
    PwsCancelRequest(PwsCancelRequest),
    ErrorIndication(ErrorIndication),
    UeContextReleaseRequest(UeContextReleaseRequest),
    InitialUlRrcMessageTransfer(InitialUlRrcMessageTransfer),
    DlRrcMessageTransfer(DlRrcMessageTransfer),
    UlRrcMessageTransfer(UlRrcMessageTransfer),
    UeInactivityNotification(UeInactivityNotification),
    GnbDuResourceCoordinationRequest(GnbDuResourceCoordinationRequest),
    SystemInformationDeliveryCommand(SystemInformationDeliveryCommand),
    Paging(Paging),
    Notify(Notify),
    NetworkAccessRateReduction(NetworkAccessRateReduction),
    PwsRestartIndication(PwsRestartIndication),
    PwsFailureIndication(PwsFailureIndication),
    GnbDuStatusIndication(GnbDuStatusIndication),
    RrcDeliveryReport(RrcDeliveryReport),
    F1RemovalRequest(F1RemovalRequest),
    TraceStart(TraceStart),
    DeactivateTrace(DeactivateTrace),
    DuCuRadioInformationTransfer(DuCuRadioInformationTransfer),
    CuDuRadioInformationTransfer(CuDuRadioInformationTransfer),
    BapMappingConfiguration(BapMappingConfiguration),
    GnbDuResourceConfiguration(GnbDuResourceConfiguration),
    IabtnlAddressRequest(IabtnlAddressRequest),
    IabupConfigurationUpdateRequest(IabupConfigurationUpdateRequest),
    ResourceStatusRequest(ResourceStatusRequest),
    ResourceStatusUpdate(ResourceStatusUpdate),
    AccessAndMobilityIndication(AccessAndMobilityIndication),
    ReferenceTimeInformationReportingControl(ReferenceTimeInformationReportingControl),
    ReferenceTimeInformationReport(ReferenceTimeInformationReport),
    AccessSuccess(AccessSuccess),
    CellTrafficTrace(CellTrafficTrace),
    PositioningAssistanceInformationControl(PositioningAssistanceInformationControl),
    PositioningAssistanceInformationFeedback(PositioningAssistanceInformationFeedback),
    PositioningMeasurementRequest(PositioningMeasurementRequest),
    PositioningMeasurementReport(PositioningMeasurementReport),
    PositioningMeasurementAbort(PositioningMeasurementAbort),
    PositioningMeasurementFailureIndication(PositioningMeasurementFailureIndication),
    PositioningMeasurementUpdate(PositioningMeasurementUpdate),
    TrpInformationRequest(TrpInformationRequest),
    PositioningInformationRequest(PositioningInformationRequest),
    PositioningActivationRequest(PositioningActivationRequest),
    PositioningDeactivation(PositioningDeactivation),
    ECidMeasurementInitiationRequest(ECidMeasurementInitiationRequest),
    ECidMeasurementFailureIndication(ECidMeasurementFailureIndication),
    ECidMeasurementReport(ECidMeasurementReport),
    ECidMeasurementTerminationCommand(ECidMeasurementTerminationCommand),
    PositioningInformationUpdate(PositioningInformationUpdate),
}

impl InitiatingMessage {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (id, _ext) = decode::decode_integer(data, Some(0), Some(255), false)?;
        let _ = Criticality::decode(data)?;
        let _ = decode::decode_length_determinent(data, None, None, false)?;
        match id {
            0 => Ok(Self::Reset(Reset::decode(data)?)),
            1 => Ok(Self::F1SetupRequest(F1SetupRequest::decode(data)?)),
            3 => Ok(Self::GnbDuConfigurationUpdate(
                GnbDuConfigurationUpdate::decode(data)?,
            )),
            4 => Ok(Self::GnbCuConfigurationUpdate(
                GnbCuConfigurationUpdate::decode(data)?,
            )),
            5 => Ok(Self::UeContextSetupRequest(UeContextSetupRequest::decode(
                data,
            )?)),
            6 => Ok(Self::UeContextReleaseCommand(
                UeContextReleaseCommand::decode(data)?,
            )),
            7 => Ok(Self::UeContextModificationRequest(
                UeContextModificationRequest::decode(data)?,
            )),
            8 => Ok(Self::UeContextModificationRequired(
                UeContextModificationRequired::decode(data)?,
            )),
            20 => Ok(Self::WriteReplaceWarningRequest(
                WriteReplaceWarningRequest::decode(data)?,
            )),
            21 => Ok(Self::PwsCancelRequest(PwsCancelRequest::decode(data)?)),
            2 => Ok(Self::ErrorIndication(ErrorIndication::decode(data)?)),
            10 => Ok(Self::UeContextReleaseRequest(
                UeContextReleaseRequest::decode(data)?,
            )),
            11 => Ok(Self::InitialUlRrcMessageTransfer(
                InitialUlRrcMessageTransfer::decode(data)?,
            )),
            12 => Ok(Self::DlRrcMessageTransfer(DlRrcMessageTransfer::decode(
                data,
            )?)),
            13 => Ok(Self::UlRrcMessageTransfer(UlRrcMessageTransfer::decode(
                data,
            )?)),
            15 => Ok(Self::UeInactivityNotification(
                UeInactivityNotification::decode(data)?,
            )),
            16 => Ok(Self::GnbDuResourceCoordinationRequest(
                GnbDuResourceCoordinationRequest::decode(data)?,
            )),
            17 => Ok(Self::SystemInformationDeliveryCommand(
                SystemInformationDeliveryCommand::decode(data)?,
            )),
            18 => Ok(Self::Paging(Paging::decode(data)?)),
            19 => Ok(Self::Notify(Notify::decode(data)?)),
            27 => Ok(Self::NetworkAccessRateReduction(
                NetworkAccessRateReduction::decode(data)?,
            )),
            22 => Ok(Self::PwsRestartIndication(PwsRestartIndication::decode(
                data,
            )?)),
            23 => Ok(Self::PwsFailureIndication(PwsFailureIndication::decode(
                data,
            )?)),
            24 => Ok(Self::GnbDuStatusIndication(GnbDuStatusIndication::decode(
                data,
            )?)),
            25 => Ok(Self::RrcDeliveryReport(RrcDeliveryReport::decode(data)?)),
            26 => Ok(Self::F1RemovalRequest(F1RemovalRequest::decode(data)?)),
            28 => Ok(Self::TraceStart(TraceStart::decode(data)?)),
            29 => Ok(Self::DeactivateTrace(DeactivateTrace::decode(data)?)),
            30 => Ok(Self::DuCuRadioInformationTransfer(
                DuCuRadioInformationTransfer::decode(data)?,
            )),
            31 => Ok(Self::CuDuRadioInformationTransfer(
                CuDuRadioInformationTransfer::decode(data)?,
            )),
            32 => Ok(Self::BapMappingConfiguration(
                BapMappingConfiguration::decode(data)?,
            )),
            33 => Ok(Self::GnbDuResourceConfiguration(
                GnbDuResourceConfiguration::decode(data)?,
            )),
            34 => Ok(Self::IabtnlAddressRequest(IabtnlAddressRequest::decode(
                data,
            )?)),
            35 => Ok(Self::IabupConfigurationUpdateRequest(
                IabupConfigurationUpdateRequest::decode(data)?,
            )),
            36 => Ok(Self::ResourceStatusRequest(ResourceStatusRequest::decode(
                data,
            )?)),
            37 => Ok(Self::ResourceStatusUpdate(ResourceStatusUpdate::decode(
                data,
            )?)),
            38 => Ok(Self::AccessAndMobilityIndication(
                AccessAndMobilityIndication::decode(data)?,
            )),
            58 => Ok(Self::ReferenceTimeInformationReportingControl(
                ReferenceTimeInformationReportingControl::decode(data)?,
            )),
            57 => Ok(Self::ReferenceTimeInformationReport(
                ReferenceTimeInformationReport::decode(data)?,
            )),
            39 => Ok(Self::AccessSuccess(AccessSuccess::decode(data)?)),
            40 => Ok(Self::CellTrafficTrace(CellTrafficTrace::decode(data)?)),
            42 => Ok(Self::PositioningAssistanceInformationControl(
                PositioningAssistanceInformationControl::decode(data)?,
            )),
            43 => Ok(Self::PositioningAssistanceInformationFeedback(
                PositioningAssistanceInformationFeedback::decode(data)?,
            )),
            41 => Ok(Self::PositioningMeasurementRequest(
                PositioningMeasurementRequest::decode(data)?,
            )),
            44 => Ok(Self::PositioningMeasurementReport(
                PositioningMeasurementReport::decode(data)?,
            )),
            45 => Ok(Self::PositioningMeasurementAbort(
                PositioningMeasurementAbort::decode(data)?,
            )),
            46 => Ok(Self::PositioningMeasurementFailureIndication(
                PositioningMeasurementFailureIndication::decode(data)?,
            )),
            47 => Ok(Self::PositioningMeasurementUpdate(
                PositioningMeasurementUpdate::decode(data)?,
            )),
            48 => Ok(Self::TrpInformationRequest(TrpInformationRequest::decode(
                data,
            )?)),
            49 => Ok(Self::PositioningInformationRequest(
                PositioningInformationRequest::decode(data)?,
            )),
            50 => Ok(Self::PositioningActivationRequest(
                PositioningActivationRequest::decode(data)?,
            )),
            51 => Ok(Self::PositioningDeactivation(
                PositioningDeactivation::decode(data)?,
            )),
            52 => Ok(Self::ECidMeasurementInitiationRequest(
                ECidMeasurementInitiationRequest::decode(data)?,
            )),
            53 => Ok(Self::ECidMeasurementFailureIndication(
                ECidMeasurementFailureIndication::decode(data)?,
            )),
            54 => Ok(Self::ECidMeasurementReport(ECidMeasurementReport::decode(
                data,
            )?)),
            55 => Ok(Self::ECidMeasurementTerminationCommand(
                ECidMeasurementTerminationCommand::decode(data)?,
            )),
            56 => Ok(Self::PositioningInformationUpdate(
                PositioningInformationUpdate::decode(data)?,
            )),
            x => {
                return Err(PerCodecError::new(format!(
                    "Unrecognised procedure code {}",
                    x
                )))
            }
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::Reset(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 0, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::F1SetupRequest(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 1, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbDuConfigurationUpdate(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 3, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbCuConfigurationUpdate(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 4, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::UeContextSetupRequest(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 5, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::UeContextReleaseCommand(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 6, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::UeContextModificationRequest(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 7, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::UeContextModificationRequired(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 8, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::WriteReplaceWarningRequest(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 20, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PwsCancelRequest(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 21, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::ErrorIndication(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 2, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::UeContextReleaseRequest(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 10, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::InitialUlRrcMessageTransfer(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 11, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::DlRrcMessageTransfer(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 12, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::UlRrcMessageTransfer(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 13, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::UeInactivityNotification(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 15, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbDuResourceCoordinationRequest(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 16, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::SystemInformationDeliveryCommand(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 17, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::Paging(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 18, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::Notify(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 19, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::NetworkAccessRateReduction(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 27, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PwsRestartIndication(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 22, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PwsFailureIndication(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 23, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbDuStatusIndication(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 24, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::RrcDeliveryReport(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 25, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::F1RemovalRequest(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 26, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::TraceStart(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 28, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::DeactivateTrace(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 29, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::DuCuRadioInformationTransfer(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 30, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::CuDuRadioInformationTransfer(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 31, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::BapMappingConfiguration(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 32, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbDuResourceConfiguration(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 33, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::IabtnlAddressRequest(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 34, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::IabupConfigurationUpdateRequest(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 35, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::ResourceStatusRequest(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 36, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::ResourceStatusUpdate(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 37, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::AccessAndMobilityIndication(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 38, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::ReferenceTimeInformationReportingControl(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 58, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::ReferenceTimeInformationReport(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 57, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::AccessSuccess(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 39, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::CellTrafficTrace(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 40, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PositioningAssistanceInformationControl(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 42, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PositioningAssistanceInformationFeedback(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 43, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PositioningMeasurementRequest(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 41, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PositioningMeasurementReport(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 44, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PositioningMeasurementAbort(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 45, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PositioningMeasurementFailureIndication(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 46, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PositioningMeasurementUpdate(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 47, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::TrpInformationRequest(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 48, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PositioningInformationRequest(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 49, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PositioningActivationRequest(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 50, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PositioningDeactivation(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 51, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::ECidMeasurementInitiationRequest(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 52, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::ECidMeasurementFailureIndication(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 53, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::ECidMeasurementReport(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 54, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::ECidMeasurementTerminationCommand(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 55, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PositioningInformationUpdate(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 56, false)?;
                Criticality::Ignore.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
        }
        Ok(())
    }
}

impl PerCodec for InitiatingMessage {
    type Allocator = Allocator;
    fn decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        InitiatingMessage::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("InitiatingMessage");
            e
        })
    }
    fn encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("InitiatingMessage");
            e
        })
    }
}

#[derive(Clone, Debug)]
pub enum SuccessfulOutcome {
    ResetAcknowledge(ResetAcknowledge),
    F1SetupResponse(F1SetupResponse),
    GnbDuConfigurationUpdateAcknowledge(GnbDuConfigurationUpdateAcknowledge),
    GnbCuConfigurationUpdateAcknowledge(GnbCuConfigurationUpdateAcknowledge),
    UeContextSetupResponse(UeContextSetupResponse),
    UeContextReleaseComplete(UeContextReleaseComplete),
    UeContextModificationResponse(UeContextModificationResponse),
    UeContextModificationConfirm(UeContextModificationConfirm),
    WriteReplaceWarningResponse(WriteReplaceWarningResponse),
    PwsCancelResponse(PwsCancelResponse),
    GnbDuResourceCoordinationResponse(GnbDuResourceCoordinationResponse),
    F1RemovalResponse(F1RemovalResponse),
    BapMappingConfigurationAcknowledge(BapMappingConfigurationAcknowledge),
    GnbDuResourceConfigurationAcknowledge(GnbDuResourceConfigurationAcknowledge),
    IabtnlAddressResponse(IabtnlAddressResponse),
    IabupConfigurationUpdateResponse(IabupConfigurationUpdateResponse),
    ResourceStatusResponse(ResourceStatusResponse),
    PositioningMeasurementResponse(PositioningMeasurementResponse),
    TrpInformationResponse(TrpInformationResponse),
    PositioningInformationResponse(PositioningInformationResponse),
    PositioningActivationResponse(PositioningActivationResponse),
    ECidMeasurementInitiationResponse(ECidMeasurementInitiationResponse),
}

impl SuccessfulOutcome {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (id, _ext) = decode::decode_integer(data, Some(0), Some(255), false)?;
        let _ = Criticality::decode(data)?;
        let _ = decode::decode_length_determinent(data, None, None, false)?;
        match id {
            0 => Ok(Self::ResetAcknowledge(ResetAcknowledge::decode(data)?)),
            1 => Ok(Self::F1SetupResponse(F1SetupResponse::decode(data)?)),
            3 => Ok(Self::GnbDuConfigurationUpdateAcknowledge(
                GnbDuConfigurationUpdateAcknowledge::decode(data)?,
            )),
            4 => Ok(Self::GnbCuConfigurationUpdateAcknowledge(
                GnbCuConfigurationUpdateAcknowledge::decode(data)?,
            )),
            5 => Ok(Self::UeContextSetupResponse(
                UeContextSetupResponse::decode(data)?,
            )),
            6 => Ok(Self::UeContextReleaseComplete(
                UeContextReleaseComplete::decode(data)?,
            )),
            7 => Ok(Self::UeContextModificationResponse(
                UeContextModificationResponse::decode(data)?,
            )),
            8 => Ok(Self::UeContextModificationConfirm(
                UeContextModificationConfirm::decode(data)?,
            )),
            20 => Ok(Self::WriteReplaceWarningResponse(
                WriteReplaceWarningResponse::decode(data)?,
            )),
            21 => Ok(Self::PwsCancelResponse(PwsCancelResponse::decode(data)?)),
            16 => Ok(Self::GnbDuResourceCoordinationResponse(
                GnbDuResourceCoordinationResponse::decode(data)?,
            )),
            26 => Ok(Self::F1RemovalResponse(F1RemovalResponse::decode(data)?)),
            32 => Ok(Self::BapMappingConfigurationAcknowledge(
                BapMappingConfigurationAcknowledge::decode(data)?,
            )),
            33 => Ok(Self::GnbDuResourceConfigurationAcknowledge(
                GnbDuResourceConfigurationAcknowledge::decode(data)?,
            )),
            34 => Ok(Self::IabtnlAddressResponse(IabtnlAddressResponse::decode(
                data,
            )?)),
            35 => Ok(Self::IabupConfigurationUpdateResponse(
                IabupConfigurationUpdateResponse::decode(data)?,
            )),
            36 => Ok(Self::ResourceStatusResponse(
                ResourceStatusResponse::decode(data)?,
            )),
            41 => Ok(Self::PositioningMeasurementResponse(
                PositioningMeasurementResponse::decode(data)?,
            )),
            48 => Ok(Self::TrpInformationResponse(
                TrpInformationResponse::decode(data)?,
            )),
            49 => Ok(Self::PositioningInformationResponse(
                PositioningInformationResponse::decode(data)?,
            )),
            50 => Ok(Self::PositioningActivationResponse(
                PositioningActivationResponse::decode(data)?,
            )),
            52 => Ok(Self::ECidMeasurementInitiationResponse(
                ECidMeasurementInitiationResponse::decode(data)?,
            )),
            x => {
                return Err(PerCodecError::new(format!(
                    "Unrecognised procedure code {}",
                    x
                )))
            }
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::ResetAcknowledge(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 0, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::F1SetupResponse(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 1, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbDuConfigurationUpdateAcknowledge(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 3, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbCuConfigurationUpdateAcknowledge(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 4, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::UeContextSetupResponse(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 5, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::UeContextReleaseComplete(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 6, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::UeContextModificationResponse(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 7, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::UeContextModificationConfirm(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 8, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::WriteReplaceWarningResponse(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 20, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PwsCancelResponse(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 21, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbDuResourceCoordinationResponse(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 16, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::F1RemovalResponse(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 26, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::BapMappingConfigurationAcknowledge(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 32, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbDuResourceConfigurationAcknowledge(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 33, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::IabtnlAddressResponse(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 34, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::IabupConfigurationUpdateResponse(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 35, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::ResourceStatusResponse(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 36, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PositioningMeasurementResponse(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 41, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::TrpInformationResponse(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 48, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PositioningInformationResponse(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 49, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PositioningActivationResponse(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 50, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::ECidMeasurementInitiationResponse(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 52, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
        }
        Ok(())
    }
}

impl PerCodec for SuccessfulOutcome {
    type Allocator = Allocator;
    fn decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SuccessfulOutcome::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SuccessfulOutcome");
            e
        })
    }
    fn encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SuccessfulOutcome");
            e
        })
    }
}

#[derive(Clone, Debug)]
pub enum UnsuccessfulOutcome {
    F1SetupFailure(F1SetupFailure),
    GnbDuConfigurationUpdateFailure(GnbDuConfigurationUpdateFailure),
    GnbCuConfigurationUpdateFailure(GnbCuConfigurationUpdateFailure),
    UeContextSetupFailure(UeContextSetupFailure),
    UeContextModificationFailure(UeContextModificationFailure),
    UeContextModificationRefuse(UeContextModificationRefuse),
    F1RemovalFailure(F1RemovalFailure),
    BapMappingConfigurationFailure(BapMappingConfigurationFailure),
    GnbDuResourceConfigurationFailure(GnbDuResourceConfigurationFailure),
    IabtnlAddressFailure(IabtnlAddressFailure),
    IabupConfigurationUpdateFailure(IabupConfigurationUpdateFailure),
    ResourceStatusFailure(ResourceStatusFailure),
    PositioningMeasurementFailure(PositioningMeasurementFailure),
    TrpInformationFailure(TrpInformationFailure),
    PositioningInformationFailure(PositioningInformationFailure),
    PositioningActivationFailure(PositioningActivationFailure),
    ECidMeasurementInitiationFailure(ECidMeasurementInitiationFailure),
}

impl UnsuccessfulOutcome {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (id, _ext) = decode::decode_integer(data, Some(0), Some(255), false)?;
        let _ = Criticality::decode(data)?;
        let _ = decode::decode_length_determinent(data, None, None, false)?;
        match id {
            1 => Ok(Self::F1SetupFailure(F1SetupFailure::decode(data)?)),
            3 => Ok(Self::GnbDuConfigurationUpdateFailure(
                GnbDuConfigurationUpdateFailure::decode(data)?,
            )),
            4 => Ok(Self::GnbCuConfigurationUpdateFailure(
                GnbCuConfigurationUpdateFailure::decode(data)?,
            )),
            5 => Ok(Self::UeContextSetupFailure(UeContextSetupFailure::decode(
                data,
            )?)),
            7 => Ok(Self::UeContextModificationFailure(
                UeContextModificationFailure::decode(data)?,
            )),
            8 => Ok(Self::UeContextModificationRefuse(
                UeContextModificationRefuse::decode(data)?,
            )),
            26 => Ok(Self::F1RemovalFailure(F1RemovalFailure::decode(data)?)),
            32 => Ok(Self::BapMappingConfigurationFailure(
                BapMappingConfigurationFailure::decode(data)?,
            )),
            33 => Ok(Self::GnbDuResourceConfigurationFailure(
                GnbDuResourceConfigurationFailure::decode(data)?,
            )),
            34 => Ok(Self::IabtnlAddressFailure(IabtnlAddressFailure::decode(
                data,
            )?)),
            35 => Ok(Self::IabupConfigurationUpdateFailure(
                IabupConfigurationUpdateFailure::decode(data)?,
            )),
            36 => Ok(Self::ResourceStatusFailure(ResourceStatusFailure::decode(
                data,
            )?)),
            41 => Ok(Self::PositioningMeasurementFailure(
                PositioningMeasurementFailure::decode(data)?,
            )),
            48 => Ok(Self::TrpInformationFailure(TrpInformationFailure::decode(
                data,
            )?)),
            49 => Ok(Self::PositioningInformationFailure(
                PositioningInformationFailure::decode(data)?,
            )),
            50 => Ok(Self::PositioningActivationFailure(
                PositioningActivationFailure::decode(data)?,
            )),
            52 => Ok(Self::ECidMeasurementInitiationFailure(
                ECidMeasurementInitiationFailure::decode(data)?,
            )),
            x => {
                return Err(PerCodecError::new(format!(
                    "Unrecognised procedure code {}",
                    x
                )))
            }
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::F1SetupFailure(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 1, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbDuConfigurationUpdateFailure(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 3, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbCuConfigurationUpdateFailure(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 4, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::UeContextSetupFailure(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 5, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::UeContextModificationFailure(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 7, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::UeContextModificationRefuse(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 8, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::F1RemovalFailure(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 26, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::BapMappingConfigurationFailure(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 32, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::GnbDuResourceConfigurationFailure(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 33, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::IabtnlAddressFailure(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 34, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::IabupConfigurationUpdateFailure(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 35, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::ResourceStatusFailure(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 36, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PositioningMeasurementFailure(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 41, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::TrpInformationFailure(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 48, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PositioningInformationFailure(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 49, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::PositioningActivationFailure(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 50, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
            Self::ECidMeasurementInitiationFailure(x) => {
                encode::encode_integer(data, Some(0), Some(255), false, 52, false)?;
                Criticality::Reject.encode(data)?;
                let container = &mut Allocator::new_codec_data();
                x.encode(container)?;
                encode::encode_length_determinent(
                    data,
                    None,
                    None,
                    false,
                    container.length_in_bytes(),
                )?;
                data.append_aligned(container);
            }
        }
        Ok(())
    }
}

impl PerCodec for UnsuccessfulOutcome {
    type Allocator = Allocator;
    fn decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UnsuccessfulOutcome::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UnsuccessfulOutcome");
            e
        })
    }
    fn encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UnsuccessfulOutcome");
            e
        })
    }
}
