// Autogenerated from F1AP-IEs.asn
use super::common::*;
use asn1_codecs::{aper, aper::AperCodec, PerCodecData, PerCodecError};
use bitvec::prelude::*;
#[allow(dead_code)]
pub type BitString = BitVec<u8, Msb0>;
#[allow(unused_imports)]
use num_enum::TryFromPrimitive;

// AbortTransmission
#[derive(Clone, Debug)]
pub enum AbortTransmission {
    SrsResourceSetId(SrsResourceSetId),
    ReleaseAll,
}

impl AbortTransmission {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::SrsResourceSetId(SrsResourceSetId::aper_decode(data)?)),
            1 => Ok(Self::ReleaseAll),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::SrsResourceSetId(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::ReleaseAll => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                Ok(())
            }
        }
    }
}

impl AperCodec for AbortTransmission {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AbortTransmission::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AbortTransmission");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AbortTransmission");
            e
        })
    }
}
// AccessPointPosition
#[derive(Clone, Debug)]
pub struct AccessPointPosition {
    pub latitude_sign: LatitudeSign,
    pub latitude: u32,
    pub longitude: i32,
    pub direction_of_altitude: DirectionOfAltitude,
    pub altitude: u16,
    pub uncertainty_semi_major: u8,
    pub uncertainty_semi_minor: u8,
    pub orientation_of_major_axis: u8,
    pub uncertainty_altitude: u8,
    pub confidence: u8,
}

impl AccessPointPosition {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let latitude_sign = LatitudeSign::aper_decode(data)?;
        let latitude = aper::decode::decode_integer(data, Some(0), Some(8388607), false)?.0 as u32;
        let longitude =
            aper::decode::decode_integer(data, Some(-8388608), Some(8388607), false)?.0 as i32;
        let direction_of_altitude = DirectionOfAltitude::aper_decode(data)?;
        let altitude = aper::decode::decode_integer(data, Some(0), Some(32767), false)?.0 as u16;
        let uncertainty_semi_major =
            aper::decode::decode_integer(data, Some(0), Some(127), false)?.0 as u8;
        let uncertainty_semi_minor =
            aper::decode::decode_integer(data, Some(0), Some(127), false)?.0 as u8;
        let orientation_of_major_axis =
            aper::decode::decode_integer(data, Some(0), Some(179), false)?.0 as u8;
        let uncertainty_altitude =
            aper::decode::decode_integer(data, Some(0), Some(127), false)?.0 as u8;
        let confidence = aper::decode::decode_integer(data, Some(0), Some(100), false)?.0 as u8;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            latitude_sign,
            latitude,
            longitude,
            direction_of_altitude,
            altitude,
            uncertainty_semi_major,
            uncertainty_semi_minor,
            orientation_of_major_axis,
            uncertainty_altitude,
            confidence,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.latitude_sign.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(8388607),
            false,
            self.latitude as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(-8388608),
            Some(8388607),
            false,
            self.longitude as i128,
            false,
        )?;
        self.direction_of_altitude.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(32767),
            false,
            self.altitude as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(127),
            false,
            self.uncertainty_semi_major as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(127),
            false,
            self.uncertainty_semi_minor as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(179),
            false,
            self.orientation_of_major_axis as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(127),
            false,
            self.uncertainty_altitude as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(100),
            false,
            self.confidence as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for AccessPointPosition {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AccessPointPosition::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AccessPointPosition");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AccessPointPosition");
            e
        })
    }
}
// ActivatedCellsToBeUpdatedList
#[derive(Clone, Debug)]
pub struct ActivatedCellsToBeUpdatedList(pub Vec<ActivatedCellsToBeUpdatedListItem>);

impl ActivatedCellsToBeUpdatedList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(ActivatedCellsToBeUpdatedListItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for ActivatedCellsToBeUpdatedList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ActivatedCellsToBeUpdatedList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ActivatedCellsToBeUpdatedList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ActivatedCellsToBeUpdatedList");
            e
        })
    }
}
// ActivatedCellsToBeUpdatedListItem
#[derive(Clone, Debug)]
pub struct ActivatedCellsToBeUpdatedListItem {
    pub nr_cgi: NrCgi,
    pub iab_du_cell_resource_configuration_mode_info: IabDuCellResourceConfigurationModeInfo,
}

impl ActivatedCellsToBeUpdatedListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let nr_cgi = NrCgi::aper_decode(data)?;
        let iab_du_cell_resource_configuration_mode_info =
            IabDuCellResourceConfigurationModeInfo::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            nr_cgi,
            iab_du_cell_resource_configuration_mode_info,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.nr_cgi.aper_encode(data)?;
        self.iab_du_cell_resource_configuration_mode_info
            .aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for ActivatedCellsToBeUpdatedListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ActivatedCellsToBeUpdatedListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ActivatedCellsToBeUpdatedListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ActivatedCellsToBeUpdatedListItem");
            e
        })
    }
}
// ActiveUlbwp
#[derive(Clone, Debug)]
pub struct ActiveUlbwp {
    pub location_and_bandwidth: u16,
    pub subcarrier_spacing: SubcarrierSpacing1,
    pub cyclic_prefix: CyclicPrefix,
    pub tx_direct_current_location: u16,
    pub shift7dot5k_hz: Option<Shift7dot5kHz>,
    pub srs_config: SrsConfig,
}

impl ActiveUlbwp {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let location_and_bandwidth =
            aper::decode::decode_integer(data, Some(0), Some(37949), true)?.0 as u16;
        let subcarrier_spacing = SubcarrierSpacing1::aper_decode(data)?;
        let cyclic_prefix = CyclicPrefix::aper_decode(data)?;
        let tx_direct_current_location =
            aper::decode::decode_integer(data, Some(0), Some(3301), true)?.0 as u16;
        let shift7dot5k_hz = if optionals[0] {
            Some(Shift7dot5kHz::aper_decode(data)?)
        } else {
            None
        };
        let srs_config = SrsConfig::aper_decode(data)?;

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            location_and_bandwidth,
            subcarrier_spacing,
            cyclic_prefix,
            tx_direct_current_location,
            shift7dot5k_hz,
            srs_config,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.shift7dot5k_hz.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(37949),
            true,
            self.location_and_bandwidth as i128,
            false,
        )?;
        self.subcarrier_spacing.aper_encode(data)?;
        self.cyclic_prefix.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(3301),
            true,
            self.tx_direct_current_location as i128,
            false,
        )?;
        if let Some(x) = &self.shift7dot5k_hz {
            x.aper_encode(data)?;
        }
        self.srs_config.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for ActiveUlbwp {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ActiveUlbwp::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ActiveUlbwp");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ActiveUlbwp");
            e
        })
    }
}
// AdditionalDuplicationIndication
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum AdditionalDuplicationIndication {
    Three,
    Four,
}

impl AdditionalDuplicationIndication {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for AdditionalDuplicationIndication {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AdditionalDuplicationIndication::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AdditionalDuplicationIndication");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AdditionalDuplicationIndication");
            e
        })
    }
}
// AdditionalPathList
#[derive(Clone, Debug)]
pub struct AdditionalPathList(pub Vec<AdditionalPathItem>);

impl AdditionalPathList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(2), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(AdditionalPathItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(2), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for AdditionalPathList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AdditionalPathList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AdditionalPathList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AdditionalPathList");
            e
        })
    }
}
// AdditionalPathItem
#[derive(Clone, Debug)]
pub struct AdditionalPathItem {
    pub relative_path_delay: RelativePathDelay,
    pub path_quality: Option<TrpMeasurementQuality>,
}

impl AdditionalPathItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let relative_path_delay = RelativePathDelay::aper_decode(data)?;
        let path_quality = if optionals[0] {
            Some(TrpMeasurementQuality::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            relative_path_delay,
            path_quality,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.path_quality.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.relative_path_delay.aper_encode(data)?;
        if let Some(x) = &self.path_quality {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for AdditionalPathItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AdditionalPathItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AdditionalPathItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AdditionalPathItem");
            e
        })
    }
}
// AdditionalPdcpDuplicationTnlList
#[derive(Clone, Debug)]
pub struct AdditionalPdcpDuplicationTnlList(pub Vec<AdditionalPdcpDuplicationTnlItem>);

impl AdditionalPdcpDuplicationTnlList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(2), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(AdditionalPdcpDuplicationTnlItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(2), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for AdditionalPdcpDuplicationTnlList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AdditionalPdcpDuplicationTnlList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AdditionalPdcpDuplicationTnlList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AdditionalPdcpDuplicationTnlList");
            e
        })
    }
}
// AdditionalPdcpDuplicationTnlItem
#[derive(Clone, Debug)]
pub struct AdditionalPdcpDuplicationTnlItem {
    pub additional_pdcp_duplication_uptnl_information: UpTransportLayerInformation,
    pub bh_info: Option<BhInfo>,
}

impl AdditionalPdcpDuplicationTnlItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let additional_pdcp_duplication_uptnl_information =
            UpTransportLayerInformation::aper_decode(data)?;

        // Process the extension container
        let mut bh_info: Option<BhInfo> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    280 => bh_info = Some(BhInfo::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            additional_pdcp_duplication_uptnl_information,
            bh_info,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.additional_pdcp_duplication_uptnl_information
            .aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for AdditionalPdcpDuplicationTnlItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AdditionalPdcpDuplicationTnlItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AdditionalPdcpDuplicationTnlItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AdditionalPdcpDuplicationTnlItem");
            e
        })
    }
}
// AdditionalSibMessageList
#[derive(Clone, Debug)]
pub struct AdditionalSibMessageList(pub Vec<AdditionalSibMessageListItem>);

impl AdditionalSibMessageList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(63), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(AdditionalSibMessageListItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(63), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for AdditionalSibMessageList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AdditionalSibMessageList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AdditionalSibMessageList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AdditionalSibMessageList");
            e
        })
    }
}
// AdditionalSibMessageListItem
#[derive(Clone, Debug)]
pub struct AdditionalSibMessageListItem {
    pub additional_sib: Vec<u8>,
}

impl AdditionalSibMessageListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let additional_sib = aper::decode::decode_octetstring(data, None, None, false)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { additional_sib })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_octetstring(data, None, None, false, &self.additional_sib, false)?;

        Ok(())
    }
}

impl AperCodec for AdditionalSibMessageListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AdditionalSibMessageListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AdditionalSibMessageListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AdditionalSibMessageListItem");
            e
        })
    }
}
// AdditionalRrmPriorityIndex
#[derive(Clone, Debug)]
pub struct AdditionalRrmPriorityIndex(pub BitString);

impl AdditionalRrmPriorityIndex {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(32),
            Some(32),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(32), Some(32), false, &self.0, false)
    }
}

impl AperCodec for AdditionalRrmPriorityIndex {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AdditionalRrmPriorityIndex::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AdditionalRrmPriorityIndex");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AdditionalRrmPriorityIndex");
            e
        })
    }
}
// AggressorCellList
#[derive(Clone, Debug)]
pub struct AggressorCellList(pub Vec<AggressorCellListItem>);

impl AggressorCellList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(AggressorCellListItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for AggressorCellList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AggressorCellList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AggressorCellList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AggressorCellList");
            e
        })
    }
}
// AggressorCellListItem
#[derive(Clone, Debug)]
pub struct AggressorCellListItem {
    pub aggressor_cell_id: NrCgi,
}

impl AggressorCellListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let aggressor_cell_id = NrCgi::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { aggressor_cell_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.aggressor_cell_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for AggressorCellListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AggressorCellListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AggressorCellListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AggressorCellListItem");
            e
        })
    }
}
// AggressorGnbSetId
#[derive(Clone, Debug)]
pub struct AggressorGnbSetId {
    pub aggressor_gnb_set_id: GnbSetId,
}

impl AggressorGnbSetId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let aggressor_gnb_set_id = GnbSetId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            aggressor_gnb_set_id,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.aggressor_gnb_set_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for AggressorGnbSetId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AggressorGnbSetId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AggressorGnbSetId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AggressorGnbSetId");
            e
        })
    }
}
// AllocationAndRetentionPriority
#[derive(Clone, Debug)]
pub struct AllocationAndRetentionPriority {
    pub priority_level: PriorityLevel,
    pub pre_emption_capability: PreEmptionCapability,
    pub pre_emption_vulnerability: PreEmptionVulnerability,
}

impl AllocationAndRetentionPriority {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let priority_level = PriorityLevel::aper_decode(data)?;
        let pre_emption_capability = PreEmptionCapability::aper_decode(data)?;
        let pre_emption_vulnerability = PreEmptionVulnerability::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            priority_level,
            pre_emption_capability,
            pre_emption_vulnerability,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.priority_level.aper_encode(data)?;
        self.pre_emption_capability.aper_encode(data)?;
        self.pre_emption_vulnerability.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for AllocationAndRetentionPriority {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AllocationAndRetentionPriority::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AllocationAndRetentionPriority");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AllocationAndRetentionPriority");
            e
        })
    }
}
// AlternativeQosParaSetList
#[derive(Clone, Debug)]
pub struct AlternativeQosParaSetList(pub Vec<AlternativeQosParaSetItem>);

impl AlternativeQosParaSetList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(8), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(AlternativeQosParaSetItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(8), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for AlternativeQosParaSetList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AlternativeQosParaSetList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AlternativeQosParaSetList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AlternativeQosParaSetList");
            e
        })
    }
}
// AlternativeQosParaSetItem
#[derive(Clone, Debug)]
pub struct AlternativeQosParaSetItem {
    pub alternative_qos_para_set_index: QosParaSetIndex,
    pub guaranteed_flow_bit_rate_dl: Option<BitRate>,
    pub guaranteed_flow_bit_rate_ul: Option<BitRate>,
    pub packet_delay_budget: Option<PacketDelayBudget>,
    pub packet_error_rate: Option<PacketErrorRate>,
}

impl AlternativeQosParaSetItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 5)?;
        let alternative_qos_para_set_index = QosParaSetIndex::aper_decode(data)?;
        let guaranteed_flow_bit_rate_dl = if optionals[0] {
            Some(BitRate::aper_decode(data)?)
        } else {
            None
        };
        let guaranteed_flow_bit_rate_ul = if optionals[1] {
            Some(BitRate::aper_decode(data)?)
        } else {
            None
        };
        let packet_delay_budget = if optionals[2] {
            Some(PacketDelayBudget::aper_decode(data)?)
        } else {
            None
        };
        let packet_error_rate = if optionals[3] {
            Some(PacketErrorRate::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[4] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            alternative_qos_para_set_index,
            guaranteed_flow_bit_rate_dl,
            guaranteed_flow_bit_rate_ul,
            packet_delay_budget,
            packet_error_rate,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.guaranteed_flow_bit_rate_dl.is_some());
        optionals.push(self.guaranteed_flow_bit_rate_ul.is_some());
        optionals.push(self.packet_delay_budget.is_some());
        optionals.push(self.packet_error_rate.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.alternative_qos_para_set_index.aper_encode(data)?;
        if let Some(x) = &self.guaranteed_flow_bit_rate_dl {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.guaranteed_flow_bit_rate_ul {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.packet_delay_budget {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.packet_error_rate {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for AlternativeQosParaSetItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AlternativeQosParaSetItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AlternativeQosParaSetItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AlternativeQosParaSetItem");
            e
        })
    }
}
// AngleMeasurementQuality
#[derive(Clone, Debug)]
pub struct AngleMeasurementQuality {
    pub azimuth_quality: u8,
    pub zenith_quality: Option<u8>,
    pub resolution: Resolution,
}

impl AngleMeasurementQuality {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let azimuth_quality =
            aper::decode::decode_integer(data, Some(0), Some(255), false)?.0 as u8;
        let zenith_quality = if optionals[0] {
            Some(aper::decode::decode_integer(data, Some(0), Some(255), false)?.0 as u8)
        } else {
            None
        };
        let resolution = Resolution::aper_decode(data)?;

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            azimuth_quality,
            zenith_quality,
            resolution,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.zenith_quality.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(255),
            false,
            self.azimuth_quality as i128,
            false,
        )?;
        if let Some(x) = &self.zenith_quality {
            aper::encode::encode_integer(data, Some(0), Some(255), false, *x as i128, false)?;
        }
        self.resolution.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for AngleMeasurementQuality {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AngleMeasurementQuality::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AngleMeasurementQuality");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AngleMeasurementQuality");
            e
        })
    }
}
// AperiodicSrsResourceTriggerList
#[derive(Clone, Debug)]
pub struct AperiodicSrsResourceTriggerList(pub Vec<AperiodicSrsResourceTrigger>);

impl AperiodicSrsResourceTriggerList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(3), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(AperiodicSrsResourceTrigger::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(3), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for AperiodicSrsResourceTriggerList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AperiodicSrsResourceTriggerList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AperiodicSrsResourceTriggerList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AperiodicSrsResourceTriggerList");
            e
        })
    }
}
// AperiodicSrsResourceTrigger
#[derive(Clone, Copy, Debug)]
pub struct AperiodicSrsResourceTrigger(pub u8);

impl AperiodicSrsResourceTrigger {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(3), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(3), false, self.0 as i128, false)
    }
}

impl AperCodec for AperiodicSrsResourceTrigger {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AperiodicSrsResourceTrigger::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AperiodicSrsResourceTrigger");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AperiodicSrsResourceTrigger");
            e
        })
    }
}
// AssociatedSCellItem
#[derive(Clone, Debug)]
pub struct AssociatedSCellItem {
    pub s_cell_id: NrCgi,
}

impl AssociatedSCellItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let s_cell_id = NrCgi::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { s_cell_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.s_cell_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for AssociatedSCellItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AssociatedSCellItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AssociatedSCellItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AssociatedSCellItem");
            e
        })
    }
}
// AvailablePlmnList
#[derive(Clone, Debug)]
pub struct AvailablePlmnList(pub Vec<AvailablePlmnListItem>);

impl AvailablePlmnList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(6), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(AvailablePlmnListItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(6), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for AvailablePlmnList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AvailablePlmnList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AvailablePlmnList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AvailablePlmnList");
            e
        })
    }
}
// AvailablePlmnListItem
#[derive(Clone, Debug)]
pub struct AvailablePlmnListItem {
    pub plmn_identity: PlmnIdentity,
}

impl AvailablePlmnListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let plmn_identity = PlmnIdentity::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { plmn_identity })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.plmn_identity.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for AvailablePlmnListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AvailablePlmnListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AvailablePlmnListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AvailablePlmnListItem");
            e
        })
    }
}
// AvailableSnpnIdList
#[derive(Clone, Debug)]
pub struct AvailableSnpnIdList(pub Vec<AvailableSnpnIdListItem>);

impl AvailableSnpnIdList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(12), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(AvailableSnpnIdListItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(12), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for AvailableSnpnIdList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AvailableSnpnIdList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AvailableSnpnIdList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AvailableSnpnIdList");
            e
        })
    }
}
// AvailableSnpnIdListItem
#[derive(Clone, Debug)]
pub struct AvailableSnpnIdListItem {
    pub plmn_identity: PlmnIdentity,
    pub available_nid_list: BroadcastNidList,
}

impl AvailableSnpnIdListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let plmn_identity = PlmnIdentity::aper_decode(data)?;
        let available_nid_list = BroadcastNidList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            plmn_identity,
            available_nid_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.plmn_identity.aper_encode(data)?;
        self.available_nid_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for AvailableSnpnIdListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AvailableSnpnIdListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AvailableSnpnIdListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AvailableSnpnIdListItem");
            e
        })
    }
}
// AveragingWindow
#[derive(Clone, Copy, Debug)]
pub struct AveragingWindow(pub u16);

impl AveragingWindow {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(4095), true)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(4095), true, self.0 as i128, false)
    }
}

impl AperCodec for AveragingWindow {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AveragingWindow::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AveragingWindow");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AveragingWindow");
            e
        })
    }
}
// AreaScope
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum AreaScope {
    True,
}

impl AreaScope {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for AreaScope {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AreaScope::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AreaScope");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AreaScope");
            e
        })
    }
}
// BandwidthSrs
#[derive(Clone, Debug)]
pub enum BandwidthSrs {
    Fr1(Fr1Bandwidth),
    Fr2(Fr2Bandwidth),
}

impl BandwidthSrs {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::Fr1(Fr1Bandwidth::aper_decode(data)?)),
            1 => Ok(Self::Fr2(Fr2Bandwidth::aper_decode(data)?)),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::Fr1(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::Fr2(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for BandwidthSrs {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BandwidthSrs::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BandwidthSrs");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BandwidthSrs");
            e
        })
    }
}
// BapAddress
#[derive(Clone, Debug)]
pub struct BapAddress(pub BitString);

impl BapAddress {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(10),
            Some(10),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(10), Some(10), false, &self.0, false)
    }
}

impl AperCodec for BapAddress {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BapAddress::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BapAddress");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BapAddress");
            e
        })
    }
}
// BapCtrlPduChannel
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum BapCtrlPduChannel {
    True,
}

impl BapCtrlPduChannel {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for BapCtrlPduChannel {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BapCtrlPduChannel::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BapCtrlPduChannel");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BapCtrlPduChannel");
            e
        })
    }
}
// BaPlayerBhrlCchannelMappingInfo
#[derive(Clone, Debug)]
pub struct BaPlayerBhrlCchannelMappingInfo {
    pub ba_player_bhrl_cchannel_mapping_info_to_add: Option<BaPlayerBhrlCchannelMappingInfoList>,
    pub ba_player_bhrl_cchannel_mapping_info_to_remove: Option<MappingInformationtoRemove>,
}

impl BaPlayerBhrlCchannelMappingInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 3)?;
        let ba_player_bhrl_cchannel_mapping_info_to_add = if optionals[0] {
            Some(BaPlayerBhrlCchannelMappingInfoList::aper_decode(data)?)
        } else {
            None
        };
        let ba_player_bhrl_cchannel_mapping_info_to_remove = if optionals[1] {
            Some(MappingInformationtoRemove::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ba_player_bhrl_cchannel_mapping_info_to_add,
            ba_player_bhrl_cchannel_mapping_info_to_remove,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.ba_player_bhrl_cchannel_mapping_info_to_add.is_some());
        optionals.push(
            self.ba_player_bhrl_cchannel_mapping_info_to_remove
                .is_some(),
        );
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        if let Some(x) = &self.ba_player_bhrl_cchannel_mapping_info_to_add {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.ba_player_bhrl_cchannel_mapping_info_to_remove {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for BaPlayerBhrlCchannelMappingInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BaPlayerBhrlCchannelMappingInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BaPlayerBhrlCchannelMappingInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BaPlayerBhrlCchannelMappingInfo");
            e
        })
    }
}
// BaPlayerBhrlCchannelMappingInfoList
#[derive(Clone, Debug)]
pub struct BaPlayerBhrlCchannelMappingInfoList(pub Vec<BaPlayerBhrlCchannelMappingInfoItem>);

impl BaPlayerBhrlCchannelMappingInfoList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(67108864), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(BaPlayerBhrlCchannelMappingInfoItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(
            data,
            Some(1),
            Some(67108864),
            false,
            self.0.len(),
        )?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for BaPlayerBhrlCchannelMappingInfoList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BaPlayerBhrlCchannelMappingInfoList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BaPlayerBhrlCchannelMappingInfoList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BaPlayerBhrlCchannelMappingInfoList");
            e
        })
    }
}
// BaPlayerBhrlCchannelMappingInfoItem
#[derive(Clone, Debug)]
pub struct BaPlayerBhrlCchannelMappingInfoItem {
    pub mapping_information_index: MappingInformationIndex,
    pub prior_hop_bap_address: Option<BapAddress>,
    pub ingressb_hrlc_channel_id: Option<BhrlcChannelId>,
    pub next_hop_bap_address: Option<BapAddress>,
    pub egressb_hrlc_channel_id: Option<BhrlcChannelId>,
}

impl BaPlayerBhrlCchannelMappingInfoItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 5)?;
        let mapping_information_index = MappingInformationIndex::aper_decode(data)?;
        let prior_hop_bap_address = if optionals[0] {
            Some(BapAddress::aper_decode(data)?)
        } else {
            None
        };
        let ingressb_hrlc_channel_id = if optionals[1] {
            Some(BhrlcChannelId::aper_decode(data)?)
        } else {
            None
        };
        let next_hop_bap_address = if optionals[2] {
            Some(BapAddress::aper_decode(data)?)
        } else {
            None
        };
        let egressb_hrlc_channel_id = if optionals[3] {
            Some(BhrlcChannelId::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[4] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            mapping_information_index,
            prior_hop_bap_address,
            ingressb_hrlc_channel_id,
            next_hop_bap_address,
            egressb_hrlc_channel_id,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.prior_hop_bap_address.is_some());
        optionals.push(self.ingressb_hrlc_channel_id.is_some());
        optionals.push(self.next_hop_bap_address.is_some());
        optionals.push(self.egressb_hrlc_channel_id.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.mapping_information_index.aper_encode(data)?;
        if let Some(x) = &self.prior_hop_bap_address {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.ingressb_hrlc_channel_id {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.next_hop_bap_address {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.egressb_hrlc_channel_id {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for BaPlayerBhrlCchannelMappingInfoItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BaPlayerBhrlCchannelMappingInfoItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BaPlayerBhrlCchannelMappingInfoItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BaPlayerBhrlCchannelMappingInfoItem");
            e
        })
    }
}
// BapPathId
#[derive(Clone, Debug)]
pub struct BapPathId(pub BitString);

impl BapPathId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(10),
            Some(10),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(10), Some(10), false, &self.0, false)
    }
}

impl AperCodec for BapPathId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BapPathId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BapPathId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BapPathId");
            e
        })
    }
}
// BapRoutingId
#[derive(Clone, Debug)]
pub struct BapRoutingId {
    pub bap_address: BapAddress,
    pub bap_path_id: BapPathId,
}

impl BapRoutingId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let bap_address = BapAddress::aper_decode(data)?;
        let bap_path_id = BapPathId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            bap_address,
            bap_path_id,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.bap_address.aper_encode(data)?;
        self.bap_path_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for BapRoutingId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BapRoutingId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BapRoutingId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BapRoutingId");
            e
        })
    }
}
// BitRate
#[derive(Clone, Copy, Debug)]
pub struct BitRate(pub u64);

impl BitRate {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(4000000000000), true)?.0 as u64,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(4000000000000),
            true,
            self.0 as i128,
            false,
        )
    }
}

impl AperCodec for BitRate {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BitRate::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BitRate");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BitRate");
            e
        })
    }
}
// BearerTypeChange
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum BearerTypeChange {
    True,
}

impl BearerTypeChange {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for BearerTypeChange {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BearerTypeChange::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BearerTypeChange");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BearerTypeChange");
            e
        })
    }
}
// BhrlcChannelId
#[derive(Clone, Debug)]
pub struct BhrlcChannelId(pub BitString);

impl BhrlcChannelId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(16),
            Some(16),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(16), Some(16), false, &self.0, false)
    }
}

impl AperCodec for BhrlcChannelId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BhrlcChannelId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhrlcChannelId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhrlcChannelId");
            e
        })
    }
}
// BhChannelsFailedToBeModifiedItem
#[derive(Clone, Debug)]
pub struct BhChannelsFailedToBeModifiedItem {
    pub bhrlc_channel_id: BhrlcChannelId,
    pub cause: Option<Cause>,
}

impl BhChannelsFailedToBeModifiedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let bhrlc_channel_id = BhrlcChannelId::aper_decode(data)?;
        let cause = if optionals[0] {
            Some(Cause::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            bhrlc_channel_id,
            cause,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.cause.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.bhrlc_channel_id.aper_encode(data)?;
        if let Some(x) = &self.cause {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for BhChannelsFailedToBeModifiedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BhChannelsFailedToBeModifiedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsFailedToBeModifiedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsFailedToBeModifiedItem");
            e
        })
    }
}
// BhChannelsFailedToBeSetupItem
#[derive(Clone, Debug)]
pub struct BhChannelsFailedToBeSetupItem {
    pub bhrlc_channel_id: BhrlcChannelId,
    pub cause: Option<Cause>,
}

impl BhChannelsFailedToBeSetupItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let bhrlc_channel_id = BhrlcChannelId::aper_decode(data)?;
        let cause = if optionals[0] {
            Some(Cause::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            bhrlc_channel_id,
            cause,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.cause.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.bhrlc_channel_id.aper_encode(data)?;
        if let Some(x) = &self.cause {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for BhChannelsFailedToBeSetupItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BhChannelsFailedToBeSetupItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsFailedToBeSetupItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsFailedToBeSetupItem");
            e
        })
    }
}
// BhChannelsFailedToBeSetupModItem
#[derive(Clone, Debug)]
pub struct BhChannelsFailedToBeSetupModItem {
    pub bhrlc_channel_id: BhrlcChannelId,
    pub cause: Option<Cause>,
}

impl BhChannelsFailedToBeSetupModItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let bhrlc_channel_id = BhrlcChannelId::aper_decode(data)?;
        let cause = if optionals[0] {
            Some(Cause::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            bhrlc_channel_id,
            cause,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.cause.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.bhrlc_channel_id.aper_encode(data)?;
        if let Some(x) = &self.cause {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for BhChannelsFailedToBeSetupModItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BhChannelsFailedToBeSetupModItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsFailedToBeSetupModItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsFailedToBeSetupModItem");
            e
        })
    }
}
// BhChannelsModifiedItem
#[derive(Clone, Debug)]
pub struct BhChannelsModifiedItem {
    pub bhrlc_channel_id: BhrlcChannelId,
}

impl BhChannelsModifiedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let bhrlc_channel_id = BhrlcChannelId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { bhrlc_channel_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.bhrlc_channel_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for BhChannelsModifiedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BhChannelsModifiedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsModifiedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsModifiedItem");
            e
        })
    }
}
// BhChannelsRequiredToBeReleasedItem
#[derive(Clone, Debug)]
pub struct BhChannelsRequiredToBeReleasedItem {
    pub bhrlc_channel_id: BhrlcChannelId,
}

impl BhChannelsRequiredToBeReleasedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let bhrlc_channel_id = BhrlcChannelId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { bhrlc_channel_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.bhrlc_channel_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for BhChannelsRequiredToBeReleasedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BhChannelsRequiredToBeReleasedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsRequiredToBeReleasedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsRequiredToBeReleasedItem");
            e
        })
    }
}
// BhChannelsSetupItem
#[derive(Clone, Debug)]
pub struct BhChannelsSetupItem {
    pub bhrlc_channel_id: BhrlcChannelId,
}

impl BhChannelsSetupItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let bhrlc_channel_id = BhrlcChannelId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { bhrlc_channel_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.bhrlc_channel_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for BhChannelsSetupItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BhChannelsSetupItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsSetupItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsSetupItem");
            e
        })
    }
}
// BhChannelsSetupModItem
#[derive(Clone, Debug)]
pub struct BhChannelsSetupModItem {
    pub bhrlc_channel_id: BhrlcChannelId,
}

impl BhChannelsSetupModItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let bhrlc_channel_id = BhrlcChannelId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { bhrlc_channel_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.bhrlc_channel_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for BhChannelsSetupModItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BhChannelsSetupModItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsSetupModItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsSetupModItem");
            e
        })
    }
}
// BhChannelsToBeModifiedItem
#[derive(Clone, Debug)]
pub struct BhChannelsToBeModifiedItem {
    pub bhrlc_channel_id: BhrlcChannelId,
    pub bh_qos_information: BhQosInformation,
    pub rl_cmode: Option<RlcMode>,
    pub bap_ctrl_pdu_channel: Option<BapCtrlPduChannel>,
    pub traffic_mapping_info: Option<TrafficMappingInfo>,
}

impl BhChannelsToBeModifiedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 4)?;
        let bhrlc_channel_id = BhrlcChannelId::aper_decode(data)?;
        let bh_qos_information = BhQosInformation::aper_decode(data)?;
        let rl_cmode = if optionals[0] {
            Some(RlcMode::aper_decode(data)?)
        } else {
            None
        };
        let bap_ctrl_pdu_channel = if optionals[1] {
            Some(BapCtrlPduChannel::aper_decode(data)?)
        } else {
            None
        };
        let traffic_mapping_info = if optionals[2] {
            Some(TrafficMappingInfo::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[3] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            bhrlc_channel_id,
            bh_qos_information,
            rl_cmode,
            bap_ctrl_pdu_channel,
            traffic_mapping_info,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.rl_cmode.is_some());
        optionals.push(self.bap_ctrl_pdu_channel.is_some());
        optionals.push(self.traffic_mapping_info.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.bhrlc_channel_id.aper_encode(data)?;
        self.bh_qos_information.aper_encode(data)?;
        if let Some(x) = &self.rl_cmode {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.bap_ctrl_pdu_channel {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.traffic_mapping_info {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for BhChannelsToBeModifiedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BhChannelsToBeModifiedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsToBeModifiedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsToBeModifiedItem");
            e
        })
    }
}
// BhChannelsToBeReleasedItem
#[derive(Clone, Debug)]
pub struct BhChannelsToBeReleasedItem {
    pub bhrlc_channel_id: BhrlcChannelId,
}

impl BhChannelsToBeReleasedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let bhrlc_channel_id = BhrlcChannelId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { bhrlc_channel_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.bhrlc_channel_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for BhChannelsToBeReleasedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BhChannelsToBeReleasedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsToBeReleasedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsToBeReleasedItem");
            e
        })
    }
}
// BhChannelsToBeSetupItem
#[derive(Clone, Debug)]
pub struct BhChannelsToBeSetupItem {
    pub bhrlc_channel_id: BhrlcChannelId,
    pub bh_qos_information: BhQosInformation,
    pub rl_cmode: RlcMode,
    pub bap_ctrl_pdu_channel: Option<BapCtrlPduChannel>,
    pub traffic_mapping_info: Option<TrafficMappingInfo>,
}

impl BhChannelsToBeSetupItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 3)?;
        let bhrlc_channel_id = BhrlcChannelId::aper_decode(data)?;
        let bh_qos_information = BhQosInformation::aper_decode(data)?;
        let rl_cmode = RlcMode::aper_decode(data)?;
        let bap_ctrl_pdu_channel = if optionals[0] {
            Some(BapCtrlPduChannel::aper_decode(data)?)
        } else {
            None
        };
        let traffic_mapping_info = if optionals[1] {
            Some(TrafficMappingInfo::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            bhrlc_channel_id,
            bh_qos_information,
            rl_cmode,
            bap_ctrl_pdu_channel,
            traffic_mapping_info,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.bap_ctrl_pdu_channel.is_some());
        optionals.push(self.traffic_mapping_info.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.bhrlc_channel_id.aper_encode(data)?;
        self.bh_qos_information.aper_encode(data)?;
        self.rl_cmode.aper_encode(data)?;
        if let Some(x) = &self.bap_ctrl_pdu_channel {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.traffic_mapping_info {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for BhChannelsToBeSetupItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BhChannelsToBeSetupItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsToBeSetupItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsToBeSetupItem");
            e
        })
    }
}
// BhChannelsToBeSetupModItem
#[derive(Clone, Debug)]
pub struct BhChannelsToBeSetupModItem {
    pub bhrlc_channel_id: BhrlcChannelId,
    pub bh_qos_information: BhQosInformation,
    pub rl_cmode: RlcMode,
    pub bap_ctrl_pdu_channel: Option<BapCtrlPduChannel>,
    pub traffic_mapping_info: Option<TrafficMappingInfo>,
}

impl BhChannelsToBeSetupModItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 3)?;
        let bhrlc_channel_id = BhrlcChannelId::aper_decode(data)?;
        let bh_qos_information = BhQosInformation::aper_decode(data)?;
        let rl_cmode = RlcMode::aper_decode(data)?;
        let bap_ctrl_pdu_channel = if optionals[0] {
            Some(BapCtrlPduChannel::aper_decode(data)?)
        } else {
            None
        };
        let traffic_mapping_info = if optionals[1] {
            Some(TrafficMappingInfo::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            bhrlc_channel_id,
            bh_qos_information,
            rl_cmode,
            bap_ctrl_pdu_channel,
            traffic_mapping_info,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.bap_ctrl_pdu_channel.is_some());
        optionals.push(self.traffic_mapping_info.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.bhrlc_channel_id.aper_encode(data)?;
        self.bh_qos_information.aper_encode(data)?;
        self.rl_cmode.aper_encode(data)?;
        if let Some(x) = &self.bap_ctrl_pdu_channel {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.traffic_mapping_info {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for BhChannelsToBeSetupModItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BhChannelsToBeSetupModItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsToBeSetupModItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhChannelsToBeSetupModItem");
            e
        })
    }
}
// BhInfo
#[derive(Clone, Debug)]
pub struct BhInfo {
    pub ba_prouting_id: Option<BapRoutingId>,
    pub egress_bhrlcch_list: Option<EgressBhrlcchList>,
}

impl BhInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 3)?;
        let ba_prouting_id = if optionals[0] {
            Some(BapRoutingId::aper_decode(data)?)
        } else {
            None
        };
        let egress_bhrlcch_list = if optionals[1] {
            Some(EgressBhrlcchList::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ba_prouting_id,
            egress_bhrlcch_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.ba_prouting_id.is_some());
        optionals.push(self.egress_bhrlcch_list.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        if let Some(x) = &self.ba_prouting_id {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.egress_bhrlcch_list {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for BhInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BhInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhInfo");
            e
        })
    }
}
// BhQosInformation
#[derive(Clone, Debug)]
pub enum BhQosInformation {
    BhrlcchQos(QosFlowLevelQosParameters),
    EutranBhrlcchQos(EutranQos),
    CpTrafficType(CpTrafficType),
}

impl BhQosInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 3, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::BhrlcchQos(QosFlowLevelQosParameters::aper_decode(
                data,
            )?)),
            1 => Ok(Self::EutranBhrlcchQos(EutranQos::aper_decode(data)?)),
            2 => Ok(Self::CpTrafficType(CpTrafficType::aper_decode(data)?)),
            3 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::BhrlcchQos(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::EutranBhrlcchQos(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 1, false)?;
                x.aper_encode(data)
            }
            Self::CpTrafficType(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 2, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for BhQosInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BhQosInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhQosInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhQosInformation");
            e
        })
    }
}
// BhRoutingInformationAddedListItem
#[derive(Clone, Debug)]
pub struct BhRoutingInformationAddedListItem {
    pub bap_routing_id: BapRoutingId,
    pub next_hop_bap_address: BapAddress,
}

impl BhRoutingInformationAddedListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let bap_routing_id = BapRoutingId::aper_decode(data)?;
        let next_hop_bap_address = BapAddress::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            bap_routing_id,
            next_hop_bap_address,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.bap_routing_id.aper_encode(data)?;
        self.next_hop_bap_address.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for BhRoutingInformationAddedListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BhRoutingInformationAddedListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhRoutingInformationAddedListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhRoutingInformationAddedListItem");
            e
        })
    }
}
// BhRoutingInformationRemovedListItem
#[derive(Clone, Debug)]
pub struct BhRoutingInformationRemovedListItem {
    pub bap_routing_id: BapRoutingId,
}

impl BhRoutingInformationRemovedListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let bap_routing_id = BapRoutingId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { bap_routing_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.bap_routing_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for BhRoutingInformationRemovedListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BhRoutingInformationRemovedListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhRoutingInformationRemovedListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BhRoutingInformationRemovedListItem");
            e
        })
    }
}
// BPlmnIdInfoList
#[derive(Clone, Debug)]
pub struct BPlmnIdInfoList(pub Vec<BPlmnIdInfoItem>);

impl BPlmnIdInfoList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(12), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(BPlmnIdInfoItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(12), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for BPlmnIdInfoList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BPlmnIdInfoList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BPlmnIdInfoList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BPlmnIdInfoList");
            e
        })
    }
}
// BPlmnIdInfoItem
#[derive(Clone, Debug)]
pub struct BPlmnIdInfoItem {
    pub plmn_identity_list: AvailablePlmnList,
    pub extended_plmn_identity_list: Option<ExtendedAvailablePlmnList>,
    pub five_gs_tac: Option<FiveGsTac>,
    pub nr_cell_id: NrCellIdentity,
    pub ranac: Option<Ranac>,
    pub configured_tac_indication: Option<ConfiguredTacIndication>,
    pub npn_broadcast_information: Option<NpnBroadcastInformation>,
}

impl BPlmnIdInfoItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 4)?;
        let plmn_identity_list = AvailablePlmnList::aper_decode(data)?;
        let extended_plmn_identity_list = if optionals[0] {
            Some(ExtendedAvailablePlmnList::aper_decode(data)?)
        } else {
            None
        };
        let five_gs_tac = if optionals[1] {
            Some(FiveGsTac::aper_decode(data)?)
        } else {
            None
        };
        let nr_cell_id = NrCellIdentity::aper_decode(data)?;
        let ranac = if optionals[2] {
            Some(Ranac::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut configured_tac_indication: Option<ConfiguredTacIndication> = None;
        let mut npn_broadcast_information: Option<NpnBroadcastInformation> = None;

        if optionals[3] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    425 => {
                        configured_tac_indication =
                            Some(ConfiguredTacIndication::aper_decode(data)?)
                    }
                    383 => {
                        npn_broadcast_information =
                            Some(NpnBroadcastInformation::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            plmn_identity_list,
            extended_plmn_identity_list,
            five_gs_tac,
            nr_cell_id,
            ranac,
            configured_tac_indication,
            npn_broadcast_information,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.extended_plmn_identity_list.is_some());
        optionals.push(self.five_gs_tac.is_some());
        optionals.push(self.ranac.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.plmn_identity_list.aper_encode(data)?;
        if let Some(x) = &self.extended_plmn_identity_list {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.five_gs_tac {
            x.aper_encode(data)?;
        }
        self.nr_cell_id.aper_encode(data)?;
        if let Some(x) = &self.ranac {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for BPlmnIdInfoItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BPlmnIdInfoItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BPlmnIdInfoItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BPlmnIdInfoItem");
            e
        })
    }
}
// ServedPlmnsList
#[derive(Clone, Debug)]
pub struct ServedPlmnsList(pub Vec<ServedPlmnsItem>);

impl ServedPlmnsList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(6), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(ServedPlmnsItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(6), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for ServedPlmnsList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ServedPlmnsList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServedPlmnsList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServedPlmnsList");
            e
        })
    }
}
// ServedPlmnsItem
#[derive(Clone, Debug)]
pub struct ServedPlmnsItem {
    pub plmn_identity: PlmnIdentity,
    pub tai_slice_support_list: Option<SliceSupportList>,
    pub npn_support_info: Option<NpnSupportInfo>,
    pub extended_tai_slice_support_list: Option<ExtendedSliceSupportList>,
}

impl ServedPlmnsItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let plmn_identity = PlmnIdentity::aper_decode(data)?;

        // Process the extension container
        let mut tai_slice_support_list: Option<SliceSupportList> = None;
        let mut npn_support_info: Option<NpnSupportInfo> = None;
        let mut extended_tai_slice_support_list: Option<ExtendedSliceSupportList> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    131 => tai_slice_support_list = Some(SliceSupportList::aper_decode(data)?),
                    384 => npn_support_info = Some(NpnSupportInfo::aper_decode(data)?),
                    390 => {
                        extended_tai_slice_support_list =
                            Some(ExtendedSliceSupportList::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            plmn_identity,
            tai_slice_support_list,
            npn_support_info,
            extended_tai_slice_support_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.plmn_identity.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for ServedPlmnsItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ServedPlmnsItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServedPlmnsItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServedPlmnsItem");
            e
        })
    }
}
// BroadcastCagList
#[derive(Clone, Debug)]
pub struct BroadcastCagList(pub Vec<Cagid>);

impl BroadcastCagList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(12), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(Cagid::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(12), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for BroadcastCagList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BroadcastCagList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BroadcastCagList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BroadcastCagList");
            e
        })
    }
}
// BroadcastNidList
#[derive(Clone, Debug)]
pub struct BroadcastNidList(pub Vec<Nid>);

impl BroadcastNidList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(12), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(Nid::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(12), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for BroadcastNidList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BroadcastNidList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BroadcastNidList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BroadcastNidList");
            e
        })
    }
}
// BroadcastSnpnIdList
#[derive(Clone, Debug)]
pub struct BroadcastSnpnIdList(pub Vec<BroadcastSnpnIdListItem>);

impl BroadcastSnpnIdList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(12), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(BroadcastSnpnIdListItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(12), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for BroadcastSnpnIdList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BroadcastSnpnIdList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BroadcastSnpnIdList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BroadcastSnpnIdList");
            e
        })
    }
}
// BroadcastSnpnIdListItem
#[derive(Clone, Debug)]
pub struct BroadcastSnpnIdListItem {
    pub plmn_identity: PlmnIdentity,
    pub broadcast_nid_list: BroadcastNidList,
}

impl BroadcastSnpnIdListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let plmn_identity = PlmnIdentity::aper_decode(data)?;
        let broadcast_nid_list = BroadcastNidList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            plmn_identity,
            broadcast_nid_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.plmn_identity.aper_encode(data)?;
        self.broadcast_nid_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for BroadcastSnpnIdListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BroadcastSnpnIdListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BroadcastSnpnIdListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BroadcastSnpnIdListItem");
            e
        })
    }
}
// BroadcastPniNpnIdList
#[derive(Clone, Debug)]
pub struct BroadcastPniNpnIdList(pub Vec<BroadcastPniNpnIdListItem>);

impl BroadcastPniNpnIdList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(12), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(BroadcastPniNpnIdListItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(12), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for BroadcastPniNpnIdList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BroadcastPniNpnIdList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BroadcastPniNpnIdList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BroadcastPniNpnIdList");
            e
        })
    }
}
// BroadcastPniNpnIdListItem
#[derive(Clone, Debug)]
pub struct BroadcastPniNpnIdListItem {
    pub plmn_identity: PlmnIdentity,
    pub broadcast_cag_list: BroadcastCagList,
}

impl BroadcastPniNpnIdListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let plmn_identity = PlmnIdentity::aper_decode(data)?;
        let broadcast_cag_list = BroadcastCagList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            plmn_identity,
            broadcast_cag_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.plmn_identity.aper_encode(data)?;
        self.broadcast_cag_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for BroadcastPniNpnIdListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BroadcastPniNpnIdListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BroadcastPniNpnIdListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BroadcastPniNpnIdListItem");
            e
        })
    }
}
// BurstArrivalTime
#[derive(Clone, Debug)]
pub struct BurstArrivalTime(pub Vec<u8>);

impl BurstArrivalTime {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for BurstArrivalTime {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BurstArrivalTime::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BurstArrivalTime");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BurstArrivalTime");
            e
        })
    }
}
// Cagid
#[derive(Clone, Debug)]
pub struct Cagid(pub BitString);

impl Cagid {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(32),
            Some(32),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(32), Some(32), false, &self.0, false)
    }
}

impl AperCodec for Cagid {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Cagid::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Cagid");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Cagid");
            e
        })
    }
}
// CancelAllWarningMessagesIndicator
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum CancelAllWarningMessagesIndicator {
    True,
}

impl CancelAllWarningMessagesIndicator {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for CancelAllWarningMessagesIndicator {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CancelAllWarningMessagesIndicator::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CancelAllWarningMessagesIndicator");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CancelAllWarningMessagesIndicator");
            e
        })
    }
}
// CandidateSpCellItem
#[derive(Clone, Debug)]
pub struct CandidateSpCellItem {
    pub candidate_sp_cell_id: NrCgi,
}

impl CandidateSpCellItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let candidate_sp_cell_id = NrCgi::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            candidate_sp_cell_id,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.candidate_sp_cell_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for CandidateSpCellItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CandidateSpCellItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CandidateSpCellItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CandidateSpCellItem");
            e
        })
    }
}
// CapacityValue
#[derive(Clone, Debug)]
pub struct CapacityValue {
    pub capacity_value: u8,
    pub ssb_area_capacity_value_list: Option<SsbAreaCapacityValueList>,
}

impl CapacityValue {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let capacity_value = aper::decode::decode_integer(data, Some(0), Some(100), false)?.0 as u8;
        let ssb_area_capacity_value_list = if optionals[0] {
            Some(SsbAreaCapacityValueList::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            capacity_value,
            ssb_area_capacity_value_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.ssb_area_capacity_value_list.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(100),
            false,
            self.capacity_value as i128,
            false,
        )?;
        if let Some(x) = &self.ssb_area_capacity_value_list {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for CapacityValue {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CapacityValue::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CapacityValue");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CapacityValue");
            e
        })
    }
}
// Cause
#[derive(Clone, Debug)]
pub enum Cause {
    RadioNetwork(CauseRadioNetwork),
    Transport(CauseTransport),
    Protocol(CauseProtocol),
    Misc(CauseMisc),
}

impl Cause {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 4, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::RadioNetwork(CauseRadioNetwork::aper_decode(data)?)),
            1 => Ok(Self::Transport(CauseTransport::aper_decode(data)?)),
            2 => Ok(Self::Protocol(CauseProtocol::aper_decode(data)?)),
            3 => Ok(Self::Misc(CauseMisc::aper_decode(data)?)),
            4 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::RadioNetwork(x) => {
                aper::encode::encode_choice_idx(data, 0, 4, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::Transport(x) => {
                aper::encode::encode_choice_idx(data, 0, 4, false, 1, false)?;
                x.aper_encode(data)
            }
            Self::Protocol(x) => {
                aper::encode::encode_choice_idx(data, 0, 4, false, 2, false)?;
                x.aper_encode(data)
            }
            Self::Misc(x) => {
                aper::encode::encode_choice_idx(data, 0, 4, false, 3, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for Cause {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Cause::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Cause");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Cause");
            e
        })
    }
}
// CauseMisc
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum CauseMisc {
    ControlProcessingOverload,
    NotEnoughUserPlaneProcessingResources,
    HardwareFailure,
    OmIntervention,
    Unspecified,
}

impl CauseMisc {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(4), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(4), true, *self as i128, false)
    }
}

impl AperCodec for CauseMisc {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CauseMisc::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CauseMisc");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CauseMisc");
            e
        })
    }
}
// CauseProtocol
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum CauseProtocol {
    TransferSyntaxError,
    AbstractSyntaxErrorReject,
    AbstractSyntaxErrorIgnoreAndNotify,
    MessageNotCompatibleWithReceiverState,
    SemanticError,
    AbstractSyntaxErrorFalselyConstructedMessage,
    Unspecified,
}

impl CauseProtocol {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(6), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(6), true, *self as i128, false)
    }
}

impl AperCodec for CauseProtocol {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CauseProtocol::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CauseProtocol");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CauseProtocol");
            e
        })
    }
}
// CauseRadioNetwork
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum CauseRadioNetwork {
    Unspecified,
    RlFailureRlc,
    UnknownOrAlreadyAllocatedGnbCuUeF1apId,
    UnknownOrAlreadyAllocatedGnbDuUeF1apId,
    UnknownOrInconsistentPairOfUeF1apId,
    InteractionWithOtherProcedure,
    NotSupportedQciValue,
    ActionDesirableForRadioReasons,
    NoRadioResourcesAvailable,
    ProcedureCancelled,
    NormalRelease,
}

impl CauseRadioNetwork {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(10), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(10), true, *self as i128, false)
    }
}

impl AperCodec for CauseRadioNetwork {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CauseRadioNetwork::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CauseRadioNetwork");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CauseRadioNetwork");
            e
        })
    }
}
// CauseTransport
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum CauseTransport {
    Unspecified,
    TransportResourceUnavailable,
}

impl CauseTransport {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for CauseTransport {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CauseTransport::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CauseTransport");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CauseTransport");
            e
        })
    }
}
// CellGroupConfig
#[derive(Clone, Debug)]
pub struct CellGroupConfig(pub Vec<u8>);

impl CellGroupConfig {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for CellGroupConfig {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellGroupConfig::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellGroupConfig");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellGroupConfig");
            e
        })
    }
}
// CellCapacityClassValue
#[derive(Clone, Copy, Debug)]
pub struct CellCapacityClassValue(pub u8);

impl CellCapacityClassValue {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(100), true)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(100), true, self.0 as i128, false)
    }
}

impl AperCodec for CellCapacityClassValue {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellCapacityClassValue::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellCapacityClassValue");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellCapacityClassValue");
            e
        })
    }
}
// CellDirection
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum CellDirection {
    DlOnly,
    UlOnly,
}

impl CellDirection {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), false, *self as i128, false)
    }
}

impl AperCodec for CellDirection {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellDirection::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellDirection");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellDirection");
            e
        })
    }
}
// CellMeasurementResultList
#[derive(Clone, Debug)]
pub struct CellMeasurementResultList(pub Vec<CellMeasurementResultItem>);

impl CellMeasurementResultList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(CellMeasurementResultItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for CellMeasurementResultList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellMeasurementResultList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellMeasurementResultList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellMeasurementResultList");
            e
        })
    }
}
// CellMeasurementResultItem
#[derive(Clone, Debug)]
pub struct CellMeasurementResultItem {
    pub cell_id: NrCgi,
    pub radio_resource_status: Option<RadioResourceStatus>,
    pub composite_available_capacity_group: Option<CompositeAvailableCapacityGroup>,
    pub slice_available_capacity: Option<SliceAvailableCapacity>,
    pub numberof_active_ues: Option<NumberofActiveUes>,
}

impl CellMeasurementResultItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 5)?;
        let cell_id = NrCgi::aper_decode(data)?;
        let radio_resource_status = if optionals[0] {
            Some(RadioResourceStatus::aper_decode(data)?)
        } else {
            None
        };
        let composite_available_capacity_group = if optionals[1] {
            Some(CompositeAvailableCapacityGroup::aper_decode(data)?)
        } else {
            None
        };
        let slice_available_capacity = if optionals[2] {
            Some(SliceAvailableCapacity::aper_decode(data)?)
        } else {
            None
        };
        let numberof_active_ues = if optionals[3] {
            Some(NumberofActiveUes::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[4] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            cell_id,
            radio_resource_status,
            composite_available_capacity_group,
            slice_available_capacity,
            numberof_active_ues,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.radio_resource_status.is_some());
        optionals.push(self.composite_available_capacity_group.is_some());
        optionals.push(self.slice_available_capacity.is_some());
        optionals.push(self.numberof_active_ues.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.cell_id.aper_encode(data)?;
        if let Some(x) = &self.radio_resource_status {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.composite_available_capacity_group {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.slice_available_capacity {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.numberof_active_ues {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for CellMeasurementResultItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellMeasurementResultItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellMeasurementResultItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellMeasurementResultItem");
            e
        })
    }
}
// CellPortionId
#[derive(Clone, Copy, Debug)]
pub struct CellPortionId(pub u16);

impl CellPortionId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(4095), true)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(4095), true, self.0 as i128, false)
    }
}

impl AperCodec for CellPortionId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellPortionId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellPortionId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellPortionId");
            e
        })
    }
}
// CellsFailedToBeActivatedListItem
#[derive(Clone, Debug)]
pub struct CellsFailedToBeActivatedListItem {
    pub nr_cgi: NrCgi,
    pub cause: Cause,
}

impl CellsFailedToBeActivatedListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let nr_cgi = NrCgi::aper_decode(data)?;
        let cause = Cause::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { nr_cgi, cause })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.nr_cgi.aper_encode(data)?;
        self.cause.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for CellsFailedToBeActivatedListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellsFailedToBeActivatedListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellsFailedToBeActivatedListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellsFailedToBeActivatedListItem");
            e
        })
    }
}
// CellsStatusItem
#[derive(Clone, Debug)]
pub struct CellsStatusItem {
    pub nr_cgi: NrCgi,
    pub service_status: ServiceStatus,
}

impl CellsStatusItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let nr_cgi = NrCgi::aper_decode(data)?;
        let service_status = ServiceStatus::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            nr_cgi,
            service_status,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.nr_cgi.aper_encode(data)?;
        self.service_status.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for CellsStatusItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellsStatusItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellsStatusItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellsStatusItem");
            e
        })
    }
}
// CellsToBeBroadcastItem
#[derive(Clone, Debug)]
pub struct CellsToBeBroadcastItem {
    pub nr_cgi: NrCgi,
}

impl CellsToBeBroadcastItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let nr_cgi = NrCgi::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { nr_cgi })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.nr_cgi.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for CellsToBeBroadcastItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellsToBeBroadcastItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellsToBeBroadcastItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellsToBeBroadcastItem");
            e
        })
    }
}
// CellsBroadcastCompletedItem
#[derive(Clone, Debug)]
pub struct CellsBroadcastCompletedItem {
    pub nr_cgi: NrCgi,
}

impl CellsBroadcastCompletedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let nr_cgi = NrCgi::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { nr_cgi })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.nr_cgi.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for CellsBroadcastCompletedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellsBroadcastCompletedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellsBroadcastCompletedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellsBroadcastCompletedItem");
            e
        })
    }
}
// BroadcastToBeCancelledItem
#[derive(Clone, Debug)]
pub struct BroadcastToBeCancelledItem {
    pub nr_cgi: NrCgi,
}

impl BroadcastToBeCancelledItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let nr_cgi = NrCgi::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { nr_cgi })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.nr_cgi.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for BroadcastToBeCancelledItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        BroadcastToBeCancelledItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BroadcastToBeCancelledItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("BroadcastToBeCancelledItem");
            e
        })
    }
}
// CellsBroadcastCancelledItem
#[derive(Clone, Debug)]
pub struct CellsBroadcastCancelledItem {
    pub nr_cgi: NrCgi,
    pub number_of_broadcasts: NumberOfBroadcasts,
}

impl CellsBroadcastCancelledItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let nr_cgi = NrCgi::aper_decode(data)?;
        let number_of_broadcasts = NumberOfBroadcasts::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            nr_cgi,
            number_of_broadcasts,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.nr_cgi.aper_encode(data)?;
        self.number_of_broadcasts.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for CellsBroadcastCancelledItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellsBroadcastCancelledItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellsBroadcastCancelledItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellsBroadcastCancelledItem");
            e
        })
    }
}
// CellsToBeActivatedListItem
#[derive(Clone, Debug)]
pub struct CellsToBeActivatedListItem {
    pub nr_cgi: NrCgi,
    pub nr_pci: Option<NrPci>,
    pub gnb_cu_system_information: Option<GnbCuSystemInformation>,
    pub available_plmn_list: Option<AvailablePlmnList>,
    pub extended_available_plmn_list: Option<ExtendedAvailablePlmnList>,
    pub iab_info_iab_donor_cu: Option<IabInfoIabDonorCu>,
    pub available_snpn_id_list: Option<AvailableSnpnIdList>,
}

impl CellsToBeActivatedListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let nr_cgi = NrCgi::aper_decode(data)?;
        let nr_pci = if optionals[0] {
            Some(NrPci::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut gnb_cu_system_information: Option<GnbCuSystemInformation> = None;
        let mut available_plmn_list: Option<AvailablePlmnList> = None;
        let mut extended_available_plmn_list: Option<ExtendedAvailablePlmnList> = None;
        let mut iab_info_iab_donor_cu: Option<IabInfoIabDonorCu> = None;
        let mut available_snpn_id_list: Option<AvailableSnpnIdList> = None;

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    118 => {
                        gnb_cu_system_information = Some(GnbCuSystemInformation::aper_decode(data)?)
                    }
                    179 => available_plmn_list = Some(AvailablePlmnList::aper_decode(data)?),
                    197 => {
                        extended_available_plmn_list =
                            Some(ExtendedAvailablePlmnList::aper_decode(data)?)
                    }
                    291 => iab_info_iab_donor_cu = Some(IabInfoIabDonorCu::aper_decode(data)?),
                    386 => available_snpn_id_list = Some(AvailableSnpnIdList::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            nr_cgi,
            nr_pci,
            gnb_cu_system_information,
            available_plmn_list,
            extended_available_plmn_list,
            iab_info_iab_donor_cu,
            available_snpn_id_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.nr_pci.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.nr_cgi.aper_encode(data)?;
        if let Some(x) = &self.nr_pci {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for CellsToBeActivatedListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellsToBeActivatedListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellsToBeActivatedListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellsToBeActivatedListItem");
            e
        })
    }
}
// CellsToBeDeactivatedListItem
#[derive(Clone, Debug)]
pub struct CellsToBeDeactivatedListItem {
    pub nr_cgi: NrCgi,
}

impl CellsToBeDeactivatedListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let nr_cgi = NrCgi::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { nr_cgi })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.nr_cgi.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for CellsToBeDeactivatedListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellsToBeDeactivatedListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellsToBeDeactivatedListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellsToBeDeactivatedListItem");
            e
        })
    }
}
// CellsToBeBarredItem
#[derive(Clone, Debug)]
pub struct CellsToBeBarredItem {
    pub nr_cgi: NrCgi,
    pub cell_barred: CellBarred,
    pub iab_barred: Option<IabBarred>,
}

impl CellsToBeBarredItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let nr_cgi = NrCgi::aper_decode(data)?;
        let cell_barred = CellBarred::aper_decode(data)?;

        // Process the extension container
        let mut iab_barred: Option<IabBarred> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    298 => iab_barred = Some(IabBarred::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            nr_cgi,
            cell_barred,
            iab_barred,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.nr_cgi.aper_encode(data)?;
        self.cell_barred.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for CellsToBeBarredItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellsToBeBarredItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellsToBeBarredItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellsToBeBarredItem");
            e
        })
    }
}
// CellBarred
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum CellBarred {
    Barred,
    NotBarred,
}

impl CellBarred {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for CellBarred {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellBarred::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellBarred");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellBarred");
            e
        })
    }
}
// CellSize
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum CellSize {
    Verysmall,
    Small,
    Medium,
    Large,
}

impl CellSize {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for CellSize {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellSize::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellSize");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellSize");
            e
        })
    }
}
// CellToReportList
#[derive(Clone, Debug)]
pub struct CellToReportList(pub Vec<CellToReportItem>);

impl CellToReportList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(512), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(CellToReportItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(512), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for CellToReportList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellToReportList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellToReportList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellToReportList");
            e
        })
    }
}
// CellToReportItem
#[derive(Clone, Debug)]
pub struct CellToReportItem {
    pub cell_id: NrCgi,
    pub ssb_to_report_list: Option<SsbToReportList>,
    pub slice_to_report_list: Option<SliceToReportList>,
}

impl CellToReportItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 3)?;
        let cell_id = NrCgi::aper_decode(data)?;
        let ssb_to_report_list = if optionals[0] {
            Some(SsbToReportList::aper_decode(data)?)
        } else {
            None
        };
        let slice_to_report_list = if optionals[1] {
            Some(SliceToReportList::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            cell_id,
            ssb_to_report_list,
            slice_to_report_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.ssb_to_report_list.is_some());
        optionals.push(self.slice_to_report_list.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.cell_id.aper_encode(data)?;
        if let Some(x) = &self.ssb_to_report_list {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.slice_to_report_list {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for CellToReportItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellToReportItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellToReportItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellToReportItem");
            e
        })
    }
}
// CellType
#[derive(Clone, Debug)]
pub struct CellType {
    pub cell_size: CellSize,
}

impl CellType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let cell_size = CellSize::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { cell_size })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.cell_size.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for CellType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellType");
            e
        })
    }
}
// CellUlConfigured
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum CellUlConfigured {
    None,
    Ul,
    Sul,
    UlAndSul,
}

impl CellUlConfigured {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for CellUlConfigured {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CellUlConfigured::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellUlConfigured");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CellUlConfigured");
            e
        })
    }
}
// ChildNodeCellsList
#[derive(Clone, Debug)]
pub struct ChildNodeCellsList(pub Vec<ChildNodeCellsListItem>);

impl ChildNodeCellsList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(1024), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(ChildNodeCellsListItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(1024), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for ChildNodeCellsList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ChildNodeCellsList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ChildNodeCellsList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ChildNodeCellsList");
            e
        })
    }
}
// ChildNodeCellsListItem
#[derive(Clone, Debug)]
pub struct ChildNodeCellsListItem {
    pub nr_cgi: NrCgi,
    pub iab_du_cell_resource_configuration_mode_info:
        Option<IabDuCellResourceConfigurationModeInfo>,
    pub iab_stc_info: Option<IabStcInfo>,
    pub rach_config_common: Option<RachConfigCommon>,
    pub rach_config_common_iab: Option<RachConfigCommonIab>,
    pub csi_rs_configuration: Option<Vec<u8>>,
    pub sr_configuration: Option<Vec<u8>>,
    pub pdcch_config_sib1: Option<Vec<u8>>,
    pub scs_common: Option<Vec<u8>>,
    pub multiplexing_info: Option<MultiplexingInfo>,
}

impl ChildNodeCellsListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 10)?;
        let nr_cgi = NrCgi::aper_decode(data)?;
        let iab_du_cell_resource_configuration_mode_info = if optionals[0] {
            Some(IabDuCellResourceConfigurationModeInfo::aper_decode(data)?)
        } else {
            None
        };
        let iab_stc_info = if optionals[1] {
            Some(IabStcInfo::aper_decode(data)?)
        } else {
            None
        };
        let rach_config_common = if optionals[2] {
            Some(RachConfigCommon::aper_decode(data)?)
        } else {
            None
        };
        let rach_config_common_iab = if optionals[3] {
            Some(RachConfigCommonIab::aper_decode(data)?)
        } else {
            None
        };
        let csi_rs_configuration = if optionals[4] {
            Some(aper::decode::decode_octetstring(data, None, None, false)?)
        } else {
            None
        };
        let sr_configuration = if optionals[5] {
            Some(aper::decode::decode_octetstring(data, None, None, false)?)
        } else {
            None
        };
        let pdcch_config_sib1 = if optionals[6] {
            Some(aper::decode::decode_octetstring(data, None, None, false)?)
        } else {
            None
        };
        let scs_common = if optionals[7] {
            Some(aper::decode::decode_octetstring(data, None, None, false)?)
        } else {
            None
        };
        let multiplexing_info = if optionals[8] {
            Some(MultiplexingInfo::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[9] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            nr_cgi,
            iab_du_cell_resource_configuration_mode_info,
            iab_stc_info,
            rach_config_common,
            rach_config_common_iab,
            csi_rs_configuration,
            sr_configuration,
            pdcch_config_sib1,
            scs_common,
            multiplexing_info,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.iab_du_cell_resource_configuration_mode_info.is_some());
        optionals.push(self.iab_stc_info.is_some());
        optionals.push(self.rach_config_common.is_some());
        optionals.push(self.rach_config_common_iab.is_some());
        optionals.push(self.csi_rs_configuration.is_some());
        optionals.push(self.sr_configuration.is_some());
        optionals.push(self.pdcch_config_sib1.is_some());
        optionals.push(self.scs_common.is_some());
        optionals.push(self.multiplexing_info.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.nr_cgi.aper_encode(data)?;
        if let Some(x) = &self.iab_du_cell_resource_configuration_mode_info {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.iab_stc_info {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.rach_config_common {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.rach_config_common_iab {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.csi_rs_configuration {
            aper::encode::encode_octetstring(data, None, None, false, &x, false)?;
        }
        if let Some(x) = &self.sr_configuration {
            aper::encode::encode_octetstring(data, None, None, false, &x, false)?;
        }
        if let Some(x) = &self.pdcch_config_sib1 {
            aper::encode::encode_octetstring(data, None, None, false, &x, false)?;
        }
        if let Some(x) = &self.scs_common {
            aper::encode::encode_octetstring(data, None, None, false, &x, false)?;
        }
        if let Some(x) = &self.multiplexing_info {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for ChildNodeCellsListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ChildNodeCellsListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ChildNodeCellsListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ChildNodeCellsListItem");
            e
        })
    }
}
// ChildNodesList
#[derive(Clone, Debug)]
pub struct ChildNodesList(pub Vec<ChildNodesListItem>);

impl ChildNodesList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(1024), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(ChildNodesListItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(1024), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for ChildNodesList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ChildNodesList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ChildNodesList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ChildNodesList");
            e
        })
    }
}
// ChildNodesListItem
#[derive(Clone, Debug)]
pub struct ChildNodesListItem {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub gnb_du_ue_f1ap_id: GnbDuUeF1apId,
    pub child_node_cells_list: Option<ChildNodeCellsList>,
}

impl ChildNodesListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let gnb_cu_ue_f1ap_id = GnbCuUeF1apId::aper_decode(data)?;
        let gnb_du_ue_f1ap_id = GnbDuUeF1apId::aper_decode(data)?;
        let child_node_cells_list = if optionals[0] {
            Some(ChildNodeCellsList::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
            child_node_cells_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.child_node_cells_list.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.gnb_cu_ue_f1ap_id.aper_encode(data)?;
        self.gnb_du_ue_f1ap_id.aper_encode(data)?;
        if let Some(x) = &self.child_node_cells_list {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for ChildNodesListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ChildNodesListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ChildNodesListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ChildNodesListItem");
            e
        })
    }
}
// ChOtriggerInterDu
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ChOtriggerInterDu {
    ChoInitiation,
    ChoReplace,
}

impl ChOtriggerInterDu {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for ChOtriggerInterDu {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ChOtriggerInterDu::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ChOtriggerInterDu");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ChOtriggerInterDu");
            e
        })
    }
}
// ChOtriggerIntraDu
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ChOtriggerIntraDu {
    ChoInitiation,
    ChoReplace,
    ChoCancel,
}

impl ChOtriggerIntraDu {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), true, *self as i128, false)
    }
}

impl AperCodec for ChOtriggerIntraDu {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ChOtriggerIntraDu::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ChOtriggerIntraDu");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ChOtriggerIntraDu");
            e
        })
    }
}
// CnUePagingIdentity
#[derive(Clone, Debug)]
pub enum CnUePagingIdentity {
    FiveGSTmsi(BitString),
}

impl CnUePagingIdentity {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 1, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::FiveGSTmsi(aper::decode::decode_bitstring(
                data,
                Some(48),
                Some(48),
                false,
            )?)),
            1 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::FiveGSTmsi(x) => {
                aper::encode::encode_choice_idx(data, 0, 1, false, 0, false)?;
                aper::encode::encode_bitstring(data, Some(48), Some(48), false, &x, false)
            }
        }
    }
}

impl AperCodec for CnUePagingIdentity {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CnUePagingIdentity::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CnUePagingIdentity");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CnUePagingIdentity");
            e
        })
    }
}
// CompositeAvailableCapacityGroup
#[derive(Clone, Debug)]
pub struct CompositeAvailableCapacityGroup {
    pub composite_available_capacity_downlink: CompositeAvailableCapacity,
    pub composite_available_capacity_uplink: CompositeAvailableCapacity,
}

impl CompositeAvailableCapacityGroup {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let composite_available_capacity_downlink = CompositeAvailableCapacity::aper_decode(data)?;
        let composite_available_capacity_uplink = CompositeAvailableCapacity::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            composite_available_capacity_downlink,
            composite_available_capacity_uplink,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.composite_available_capacity_downlink
            .aper_encode(data)?;
        self.composite_available_capacity_uplink.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for CompositeAvailableCapacityGroup {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CompositeAvailableCapacityGroup::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CompositeAvailableCapacityGroup");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CompositeAvailableCapacityGroup");
            e
        })
    }
}
// CompositeAvailableCapacity
#[derive(Clone, Debug)]
pub struct CompositeAvailableCapacity {
    pub cell_capacity_class_value: Option<CellCapacityClassValue>,
    pub capacity_value: CapacityValue,
}

impl CompositeAvailableCapacity {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let cell_capacity_class_value = if optionals[0] {
            Some(CellCapacityClassValue::aper_decode(data)?)
        } else {
            None
        };
        let capacity_value = CapacityValue::aper_decode(data)?;

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            cell_capacity_class_value,
            capacity_value,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.cell_capacity_class_value.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        if let Some(x) = &self.cell_capacity_class_value {
            x.aper_encode(data)?;
        }
        self.capacity_value.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for CompositeAvailableCapacity {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CompositeAvailableCapacity::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CompositeAvailableCapacity");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CompositeAvailableCapacity");
            e
        })
    }
}
// ChoProbability
#[derive(Clone, Copy, Debug)]
pub struct ChoProbability(pub u8);

impl ChoProbability {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(100), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(100), false, self.0 as i128, false)
    }
}

impl AperCodec for ChoProbability {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ChoProbability::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ChoProbability");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ChoProbability");
            e
        })
    }
}
// ConditionalInterDuMobilityInformation
#[derive(Clone, Debug)]
pub struct ConditionalInterDuMobilityInformation {
    pub cho_trigger: ChOtriggerInterDu,
    pub target_gnb_du_ue_f1apid: Option<GnbDuUeF1apId>,
    pub estimated_arrival_probability: Option<ChoProbability>,
}

impl ConditionalInterDuMobilityInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let cho_trigger = ChOtriggerInterDu::aper_decode(data)?;
        let target_gnb_du_ue_f1apid = if optionals[0] {
            Some(GnbDuUeF1apId::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut estimated_arrival_probability: Option<ChoProbability> = None;

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    433 => estimated_arrival_probability = Some(ChoProbability::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            cho_trigger,
            target_gnb_du_ue_f1apid,
            estimated_arrival_probability,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.target_gnb_du_ue_f1apid.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.cho_trigger.aper_encode(data)?;
        if let Some(x) = &self.target_gnb_du_ue_f1apid {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for ConditionalInterDuMobilityInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ConditionalInterDuMobilityInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ConditionalInterDuMobilityInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ConditionalInterDuMobilityInformation");
            e
        })
    }
}
// ConditionalIntraDuMobilityInformation
#[derive(Clone, Debug)]
pub struct ConditionalIntraDuMobilityInformation {
    pub cho_trigger: ChOtriggerIntraDu,
    pub target_cells_tocancel: Option<TargetCellList>,
    pub estimated_arrival_probability: Option<ChoProbability>,
}

impl ConditionalIntraDuMobilityInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let cho_trigger = ChOtriggerIntraDu::aper_decode(data)?;
        let target_cells_tocancel = if optionals[0] {
            Some(TargetCellList::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut estimated_arrival_probability: Option<ChoProbability> = None;

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    433 => estimated_arrival_probability = Some(ChoProbability::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            cho_trigger,
            target_cells_tocancel,
            estimated_arrival_probability,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.target_cells_tocancel.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.cho_trigger.aper_encode(data)?;
        if let Some(x) = &self.target_cells_tocancel {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for ConditionalIntraDuMobilityInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ConditionalIntraDuMobilityInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ConditionalIntraDuMobilityInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ConditionalIntraDuMobilityInformation");
            e
        })
    }
}
// ConfiguredTacIndication
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ConfiguredTacIndication {
    True,
}

impl ConfiguredTacIndication {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for ConfiguredTacIndication {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ConfiguredTacIndication::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ConfiguredTacIndication");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ConfiguredTacIndication");
            e
        })
    }
}
// CoordinateId
#[derive(Clone, Copy, Debug)]
pub struct CoordinateId(pub u16);

impl CoordinateId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(511), true)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(511), true, self.0 as i128, false)
    }
}

impl AperCodec for CoordinateId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CoordinateId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CoordinateId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CoordinateId");
            e
        })
    }
}
// CpTransportLayerAddress
#[derive(Clone, Debug)]
pub enum CpTransportLayerAddress {
    EndpointIpAddress(TransportLayerAddress),
    EndpointIpAddressAndPort(EndpointIpAddressAndPort),
}

impl CpTransportLayerAddress {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::EndpointIpAddress(TransportLayerAddress::aper_decode(
                data,
            )?)),
            1 => Ok(Self::EndpointIpAddressAndPort(
                EndpointIpAddressAndPort::aper_decode(data)?,
            )),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::EndpointIpAddress(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::EndpointIpAddressAndPort(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for CpTransportLayerAddress {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CpTransportLayerAddress::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CpTransportLayerAddress");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CpTransportLayerAddress");
            e
        })
    }
}
// CpTrafficType
#[derive(Clone, Copy, Debug)]
pub struct CpTrafficType(pub u8);

impl CpTrafficType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(3), true)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(3), true, self.0 as i128, false)
    }
}

impl AperCodec for CpTrafficType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CpTrafficType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CpTrafficType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CpTrafficType");
            e
        })
    }
}
// CriticalityDiagnostics
#[derive(Clone, Debug)]
pub struct CriticalityDiagnostics {
    pub procedure_code: Option<ProcedureCode>,
    pub triggering_message: Option<TriggeringMessage>,
    pub procedure_criticality: Option<Criticality>,
    pub transaction_id: Option<TransactionId>,
    pub i_es_criticality_diagnostics: Option<CriticalityDiagnosticsIeList>,
}

impl CriticalityDiagnostics {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 6)?;
        let procedure_code = if optionals[0] {
            Some(ProcedureCode::aper_decode(data)?)
        } else {
            None
        };
        let triggering_message = if optionals[1] {
            Some(TriggeringMessage::aper_decode(data)?)
        } else {
            None
        };
        let procedure_criticality = if optionals[2] {
            Some(Criticality::aper_decode(data)?)
        } else {
            None
        };
        let transaction_id = if optionals[3] {
            Some(TransactionId::aper_decode(data)?)
        } else {
            None
        };
        let i_es_criticality_diagnostics = if optionals[4] {
            Some(CriticalityDiagnosticsIeList::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[5] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            procedure_code,
            triggering_message,
            procedure_criticality,
            transaction_id,
            i_es_criticality_diagnostics,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.procedure_code.is_some());
        optionals.push(self.triggering_message.is_some());
        optionals.push(self.procedure_criticality.is_some());
        optionals.push(self.transaction_id.is_some());
        optionals.push(self.i_es_criticality_diagnostics.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        if let Some(x) = &self.procedure_code {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.triggering_message {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.procedure_criticality {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.transaction_id {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.i_es_criticality_diagnostics {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for CriticalityDiagnostics {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CriticalityDiagnostics::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CriticalityDiagnostics");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CriticalityDiagnostics");
            e
        })
    }
}
// CriticalityDiagnosticsIeList
#[derive(Clone, Debug)]
pub struct CriticalityDiagnosticsIeList(pub Vec<CriticalityDiagnosticsIeItem>);

impl CriticalityDiagnosticsIeList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(256), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(CriticalityDiagnosticsIeItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(256), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for CriticalityDiagnosticsIeList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CriticalityDiagnosticsIeList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CriticalityDiagnosticsIeList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CriticalityDiagnosticsIeList");
            e
        })
    }
}
// CriticalityDiagnosticsIeItem
#[derive(Clone, Debug)]
pub struct CriticalityDiagnosticsIeItem {
    pub ie_criticality: Criticality,
    pub ie_id: ProtocolIeId,
    pub type_of_error: TypeOfError,
}

impl CriticalityDiagnosticsIeItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let ie_criticality = Criticality::aper_decode(data)?;
        let ie_id = ProtocolIeId::aper_decode(data)?;
        let type_of_error = TypeOfError::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ie_criticality,
            ie_id,
            type_of_error,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.ie_criticality.aper_encode(data)?;
        self.ie_id.aper_encode(data)?;
        self.type_of_error.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for CriticalityDiagnosticsIeItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CriticalityDiagnosticsIeItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CriticalityDiagnosticsIeItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CriticalityDiagnosticsIeItem");
            e
        })
    }
}
// CRnti
#[derive(Clone, Copy, Debug)]
pub struct CRnti(pub u16);

impl CRnti {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(65535), true)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(65535), true, self.0 as i128, false)
    }
}

impl AperCodec for CRnti {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CRnti::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CRnti");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CRnti");
            e
        })
    }
}
// CuDuRadioInformationType
#[derive(Clone, Debug)]
pub enum CuDuRadioInformationType {
    Rim(CuDuRimInformation),
}

impl CuDuRadioInformationType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 1, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::Rim(CuDuRimInformation::aper_decode(data)?)),
            1 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::Rim(x) => {
                aper::encode::encode_choice_idx(data, 0, 1, false, 0, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for CuDuRadioInformationType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CuDuRadioInformationType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CuDuRadioInformationType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CuDuRadioInformationType");
            e
        })
    }
}
// CuDuRimInformation
#[derive(Clone, Debug)]
pub struct CuDuRimInformation {
    pub victim_gnb_set_id: GnbSetId,
    pub rimrs_detection_status: RimrsDetectionStatus,
}

impl CuDuRimInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let victim_gnb_set_id = GnbSetId::aper_decode(data)?;
        let rimrs_detection_status = RimrsDetectionStatus::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            victim_gnb_set_id,
            rimrs_detection_status,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.victim_gnb_set_id.aper_encode(data)?;
        self.rimrs_detection_status.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for CuDuRimInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CuDuRimInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CuDuRimInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CuDuRimInformation");
            e
        })
    }
}
// CuToDuRrcInformation
#[derive(Clone, Debug)]
pub struct CuToDuRrcInformation {
    pub cg_config_info: Option<CgConfigInfo>,
    pub ue_capability_rat_container_list: Option<UeCapabilityRatContainerList>,
    pub meas_config: Option<MeasConfig>,
    pub handover_preparation_information: Option<HandoverPreparationInformation>,
    pub cell_group_config: Option<CellGroupConfig>,
    pub measurement_timing_configuration: Option<MeasurementTimingConfiguration>,
    pub ue_assistance_information: Option<UeAssistanceInformation>,
    pub cg_config: Option<CgConfig>,
    pub ue_assistance_information_eutra: Option<UeAssistanceInformationEutra>,
}

impl CuToDuRrcInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 4)?;
        let cg_config_info = if optionals[0] {
            Some(CgConfigInfo::aper_decode(data)?)
        } else {
            None
        };
        let ue_capability_rat_container_list = if optionals[1] {
            Some(UeCapabilityRatContainerList::aper_decode(data)?)
        } else {
            None
        };
        let meas_config = if optionals[2] {
            Some(MeasConfig::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut handover_preparation_information: Option<HandoverPreparationInformation> = None;
        let mut cell_group_config: Option<CellGroupConfig> = None;
        let mut measurement_timing_configuration: Option<MeasurementTimingConfiguration> = None;
        let mut ue_assistance_information: Option<UeAssistanceInformation> = None;
        let mut cg_config: Option<CgConfig> = None;
        let mut ue_assistance_information_eutra: Option<UeAssistanceInformationEutra> = None;

        if optionals[3] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    119 => {
                        handover_preparation_information =
                            Some(HandoverPreparationInformation::aper_decode(data)?)
                    }
                    173 => cell_group_config = Some(CellGroupConfig::aper_decode(data)?),
                    163 => {
                        measurement_timing_configuration =
                            Some(MeasurementTimingConfiguration::aper_decode(data)?)
                    }
                    214 => {
                        ue_assistance_information =
                            Some(UeAssistanceInformation::aper_decode(data)?)
                    }
                    234 => cg_config = Some(CgConfig::aper_decode(data)?),
                    339 => {
                        ue_assistance_information_eutra =
                            Some(UeAssistanceInformationEutra::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            cg_config_info,
            ue_capability_rat_container_list,
            meas_config,
            handover_preparation_information,
            cell_group_config,
            measurement_timing_configuration,
            ue_assistance_information,
            cg_config,
            ue_assistance_information_eutra,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.cg_config_info.is_some());
        optionals.push(self.ue_capability_rat_container_list.is_some());
        optionals.push(self.meas_config.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        if let Some(x) = &self.cg_config_info {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.ue_capability_rat_container_list {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.meas_config {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for CuToDuRrcInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CuToDuRrcInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CuToDuRrcInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CuToDuRrcInformation");
            e
        })
    }
}
// DcBasedDuplicationConfigured
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum DcBasedDuplicationConfigured {
    True,
}

impl DcBasedDuplicationConfigured {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for DcBasedDuplicationConfigured {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DcBasedDuplicationConfigured::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DcBasedDuplicationConfigured");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DcBasedDuplicationConfigured");
            e
        })
    }
}
// DedicatedSiDeliveryNeededUeItem
#[derive(Clone, Debug)]
pub struct DedicatedSiDeliveryNeededUeItem {
    pub gnb_cu_ue_f1ap_id: GnbCuUeF1apId,
    pub nr_cgi: NrCgi,
}

impl DedicatedSiDeliveryNeededUeItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let gnb_cu_ue_f1ap_id = GnbCuUeF1apId::aper_decode(data)?;
        let nr_cgi = NrCgi::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            nr_cgi,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.gnb_cu_ue_f1ap_id.aper_encode(data)?;
        self.nr_cgi.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for DedicatedSiDeliveryNeededUeItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DedicatedSiDeliveryNeededUeItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DedicatedSiDeliveryNeededUeItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DedicatedSiDeliveryNeededUeItem");
            e
        })
    }
}
// DlPrs
#[derive(Clone, Debug)]
pub struct DlPrs {
    pub prsid: u8,
    pub dl_prs_resource_set_id: PrsResourceSetId,
    pub dl_prs_resource_id: Option<PrsResourceId>,
}

impl DlPrs {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let prsid = aper::decode::decode_integer(data, Some(0), Some(255), false)?.0 as u8;
        let dl_prs_resource_set_id = PrsResourceSetId::aper_decode(data)?;
        let dl_prs_resource_id = if optionals[0] {
            Some(PrsResourceId::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            prsid,
            dl_prs_resource_set_id,
            dl_prs_resource_id,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.dl_prs_resource_id.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(data, Some(0), Some(255), false, self.prsid as i128, false)?;
        self.dl_prs_resource_set_id.aper_encode(data)?;
        if let Some(x) = &self.dl_prs_resource_id {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for DlPrs {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DlPrs::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DlPrs");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DlPrs");
            e
        })
    }
}
// DlPrsMutingPattern
#[derive(Clone, Debug)]
pub enum DlPrsMutingPattern {
    Two(BitString),
    Four(BitString),
    Six(BitString),
    Eight(BitString),
    Sixteen(BitString),
    ThirtyTwo(BitString),
}

impl DlPrsMutingPattern {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 6, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::Two(aper::decode::decode_bitstring(
                data,
                Some(2),
                Some(2),
                false,
            )?)),
            1 => Ok(Self::Four(aper::decode::decode_bitstring(
                data,
                Some(4),
                Some(4),
                false,
            )?)),
            2 => Ok(Self::Six(aper::decode::decode_bitstring(
                data,
                Some(6),
                Some(6),
                false,
            )?)),
            3 => Ok(Self::Eight(aper::decode::decode_bitstring(
                data,
                Some(8),
                Some(8),
                false,
            )?)),
            4 => Ok(Self::Sixteen(aper::decode::decode_bitstring(
                data,
                Some(16),
                Some(16),
                false,
            )?)),
            5 => Ok(Self::ThirtyTwo(aper::decode::decode_bitstring(
                data,
                Some(32),
                Some(32),
                false,
            )?)),
            6 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::Two(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 0, false)?;
                aper::encode::encode_bitstring(data, Some(2), Some(2), false, &x, false)
            }
            Self::Four(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 1, false)?;
                aper::encode::encode_bitstring(data, Some(4), Some(4), false, &x, false)
            }
            Self::Six(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 2, false)?;
                aper::encode::encode_bitstring(data, Some(6), Some(6), false, &x, false)
            }
            Self::Eight(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 3, false)?;
                aper::encode::encode_bitstring(data, Some(8), Some(8), false, &x, false)
            }
            Self::Sixteen(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 4, false)?;
                aper::encode::encode_bitstring(data, Some(16), Some(16), false, &x, false)
            }
            Self::ThirtyTwo(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 5, false)?;
                aper::encode::encode_bitstring(data, Some(32), Some(32), false, &x, false)
            }
        }
    }
}

impl AperCodec for DlPrsMutingPattern {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DlPrsMutingPattern::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DlPrsMutingPattern");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DlPrsMutingPattern");
            e
        })
    }
}
// DlprsResourceCoordinates
#[derive(Clone, Debug)]
pub struct DlprsResourceCoordinates {
    pub listof_dl_prs_resource_set_arp: Vec<DlprsResourceSetArp>,
}

impl DlprsResourceCoordinates {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let listof_dl_prs_resource_set_arp = {
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(2), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(DlprsResourceSetArp::aper_decode(data)?);
            }
            items
        };

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            listof_dl_prs_resource_set_arp,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_length_determinent(
            data,
            Some(1),
            Some(2),
            false,
            self.listof_dl_prs_resource_set_arp.len(),
        )?;
        for x in &self.listof_dl_prs_resource_set_arp {
            x.aper_encode(data)?;
        }
        Ok(())?;

        Ok(())
    }
}

impl AperCodec for DlprsResourceCoordinates {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DlprsResourceCoordinates::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DlprsResourceCoordinates");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DlprsResourceCoordinates");
            e
        })
    }
}
// DlprsResourceSetArp
#[derive(Clone, Debug)]
pub struct DlprsResourceSetArp {
    pub dl_prs_resource_set_id: PrsResourceSetId,
    pub dl_prs_resource_set_arp_location: DlPrsResourceSetArpLocation,
    pub listof_dl_prs_resource_arp: Vec<DlprsResourceArp>,
}

impl DlprsResourceSetArp {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let dl_prs_resource_set_id = PrsResourceSetId::aper_decode(data)?;
        let dl_prs_resource_set_arp_location = DlPrsResourceSetArpLocation::aper_decode(data)?;
        let listof_dl_prs_resource_arp = {
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(DlprsResourceArp::aper_decode(data)?);
            }
            items
        };

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            dl_prs_resource_set_id,
            dl_prs_resource_set_arp_location,
            listof_dl_prs_resource_arp,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.dl_prs_resource_set_id.aper_encode(data)?;
        self.dl_prs_resource_set_arp_location.aper_encode(data)?;
        aper::encode::encode_length_determinent(
            data,
            Some(1),
            Some(64),
            false,
            self.listof_dl_prs_resource_arp.len(),
        )?;
        for x in &self.listof_dl_prs_resource_arp {
            x.aper_encode(data)?;
        }
        Ok(())?;

        Ok(())
    }
}

impl AperCodec for DlprsResourceSetArp {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DlprsResourceSetArp::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DlprsResourceSetArp");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DlprsResourceSetArp");
            e
        })
    }
}
// DlPrsResourceSetArpLocation
#[derive(Clone, Debug)]
pub enum DlPrsResourceSetArpLocation {
    RelativeGeodeticLocation(RelativeGeodeticLocation),
    RelativeCartesianLocation(RelativeCartesianLocation),
}

impl DlPrsResourceSetArpLocation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::RelativeGeodeticLocation(
                RelativeGeodeticLocation::aper_decode(data)?,
            )),
            1 => Ok(Self::RelativeCartesianLocation(
                RelativeCartesianLocation::aper_decode(data)?,
            )),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::RelativeGeodeticLocation(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::RelativeCartesianLocation(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for DlPrsResourceSetArpLocation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DlPrsResourceSetArpLocation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DlPrsResourceSetArpLocation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DlPrsResourceSetArpLocation");
            e
        })
    }
}
// DlprsResourceArp
#[derive(Clone, Debug)]
pub struct DlprsResourceArp {
    pub dl_prs_resource_id: PrsResourceId,
    pub dl_prs_resource_arp_location: DlPrsResourceArpLocation,
}

impl DlprsResourceArp {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let dl_prs_resource_id = PrsResourceId::aper_decode(data)?;
        let dl_prs_resource_arp_location = DlPrsResourceArpLocation::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            dl_prs_resource_id,
            dl_prs_resource_arp_location,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.dl_prs_resource_id.aper_encode(data)?;
        self.dl_prs_resource_arp_location.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for DlprsResourceArp {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DlprsResourceArp::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DlprsResourceArp");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DlprsResourceArp");
            e
        })
    }
}
// DlPrsResourceArpLocation
#[derive(Clone, Debug)]
pub enum DlPrsResourceArpLocation {
    RelativeGeodeticLocation(RelativeGeodeticLocation),
    RelativeCartesianLocation(RelativeCartesianLocation),
}

impl DlPrsResourceArpLocation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::RelativeGeodeticLocation(
                RelativeGeodeticLocation::aper_decode(data)?,
            )),
            1 => Ok(Self::RelativeCartesianLocation(
                RelativeCartesianLocation::aper_decode(data)?,
            )),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::RelativeGeodeticLocation(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::RelativeCartesianLocation(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for DlPrsResourceArpLocation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DlPrsResourceArpLocation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DlPrsResourceArpLocation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DlPrsResourceArpLocation");
            e
        })
    }
}
// DlUpTnlAddressToUpdateListItem
#[derive(Clone, Debug)]
pub struct DlUpTnlAddressToUpdateListItem {
    pub old_ip_adress: TransportLayerAddress,
    pub new_ip_adress: TransportLayerAddress,
}

impl DlUpTnlAddressToUpdateListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let old_ip_adress = TransportLayerAddress::aper_decode(data)?;
        let new_ip_adress = TransportLayerAddress::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            old_ip_adress,
            new_ip_adress,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.old_ip_adress.aper_encode(data)?;
        self.new_ip_adress.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for DlUpTnlAddressToUpdateListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DlUpTnlAddressToUpdateListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DlUpTnlAddressToUpdateListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DlUpTnlAddressToUpdateListItem");
            e
        })
    }
}
// DluptnlInformationToBeSetupList
#[derive(Clone, Debug)]
pub struct DluptnlInformationToBeSetupList(pub Vec<DluptnlInformationToBeSetupItem>);

impl DluptnlInformationToBeSetupList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(2), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(DluptnlInformationToBeSetupItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(2), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for DluptnlInformationToBeSetupList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DluptnlInformationToBeSetupList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DluptnlInformationToBeSetupList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DluptnlInformationToBeSetupList");
            e
        })
    }
}
// DluptnlInformationToBeSetupItem
#[derive(Clone, Debug)]
pub struct DluptnlInformationToBeSetupItem {
    pub dluptnl_information: UpTransportLayerInformation,
}

impl DluptnlInformationToBeSetupItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let dluptnl_information = UpTransportLayerInformation::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            dluptnl_information,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.dluptnl_information.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for DluptnlInformationToBeSetupItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DluptnlInformationToBeSetupItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DluptnlInformationToBeSetupItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DluptnlInformationToBeSetupItem");
            e
        })
    }
}
// DrbActivityItem
#[derive(Clone, Debug)]
pub struct DrbActivityItem {
    pub drb_id: DrbId,
    pub drb_activity: Option<DrbActivity>,
}

impl DrbActivityItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let drb_id = DrbId::aper_decode(data)?;
        let drb_activity = if optionals[0] {
            Some(DrbActivity::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            drb_id,
            drb_activity,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.drb_activity.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.drb_id.aper_encode(data)?;
        if let Some(x) = &self.drb_activity {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for DrbActivityItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrbActivityItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbActivityItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbActivityItem");
            e
        })
    }
}
// DrbActivity
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum DrbActivity {
    Active,
    NotActive,
}

impl DrbActivity {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), false, *self as i128, false)
    }
}

impl AperCodec for DrbActivity {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrbActivity::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbActivity");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbActivity");
            e
        })
    }
}
// DrbId
#[derive(Clone, Copy, Debug)]
pub struct DrbId(pub u8);

impl DrbId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(32), true)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(32), true, self.0 as i128, false)
    }
}

impl AperCodec for DrbId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrbId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbId");
            e
        })
    }
}
// DrbsFailedToBeModifiedItem
#[derive(Clone, Debug)]
pub struct DrbsFailedToBeModifiedItem {
    pub drb_id: DrbId,
    pub cause: Option<Cause>,
}

impl DrbsFailedToBeModifiedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let drb_id = DrbId::aper_decode(data)?;
        let cause = if optionals[0] {
            Some(Cause::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { drb_id, cause })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.cause.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.drb_id.aper_encode(data)?;
        if let Some(x) = &self.cause {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for DrbsFailedToBeModifiedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrbsFailedToBeModifiedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsFailedToBeModifiedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsFailedToBeModifiedItem");
            e
        })
    }
}
// DrbsFailedToBeSetupItem
#[derive(Clone, Debug)]
pub struct DrbsFailedToBeSetupItem {
    pub drb_id: DrbId,
    pub cause: Option<Cause>,
}

impl DrbsFailedToBeSetupItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let drb_id = DrbId::aper_decode(data)?;
        let cause = if optionals[0] {
            Some(Cause::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { drb_id, cause })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.cause.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.drb_id.aper_encode(data)?;
        if let Some(x) = &self.cause {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for DrbsFailedToBeSetupItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrbsFailedToBeSetupItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsFailedToBeSetupItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsFailedToBeSetupItem");
            e
        })
    }
}
// DrbsFailedToBeSetupModItem
#[derive(Clone, Debug)]
pub struct DrbsFailedToBeSetupModItem {
    pub drb_id: DrbId,
    pub cause: Option<Cause>,
}

impl DrbsFailedToBeSetupModItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let drb_id = DrbId::aper_decode(data)?;
        let cause = if optionals[0] {
            Some(Cause::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { drb_id, cause })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.cause.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.drb_id.aper_encode(data)?;
        if let Some(x) = &self.cause {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for DrbsFailedToBeSetupModItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrbsFailedToBeSetupModItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsFailedToBeSetupModItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsFailedToBeSetupModItem");
            e
        })
    }
}
// DrbInformation
#[derive(Clone, Debug)]
pub struct DrbInformation {
    pub drb_qos: QosFlowLevelQosParameters,
    pub snssai: Snssai,
    pub notification_control: Option<NotificationControl>,
    pub flows_mapped_to_drb_list: FlowsMappedToDrbList,
}

impl DrbInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let drb_qos = QosFlowLevelQosParameters::aper_decode(data)?;
        let snssai = Snssai::aper_decode(data)?;
        let notification_control = if optionals[0] {
            Some(NotificationControl::aper_decode(data)?)
        } else {
            None
        };
        let flows_mapped_to_drb_list = FlowsMappedToDrbList::aper_decode(data)?;

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            drb_qos,
            snssai,
            notification_control,
            flows_mapped_to_drb_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.notification_control.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.drb_qos.aper_encode(data)?;
        self.snssai.aper_encode(data)?;
        if let Some(x) = &self.notification_control {
            x.aper_encode(data)?;
        }
        self.flows_mapped_to_drb_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for DrbInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrbInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbInformation");
            e
        })
    }
}
// DrbsModifiedItem
#[derive(Clone, Debug)]
pub struct DrbsModifiedItem {
    pub drb_id: DrbId,
    pub lcid: Option<Lcid>,
    pub dluptnl_information_to_be_setup_list: DluptnlInformationToBeSetupList,
    pub rlc_status: Option<RlcStatus>,
    pub additional_pdcp_duplication_tnl_list: Option<AdditionalPdcpDuplicationTnlList>,
    pub current_qos_para_set_index: Option<QosParaSetIndex>,
}

impl DrbsModifiedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let drb_id = DrbId::aper_decode(data)?;
        let lcid = if optionals[0] {
            Some(Lcid::aper_decode(data)?)
        } else {
            None
        };
        let dluptnl_information_to_be_setup_list =
            DluptnlInformationToBeSetupList::aper_decode(data)?;

        // Process the extension container
        let mut rlc_status: Option<RlcStatus> = None;
        let mut additional_pdcp_duplication_tnl_list: Option<AdditionalPdcpDuplicationTnlList> =
            None;
        let mut current_qos_para_set_index: Option<QosParaSetIndex> = None;

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    160 => rlc_status = Some(RlcStatus::aper_decode(data)?),
                    370 => {
                        additional_pdcp_duplication_tnl_list =
                            Some(AdditionalPdcpDuplicationTnlList::aper_decode(data)?)
                    }
                    344 => current_qos_para_set_index = Some(QosParaSetIndex::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            drb_id,
            lcid,
            dluptnl_information_to_be_setup_list,
            rlc_status,
            additional_pdcp_duplication_tnl_list,
            current_qos_para_set_index,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.lcid.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.drb_id.aper_encode(data)?;
        if let Some(x) = &self.lcid {
            x.aper_encode(data)?;
        }
        self.dluptnl_information_to_be_setup_list
            .aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for DrbsModifiedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrbsModifiedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsModifiedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsModifiedItem");
            e
        })
    }
}
// DrbsModifiedConfItem
#[derive(Clone, Debug)]
pub struct DrbsModifiedConfItem {
    pub drb_id: DrbId,
    pub uluptnl_information_to_be_setup_list: UluptnlInformationToBeSetupList,
    pub additional_pdcp_duplication_tnl_list: Option<AdditionalPdcpDuplicationTnlList>,
}

impl DrbsModifiedConfItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let drb_id = DrbId::aper_decode(data)?;
        let uluptnl_information_to_be_setup_list =
            UluptnlInformationToBeSetupList::aper_decode(data)?;

        // Process the extension container
        let mut additional_pdcp_duplication_tnl_list: Option<AdditionalPdcpDuplicationTnlList> =
            None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    370 => {
                        additional_pdcp_duplication_tnl_list =
                            Some(AdditionalPdcpDuplicationTnlList::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            drb_id,
            uluptnl_information_to_be_setup_list,
            additional_pdcp_duplication_tnl_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.drb_id.aper_encode(data)?;
        self.uluptnl_information_to_be_setup_list
            .aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for DrbsModifiedConfItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrbsModifiedConfItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsModifiedConfItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsModifiedConfItem");
            e
        })
    }
}
// DrbNotifyItem
#[derive(Clone, Debug)]
pub struct DrbNotifyItem {
    pub drb_id: DrbId,
    pub notification_cause: NotificationCause,
    pub current_qos_para_set_index: Option<QosParaSetNotifyIndex>,
}

impl DrbNotifyItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let drb_id = DrbId::aper_decode(data)?;
        let notification_cause = NotificationCause::aper_decode(data)?;

        // Process the extension container
        let mut current_qos_para_set_index: Option<QosParaSetNotifyIndex> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    344 => {
                        current_qos_para_set_index = Some(QosParaSetNotifyIndex::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            drb_id,
            notification_cause,
            current_qos_para_set_index,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.drb_id.aper_encode(data)?;
        self.notification_cause.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for DrbNotifyItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrbNotifyItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbNotifyItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbNotifyItem");
            e
        })
    }
}
// DrbsRequiredToBeModifiedItem
#[derive(Clone, Debug)]
pub struct DrbsRequiredToBeModifiedItem {
    pub drb_id: DrbId,
    pub dluptnl_information_to_be_setup_list: DluptnlInformationToBeSetupList,
    pub rlc_status: Option<RlcStatus>,
    pub additional_pdcp_duplication_tnl_list: Option<AdditionalPdcpDuplicationTnlList>,
}

impl DrbsRequiredToBeModifiedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let drb_id = DrbId::aper_decode(data)?;
        let dluptnl_information_to_be_setup_list =
            DluptnlInformationToBeSetupList::aper_decode(data)?;

        // Process the extension container
        let mut rlc_status: Option<RlcStatus> = None;
        let mut additional_pdcp_duplication_tnl_list: Option<AdditionalPdcpDuplicationTnlList> =
            None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    160 => rlc_status = Some(RlcStatus::aper_decode(data)?),
                    370 => {
                        additional_pdcp_duplication_tnl_list =
                            Some(AdditionalPdcpDuplicationTnlList::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            drb_id,
            dluptnl_information_to_be_setup_list,
            rlc_status,
            additional_pdcp_duplication_tnl_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.drb_id.aper_encode(data)?;
        self.dluptnl_information_to_be_setup_list
            .aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for DrbsRequiredToBeModifiedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrbsRequiredToBeModifiedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsRequiredToBeModifiedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsRequiredToBeModifiedItem");
            e
        })
    }
}
// DrbsRequiredToBeReleasedItem
#[derive(Clone, Debug)]
pub struct DrbsRequiredToBeReleasedItem {
    pub drb_id: DrbId,
}

impl DrbsRequiredToBeReleasedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let drb_id = DrbId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { drb_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.drb_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for DrbsRequiredToBeReleasedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrbsRequiredToBeReleasedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsRequiredToBeReleasedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsRequiredToBeReleasedItem");
            e
        })
    }
}
// DrbsSetupItem
#[derive(Clone, Debug)]
pub struct DrbsSetupItem {
    pub drb_id: DrbId,
    pub lcid: Option<Lcid>,
    pub dluptnl_information_to_be_setup_list: DluptnlInformationToBeSetupList,
    pub additional_pdcp_duplication_tnl_list: Option<AdditionalPdcpDuplicationTnlList>,
    pub current_qos_para_set_index: Option<QosParaSetIndex>,
}

impl DrbsSetupItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let drb_id = DrbId::aper_decode(data)?;
        let lcid = if optionals[0] {
            Some(Lcid::aper_decode(data)?)
        } else {
            None
        };
        let dluptnl_information_to_be_setup_list =
            DluptnlInformationToBeSetupList::aper_decode(data)?;

        // Process the extension container
        let mut additional_pdcp_duplication_tnl_list: Option<AdditionalPdcpDuplicationTnlList> =
            None;
        let mut current_qos_para_set_index: Option<QosParaSetIndex> = None;

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    370 => {
                        additional_pdcp_duplication_tnl_list =
                            Some(AdditionalPdcpDuplicationTnlList::aper_decode(data)?)
                    }
                    344 => current_qos_para_set_index = Some(QosParaSetIndex::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            drb_id,
            lcid,
            dluptnl_information_to_be_setup_list,
            additional_pdcp_duplication_tnl_list,
            current_qos_para_set_index,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.lcid.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.drb_id.aper_encode(data)?;
        if let Some(x) = &self.lcid {
            x.aper_encode(data)?;
        }
        self.dluptnl_information_to_be_setup_list
            .aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for DrbsSetupItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrbsSetupItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsSetupItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsSetupItem");
            e
        })
    }
}
// DrbsSetupModItem
#[derive(Clone, Debug)]
pub struct DrbsSetupModItem {
    pub drb_id: DrbId,
    pub lcid: Option<Lcid>,
    pub dluptnl_information_to_be_setup_list: DluptnlInformationToBeSetupList,
    pub additional_pdcp_duplication_tnl_list: Option<AdditionalPdcpDuplicationTnlList>,
    pub current_qos_para_set_index: Option<QosParaSetIndex>,
}

impl DrbsSetupModItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let drb_id = DrbId::aper_decode(data)?;
        let lcid = if optionals[0] {
            Some(Lcid::aper_decode(data)?)
        } else {
            None
        };
        let dluptnl_information_to_be_setup_list =
            DluptnlInformationToBeSetupList::aper_decode(data)?;

        // Process the extension container
        let mut additional_pdcp_duplication_tnl_list: Option<AdditionalPdcpDuplicationTnlList> =
            None;
        let mut current_qos_para_set_index: Option<QosParaSetIndex> = None;

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    370 => {
                        additional_pdcp_duplication_tnl_list =
                            Some(AdditionalPdcpDuplicationTnlList::aper_decode(data)?)
                    }
                    344 => current_qos_para_set_index = Some(QosParaSetIndex::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            drb_id,
            lcid,
            dluptnl_information_to_be_setup_list,
            additional_pdcp_duplication_tnl_list,
            current_qos_para_set_index,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.lcid.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.drb_id.aper_encode(data)?;
        if let Some(x) = &self.lcid {
            x.aper_encode(data)?;
        }
        self.dluptnl_information_to_be_setup_list
            .aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for DrbsSetupModItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrbsSetupModItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsSetupModItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsSetupModItem");
            e
        })
    }
}
// DrbsToBeModifiedItem
#[derive(Clone, Debug)]
pub struct DrbsToBeModifiedItem {
    pub drb_id: DrbId,
    pub qos_information: Option<QosInformation>,
    pub uluptnl_information_to_be_setup_list: UluptnlInformationToBeSetupList,
    pub ul_configuration: Option<UlConfiguration>,
    pub dlpdcpsn_length: Option<PdcpsnLength>,
    pub ulpdcpsn_length: Option<PdcpsnLength>,
    pub bearer_type_change: Option<BearerTypeChange>,
    pub rlc_mode: Option<RlcMode>,
    pub duplication_activation: Option<DuplicationActivation>,
    pub dc_based_duplication_configured: Option<DcBasedDuplicationConfigured>,
    pub dc_based_duplication_activation: Option<DuplicationActivation>,
    pub additional_pdcp_duplication_tnl_list: Option<AdditionalPdcpDuplicationTnlList>,
    pub rlc_duplication_information: Option<RlcDuplicationInformation>,
    pub transmission_stop_indicator: Option<TransmissionStopIndicator>,
}

impl DrbsToBeModifiedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 3)?;
        let drb_id = DrbId::aper_decode(data)?;
        let qos_information = if optionals[0] {
            Some(QosInformation::aper_decode(data)?)
        } else {
            None
        };
        let uluptnl_information_to_be_setup_list =
            UluptnlInformationToBeSetupList::aper_decode(data)?;
        let ul_configuration = if optionals[1] {
            Some(UlConfiguration::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut dlpdcpsn_length: Option<PdcpsnLength> = None;
        let mut ulpdcpsn_length: Option<PdcpsnLength> = None;
        let mut bearer_type_change: Option<BearerTypeChange> = None;
        let mut rlc_mode: Option<RlcMode> = None;
        let mut duplication_activation: Option<DuplicationActivation> = None;
        let mut dc_based_duplication_configured: Option<DcBasedDuplicationConfigured> = None;
        let mut dc_based_duplication_activation: Option<DuplicationActivation> = None;
        let mut additional_pdcp_duplication_tnl_list: Option<AdditionalPdcpDuplicationTnlList> =
            None;
        let mut rlc_duplication_information: Option<RlcDuplicationInformation> = None;
        let mut transmission_stop_indicator: Option<TransmissionStopIndicator> = None;

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    161 => dlpdcpsn_length = Some(PdcpsnLength::aper_decode(data)?),
                    192 => ulpdcpsn_length = Some(PdcpsnLength::aper_decode(data)?),
                    186 => bearer_type_change = Some(BearerTypeChange::aper_decode(data)?),
                    187 => rlc_mode = Some(RlcMode::aper_decode(data)?),
                    188 => duplication_activation = Some(DuplicationActivation::aper_decode(data)?),
                    176 => {
                        dc_based_duplication_configured =
                            Some(DcBasedDuplicationConfigured::aper_decode(data)?)
                    }
                    177 => {
                        dc_based_duplication_activation =
                            Some(DuplicationActivation::aper_decode(data)?)
                    }
                    370 => {
                        additional_pdcp_duplication_tnl_list =
                            Some(AdditionalPdcpDuplicationTnlList::aper_decode(data)?)
                    }
                    371 => {
                        rlc_duplication_information =
                            Some(RlcDuplicationInformation::aper_decode(data)?)
                    }
                    430 => {
                        transmission_stop_indicator =
                            Some(TransmissionStopIndicator::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            drb_id,
            qos_information,
            uluptnl_information_to_be_setup_list,
            ul_configuration,
            dlpdcpsn_length,
            ulpdcpsn_length,
            bearer_type_change,
            rlc_mode,
            duplication_activation,
            dc_based_duplication_configured,
            dc_based_duplication_activation,
            additional_pdcp_duplication_tnl_list,
            rlc_duplication_information,
            transmission_stop_indicator,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.qos_information.is_some());
        optionals.push(self.ul_configuration.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.drb_id.aper_encode(data)?;
        if let Some(x) = &self.qos_information {
            x.aper_encode(data)?;
        }
        self.uluptnl_information_to_be_setup_list
            .aper_encode(data)?;
        if let Some(x) = &self.ul_configuration {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for DrbsToBeModifiedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrbsToBeModifiedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsToBeModifiedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsToBeModifiedItem");
            e
        })
    }
}
// DrbsToBeReleasedItem
#[derive(Clone, Debug)]
pub struct DrbsToBeReleasedItem {
    pub drb_id: DrbId,
}

impl DrbsToBeReleasedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let drb_id = DrbId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { drb_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.drb_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for DrbsToBeReleasedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrbsToBeReleasedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsToBeReleasedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsToBeReleasedItem");
            e
        })
    }
}
// DrbsToBeSetupItem
#[derive(Clone, Debug)]
pub struct DrbsToBeSetupItem {
    pub drb_id: DrbId,
    pub qos_information: QosInformation,
    pub uluptnl_information_to_be_setup_list: UluptnlInformationToBeSetupList,
    pub rlc_mode: RlcMode,
    pub ul_configuration: Option<UlConfiguration>,
    pub duplication_activation: Option<DuplicationActivation>,
    pub dc_based_duplication_configured: Option<DcBasedDuplicationConfigured>,
    pub dc_based_duplication_activation: Option<DuplicationActivation>,
    pub dlpdcpsn_length: Option<PdcpsnLength>,
    pub ulpdcpsn_length: Option<PdcpsnLength>,
    pub additional_pdcp_duplication_tnl_list: Option<AdditionalPdcpDuplicationTnlList>,
    pub rlc_duplication_information: Option<RlcDuplicationInformation>,
}

impl DrbsToBeSetupItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 3)?;
        let drb_id = DrbId::aper_decode(data)?;
        let qos_information = QosInformation::aper_decode(data)?;
        let uluptnl_information_to_be_setup_list =
            UluptnlInformationToBeSetupList::aper_decode(data)?;
        let rlc_mode = RlcMode::aper_decode(data)?;
        let ul_configuration = if optionals[0] {
            Some(UlConfiguration::aper_decode(data)?)
        } else {
            None
        };
        let duplication_activation = if optionals[1] {
            Some(DuplicationActivation::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut dc_based_duplication_configured: Option<DcBasedDuplicationConfigured> = None;
        let mut dc_based_duplication_activation: Option<DuplicationActivation> = None;
        let mut dlpdcpsn_length: Option<PdcpsnLength> = None;
        let mut ulpdcpsn_length: Option<PdcpsnLength> = None;
        let mut additional_pdcp_duplication_tnl_list: Option<AdditionalPdcpDuplicationTnlList> =
            None;
        let mut rlc_duplication_information: Option<RlcDuplicationInformation> = None;

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    176 => {
                        dc_based_duplication_configured =
                            Some(DcBasedDuplicationConfigured::aper_decode(data)?)
                    }
                    177 => {
                        dc_based_duplication_activation =
                            Some(DuplicationActivation::aper_decode(data)?)
                    }
                    161 => dlpdcpsn_length = Some(PdcpsnLength::aper_decode(data)?),
                    192 => ulpdcpsn_length = Some(PdcpsnLength::aper_decode(data)?),
                    370 => {
                        additional_pdcp_duplication_tnl_list =
                            Some(AdditionalPdcpDuplicationTnlList::aper_decode(data)?)
                    }
                    371 => {
                        rlc_duplication_information =
                            Some(RlcDuplicationInformation::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            drb_id,
            qos_information,
            uluptnl_information_to_be_setup_list,
            rlc_mode,
            ul_configuration,
            duplication_activation,
            dc_based_duplication_configured,
            dc_based_duplication_activation,
            dlpdcpsn_length,
            ulpdcpsn_length,
            additional_pdcp_duplication_tnl_list,
            rlc_duplication_information,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.ul_configuration.is_some());
        optionals.push(self.duplication_activation.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.drb_id.aper_encode(data)?;
        self.qos_information.aper_encode(data)?;
        self.uluptnl_information_to_be_setup_list
            .aper_encode(data)?;
        self.rlc_mode.aper_encode(data)?;
        if let Some(x) = &self.ul_configuration {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.duplication_activation {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for DrbsToBeSetupItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrbsToBeSetupItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsToBeSetupItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsToBeSetupItem");
            e
        })
    }
}
// DrbsToBeSetupModItem
#[derive(Clone, Debug)]
pub struct DrbsToBeSetupModItem {
    pub drb_id: DrbId,
    pub qos_information: QosInformation,
    pub uluptnl_information_to_be_setup_list: UluptnlInformationToBeSetupList,
    pub rlc_mode: RlcMode,
    pub ul_configuration: Option<UlConfiguration>,
    pub duplication_activation: Option<DuplicationActivation>,
    pub dc_based_duplication_configured: Option<DcBasedDuplicationConfigured>,
    pub dc_based_duplication_activation: Option<DuplicationActivation>,
    pub dlpdcpsn_length: Option<PdcpsnLength>,
    pub ulpdcpsn_length: Option<PdcpsnLength>,
    pub additional_pdcp_duplication_tnl_list: Option<AdditionalPdcpDuplicationTnlList>,
    pub rlc_duplication_information: Option<RlcDuplicationInformation>,
}

impl DrbsToBeSetupModItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 3)?;
        let drb_id = DrbId::aper_decode(data)?;
        let qos_information = QosInformation::aper_decode(data)?;
        let uluptnl_information_to_be_setup_list =
            UluptnlInformationToBeSetupList::aper_decode(data)?;
        let rlc_mode = RlcMode::aper_decode(data)?;
        let ul_configuration = if optionals[0] {
            Some(UlConfiguration::aper_decode(data)?)
        } else {
            None
        };
        let duplication_activation = if optionals[1] {
            Some(DuplicationActivation::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut dc_based_duplication_configured: Option<DcBasedDuplicationConfigured> = None;
        let mut dc_based_duplication_activation: Option<DuplicationActivation> = None;
        let mut dlpdcpsn_length: Option<PdcpsnLength> = None;
        let mut ulpdcpsn_length: Option<PdcpsnLength> = None;
        let mut additional_pdcp_duplication_tnl_list: Option<AdditionalPdcpDuplicationTnlList> =
            None;
        let mut rlc_duplication_information: Option<RlcDuplicationInformation> = None;

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    176 => {
                        dc_based_duplication_configured =
                            Some(DcBasedDuplicationConfigured::aper_decode(data)?)
                    }
                    177 => {
                        dc_based_duplication_activation =
                            Some(DuplicationActivation::aper_decode(data)?)
                    }
                    161 => dlpdcpsn_length = Some(PdcpsnLength::aper_decode(data)?),
                    192 => ulpdcpsn_length = Some(PdcpsnLength::aper_decode(data)?),
                    370 => {
                        additional_pdcp_duplication_tnl_list =
                            Some(AdditionalPdcpDuplicationTnlList::aper_decode(data)?)
                    }
                    371 => {
                        rlc_duplication_information =
                            Some(RlcDuplicationInformation::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            drb_id,
            qos_information,
            uluptnl_information_to_be_setup_list,
            rlc_mode,
            ul_configuration,
            duplication_activation,
            dc_based_duplication_configured,
            dc_based_duplication_activation,
            dlpdcpsn_length,
            ulpdcpsn_length,
            additional_pdcp_duplication_tnl_list,
            rlc_duplication_information,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.ul_configuration.is_some());
        optionals.push(self.duplication_activation.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.drb_id.aper_encode(data)?;
        self.qos_information.aper_encode(data)?;
        self.uluptnl_information_to_be_setup_list
            .aper_encode(data)?;
        self.rlc_mode.aper_encode(data)?;
        if let Some(x) = &self.ul_configuration {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.duplication_activation {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for DrbsToBeSetupModItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrbsToBeSetupModItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsToBeSetupModItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrbsToBeSetupModItem");
            e
        })
    }
}
// DrxCycle
#[derive(Clone, Debug)]
pub struct DrxCycle {
    pub long_drx_cycle_length: LongDrxCycleLength,
    pub short_drx_cycle_length: Option<ShortDrxCycleLength>,
    pub short_drx_cycle_timer: Option<ShortDrxCycleTimer>,
}

impl DrxCycle {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 3)?;
        let long_drx_cycle_length = LongDrxCycleLength::aper_decode(data)?;
        let short_drx_cycle_length = if optionals[0] {
            Some(ShortDrxCycleLength::aper_decode(data)?)
        } else {
            None
        };
        let short_drx_cycle_timer = if optionals[1] {
            Some(ShortDrxCycleTimer::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            long_drx_cycle_length,
            short_drx_cycle_length,
            short_drx_cycle_timer,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.short_drx_cycle_length.is_some());
        optionals.push(self.short_drx_cycle_timer.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.long_drx_cycle_length.aper_encode(data)?;
        if let Some(x) = &self.short_drx_cycle_length {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.short_drx_cycle_timer {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for DrxCycle {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrxCycle::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrxCycle");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrxCycle");
            e
        })
    }
}
// DrxConfig
#[derive(Clone, Debug)]
pub struct DrxConfig(pub Vec<u8>);

impl DrxConfig {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for DrxConfig {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrxConfig::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrxConfig");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrxConfig");
            e
        })
    }
}
// DrxConfigurationIndicator
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum DrxConfigurationIndicator {
    Release,
}

impl DrxConfigurationIndicator {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for DrxConfigurationIndicator {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrxConfigurationIndicator::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrxConfigurationIndicator");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrxConfigurationIndicator");
            e
        })
    }
}
// DrxLongCycleStartOffset
#[derive(Clone, Copy, Debug)]
pub struct DrxLongCycleStartOffset(pub u16);

impl DrxLongCycleStartOffset {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(10239), false)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(10239), false, self.0 as i128, false)
    }
}

impl AperCodec for DrxLongCycleStartOffset {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DrxLongCycleStartOffset::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrxLongCycleStartOffset");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DrxLongCycleStartOffset");
            e
        })
    }
}
// DsInformationList
#[derive(Clone, Debug)]
pub struct DsInformationList(pub Vec<Dscp>);

impl DsInformationList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(0), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(Dscp::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(0), Some(64), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for DsInformationList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DsInformationList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DsInformationList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DsInformationList");
            e
        })
    }
}
// Dscp
#[derive(Clone, Debug)]
pub struct Dscp(pub BitString);

impl Dscp {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(6),
            Some(6),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(6), Some(6), false, &self.0, false)
    }
}

impl AperCodec for Dscp {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Dscp::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Dscp");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Dscp");
            e
        })
    }
}
// DuToCuRrcContainer
#[derive(Clone, Debug)]
pub struct DuToCuRrcContainer(pub Vec<u8>);

impl DuToCuRrcContainer {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for DuToCuRrcContainer {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DuToCuRrcContainer::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuToCuRrcContainer");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuToCuRrcContainer");
            e
        })
    }
}
// DuCuRadioInformationType
#[derive(Clone, Debug)]
pub enum DuCuRadioInformationType {
    Rim(DuCuRimInformation),
}

impl DuCuRadioInformationType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 1, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::Rim(DuCuRimInformation::aper_decode(data)?)),
            1 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::Rim(x) => {
                aper::encode::encode_choice_idx(data, 0, 1, false, 0, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for DuCuRadioInformationType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DuCuRadioInformationType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuCuRadioInformationType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuCuRadioInformationType");
            e
        })
    }
}
// DuCuRimInformation
#[derive(Clone, Debug)]
pub struct DuCuRimInformation {
    pub victim_gnb_set_id: GnbSetId,
    pub rimrs_detection_status: RimrsDetectionStatus,
    pub aggressor_cell_list: AggressorCellList,
}

impl DuCuRimInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let victim_gnb_set_id = GnbSetId::aper_decode(data)?;
        let rimrs_detection_status = RimrsDetectionStatus::aper_decode(data)?;
        let aggressor_cell_list = AggressorCellList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            victim_gnb_set_id,
            rimrs_detection_status,
            aggressor_cell_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.victim_gnb_set_id.aper_encode(data)?;
        self.rimrs_detection_status.aper_encode(data)?;
        self.aggressor_cell_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for DuCuRimInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DuCuRimInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuCuRimInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuCuRimInformation");
            e
        })
    }
}
// DuFSlotConfigItem
#[derive(Clone, Debug)]
pub enum DuFSlotConfigItem {
    ExplicitFormat(ExplicitFormat),
    ImplicitFormat(ImplicitFormat),
}

impl DuFSlotConfigItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::ExplicitFormat(ExplicitFormat::aper_decode(data)?)),
            1 => Ok(Self::ImplicitFormat(ImplicitFormat::aper_decode(data)?)),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::ExplicitFormat(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::ImplicitFormat(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for DuFSlotConfigItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DuFSlotConfigItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuFSlotConfigItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuFSlotConfigItem");
            e
        })
    }
}
// DuFSlotConfigList
#[derive(Clone, Debug)]
pub struct DuFSlotConfigList(pub Vec<DuFSlotConfigItem>);

impl DuFSlotConfigList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(320), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(DuFSlotConfigItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(320), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for DuFSlotConfigList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DuFSlotConfigList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuFSlotConfigList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuFSlotConfigList");
            e
        })
    }
}
// DuFSlotformatIndex
#[derive(Clone, Copy, Debug)]
pub struct DuFSlotformatIndex(pub u8);

impl DuFSlotformatIndex {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(254), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(254), false, self.0 as i128, false)
    }
}

impl AperCodec for DuFSlotformatIndex {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DuFSlotformatIndex::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuFSlotformatIndex");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuFSlotformatIndex");
            e
        })
    }
}
// DuFTransmissionPeriodicity
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum DuFTransmissionPeriodicity {
    Ms0p5,
    Ms0p625,
    Ms1,
    Ms1p25,
    Ms2,
    Ms2p5,
    Ms5,
    Ms10,
}

impl DuFTransmissionPeriodicity {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(7), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(7), true, *self as i128, false)
    }
}

impl AperCodec for DuFTransmissionPeriodicity {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DuFTransmissionPeriodicity::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuFTransmissionPeriodicity");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuFTransmissionPeriodicity");
            e
        })
    }
}
// DuRxMtRx
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum DuRxMtRx {
    Supported,
    NotSupported,
}

impl DuRxMtRx {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), false, *self as i128, false)
    }
}

impl AperCodec for DuRxMtRx {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DuRxMtRx::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuRxMtRx");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuRxMtRx");
            e
        })
    }
}
// DuTxMtTx
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum DuTxMtTx {
    Supported,
    NotSupported,
}

impl DuTxMtTx {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), false, *self as i128, false)
    }
}

impl AperCodec for DuTxMtTx {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DuTxMtTx::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuTxMtTx");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuTxMtTx");
            e
        })
    }
}
// DuRxMtTx
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum DuRxMtTx {
    Supported,
    NotSupported,
}

impl DuRxMtTx {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), false, *self as i128, false)
    }
}

impl AperCodec for DuRxMtTx {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DuRxMtTx::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuRxMtTx");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuRxMtTx");
            e
        })
    }
}
// DuTxMtRx
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum DuTxMtRx {
    Supported,
    NotSupported,
}

impl DuTxMtRx {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), false, *self as i128, false)
    }
}

impl AperCodec for DuTxMtRx {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DuTxMtRx::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuTxMtRx");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuTxMtRx");
            e
        })
    }
}
// DuToCuRrcInformation
#[derive(Clone, Debug)]
pub struct DuToCuRrcInformation {
    pub cell_group_config: CellGroupConfig,
    pub meas_gap_config: Option<MeasGapConfig>,
    pub requested_p_max_fr1: Option<Vec<u8>>,
    pub drx_long_cycle_start_offset: Option<DrxLongCycleStartOffset>,
    pub selected_band_combination_index: Option<SelectedBandCombinationIndex>,
    pub selected_feature_set_entry_index: Option<SelectedFeatureSetEntryIndex>,
    pub ph_info_scg: Option<PhInfoScg>,
    pub requested_band_combination_index: Option<RequestedBandCombinationIndex>,
    pub requested_feature_set_entry_index: Option<RequestedFeatureSetEntryIndex>,
    pub drx_config: Option<DrxConfig>,
    pub pdcch_blind_detection_scg: Option<PdcchBlindDetectionScg>,
    pub requested_pdcch_blind_detection_scg: Option<RequestedPdcchBlindDetectionScg>,
    pub ph_info_mcg: Option<PhInfoMcg>,
    pub meas_gap_sharing_config: Option<MeasGapSharingConfig>,
    pub sl_phy_mac_rlc_config: Option<SlPhyMacRlcConfig>,
    pub sl_config_dedicated_eutra_info: Option<SlConfigDedicatedEutraInfo>,
    pub requested_p_max_fr2: Option<RequestedPMaxFr2>,
}

impl DuToCuRrcInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 3)?;
        let cell_group_config = CellGroupConfig::aper_decode(data)?;
        let meas_gap_config = if optionals[0] {
            Some(MeasGapConfig::aper_decode(data)?)
        } else {
            None
        };
        let requested_p_max_fr1 = if optionals[1] {
            Some(aper::decode::decode_octetstring(data, None, None, false)?)
        } else {
            None
        };

        // Process the extension container
        let mut drx_long_cycle_start_offset: Option<DrxLongCycleStartOffset> = None;
        let mut selected_band_combination_index: Option<SelectedBandCombinationIndex> = None;
        let mut selected_feature_set_entry_index: Option<SelectedFeatureSetEntryIndex> = None;
        let mut ph_info_scg: Option<PhInfoScg> = None;
        let mut requested_band_combination_index: Option<RequestedBandCombinationIndex> = None;
        let mut requested_feature_set_entry_index: Option<RequestedFeatureSetEntryIndex> = None;
        let mut drx_config: Option<DrxConfig> = None;
        let mut pdcch_blind_detection_scg: Option<PdcchBlindDetectionScg> = None;
        let mut requested_pdcch_blind_detection_scg: Option<RequestedPdcchBlindDetectionScg> = None;
        let mut ph_info_mcg: Option<PhInfoMcg> = None;
        let mut meas_gap_sharing_config: Option<MeasGapSharingConfig> = None;
        let mut sl_phy_mac_rlc_config: Option<SlPhyMacRlcConfig> = None;
        let mut sl_config_dedicated_eutra_info: Option<SlConfigDedicatedEutraInfo> = None;
        let mut requested_p_max_fr2: Option<RequestedPMaxFr2> = None;

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    191 => {
                        drx_long_cycle_start_offset =
                            Some(DrxLongCycleStartOffset::aper_decode(data)?)
                    }
                    193 => {
                        selected_band_combination_index =
                            Some(SelectedBandCombinationIndex::aper_decode(data)?)
                    }
                    194 => {
                        selected_feature_set_entry_index =
                            Some(SelectedFeatureSetEntryIndex::aper_decode(data)?)
                    }
                    208 => ph_info_scg = Some(PhInfoScg::aper_decode(data)?),
                    209 => {
                        requested_band_combination_index =
                            Some(RequestedBandCombinationIndex::aper_decode(data)?)
                    }
                    210 => {
                        requested_feature_set_entry_index =
                            Some(RequestedFeatureSetEntryIndex::aper_decode(data)?)
                    }
                    212 => drx_config = Some(DrxConfig::aper_decode(data)?),
                    235 => {
                        pdcch_blind_detection_scg = Some(PdcchBlindDetectionScg::aper_decode(data)?)
                    }
                    236 => {
                        requested_pdcch_blind_detection_scg =
                            Some(RequestedPdcchBlindDetectionScg::aper_decode(data)?)
                    }
                    237 => ph_info_mcg = Some(PhInfoMcg::aper_decode(data)?),
                    238 => meas_gap_sharing_config = Some(MeasGapSharingConfig::aper_decode(data)?),
                    341 => sl_phy_mac_rlc_config = Some(SlPhyMacRlcConfig::aper_decode(data)?),
                    342 => {
                        sl_config_dedicated_eutra_info =
                            Some(SlConfigDedicatedEutraInfo::aper_decode(data)?)
                    }
                    211 => requested_p_max_fr2 = Some(RequestedPMaxFr2::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            cell_group_config,
            meas_gap_config,
            requested_p_max_fr1,
            drx_long_cycle_start_offset,
            selected_band_combination_index,
            selected_feature_set_entry_index,
            ph_info_scg,
            requested_band_combination_index,
            requested_feature_set_entry_index,
            drx_config,
            pdcch_blind_detection_scg,
            requested_pdcch_blind_detection_scg,
            ph_info_mcg,
            meas_gap_sharing_config,
            sl_phy_mac_rlc_config,
            sl_config_dedicated_eutra_info,
            requested_p_max_fr2,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.meas_gap_config.is_some());
        optionals.push(self.requested_p_max_fr1.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.cell_group_config.aper_encode(data)?;
        if let Some(x) = &self.meas_gap_config {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.requested_p_max_fr1 {
            aper::encode::encode_octetstring(data, None, None, false, &x, false)?;
        }

        Ok(())
    }
}

impl AperCodec for DuToCuRrcInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DuToCuRrcInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuToCuRrcInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuToCuRrcInformation");
            e
        })
    }
}
// DuplicationActivation
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum DuplicationActivation {
    Active,
    Inactive,
}

impl DuplicationActivation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for DuplicationActivation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DuplicationActivation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuplicationActivation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuplicationActivation");
            e
        })
    }
}
// DuplicationIndication
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum DuplicationIndication {
    True,
}

impl DuplicationIndication {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for DuplicationIndication {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DuplicationIndication::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuplicationIndication");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuplicationIndication");
            e
        })
    }
}
// DuplicationState
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum DuplicationState {
    Active,
    Inactive,
}

impl DuplicationState {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for DuplicationState {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DuplicationState::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuplicationState");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DuplicationState");
            e
        })
    }
}
// Dynamic5qiDescriptor
#[derive(Clone, Debug)]
pub struct Dynamic5qiDescriptor {
    pub qos_priority_level: u8,
    pub packet_delay_budget: PacketDelayBudget,
    pub packet_error_rate: PacketErrorRate,
    pub five_qi: Option<u8>,
    pub delay_critical: Option<DelayCritical>,
    pub averaging_window: Option<AveragingWindow>,
    pub max_data_burst_volume: Option<MaxDataBurstVolume>,
    pub extended_packet_delay_budget: Option<ExtendedPacketDelayBudget>,
    pub cn_packet_delay_budget_downlink: Option<ExtendedPacketDelayBudget>,
    pub cn_packet_delay_budget_uplink: Option<ExtendedPacketDelayBudget>,
}

impl Dynamic5qiDescriptor {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 5)?;
        let qos_priority_level =
            aper::decode::decode_integer(data, Some(1), Some(127), false)?.0 as u8;
        let packet_delay_budget = PacketDelayBudget::aper_decode(data)?;
        let packet_error_rate = PacketErrorRate::aper_decode(data)?;
        let five_qi = if optionals[0] {
            Some(aper::decode::decode_integer(data, Some(0), Some(255), true)?.0 as u8)
        } else {
            None
        };
        let delay_critical = if optionals[1] {
            Some(DelayCritical::aper_decode(data)?)
        } else {
            None
        };
        let averaging_window = if optionals[2] {
            Some(AveragingWindow::aper_decode(data)?)
        } else {
            None
        };
        let max_data_burst_volume = if optionals[3] {
            Some(MaxDataBurstVolume::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut extended_packet_delay_budget: Option<ExtendedPacketDelayBudget> = None;
        let mut cn_packet_delay_budget_downlink: Option<ExtendedPacketDelayBudget> = None;
        let mut cn_packet_delay_budget_uplink: Option<ExtendedPacketDelayBudget> = None;

        if optionals[4] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    363 => {
                        extended_packet_delay_budget =
                            Some(ExtendedPacketDelayBudget::aper_decode(data)?)
                    }
                    362 => {
                        cn_packet_delay_budget_downlink =
                            Some(ExtendedPacketDelayBudget::aper_decode(data)?)
                    }
                    369 => {
                        cn_packet_delay_budget_uplink =
                            Some(ExtendedPacketDelayBudget::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            qos_priority_level,
            packet_delay_budget,
            packet_error_rate,
            five_qi,
            delay_critical,
            averaging_window,
            max_data_burst_volume,
            extended_packet_delay_budget,
            cn_packet_delay_budget_downlink,
            cn_packet_delay_budget_uplink,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.five_qi.is_some());
        optionals.push(self.delay_critical.is_some());
        optionals.push(self.averaging_window.is_some());
        optionals.push(self.max_data_burst_volume.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(1),
            Some(127),
            false,
            self.qos_priority_level as i128,
            false,
        )?;
        self.packet_delay_budget.aper_encode(data)?;
        self.packet_error_rate.aper_encode(data)?;
        if let Some(x) = &self.five_qi {
            aper::encode::encode_integer(data, Some(0), Some(255), true, *x as i128, false)?;
        }
        if let Some(x) = &self.delay_critical {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.averaging_window {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.max_data_burst_volume {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for Dynamic5qiDescriptor {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Dynamic5qiDescriptor::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Dynamic5qiDescriptor");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Dynamic5qiDescriptor");
            e
        })
    }
}
// DynamicPqiDescriptor
#[derive(Clone, Debug)]
pub struct DynamicPqiDescriptor {
    pub resource_type: Option<ResourceType1>,
    pub qos_priority_level: u8,
    pub packet_delay_budget: PacketDelayBudget,
    pub packet_error_rate: PacketErrorRate,
    pub averaging_window: Option<AveragingWindow>,
    pub max_data_burst_volume: Option<MaxDataBurstVolume>,
}

impl DynamicPqiDescriptor {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 4)?;
        let resource_type = if optionals[0] {
            Some(ResourceType1::aper_decode(data)?)
        } else {
            None
        };
        let qos_priority_level =
            aper::decode::decode_integer(data, Some(1), Some(8), true)?.0 as u8;
        let packet_delay_budget = PacketDelayBudget::aper_decode(data)?;
        let packet_error_rate = PacketErrorRate::aper_decode(data)?;
        let averaging_window = if optionals[1] {
            Some(AveragingWindow::aper_decode(data)?)
        } else {
            None
        };
        let max_data_burst_volume = if optionals[2] {
            Some(MaxDataBurstVolume::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[3] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            resource_type,
            qos_priority_level,
            packet_delay_budget,
            packet_error_rate,
            averaging_window,
            max_data_burst_volume,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.resource_type.is_some());
        optionals.push(self.averaging_window.is_some());
        optionals.push(self.max_data_burst_volume.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        if let Some(x) = &self.resource_type {
            x.aper_encode(data)?;
        }
        aper::encode::encode_integer(
            data,
            Some(1),
            Some(8),
            true,
            self.qos_priority_level as i128,
            false,
        )?;
        self.packet_delay_budget.aper_encode(data)?;
        self.packet_error_rate.aper_encode(data)?;
        if let Some(x) = &self.averaging_window {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.max_data_burst_volume {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for DynamicPqiDescriptor {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DynamicPqiDescriptor::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DynamicPqiDescriptor");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DynamicPqiDescriptor");
            e
        })
    }
}
// ECidMeasurementQuantities
#[derive(Clone, Debug)]
pub struct ECidMeasurementQuantities(pub Vec<ECidMeasurementQuantitiesItem>);

impl ECidMeasurementQuantities {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                let _ = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _ = Criticality::aper_decode(data)?;
                let _ = aper::decode::decode_length_determinent(data, None, None, false)?;
                items.push(ECidMeasurementQuantitiesItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            let ie = &mut PerCodecData::new_aper();
            x.aper_encode(ie)?;
            aper::encode::encode_integer(data, Some(0), Some(65535), false, 415, false)?;
            Criticality::Reject.aper_encode(data)?;
            aper::encode::encode_length_determinent(data, None, None, false, ie.length_in_bytes())?;
            data.append_aligned(ie);
        }
        Ok(())
    }
}

impl AperCodec for ECidMeasurementQuantities {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ECidMeasurementQuantities::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ECidMeasurementQuantities");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ECidMeasurementQuantities");
            e
        })
    }
}
// ECidMeasurementQuantitiesItem
#[derive(Clone, Debug)]
pub struct ECidMeasurementQuantitiesItem {
    pub e_ci_dmeasurement_quantities_value: ECidMeasurementQuantitiesValue,
}

impl ECidMeasurementQuantitiesItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let e_ci_dmeasurement_quantities_value = ECidMeasurementQuantitiesValue::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            e_ci_dmeasurement_quantities_value,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.e_ci_dmeasurement_quantities_value.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for ECidMeasurementQuantitiesItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ECidMeasurementQuantitiesItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ECidMeasurementQuantitiesItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ECidMeasurementQuantitiesItem");
            e
        })
    }
}
// ECidMeasurementQuantitiesValue
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ECidMeasurementQuantitiesValue {
    Default,
    AngleOfArrivalNr,
}

impl ECidMeasurementQuantitiesValue {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for ECidMeasurementQuantitiesValue {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ECidMeasurementQuantitiesValue::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ECidMeasurementQuantitiesValue");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ECidMeasurementQuantitiesValue");
            e
        })
    }
}
// ECidMeasurementResult
#[derive(Clone, Debug)]
pub struct ECidMeasurementResult {
    pub geographical_coordinates: Option<GeographicalCoordinates>,
    pub measured_results_list: Option<ECidMeasuredResultsList>,
}

impl ECidMeasurementResult {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 3)?;
        let geographical_coordinates = if optionals[0] {
            Some(GeographicalCoordinates::aper_decode(data)?)
        } else {
            None
        };
        let measured_results_list = if optionals[1] {
            Some(ECidMeasuredResultsList::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            geographical_coordinates,
            measured_results_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.geographical_coordinates.is_some());
        optionals.push(self.measured_results_list.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        if let Some(x) = &self.geographical_coordinates {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.measured_results_list {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for ECidMeasurementResult {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ECidMeasurementResult::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ECidMeasurementResult");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ECidMeasurementResult");
            e
        })
    }
}
// ECidMeasuredResultsList
#[derive(Clone, Debug)]
pub struct ECidMeasuredResultsList(pub Vec<ECidMeasuredResultsItem>);

impl ECidMeasuredResultsList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(ECidMeasuredResultsItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for ECidMeasuredResultsList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ECidMeasuredResultsList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ECidMeasuredResultsList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ECidMeasuredResultsList");
            e
        })
    }
}
// ECidMeasuredResultsItem
#[derive(Clone, Debug)]
pub struct ECidMeasuredResultsItem {
    pub e_cid_measured_results_value: ECidMeasuredResultsValue,
}

impl ECidMeasuredResultsItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let e_cid_measured_results_value = ECidMeasuredResultsValue::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            e_cid_measured_results_value,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.e_cid_measured_results_value.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for ECidMeasuredResultsItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ECidMeasuredResultsItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ECidMeasuredResultsItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ECidMeasuredResultsItem");
            e
        })
    }
}
// ECidMeasuredResultsValue
#[derive(Clone, Debug)]
pub enum ECidMeasuredResultsValue {
    ValueAngleofArrivalNr(UlAoA),
}

impl ECidMeasuredResultsValue {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 1, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::ValueAngleofArrivalNr(UlAoA::aper_decode(data)?)),
            1 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::ValueAngleofArrivalNr(x) => {
                aper::encode::encode_choice_idx(data, 0, 1, false, 0, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for ECidMeasuredResultsValue {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ECidMeasuredResultsValue::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ECidMeasuredResultsValue");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ECidMeasuredResultsValue");
            e
        })
    }
}
// ECidReportCharacteristics
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ECidReportCharacteristics {
    OnDemand,
    Periodic,
}

impl ECidReportCharacteristics {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for ECidReportCharacteristics {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ECidReportCharacteristics::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ECidReportCharacteristics");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ECidReportCharacteristics");
            e
        })
    }
}
// EgressBhrlcchList
#[derive(Clone, Debug)]
pub struct EgressBhrlcchList(pub Vec<EgressBhrlcchItem>);

impl EgressBhrlcchList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(2), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(EgressBhrlcchItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(2), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for EgressBhrlcchList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EgressBhrlcchList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EgressBhrlcchList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EgressBhrlcchList");
            e
        })
    }
}
// EgressBhrlcchItem
#[derive(Clone, Debug)]
pub struct EgressBhrlcchItem {
    pub next_hop_bap_address: BapAddress,
    pub bhrlc_channel_id: BhrlcChannelId,
}

impl EgressBhrlcchItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let next_hop_bap_address = BapAddress::aper_decode(data)?;
        let bhrlc_channel_id = BhrlcChannelId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            next_hop_bap_address,
            bhrlc_channel_id,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.next_hop_bap_address.aper_encode(data)?;
        self.bhrlc_channel_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for EgressBhrlcchItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EgressBhrlcchItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EgressBhrlcchItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EgressBhrlcchItem");
            e
        })
    }
}
// EndpointIpAddressAndPort
#[derive(Clone, Debug)]
pub struct EndpointIpAddressAndPort {
    pub endpoint_ip_address: TransportLayerAddress,
    pub port_number: Option<PortNumber>,
}

impl EndpointIpAddressAndPort {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let endpoint_ip_address = TransportLayerAddress::aper_decode(data)?;

        // Process the extension container
        let mut port_number: Option<PortNumber> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    230 => port_number = Some(PortNumber::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            endpoint_ip_address,
            port_number,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.endpoint_ip_address.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for EndpointIpAddressAndPort {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EndpointIpAddressAndPort::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EndpointIpAddressAndPort");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EndpointIpAddressAndPort");
            e
        })
    }
}
// ExtendedAvailablePlmnList
#[derive(Clone, Debug)]
pub struct ExtendedAvailablePlmnList(pub Vec<ExtendedAvailablePlmnItem>);

impl ExtendedAvailablePlmnList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(6), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(ExtendedAvailablePlmnItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(6), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for ExtendedAvailablePlmnList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ExtendedAvailablePlmnList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExtendedAvailablePlmnList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExtendedAvailablePlmnList");
            e
        })
    }
}
// ExtendedAvailablePlmnItem
#[derive(Clone, Debug)]
pub struct ExtendedAvailablePlmnItem {
    pub plmn_identity: PlmnIdentity,
}

impl ExtendedAvailablePlmnItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let plmn_identity = PlmnIdentity::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { plmn_identity })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.plmn_identity.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for ExtendedAvailablePlmnItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ExtendedAvailablePlmnItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExtendedAvailablePlmnItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExtendedAvailablePlmnItem");
            e
        })
    }
}
// ExplicitFormat
#[derive(Clone, Debug)]
pub struct ExplicitFormat {
    pub permutation: Permutation,
    pub noof_downlink_symbols: Option<NoofDownlinkSymbols>,
    pub noof_uplink_symbols: Option<NoofUplinkSymbols>,
}

impl ExplicitFormat {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 3)?;
        let permutation = Permutation::aper_decode(data)?;
        let noof_downlink_symbols = if optionals[0] {
            Some(NoofDownlinkSymbols::aper_decode(data)?)
        } else {
            None
        };
        let noof_uplink_symbols = if optionals[1] {
            Some(NoofUplinkSymbols::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            permutation,
            noof_downlink_symbols,
            noof_uplink_symbols,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.noof_downlink_symbols.is_some());
        optionals.push(self.noof_uplink_symbols.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.permutation.aper_encode(data)?;
        if let Some(x) = &self.noof_downlink_symbols {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.noof_uplink_symbols {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for ExplicitFormat {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ExplicitFormat::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExplicitFormat");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExplicitFormat");
            e
        })
    }
}
// ExtendedServedPlmnsList
#[derive(Clone, Debug)]
pub struct ExtendedServedPlmnsList(pub Vec<ExtendedServedPlmnsItem>);

impl ExtendedServedPlmnsList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(6), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(ExtendedServedPlmnsItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(6), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for ExtendedServedPlmnsList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ExtendedServedPlmnsList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExtendedServedPlmnsList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExtendedServedPlmnsList");
            e
        })
    }
}
// ExtendedServedPlmnsItem
#[derive(Clone, Debug)]
pub struct ExtendedServedPlmnsItem {
    pub plmn_identity: PlmnIdentity,
    pub tai_slice_support_list: Option<SliceSupportList>,
    pub npn_support_info: Option<NpnSupportInfo>,
    pub extended_tai_slice_support_list: Option<ExtendedSliceSupportList>,
}

impl ExtendedServedPlmnsItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let plmn_identity = PlmnIdentity::aper_decode(data)?;
        let tai_slice_support_list = if optionals[0] {
            Some(SliceSupportList::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut npn_support_info: Option<NpnSupportInfo> = None;
        let mut extended_tai_slice_support_list: Option<ExtendedSliceSupportList> = None;

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    384 => npn_support_info = Some(NpnSupportInfo::aper_decode(data)?),
                    390 => {
                        extended_tai_slice_support_list =
                            Some(ExtendedSliceSupportList::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            plmn_identity,
            tai_slice_support_list,
            npn_support_info,
            extended_tai_slice_support_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.tai_slice_support_list.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.plmn_identity.aper_encode(data)?;
        if let Some(x) = &self.tai_slice_support_list {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for ExtendedServedPlmnsItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ExtendedServedPlmnsItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExtendedServedPlmnsItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExtendedServedPlmnsItem");
            e
        })
    }
}
// ExtendedSliceSupportList
#[derive(Clone, Debug)]
pub struct ExtendedSliceSupportList(pub Vec<SliceSupportItem>);

impl ExtendedSliceSupportList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SliceSupportItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65535), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for ExtendedSliceSupportList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ExtendedSliceSupportList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExtendedSliceSupportList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExtendedSliceSupportList");
            e
        })
    }
}
// EutraCellsList
#[derive(Clone, Debug)]
pub struct EutraCellsList(pub Vec<EutraCellsListItem>);

impl EutraCellsList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(256), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(EutraCellsListItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(256), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for EutraCellsList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutraCellsList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraCellsList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraCellsList");
            e
        })
    }
}
// EutraCellsListItem
#[derive(Clone, Debug)]
pub struct EutraCellsListItem {
    pub eutra_cell_id: EutraCellId,
    pub served_eutra_cells_information: ServedEutraCellsInformation,
}

impl EutraCellsListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let eutra_cell_id = EutraCellId::aper_decode(data)?;
        let served_eutra_cells_information = ServedEutraCellsInformation::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            eutra_cell_id,
            served_eutra_cells_information,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.eutra_cell_id.aper_encode(data)?;
        self.served_eutra_cells_information.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for EutraCellsListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutraCellsListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraCellsListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraCellsListItem");
            e
        })
    }
}
// EutraCellId
#[derive(Clone, Debug)]
pub struct EutraCellId(pub BitString);

impl EutraCellId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(28),
            Some(28),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(28), Some(28), false, &self.0, false)
    }
}

impl AperCodec for EutraCellId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutraCellId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraCellId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraCellId");
            e
        })
    }
}
// EutraCoexFddInfo
#[derive(Clone, Debug)]
pub struct EutraCoexFddInfo {
    pub ul_earfcn: Option<ExtendedEarfcn>,
    pub dl_earfcn: ExtendedEarfcn,
    pub ul_transmission_bandwidth: Option<EutraTransmissionBandwidth>,
    pub dl_transmission_bandwidth: EutraTransmissionBandwidth,
}

impl EutraCoexFddInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 3)?;
        let ul_earfcn = if optionals[0] {
            Some(ExtendedEarfcn::aper_decode(data)?)
        } else {
            None
        };
        let dl_earfcn = ExtendedEarfcn::aper_decode(data)?;
        let ul_transmission_bandwidth = if optionals[1] {
            Some(EutraTransmissionBandwidth::aper_decode(data)?)
        } else {
            None
        };
        let dl_transmission_bandwidth = EutraTransmissionBandwidth::aper_decode(data)?;

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ul_earfcn,
            dl_earfcn,
            ul_transmission_bandwidth,
            dl_transmission_bandwidth,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.ul_earfcn.is_some());
        optionals.push(self.ul_transmission_bandwidth.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        if let Some(x) = &self.ul_earfcn {
            x.aper_encode(data)?;
        }
        self.dl_earfcn.aper_encode(data)?;
        if let Some(x) = &self.ul_transmission_bandwidth {
            x.aper_encode(data)?;
        }
        self.dl_transmission_bandwidth.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for EutraCoexFddInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutraCoexFddInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraCoexFddInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraCoexFddInfo");
            e
        })
    }
}
// EutraCoexModeInfo
#[derive(Clone, Debug)]
pub enum EutraCoexModeInfo {
    Fdd(EutraCoexFddInfo),
    Tdd(EutraCoexTddInfo),
}

impl EutraCoexModeInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 1, true)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::Fdd(EutraCoexFddInfo::aper_decode(data)?)),
            1 => Ok(Self::Tdd(EutraCoexTddInfo::aper_decode(data)?)),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::Fdd(x) => {
                aper::encode::encode_choice_idx(data, 0, 1, true, 0, false)?;
                x.aper_encode(data)
            }
            Self::Tdd(x) => {
                aper::encode::encode_choice_idx(data, 0, 1, true, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for EutraCoexModeInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutraCoexModeInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraCoexModeInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraCoexModeInfo");
            e
        })
    }
}
// EutraCoexTddInfo
#[derive(Clone, Debug)]
pub struct EutraCoexTddInfo {
    pub earfcn: ExtendedEarfcn,
    pub transmission_bandwidth: EutraTransmissionBandwidth,
    pub subframe_assignment: EutraSubframeAssignment,
    pub special_subframe_info: EutraSpecialSubframeInfo,
}

impl EutraCoexTddInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let earfcn = ExtendedEarfcn::aper_decode(data)?;
        let transmission_bandwidth = EutraTransmissionBandwidth::aper_decode(data)?;
        let subframe_assignment = EutraSubframeAssignment::aper_decode(data)?;
        let special_subframe_info = EutraSpecialSubframeInfo::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            earfcn,
            transmission_bandwidth,
            subframe_assignment,
            special_subframe_info,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.earfcn.aper_encode(data)?;
        self.transmission_bandwidth.aper_encode(data)?;
        self.subframe_assignment.aper_encode(data)?;
        self.special_subframe_info.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for EutraCoexTddInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutraCoexTddInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraCoexTddInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraCoexTddInfo");
            e
        })
    }
}
// EutraCyclicPrefixDl
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum EutraCyclicPrefixDl {
    Normal,
    Extended,
}

impl EutraCyclicPrefixDl {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for EutraCyclicPrefixDl {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutraCyclicPrefixDl::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraCyclicPrefixDl");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraCyclicPrefixDl");
            e
        })
    }
}
// EutraCyclicPrefixUl
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum EutraCyclicPrefixUl {
    Normal,
    Extended,
}

impl EutraCyclicPrefixUl {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for EutraCyclicPrefixUl {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutraCyclicPrefixUl::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraCyclicPrefixUl");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraCyclicPrefixUl");
            e
        })
    }
}
// EutraPrachConfiguration
#[derive(Clone, Debug)]
pub struct EutraPrachConfiguration {
    pub root_sequence_index: u16,
    pub zero_correlation_index: u8,
    pub high_speed_flag: bool,
    pub prach_freq_offset: u8,
    pub prach_config_index: Option<u8>,
}

impl EutraPrachConfiguration {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let root_sequence_index =
            aper::decode::decode_integer(data, Some(0), Some(837), false)?.0 as u16;
        let zero_correlation_index =
            aper::decode::decode_integer(data, Some(0), Some(15), false)?.0 as u8;
        let high_speed_flag = aper::decode::decode_bool(data)?;
        let prach_freq_offset =
            aper::decode::decode_integer(data, Some(0), Some(94), false)?.0 as u8;
        let prach_config_index = if optionals[0] {
            Some(aper::decode::decode_integer(data, Some(0), Some(63), false)?.0 as u8)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            root_sequence_index,
            zero_correlation_index,
            high_speed_flag,
            prach_freq_offset,
            prach_config_index,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.prach_config_index.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(837),
            false,
            self.root_sequence_index as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(15),
            false,
            self.zero_correlation_index as i128,
            false,
        )?;
        aper::encode::encode_bool(data, self.high_speed_flag)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(94),
            false,
            self.prach_freq_offset as i128,
            false,
        )?;
        if let Some(x) = &self.prach_config_index {
            aper::encode::encode_integer(data, Some(0), Some(63), false, *x as i128, false)?;
        }

        Ok(())
    }
}

impl AperCodec for EutraPrachConfiguration {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutraPrachConfiguration::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraPrachConfiguration");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraPrachConfiguration");
            e
        })
    }
}
// EutraSpecialSubframeInfo
#[derive(Clone, Debug)]
pub struct EutraSpecialSubframeInfo {
    pub special_subframe_patterns: EutraSpecialSubframePatterns,
    pub cyclic_prefix_dl: EutraCyclicPrefixDl,
    pub cyclic_prefix_ul: EutraCyclicPrefixUl,
}

impl EutraSpecialSubframeInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let special_subframe_patterns = EutraSpecialSubframePatterns::aper_decode(data)?;
        let cyclic_prefix_dl = EutraCyclicPrefixDl::aper_decode(data)?;
        let cyclic_prefix_ul = EutraCyclicPrefixUl::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            special_subframe_patterns,
            cyclic_prefix_dl,
            cyclic_prefix_ul,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.special_subframe_patterns.aper_encode(data)?;
        self.cyclic_prefix_dl.aper_encode(data)?;
        self.cyclic_prefix_ul.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for EutraSpecialSubframeInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutraSpecialSubframeInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraSpecialSubframeInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraSpecialSubframeInfo");
            e
        })
    }
}
// EutraSpecialSubframePatterns
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum EutraSpecialSubframePatterns {
    Ssp0,
    Ssp1,
    Ssp2,
    Ssp3,
    Ssp4,
    Ssp5,
    Ssp6,
    Ssp7,
    Ssp8,
    Ssp9,
    Ssp10,
}

impl EutraSpecialSubframePatterns {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(10), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(10), true, *self as i128, false)
    }
}

impl AperCodec for EutraSpecialSubframePatterns {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutraSpecialSubframePatterns::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraSpecialSubframePatterns");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraSpecialSubframePatterns");
            e
        })
    }
}
// EutraSubframeAssignment
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum EutraSubframeAssignment {
    Sa0,
    Sa1,
    Sa2,
    Sa3,
    Sa4,
    Sa5,
    Sa6,
}

impl EutraSubframeAssignment {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(6), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(6), true, *self as i128, false)
    }
}

impl AperCodec for EutraSubframeAssignment {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutraSubframeAssignment::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraSubframeAssignment");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraSubframeAssignment");
            e
        })
    }
}
// EutraTransmissionBandwidth
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum EutraTransmissionBandwidth {
    Bw6,
    Bw15,
    Bw25,
    Bw50,
    Bw75,
    Bw100,
}

impl EutraTransmissionBandwidth {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(5), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(5), true, *self as i128, false)
    }
}

impl AperCodec for EutraTransmissionBandwidth {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutraTransmissionBandwidth::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraTransmissionBandwidth");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraTransmissionBandwidth");
            e
        })
    }
}
// EutranQos
#[derive(Clone, Debug)]
pub struct EutranQos {
    pub qci: Qci,
    pub allocation_and_retention_priority: AllocationAndRetentionPriority,
    pub gbr_qos_information: Option<GbrQosInformation>,
}

impl EutranQos {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let qci = Qci::aper_decode(data)?;
        let allocation_and_retention_priority = AllocationAndRetentionPriority::aper_decode(data)?;
        let gbr_qos_information = if optionals[0] {
            Some(GbrQosInformation::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            qci,
            allocation_and_retention_priority,
            gbr_qos_information,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.gbr_qos_information.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.qci.aper_encode(data)?;
        self.allocation_and_retention_priority.aper_encode(data)?;
        if let Some(x) = &self.gbr_qos_information {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for EutranQos {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutranQos::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutranQos");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutranQos");
            e
        })
    }
}
// ExecuteDuplication
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ExecuteDuplication {
    True,
}

impl ExecuteDuplication {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for ExecuteDuplication {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ExecuteDuplication::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExecuteDuplication");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExecuteDuplication");
            e
        })
    }
}
// ExtendedEarfcn
#[derive(Clone, Copy, Debug)]
pub struct ExtendedEarfcn(pub u32);

impl ExtendedEarfcn {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(262143), false)?.0 as u32,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(262143), false, self.0 as i128, false)
    }
}

impl AperCodec for ExtendedEarfcn {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ExtendedEarfcn::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExtendedEarfcn");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExtendedEarfcn");
            e
        })
    }
}
// EutraModeInfo
#[derive(Clone, Debug)]
pub enum EutraModeInfo {
    Eutrafdd(EutraFddInfo),
    Eutratdd(EutraTddInfo),
}

impl EutraModeInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::Eutrafdd(EutraFddInfo::aper_decode(data)?)),
            1 => Ok(Self::Eutratdd(EutraTddInfo::aper_decode(data)?)),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::Eutrafdd(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::Eutratdd(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for EutraModeInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutraModeInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraModeInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraModeInfo");
            e
        })
    }
}
// EutraNrCellResourceCoordinationReqContainer
#[derive(Clone, Debug)]
pub struct EutraNrCellResourceCoordinationReqContainer(pub Vec<u8>);

impl EutraNrCellResourceCoordinationReqContainer {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for EutraNrCellResourceCoordinationReqContainer {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutraNrCellResourceCoordinationReqContainer::decode_inner(data).map_err(
            |mut e: PerCodecError| {
                e.push_context("EutraNrCellResourceCoordinationReqContainer");
                e
            },
        )
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraNrCellResourceCoordinationReqContainer");
            e
        })
    }
}
// EutraNrCellResourceCoordinationReqAckContainer
#[derive(Clone, Debug)]
pub struct EutraNrCellResourceCoordinationReqAckContainer(pub Vec<u8>);

impl EutraNrCellResourceCoordinationReqAckContainer {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for EutraNrCellResourceCoordinationReqAckContainer {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutraNrCellResourceCoordinationReqAckContainer::decode_inner(data).map_err(
            |mut e: PerCodecError| {
                e.push_context("EutraNrCellResourceCoordinationReqAckContainer");
                e
            },
        )
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraNrCellResourceCoordinationReqAckContainer");
            e
        })
    }
}
// EutraFddInfo
#[derive(Clone, Debug)]
pub struct EutraFddInfo {
    pub ul_offset_to_point_a: OffsetToPointA,
    pub dl_offset_to_point_a: OffsetToPointA,
}

impl EutraFddInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let ul_offset_to_point_a = OffsetToPointA::aper_decode(data)?;
        let dl_offset_to_point_a = OffsetToPointA::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ul_offset_to_point_a,
            dl_offset_to_point_a,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.ul_offset_to_point_a.aper_encode(data)?;
        self.dl_offset_to_point_a.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for EutraFddInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutraFddInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraFddInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraFddInfo");
            e
        })
    }
}
// EutraTddInfo
#[derive(Clone, Debug)]
pub struct EutraTddInfo {
    pub offset_to_point_a: OffsetToPointA,
}

impl EutraTddInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let offset_to_point_a = OffsetToPointA::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { offset_to_point_a })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.offset_to_point_a.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for EutraTddInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EutraTddInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraTddInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EutraTddInfo");
            e
        })
    }
}
// EventType
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum EventType {
    OnDemand,
    Periodic,
    Stop,
}

impl EventType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), true, *self as i128, false)
    }
}

impl AperCodec for EventType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        EventType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EventType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("EventType");
            e
        })
    }
}
// ExtendedPacketDelayBudget
#[derive(Clone, Copy, Debug)]
pub struct ExtendedPacketDelayBudget(pub u16);

impl ExtendedPacketDelayBudget {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(65535), true)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(65535), true, self.0 as i128, false)
    }
}

impl AperCodec for ExtendedPacketDelayBudget {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ExtendedPacketDelayBudget::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExtendedPacketDelayBudget");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExtendedPacketDelayBudget");
            e
        })
    }
}
// F1cPathNsa
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum F1cPathNsa {
    Lte,
    Nr,
    Both,
}

impl F1cPathNsa {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), false, *self as i128, false)
    }
}

impl AperCodec for F1cPathNsa {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        F1cPathNsa::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("F1cPathNsa");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("F1cPathNsa");
            e
        })
    }
}
// F1cTransferPath
#[derive(Clone, Debug)]
pub struct F1cTransferPath {
    pub f1c_path_nsa: F1cPathNsa,
}

impl F1cTransferPath {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let f1c_path_nsa = F1cPathNsa::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { f1c_path_nsa })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.f1c_path_nsa.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for F1cTransferPath {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        F1cTransferPath::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("F1cTransferPath");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("F1cTransferPath");
            e
        })
    }
}
// FddInfo
#[derive(Clone, Debug)]
pub struct FddInfo {
    pub ul_nr_freq_info: NrFreqInfo,
    pub dl_nr_freq_info: NrFreqInfo,
    pub ul_transmission_bandwidth: TransmissionBandwidth,
    pub dl_transmission_bandwidth: TransmissionBandwidth,
    pub ul_carrier_list: Option<NrCarrierList>,
    pub dl_carrier_list: Option<NrCarrierList>,
}

impl FddInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let ul_nr_freq_info = NrFreqInfo::aper_decode(data)?;
        let dl_nr_freq_info = NrFreqInfo::aper_decode(data)?;
        let ul_transmission_bandwidth = TransmissionBandwidth::aper_decode(data)?;
        let dl_transmission_bandwidth = TransmissionBandwidth::aper_decode(data)?;

        // Process the extension container
        let mut ul_carrier_list: Option<NrCarrierList> = None;
        let mut dl_carrier_list: Option<NrCarrierList> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    355 => ul_carrier_list = Some(NrCarrierList::aper_decode(data)?),
                    389 => dl_carrier_list = Some(NrCarrierList::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ul_nr_freq_info,
            dl_nr_freq_info,
            ul_transmission_bandwidth,
            dl_transmission_bandwidth,
            ul_carrier_list,
            dl_carrier_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.ul_nr_freq_info.aper_encode(data)?;
        self.dl_nr_freq_info.aper_encode(data)?;
        self.ul_transmission_bandwidth.aper_encode(data)?;
        self.dl_transmission_bandwidth.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for FddInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        FddInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FddInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FddInfo");
            e
        })
    }
}
// FlowsMappedToDrbList
#[derive(Clone, Debug)]
pub struct FlowsMappedToDrbList(pub Vec<FlowsMappedToDrbItem>);

impl FlowsMappedToDrbList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(FlowsMappedToDrbItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for FlowsMappedToDrbList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        FlowsMappedToDrbList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FlowsMappedToDrbList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FlowsMappedToDrbList");
            e
        })
    }
}
// FlowsMappedToDrbItem
#[derive(Clone, Debug)]
pub struct FlowsMappedToDrbItem {
    pub qos_flow_identifier: QosFlowIdentifier,
    pub qos_flow_level_qos_parameters: QosFlowLevelQosParameters,
    pub qos_flow_mapping_indication: Option<QosFlowMappingIndication>,
    pub tsc_traffic_characteristics: Option<TscTrafficCharacteristics>,
}

impl FlowsMappedToDrbItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let qos_flow_identifier = QosFlowIdentifier::aper_decode(data)?;
        let qos_flow_level_qos_parameters = QosFlowLevelQosParameters::aper_decode(data)?;

        // Process the extension container
        let mut qos_flow_mapping_indication: Option<QosFlowMappingIndication> = None;
        let mut tsc_traffic_characteristics: Option<TscTrafficCharacteristics> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    183 => {
                        qos_flow_mapping_indication =
                            Some(QosFlowMappingIndication::aper_decode(data)?)
                    }
                    364 => {
                        tsc_traffic_characteristics =
                            Some(TscTrafficCharacteristics::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            qos_flow_identifier,
            qos_flow_level_qos_parameters,
            qos_flow_mapping_indication,
            tsc_traffic_characteristics,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.qos_flow_identifier.aper_encode(data)?;
        self.qos_flow_level_qos_parameters.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for FlowsMappedToDrbItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        FlowsMappedToDrbItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FlowsMappedToDrbItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FlowsMappedToDrbItem");
            e
        })
    }
}
// Fr1Bandwidth
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum Fr1Bandwidth {
    Bw5,
    Bw10,
    Bw20,
    Bw40,
    Bw50,
    Bw80,
    Bw100,
}

impl Fr1Bandwidth {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(6), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(6), true, *self as i128, false)
    }
}

impl AperCodec for Fr1Bandwidth {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Fr1Bandwidth::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Fr1Bandwidth");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Fr1Bandwidth");
            e
        })
    }
}
// Fr2Bandwidth
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum Fr2Bandwidth {
    Bw50,
    Bw100,
    Bw200,
    Bw400,
}

impl Fr2Bandwidth {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for Fr2Bandwidth {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Fr2Bandwidth::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Fr2Bandwidth");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Fr2Bandwidth");
            e
        })
    }
}
// FreqBandNrItem
#[derive(Clone, Debug)]
pub struct FreqBandNrItem {
    pub freq_band_indicator_nr: u16,
    pub supported_sul_band_list: Vec<SupportedSulFreqBandItem>,
}

impl FreqBandNrItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let freq_band_indicator_nr =
            aper::decode::decode_integer(data, Some(1), Some(1024), true)?.0 as u16;
        let supported_sul_band_list = {
            let length = aper::decode::decode_length_determinent(data, Some(0), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SupportedSulFreqBandItem::aper_decode(data)?);
            }
            items
        };

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            freq_band_indicator_nr,
            supported_sul_band_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(1),
            Some(1024),
            true,
            self.freq_band_indicator_nr as i128,
            false,
        )?;
        aper::encode::encode_length_determinent(
            data,
            Some(0),
            Some(32),
            false,
            self.supported_sul_band_list.len(),
        )?;
        for x in &self.supported_sul_band_list {
            x.aper_encode(data)?;
        }
        Ok(())?;

        Ok(())
    }
}

impl AperCodec for FreqBandNrItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        FreqBandNrItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FreqBandNrItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FreqBandNrItem");
            e
        })
    }
}
// FreqDomainLength
#[derive(Clone, Debug)]
pub enum FreqDomainLength {
    L839(L839Info),
    L139(L139Info),
}

impl FreqDomainLength {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::L839(L839Info::aper_decode(data)?)),
            1 => Ok(Self::L139(L139Info::aper_decode(data)?)),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::L839(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::L139(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for FreqDomainLength {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        FreqDomainLength::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FreqDomainLength");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FreqDomainLength");
            e
        })
    }
}
// FrequencyShift7p5khz
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum FrequencyShift7p5khz {
    False,
    True,
}

impl FrequencyShift7p5khz {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for FrequencyShift7p5khz {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        FrequencyShift7p5khz::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FrequencyShift7p5khz");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FrequencyShift7p5khz");
            e
        })
    }
}
// FullConfiguration
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum FullConfiguration {
    Full,
}

impl FullConfiguration {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for FullConfiguration {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        FullConfiguration::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FullConfiguration");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FullConfiguration");
            e
        })
    }
}
// FlowsMappedToSlDrbList
#[derive(Clone, Debug)]
pub struct FlowsMappedToSlDrbList(pub Vec<FlowsMappedToSlDrbItem>);

impl FlowsMappedToSlDrbList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(2048), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(FlowsMappedToSlDrbItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(2048), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for FlowsMappedToSlDrbList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        FlowsMappedToSlDrbList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FlowsMappedToSlDrbList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FlowsMappedToSlDrbList");
            e
        })
    }
}
// FlowsMappedToSlDrbItem
#[derive(Clone, Debug)]
pub struct FlowsMappedToSlDrbItem {
    pub pc_5_qos_flow_identifier: Pc5QosFlowIdentifier,
}

impl FlowsMappedToSlDrbItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let pc_5_qos_flow_identifier = Pc5QosFlowIdentifier::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            pc_5_qos_flow_identifier,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.pc_5_qos_flow_identifier.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for FlowsMappedToSlDrbItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        FlowsMappedToSlDrbItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FlowsMappedToSlDrbItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FlowsMappedToSlDrbItem");
            e
        })
    }
}
// GbrQosInformation
#[derive(Clone, Debug)]
pub struct GbrQosInformation {
    pub e_rab_maximum_bitrate_dl: BitRate,
    pub e_rab_maximum_bitrate_ul: BitRate,
    pub e_rab_guaranteed_bitrate_dl: BitRate,
    pub e_rab_guaranteed_bitrate_ul: BitRate,
}

impl GbrQosInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let e_rab_maximum_bitrate_dl = BitRate::aper_decode(data)?;
        let e_rab_maximum_bitrate_ul = BitRate::aper_decode(data)?;
        let e_rab_guaranteed_bitrate_dl = BitRate::aper_decode(data)?;
        let e_rab_guaranteed_bitrate_ul = BitRate::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            e_rab_maximum_bitrate_dl,
            e_rab_maximum_bitrate_ul,
            e_rab_guaranteed_bitrate_dl,
            e_rab_guaranteed_bitrate_ul,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.e_rab_maximum_bitrate_dl.aper_encode(data)?;
        self.e_rab_maximum_bitrate_ul.aper_encode(data)?;
        self.e_rab_guaranteed_bitrate_dl.aper_encode(data)?;
        self.e_rab_guaranteed_bitrate_ul.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for GbrQosInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GbrQosInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GbrQosInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GbrQosInformation");
            e
        })
    }
}
// GbrQosFlowInformation
#[derive(Clone, Debug)]
pub struct GbrQosFlowInformation {
    pub max_flow_bit_rate_downlink: BitRate,
    pub max_flow_bit_rate_uplink: BitRate,
    pub guaranteed_flow_bit_rate_downlink: BitRate,
    pub guaranteed_flow_bit_rate_uplink: BitRate,
    pub max_packet_loss_rate_downlink: Option<MaxPacketLossRate>,
    pub max_packet_loss_rate_uplink: Option<MaxPacketLossRate>,
    pub alternative_qos_para_set_list: Option<AlternativeQosParaSetList>,
}

impl GbrQosFlowInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 3)?;
        let max_flow_bit_rate_downlink = BitRate::aper_decode(data)?;
        let max_flow_bit_rate_uplink = BitRate::aper_decode(data)?;
        let guaranteed_flow_bit_rate_downlink = BitRate::aper_decode(data)?;
        let guaranteed_flow_bit_rate_uplink = BitRate::aper_decode(data)?;
        let max_packet_loss_rate_downlink = if optionals[0] {
            Some(MaxPacketLossRate::aper_decode(data)?)
        } else {
            None
        };
        let max_packet_loss_rate_uplink = if optionals[1] {
            Some(MaxPacketLossRate::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut alternative_qos_para_set_list: Option<AlternativeQosParaSetList> = None;

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    343 => {
                        alternative_qos_para_set_list =
                            Some(AlternativeQosParaSetList::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            max_flow_bit_rate_downlink,
            max_flow_bit_rate_uplink,
            guaranteed_flow_bit_rate_downlink,
            guaranteed_flow_bit_rate_uplink,
            max_packet_loss_rate_downlink,
            max_packet_loss_rate_uplink,
            alternative_qos_para_set_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.max_packet_loss_rate_downlink.is_some());
        optionals.push(self.max_packet_loss_rate_uplink.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.max_flow_bit_rate_downlink.aper_encode(data)?;
        self.max_flow_bit_rate_uplink.aper_encode(data)?;
        self.guaranteed_flow_bit_rate_downlink.aper_encode(data)?;
        self.guaranteed_flow_bit_rate_uplink.aper_encode(data)?;
        if let Some(x) = &self.max_packet_loss_rate_downlink {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.max_packet_loss_rate_uplink {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for GbrQosFlowInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GbrQosFlowInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GbrQosFlowInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GbrQosFlowInformation");
            e
        })
    }
}
// CgConfig
#[derive(Clone, Debug)]
pub struct CgConfig(pub Vec<u8>);

impl CgConfig {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for CgConfig {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CgConfig::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CgConfig");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CgConfig");
            e
        })
    }
}
// GeographicalCoordinates
#[derive(Clone, Debug)]
pub struct GeographicalCoordinates {
    pub trp_position_definition_type: TrpPositionDefinitionType,
    pub dlprs_resource_coordinates: Option<DlprsResourceCoordinates>,
}

impl GeographicalCoordinates {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let trp_position_definition_type = TrpPositionDefinitionType::aper_decode(data)?;
        let dlprs_resource_coordinates = if optionals[0] {
            Some(DlprsResourceCoordinates::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            trp_position_definition_type,
            dlprs_resource_coordinates,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.dlprs_resource_coordinates.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.trp_position_definition_type.aper_encode(data)?;
        if let Some(x) = &self.dlprs_resource_coordinates {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for GeographicalCoordinates {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GeographicalCoordinates::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GeographicalCoordinates");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GeographicalCoordinates");
            e
        })
    }
}
// GnbCuMeasurementId
#[derive(Clone, Copy, Debug)]
pub struct GnbCuMeasurementId(pub u16);

impl GnbCuMeasurementId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(4095), true)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(4095), true, self.0 as i128, false)
    }
}

impl AperCodec for GnbCuMeasurementId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbCuMeasurementId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuMeasurementId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuMeasurementId");
            e
        })
    }
}
// GnbDuMeasurementId
#[derive(Clone, Copy, Debug)]
pub struct GnbDuMeasurementId(pub u16);

impl GnbDuMeasurementId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(4095), true)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(4095), true, self.0 as i128, false)
    }
}

impl AperCodec for GnbDuMeasurementId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbDuMeasurementId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuMeasurementId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuMeasurementId");
            e
        })
    }
}
// GnbCuSystemInformation
#[derive(Clone, Debug)]
pub struct GnbCuSystemInformation {
    pub sibtypetobeupdatedlist: Vec<SibtypetobeupdatedListItem>,
    pub system_information_area_id: Option<SystemInformationAreaId>,
}

impl GnbCuSystemInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let sibtypetobeupdatedlist = {
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SibtypetobeupdatedListItem::aper_decode(data)?);
            }
            items
        };

        // Process the extension container
        let mut system_information_area_id: Option<SystemInformationAreaId> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    239 => {
                        system_information_area_id =
                            Some(SystemInformationAreaId::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            sibtypetobeupdatedlist,
            system_information_area_id,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        aper::encode::encode_length_determinent(
            data,
            Some(1),
            Some(32),
            false,
            self.sibtypetobeupdatedlist.len(),
        )?;
        for x in &self.sibtypetobeupdatedlist {
            x.aper_encode(data)?;
        }
        Ok(())?;

        Ok(())
    }
}

impl AperCodec for GnbCuSystemInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbCuSystemInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuSystemInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuSystemInformation");
            e
        })
    }
}
// GnbCuTnlAssociationSetupItem
#[derive(Clone, Debug)]
pub struct GnbCuTnlAssociationSetupItem {
    pub tnl_association_transport_layer_address: CpTransportLayerAddress,
}

impl GnbCuTnlAssociationSetupItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let tnl_association_transport_layer_address = CpTransportLayerAddress::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            tnl_association_transport_layer_address,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.tnl_association_transport_layer_address
            .aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for GnbCuTnlAssociationSetupItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbCuTnlAssociationSetupItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuTnlAssociationSetupItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuTnlAssociationSetupItem");
            e
        })
    }
}
// GnbCuTnlAssociationFailedToSetupItem
#[derive(Clone, Debug)]
pub struct GnbCuTnlAssociationFailedToSetupItem {
    pub tnl_association_transport_layer_address: CpTransportLayerAddress,
    pub cause: Cause,
}

impl GnbCuTnlAssociationFailedToSetupItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let tnl_association_transport_layer_address = CpTransportLayerAddress::aper_decode(data)?;
        let cause = Cause::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            tnl_association_transport_layer_address,
            cause,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.tnl_association_transport_layer_address
            .aper_encode(data)?;
        self.cause.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for GnbCuTnlAssociationFailedToSetupItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbCuTnlAssociationFailedToSetupItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuTnlAssociationFailedToSetupItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuTnlAssociationFailedToSetupItem");
            e
        })
    }
}
// GnbCuTnlAssociationToAddItem
#[derive(Clone, Debug)]
pub struct GnbCuTnlAssociationToAddItem {
    pub tnl_association_transport_layer_address: CpTransportLayerAddress,
    pub tnl_association_usage: TnlAssociationUsage,
}

impl GnbCuTnlAssociationToAddItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let tnl_association_transport_layer_address = CpTransportLayerAddress::aper_decode(data)?;
        let tnl_association_usage = TnlAssociationUsage::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            tnl_association_transport_layer_address,
            tnl_association_usage,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.tnl_association_transport_layer_address
            .aper_encode(data)?;
        self.tnl_association_usage.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for GnbCuTnlAssociationToAddItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbCuTnlAssociationToAddItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuTnlAssociationToAddItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuTnlAssociationToAddItem");
            e
        })
    }
}
// GnbCuTnlAssociationToRemoveItem
#[derive(Clone, Debug)]
pub struct GnbCuTnlAssociationToRemoveItem {
    pub tnl_association_transport_layer_address: CpTransportLayerAddress,
    pub tnl_association_transport_layer_address_gnb_du: Option<CpTransportLayerAddress>,
}

impl GnbCuTnlAssociationToRemoveItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let tnl_association_transport_layer_address = CpTransportLayerAddress::aper_decode(data)?;

        // Process the extension container
        let mut tnl_association_transport_layer_address_gnb_du: Option<CpTransportLayerAddress> =
            None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    229 => {
                        tnl_association_transport_layer_address_gnb_du =
                            Some(CpTransportLayerAddress::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            tnl_association_transport_layer_address,
            tnl_association_transport_layer_address_gnb_du,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.tnl_association_transport_layer_address
            .aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for GnbCuTnlAssociationToRemoveItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbCuTnlAssociationToRemoveItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuTnlAssociationToRemoveItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuTnlAssociationToRemoveItem");
            e
        })
    }
}
// GnbCuTnlAssociationToUpdateItem
#[derive(Clone, Debug)]
pub struct GnbCuTnlAssociationToUpdateItem {
    pub tnl_association_transport_layer_address: CpTransportLayerAddress,
    pub tnl_association_usage: Option<TnlAssociationUsage>,
}

impl GnbCuTnlAssociationToUpdateItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let tnl_association_transport_layer_address = CpTransportLayerAddress::aper_decode(data)?;
        let tnl_association_usage = if optionals[0] {
            Some(TnlAssociationUsage::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            tnl_association_transport_layer_address,
            tnl_association_usage,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.tnl_association_usage.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.tnl_association_transport_layer_address
            .aper_encode(data)?;
        if let Some(x) = &self.tnl_association_usage {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for GnbCuTnlAssociationToUpdateItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbCuTnlAssociationToUpdateItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuTnlAssociationToUpdateItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuTnlAssociationToUpdateItem");
            e
        })
    }
}
// GnbCuUeF1apId
#[derive(Clone, Copy, Debug)]
pub struct GnbCuUeF1apId(pub u32);

impl GnbCuUeF1apId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(4294967295), false)?.0 as u32,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(4294967295),
            false,
            self.0 as i128,
            false,
        )
    }
}

impl AperCodec for GnbCuUeF1apId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbCuUeF1apId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuUeF1apId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuUeF1apId");
            e
        })
    }
}
// GnbDuCellResourceConfiguration
#[derive(Clone, Debug)]
pub struct GnbDuCellResourceConfiguration {
    pub subcarrier_spacing: SubcarrierSpacing,
    pub du_f_transmission_periodicity: Option<DuFTransmissionPeriodicity>,
    pub du_f_slot_config_list: Option<DuFSlotConfigList>,
    pub hsna_transmission_periodicity: HsnaTransmissionPeriodicity,
    pub hnsa_slot_config_list: Option<HsnaSlotConfigList>,
}

impl GnbDuCellResourceConfiguration {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 4)?;
        let subcarrier_spacing = SubcarrierSpacing::aper_decode(data)?;
        let du_f_transmission_periodicity = if optionals[0] {
            Some(DuFTransmissionPeriodicity::aper_decode(data)?)
        } else {
            None
        };
        let du_f_slot_config_list = if optionals[1] {
            Some(DuFSlotConfigList::aper_decode(data)?)
        } else {
            None
        };
        let hsna_transmission_periodicity = HsnaTransmissionPeriodicity::aper_decode(data)?;
        let hnsa_slot_config_list = if optionals[2] {
            Some(HsnaSlotConfigList::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[3] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            subcarrier_spacing,
            du_f_transmission_periodicity,
            du_f_slot_config_list,
            hsna_transmission_periodicity,
            hnsa_slot_config_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.du_f_transmission_periodicity.is_some());
        optionals.push(self.du_f_slot_config_list.is_some());
        optionals.push(self.hnsa_slot_config_list.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.subcarrier_spacing.aper_encode(data)?;
        if let Some(x) = &self.du_f_transmission_periodicity {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.du_f_slot_config_list {
            x.aper_encode(data)?;
        }
        self.hsna_transmission_periodicity.aper_encode(data)?;
        if let Some(x) = &self.hnsa_slot_config_list {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for GnbDuCellResourceConfiguration {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbDuCellResourceConfiguration::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuCellResourceConfiguration");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuCellResourceConfiguration");
            e
        })
    }
}
// GnbDuUeF1apId
#[derive(Clone, Copy, Debug)]
pub struct GnbDuUeF1apId(pub u32);

impl GnbDuUeF1apId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(4294967295), false)?.0 as u32,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(4294967295),
            false,
            self.0 as i128,
            false,
        )
    }
}

impl AperCodec for GnbDuUeF1apId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbDuUeF1apId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuUeF1apId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuUeF1apId");
            e
        })
    }
}
// GnbDuId
#[derive(Clone, Copy, Debug)]
pub struct GnbDuId(pub u64);

impl GnbDuId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(68719476735), false)?.0 as u64,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(68719476735),
            false,
            self.0 as i128,
            false,
        )
    }
}

impl AperCodec for GnbDuId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbDuId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuId");
            e
        })
    }
}
// GnbCuName
#[derive(Clone, Debug)]
pub struct GnbCuName(pub String);

impl GnbCuName {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_printable_string(
            data,
            Some(1),
            Some(150),
            true,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_printable_string(data, Some(1), Some(150), true, &self.0, false)
    }
}

impl AperCodec for GnbCuName {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbCuName::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuName");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuName");
            e
        })
    }
}
// GnbDuName
#[derive(Clone, Debug)]
pub struct GnbDuName(pub String);

impl GnbDuName {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_printable_string(
            data,
            Some(1),
            Some(150),
            true,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_printable_string(data, Some(1), Some(150), true, &self.0, false)
    }
}

impl AperCodec for GnbDuName {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbDuName::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuName");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuName");
            e
        })
    }
}
// ExtendedGnbCuName
#[derive(Clone, Debug)]
pub struct ExtendedGnbCuName {
    pub gnb_cu_name_visible_string: Option<GnbCuNameVisibleString>,
    pub gnb_cu_name_utf8_string: Option<GnbCuNameUtf8String>,
}

impl ExtendedGnbCuName {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 3)?;
        let gnb_cu_name_visible_string = if optionals[0] {
            Some(GnbCuNameVisibleString::aper_decode(data)?)
        } else {
            None
        };
        let gnb_cu_name_utf8_string = if optionals[1] {
            Some(GnbCuNameUtf8String::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            gnb_cu_name_visible_string,
            gnb_cu_name_utf8_string,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.gnb_cu_name_visible_string.is_some());
        optionals.push(self.gnb_cu_name_utf8_string.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        if let Some(x) = &self.gnb_cu_name_visible_string {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.gnb_cu_name_utf8_string {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for ExtendedGnbCuName {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ExtendedGnbCuName::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExtendedGnbCuName");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExtendedGnbCuName");
            e
        })
    }
}
// GnbCuNameVisibleString
#[derive(Clone, Debug)]
pub struct GnbCuNameVisibleString(pub String);

impl GnbCuNameVisibleString {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_visible_string(
            data,
            Some(1),
            Some(150),
            true,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_visible_string(data, Some(1), Some(150), true, &self.0, false)
    }
}

impl AperCodec for GnbCuNameVisibleString {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbCuNameVisibleString::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuNameVisibleString");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuNameVisibleString");
            e
        })
    }
}
// GnbCuNameUtf8String
#[derive(Clone, Debug)]
pub struct GnbCuNameUtf8String(pub String);

impl GnbCuNameUtf8String {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_utf8_string(
            data,
            Some(1),
            Some(150),
            true,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_utf8_string(data, Some(1), Some(150), true, &self.0, false)
    }
}

impl AperCodec for GnbCuNameUtf8String {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbCuNameUtf8String::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuNameUtf8String");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbCuNameUtf8String");
            e
        })
    }
}
// ExtendedGnbDuName
#[derive(Clone, Debug)]
pub struct ExtendedGnbDuName {
    pub gnb_du_name_visible_string: Option<GnbDuNameVisibleString>,
    pub gnb_du_name_utf8_string: Option<GnbDuNameUtf8String>,
}

impl ExtendedGnbDuName {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 3)?;
        let gnb_du_name_visible_string = if optionals[0] {
            Some(GnbDuNameVisibleString::aper_decode(data)?)
        } else {
            None
        };
        let gnb_du_name_utf8_string = if optionals[1] {
            Some(GnbDuNameUtf8String::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            gnb_du_name_visible_string,
            gnb_du_name_utf8_string,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.gnb_du_name_visible_string.is_some());
        optionals.push(self.gnb_du_name_utf8_string.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        if let Some(x) = &self.gnb_du_name_visible_string {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.gnb_du_name_utf8_string {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for ExtendedGnbDuName {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ExtendedGnbDuName::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExtendedGnbDuName");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ExtendedGnbDuName");
            e
        })
    }
}
// GnbDuNameVisibleString
#[derive(Clone, Debug)]
pub struct GnbDuNameVisibleString(pub String);

impl GnbDuNameVisibleString {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_visible_string(
            data,
            Some(1),
            Some(150),
            true,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_visible_string(data, Some(1), Some(150), true, &self.0, false)
    }
}

impl AperCodec for GnbDuNameVisibleString {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbDuNameVisibleString::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuNameVisibleString");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuNameVisibleString");
            e
        })
    }
}
// GnbDuNameUtf8String
#[derive(Clone, Debug)]
pub struct GnbDuNameUtf8String(pub String);

impl GnbDuNameUtf8String {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_utf8_string(
            data,
            Some(1),
            Some(150),
            true,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_utf8_string(data, Some(1), Some(150), true, &self.0, false)
    }
}

impl AperCodec for GnbDuNameUtf8String {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbDuNameUtf8String::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuNameUtf8String");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuNameUtf8String");
            e
        })
    }
}
// GnbDuServedCellsItem
#[derive(Clone, Debug)]
pub struct GnbDuServedCellsItem {
    pub served_cell_information: ServedCellInformation,
    pub gnb_du_system_information: Option<GnbDuSystemInformation>,
}

impl GnbDuServedCellsItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let served_cell_information = ServedCellInformation::aper_decode(data)?;
        let gnb_du_system_information = if optionals[0] {
            Some(GnbDuSystemInformation::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            served_cell_information,
            gnb_du_system_information,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.gnb_du_system_information.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.served_cell_information.aper_encode(data)?;
        if let Some(x) = &self.gnb_du_system_information {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for GnbDuServedCellsItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbDuServedCellsItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuServedCellsItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuServedCellsItem");
            e
        })
    }
}
// GnbDuSystemInformation
#[derive(Clone, Debug)]
pub struct GnbDuSystemInformation {
    pub mib_message: MibMessage,
    pub sib1_message: Sib1Message,
    pub sib12_message: Option<Sib12Message>,
    pub sib13_message: Option<Sib13Message>,
    pub sib14_message: Option<Sib14Message>,
    pub sib10_message: Option<Sib10Message>,
}

impl GnbDuSystemInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let mib_message = MibMessage::aper_decode(data)?;
        let sib1_message = Sib1Message::aper_decode(data)?;

        // Process the extension container
        let mut sib12_message: Option<Sib12Message> = None;
        let mut sib13_message: Option<Sib13Message> = None;
        let mut sib14_message: Option<Sib14Message> = None;
        let mut sib10_message: Option<Sib10Message> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    310 => sib12_message = Some(Sib12Message::aper_decode(data)?),
                    311 => sib13_message = Some(Sib13Message::aper_decode(data)?),
                    312 => sib14_message = Some(Sib14Message::aper_decode(data)?),
                    387 => sib10_message = Some(Sib10Message::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            mib_message,
            sib1_message,
            sib12_message,
            sib13_message,
            sib14_message,
            sib10_message,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.mib_message.aper_encode(data)?;
        self.sib1_message.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for GnbDuSystemInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbDuSystemInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuSystemInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuSystemInformation");
            e
        })
    }
}
// GnbDuConfigurationQuery
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum GnbDuConfigurationQuery {
    True,
}

impl GnbDuConfigurationQuery {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for GnbDuConfigurationQuery {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbDuConfigurationQuery::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuConfigurationQuery");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuConfigurationQuery");
            e
        })
    }
}
// GnbDuOverloadInformation
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum GnbDuOverloadInformation {
    Overloaded,
    NotOverloaded,
}

impl GnbDuOverloadInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), false, *self as i128, false)
    }
}

impl AperCodec for GnbDuOverloadInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbDuOverloadInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuOverloadInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuOverloadInformation");
            e
        })
    }
}
// GnbDuTnlAssociationToRemoveItem
#[derive(Clone, Debug)]
pub struct GnbDuTnlAssociationToRemoveItem {
    pub tnl_association_transport_layer_address: CpTransportLayerAddress,
    pub tnl_association_transport_layer_address_gnb_cu: Option<CpTransportLayerAddress>,
}

impl GnbDuTnlAssociationToRemoveItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let tnl_association_transport_layer_address = CpTransportLayerAddress::aper_decode(data)?;
        let tnl_association_transport_layer_address_gnb_cu = if optionals[0] {
            Some(CpTransportLayerAddress::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            tnl_association_transport_layer_address,
            tnl_association_transport_layer_address_gnb_cu,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(
            self.tnl_association_transport_layer_address_gnb_cu
                .is_some(),
        );
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.tnl_association_transport_layer_address
            .aper_encode(data)?;
        if let Some(x) = &self.tnl_association_transport_layer_address_gnb_cu {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for GnbDuTnlAssociationToRemoveItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbDuTnlAssociationToRemoveItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuTnlAssociationToRemoveItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbDuTnlAssociationToRemoveItem");
            e
        })
    }
}
// GnbRxTxTimeDiff
#[derive(Clone, Debug)]
pub struct GnbRxTxTimeDiff {
    pub rx_tx_time_diff: GnbRxTxTimeDiffMeas,
    pub additional_path_list: Option<AdditionalPathList>,
}

impl GnbRxTxTimeDiff {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let rx_tx_time_diff = GnbRxTxTimeDiffMeas::aper_decode(data)?;
        let additional_path_list = if optionals[0] {
            Some(AdditionalPathList::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            rx_tx_time_diff,
            additional_path_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.additional_path_list.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.rx_tx_time_diff.aper_encode(data)?;
        if let Some(x) = &self.additional_path_list {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for GnbRxTxTimeDiff {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbRxTxTimeDiff::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbRxTxTimeDiff");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbRxTxTimeDiff");
            e
        })
    }
}
// GnbRxTxTimeDiffMeas
#[derive(Clone, Debug)]
pub enum GnbRxTxTimeDiffMeas {
    K0(u32),
    K1(u32),
    K2(u32),
    K3(u32),
    K4(u32),
    K5(u16),
}

impl GnbRxTxTimeDiffMeas {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 6, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::K0(
                aper::decode::decode_integer(data, Some(0), Some(1970049), false)?.0 as u32,
            )),
            1 => Ok(Self::K1(
                aper::decode::decode_integer(data, Some(0), Some(985025), false)?.0 as u32,
            )),
            2 => Ok(Self::K2(
                aper::decode::decode_integer(data, Some(0), Some(492513), false)?.0 as u32,
            )),
            3 => Ok(Self::K3(
                aper::decode::decode_integer(data, Some(0), Some(246257), false)?.0 as u32,
            )),
            4 => Ok(Self::K4(
                aper::decode::decode_integer(data, Some(0), Some(123129), false)?.0 as u32,
            )),
            5 => Ok(Self::K5(
                aper::decode::decode_integer(data, Some(0), Some(61565), false)?.0 as u16,
            )),
            6 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::K0(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 0, false)?;
                aper::encode::encode_integer(data, Some(0), Some(1970049), false, *x as i128, false)
            }
            Self::K1(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 1, false)?;
                aper::encode::encode_integer(data, Some(0), Some(985025), false, *x as i128, false)
            }
            Self::K2(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 2, false)?;
                aper::encode::encode_integer(data, Some(0), Some(492513), false, *x as i128, false)
            }
            Self::K3(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 3, false)?;
                aper::encode::encode_integer(data, Some(0), Some(246257), false, *x as i128, false)
            }
            Self::K4(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 4, false)?;
                aper::encode::encode_integer(data, Some(0), Some(123129), false, *x as i128, false)
            }
            Self::K5(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 5, false)?;
                aper::encode::encode_integer(data, Some(0), Some(61565), false, *x as i128, false)
            }
        }
    }
}

impl AperCodec for GnbRxTxTimeDiffMeas {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbRxTxTimeDiffMeas::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbRxTxTimeDiffMeas");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbRxTxTimeDiffMeas");
            e
        })
    }
}
// GnbSetId
#[derive(Clone, Debug)]
pub struct GnbSetId(pub BitString);

impl GnbSetId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(22),
            Some(22),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(22), Some(22), false, &self.0, false)
    }
}

impl AperCodec for GnbSetId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GnbSetId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbSetId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GnbSetId");
            e
        })
    }
}
// GtpTeid
#[derive(Clone, Debug)]
pub struct GtpTeid(pub Vec<u8>);

impl GtpTeid {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data,
            Some(4),
            Some(4),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, Some(4), Some(4), false, &self.0, false)
    }
}

impl AperCodec for GtpTeid {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GtpTeid::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GtpTeid");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GtpTeid");
            e
        })
    }
}
// GtptlAs
#[derive(Clone, Debug)]
pub struct GtptlAs(pub Vec<GtptlaItem>);

impl GtptlAs {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(16), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(GtptlaItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(16), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for GtptlAs {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GtptlAs::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GtptlAs");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GtptlAs");
            e
        })
    }
}
// GtptlaItem
#[derive(Clone, Debug)]
pub struct GtptlaItem {
    pub gtp_transport_layer_address: TransportLayerAddress,
}

impl GtptlaItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let gtp_transport_layer_address = TransportLayerAddress::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            gtp_transport_layer_address,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.gtp_transport_layer_address.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for GtptlaItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GtptlaItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GtptlaItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GtptlaItem");
            e
        })
    }
}
// GtpTunnel
#[derive(Clone, Debug)]
pub struct GtpTunnel {
    pub transport_layer_address: TransportLayerAddress,
    pub gtp_teid: GtpTeid,
}

impl GtpTunnel {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let transport_layer_address = TransportLayerAddress::aper_decode(data)?;
        let gtp_teid = GtpTeid::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            transport_layer_address,
            gtp_teid,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.transport_layer_address.aper_encode(data)?;
        self.gtp_teid.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for GtpTunnel {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GtpTunnel::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GtpTunnel");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GtpTunnel");
            e
        })
    }
}
// HandoverPreparationInformation
#[derive(Clone, Debug)]
pub struct HandoverPreparationInformation(pub Vec<u8>);

impl HandoverPreparationInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for HandoverPreparationInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        HandoverPreparationInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("HandoverPreparationInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("HandoverPreparationInformation");
            e
        })
    }
}
// HardwareLoadIndicator
#[derive(Clone, Debug)]
pub struct HardwareLoadIndicator {
    pub dl_hardware_load_indicator: u8,
    pub ul_hardware_load_indicator: u8,
}

impl HardwareLoadIndicator {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let dl_hardware_load_indicator =
            aper::decode::decode_integer(data, Some(0), Some(100), true)?.0 as u8;
        let ul_hardware_load_indicator =
            aper::decode::decode_integer(data, Some(0), Some(100), true)?.0 as u8;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            dl_hardware_load_indicator,
            ul_hardware_load_indicator,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(100),
            true,
            self.dl_hardware_load_indicator as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(100),
            true,
            self.ul_hardware_load_indicator as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for HardwareLoadIndicator {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        HardwareLoadIndicator::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("HardwareLoadIndicator");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("HardwareLoadIndicator");
            e
        })
    }
}
// HsnaSlotConfigList
#[derive(Clone, Debug)]
pub struct HsnaSlotConfigList(pub Vec<HsnaSlotConfigItem>);

impl HsnaSlotConfigList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(5120), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(HsnaSlotConfigItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(5120), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for HsnaSlotConfigList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        HsnaSlotConfigList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("HsnaSlotConfigList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("HsnaSlotConfigList");
            e
        })
    }
}
// HsnaSlotConfigItem
#[derive(Clone, Debug)]
pub struct HsnaSlotConfigItem {
    pub hsna_downlink: Option<HsnaDownlink>,
    pub hsna_uplink: Option<HsnaUplink>,
    pub hsna_flexible: Option<HsnaFlexible>,
}

impl HsnaSlotConfigItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 4)?;
        let hsna_downlink = if optionals[0] {
            Some(HsnaDownlink::aper_decode(data)?)
        } else {
            None
        };
        let hsna_uplink = if optionals[1] {
            Some(HsnaUplink::aper_decode(data)?)
        } else {
            None
        };
        let hsna_flexible = if optionals[2] {
            Some(HsnaFlexible::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[3] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            hsna_downlink,
            hsna_uplink,
            hsna_flexible,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.hsna_downlink.is_some());
        optionals.push(self.hsna_uplink.is_some());
        optionals.push(self.hsna_flexible.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        if let Some(x) = &self.hsna_downlink {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.hsna_uplink {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.hsna_flexible {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for HsnaSlotConfigItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        HsnaSlotConfigItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("HsnaSlotConfigItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("HsnaSlotConfigItem");
            e
        })
    }
}
// HsnaDownlink
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum HsnaDownlink {
    Hard,
    Soft,
    Notavailable,
}

impl HsnaDownlink {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), false, *self as i128, false)
    }
}

impl AperCodec for HsnaDownlink {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        HsnaDownlink::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("HsnaDownlink");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("HsnaDownlink");
            e
        })
    }
}
// HsnaFlexible
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum HsnaFlexible {
    Hard,
    Soft,
    Notavailable,
}

impl HsnaFlexible {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), false, *self as i128, false)
    }
}

impl AperCodec for HsnaFlexible {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        HsnaFlexible::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("HsnaFlexible");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("HsnaFlexible");
            e
        })
    }
}
// HsnaUplink
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum HsnaUplink {
    Hard,
    Soft,
    Notavailable,
}

impl HsnaUplink {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), false, *self as i128, false)
    }
}

impl AperCodec for HsnaUplink {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        HsnaUplink::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("HsnaUplink");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("HsnaUplink");
            e
        })
    }
}
// HsnaTransmissionPeriodicity
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum HsnaTransmissionPeriodicity {
    Ms0p5,
    Ms0p625,
    Ms1,
    Ms1p25,
    Ms2,
    Ms2p5,
    Ms5,
    Ms10,
    Ms20,
    Ms40,
    Ms80,
    Ms160,
}

impl HsnaTransmissionPeriodicity {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(11), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(11), true, *self as i128, false)
    }
}

impl AperCodec for HsnaTransmissionPeriodicity {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        HsnaTransmissionPeriodicity::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("HsnaTransmissionPeriodicity");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("HsnaTransmissionPeriodicity");
            e
        })
    }
}
// IabBarred
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum IabBarred {
    Barred,
    NotBarred,
}

impl IabBarred {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for IabBarred {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IabBarred::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabBarred");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabBarred");
            e
        })
    }
}
// IabInfoIabDonorCu
#[derive(Clone, Debug)]
pub struct IabInfoIabDonorCu {
    pub iab_stc_info: Option<IabStcInfo>,
}

impl IabInfoIabDonorCu {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let iab_stc_info = if optionals[0] {
            Some(IabStcInfo::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { iab_stc_info })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.iab_stc_info.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        if let Some(x) = &self.iab_stc_info {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for IabInfoIabDonorCu {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IabInfoIabDonorCu::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabInfoIabDonorCu");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabInfoIabDonorCu");
            e
        })
    }
}
// IabInfoIabDu
#[derive(Clone, Debug)]
pub struct IabInfoIabDu {
    pub multiplexing_info: Option<MultiplexingInfo>,
    pub iab_stc_info: Option<IabStcInfo>,
}

impl IabInfoIabDu {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 3)?;
        let multiplexing_info = if optionals[0] {
            Some(MultiplexingInfo::aper_decode(data)?)
        } else {
            None
        };
        let iab_stc_info = if optionals[1] {
            Some(IabStcInfo::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            multiplexing_info,
            iab_stc_info,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.multiplexing_info.is_some());
        optionals.push(self.iab_stc_info.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        if let Some(x) = &self.multiplexing_info {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.iab_stc_info {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for IabInfoIabDu {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IabInfoIabDu::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabInfoIabDu");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabInfoIabDu");
            e
        })
    }
}
// IabMtCellList
#[derive(Clone, Debug)]
pub struct IabMtCellList(pub Vec<IabMtCellListItem>);

impl IabMtCellList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(IabMtCellListItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for IabMtCellList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IabMtCellList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabMtCellList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabMtCellList");
            e
        })
    }
}
// IabMtCellListItem
#[derive(Clone, Debug)]
pub struct IabMtCellListItem {
    pub nr_cell_identity: NrCellIdentity,
    pub du_rx_mt_rx: DuRxMtRx,
    pub du_tx_mt_tx: DuTxMtTx,
    pub du_rx_mt_tx: DuRxMtTx,
    pub du_tx_mt_rx: DuTxMtRx,
}

impl IabMtCellListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let nr_cell_identity = NrCellIdentity::aper_decode(data)?;
        let du_rx_mt_rx = DuRxMtRx::aper_decode(data)?;
        let du_tx_mt_tx = DuTxMtTx::aper_decode(data)?;
        let du_rx_mt_tx = DuRxMtTx::aper_decode(data)?;
        let du_tx_mt_rx = DuTxMtRx::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            nr_cell_identity,
            du_rx_mt_rx,
            du_tx_mt_tx,
            du_rx_mt_tx,
            du_tx_mt_rx,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.nr_cell_identity.aper_encode(data)?;
        self.du_rx_mt_rx.aper_encode(data)?;
        self.du_tx_mt_tx.aper_encode(data)?;
        self.du_rx_mt_tx.aper_encode(data)?;
        self.du_tx_mt_rx.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for IabMtCellListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IabMtCellListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabMtCellListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabMtCellListItem");
            e
        })
    }
}
// IabStcInfo
#[derive(Clone, Debug)]
pub struct IabStcInfo {
    pub iab_stc_info_list: IabStcInfoList,
}

impl IabStcInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let iab_stc_info_list = IabStcInfoList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { iab_stc_info_list })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.iab_stc_info_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for IabStcInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IabStcInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabStcInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabStcInfo");
            e
        })
    }
}
// IabStcInfoList
#[derive(Clone, Debug)]
pub struct IabStcInfoList(pub Vec<IabStcInfoItem>);

impl IabStcInfoList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(45), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(IabStcInfoItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(45), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for IabStcInfoList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IabStcInfoList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabStcInfoList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabStcInfoList");
            e
        })
    }
}
// IabStcInfoItem
#[derive(Clone, Debug)]
pub struct IabStcInfoItem {
    pub ssb_freq_info: SsbFreqInfo,
    pub ssb_subcarrier_spacing: SsbSubcarrierSpacing,
    pub ssb_transmission_periodicity: SsbTransmissionPeriodicity,
    pub ssb_transmission_timing_offset: SsbTransmissionTimingOffset,
    pub ssb_transmission_bitmap: SsbTransmissionBitmap,
}

impl IabStcInfoItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let ssb_freq_info = SsbFreqInfo::aper_decode(data)?;
        let ssb_subcarrier_spacing = SsbSubcarrierSpacing::aper_decode(data)?;
        let ssb_transmission_periodicity = SsbTransmissionPeriodicity::aper_decode(data)?;
        let ssb_transmission_timing_offset = SsbTransmissionTimingOffset::aper_decode(data)?;
        let ssb_transmission_bitmap = SsbTransmissionBitmap::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ssb_freq_info,
            ssb_subcarrier_spacing,
            ssb_transmission_periodicity,
            ssb_transmission_timing_offset,
            ssb_transmission_bitmap,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.ssb_freq_info.aper_encode(data)?;
        self.ssb_subcarrier_spacing.aper_encode(data)?;
        self.ssb_transmission_periodicity.aper_encode(data)?;
        self.ssb_transmission_timing_offset.aper_encode(data)?;
        self.ssb_transmission_bitmap.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for IabStcInfoItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IabStcInfoItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabStcInfoItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabStcInfoItem");
            e
        })
    }
}
// IabAllocatedTnlAddressItem
#[derive(Clone, Debug)]
pub struct IabAllocatedTnlAddressItem {
    pub iabtnl_address: IabtnlAddress,
    pub iabtnl_address_usage: Option<IabtnlAddressUsage>,
}

impl IabAllocatedTnlAddressItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let iabtnl_address = IabtnlAddress::aper_decode(data)?;
        let iabtnl_address_usage = if optionals[0] {
            Some(IabtnlAddressUsage::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            iabtnl_address,
            iabtnl_address_usage,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.iabtnl_address_usage.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.iabtnl_address.aper_encode(data)?;
        if let Some(x) = &self.iabtnl_address_usage {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for IabAllocatedTnlAddressItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IabAllocatedTnlAddressItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabAllocatedTnlAddressItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabAllocatedTnlAddressItem");
            e
        })
    }
}
// IabDuCellResourceConfigurationModeInfo
#[derive(Clone, Debug)]
pub enum IabDuCellResourceConfigurationModeInfo {
    Fdd(IabDuCellResourceConfigurationFddInfo),
    Tdd(IabDuCellResourceConfigurationTddInfo),
}

impl IabDuCellResourceConfigurationModeInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::Fdd(
                IabDuCellResourceConfigurationFddInfo::aper_decode(data)?,
            )),
            1 => Ok(Self::Tdd(
                IabDuCellResourceConfigurationTddInfo::aper_decode(data)?,
            )),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::Fdd(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::Tdd(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for IabDuCellResourceConfigurationModeInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IabDuCellResourceConfigurationModeInfo::decode_inner(data).map_err(
            |mut e: PerCodecError| {
                e.push_context("IabDuCellResourceConfigurationModeInfo");
                e
            },
        )
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabDuCellResourceConfigurationModeInfo");
            e
        })
    }
}
// IabDuCellResourceConfigurationFddInfo
#[derive(Clone, Debug)]
pub struct IabDuCellResourceConfigurationFddInfo {
    pub gnb_du_cell_resource_configuration_fdd_ul: GnbDuCellResourceConfiguration,
    pub gnb_du_cell_resource_configuration_fdd_dl: GnbDuCellResourceConfiguration,
}

impl IabDuCellResourceConfigurationFddInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let gnb_du_cell_resource_configuration_fdd_ul =
            GnbDuCellResourceConfiguration::aper_decode(data)?;
        let gnb_du_cell_resource_configuration_fdd_dl =
            GnbDuCellResourceConfiguration::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            gnb_du_cell_resource_configuration_fdd_ul,
            gnb_du_cell_resource_configuration_fdd_dl,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.gnb_du_cell_resource_configuration_fdd_ul
            .aper_encode(data)?;
        self.gnb_du_cell_resource_configuration_fdd_dl
            .aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for IabDuCellResourceConfigurationFddInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IabDuCellResourceConfigurationFddInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabDuCellResourceConfigurationFddInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabDuCellResourceConfigurationFddInfo");
            e
        })
    }
}
// IabDuCellResourceConfigurationTddInfo
#[derive(Clone, Debug)]
pub struct IabDuCellResourceConfigurationTddInfo {
    pub gnb_du_cell_resourc_configuration_tdd: GnbDuCellResourceConfiguration,
}

impl IabDuCellResourceConfigurationTddInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let gnb_du_cell_resourc_configuration_tdd =
            GnbDuCellResourceConfiguration::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            gnb_du_cell_resourc_configuration_tdd,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.gnb_du_cell_resourc_configuration_tdd
            .aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for IabDuCellResourceConfigurationTddInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IabDuCellResourceConfigurationTddInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabDuCellResourceConfigurationTddInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabDuCellResourceConfigurationTddInfo");
            e
        })
    }
}
// IabiPv6RequestType
#[derive(Clone, Debug)]
pub enum IabiPv6RequestType {
    IPv6Address(IabtnlAddressesRequested),
    IPv6Prefix(IabtnlAddressesRequested),
}

impl IabiPv6RequestType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::IPv6Address(IabtnlAddressesRequested::aper_decode(
                data,
            )?)),
            1 => Ok(Self::IPv6Prefix(IabtnlAddressesRequested::aper_decode(
                data,
            )?)),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::IPv6Address(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::IPv6Prefix(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for IabiPv6RequestType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IabiPv6RequestType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabiPv6RequestType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabiPv6RequestType");
            e
        })
    }
}
// IabtnlAddress
#[derive(Clone, Debug)]
pub enum IabtnlAddress {
    IPv4Address(BitString),
    IPv6Address(BitString),
    IPv6Prefix(BitString),
}

impl IabtnlAddress {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 3, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::IPv4Address(aper::decode::decode_bitstring(
                data,
                Some(32),
                Some(32),
                false,
            )?)),
            1 => Ok(Self::IPv6Address(aper::decode::decode_bitstring(
                data,
                Some(128),
                Some(128),
                false,
            )?)),
            2 => Ok(Self::IPv6Prefix(aper::decode::decode_bitstring(
                data,
                Some(64),
                Some(64),
                false,
            )?)),
            3 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::IPv4Address(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 0, false)?;
                aper::encode::encode_bitstring(data, Some(32), Some(32), false, &x, false)
            }
            Self::IPv6Address(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 1, false)?;
                aper::encode::encode_bitstring(data, Some(128), Some(128), false, &x, false)
            }
            Self::IPv6Prefix(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 2, false)?;
                aper::encode::encode_bitstring(data, Some(64), Some(64), false, &x, false)
            }
        }
    }
}

impl AperCodec for IabtnlAddress {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IabtnlAddress::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabtnlAddress");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabtnlAddress");
            e
        })
    }
}
// IabtnlAddressesRequested
#[derive(Clone, Debug)]
pub struct IabtnlAddressesRequested {
    pub tnl_addresses_or_prefixes_requested_all_traffic: Option<u16>,
    pub tnl_addresses_or_prefixes_requested_f1_c: Option<u16>,
    pub tnl_addresses_or_prefixes_requested_f1_u: Option<u16>,
    pub tnl_addresses_or_prefixes_requested_no_nf1: Option<u16>,
}

impl IabtnlAddressesRequested {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 5)?;
        let tnl_addresses_or_prefixes_requested_all_traffic = if optionals[0] {
            Some(aper::decode::decode_integer(data, Some(1), Some(256), false)?.0 as u16)
        } else {
            None
        };
        let tnl_addresses_or_prefixes_requested_f1_c = if optionals[1] {
            Some(aper::decode::decode_integer(data, Some(1), Some(256), false)?.0 as u16)
        } else {
            None
        };
        let tnl_addresses_or_prefixes_requested_f1_u = if optionals[2] {
            Some(aper::decode::decode_integer(data, Some(1), Some(256), false)?.0 as u16)
        } else {
            None
        };
        let tnl_addresses_or_prefixes_requested_no_nf1 = if optionals[3] {
            Some(aper::decode::decode_integer(data, Some(1), Some(256), false)?.0 as u16)
        } else {
            None
        };

        // Process the extension container

        if optionals[4] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            tnl_addresses_or_prefixes_requested_all_traffic,
            tnl_addresses_or_prefixes_requested_f1_c,
            tnl_addresses_or_prefixes_requested_f1_u,
            tnl_addresses_or_prefixes_requested_no_nf1,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(
            self.tnl_addresses_or_prefixes_requested_all_traffic
                .is_some(),
        );
        optionals.push(self.tnl_addresses_or_prefixes_requested_f1_c.is_some());
        optionals.push(self.tnl_addresses_or_prefixes_requested_f1_u.is_some());
        optionals.push(self.tnl_addresses_or_prefixes_requested_no_nf1.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        if let Some(x) = &self.tnl_addresses_or_prefixes_requested_all_traffic {
            aper::encode::encode_integer(data, Some(1), Some(256), false, *x as i128, false)?;
        }
        if let Some(x) = &self.tnl_addresses_or_prefixes_requested_f1_c {
            aper::encode::encode_integer(data, Some(1), Some(256), false, *x as i128, false)?;
        }
        if let Some(x) = &self.tnl_addresses_or_prefixes_requested_f1_u {
            aper::encode::encode_integer(data, Some(1), Some(256), false, *x as i128, false)?;
        }
        if let Some(x) = &self.tnl_addresses_or_prefixes_requested_no_nf1 {
            aper::encode::encode_integer(data, Some(1), Some(256), false, *x as i128, false)?;
        }

        Ok(())
    }
}

impl AperCodec for IabtnlAddressesRequested {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IabtnlAddressesRequested::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabtnlAddressesRequested");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabtnlAddressesRequested");
            e
        })
    }
}
// IabTnlAddressesToRemoveItem
#[derive(Clone, Debug)]
pub struct IabTnlAddressesToRemoveItem {
    pub iabtnl_address: IabtnlAddress,
}

impl IabTnlAddressesToRemoveItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let iabtnl_address = IabtnlAddress::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { iabtnl_address })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.iabtnl_address.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for IabTnlAddressesToRemoveItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IabTnlAddressesToRemoveItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabTnlAddressesToRemoveItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabTnlAddressesToRemoveItem");
            e
        })
    }
}
// IabtnlAddressUsage
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum IabtnlAddressUsage {
    F1C,
    F1U,
    NonF1,
}

impl IabtnlAddressUsage {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), true, *self as i128, false)
    }
}

impl AperCodec for IabtnlAddressUsage {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IabtnlAddressUsage::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabtnlAddressUsage");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IabtnlAddressUsage");
            e
        })
    }
}
// IaBv4AddressesRequested
#[derive(Clone, Debug)]
pub struct IaBv4AddressesRequested {
    pub ia_bv_4_addresses_requested: IabtnlAddressesRequested,
}

impl IaBv4AddressesRequested {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let ia_bv_4_addresses_requested = IabtnlAddressesRequested::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ia_bv_4_addresses_requested,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.ia_bv_4_addresses_requested.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for IaBv4AddressesRequested {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IaBv4AddressesRequested::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IaBv4AddressesRequested");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IaBv4AddressesRequested");
            e
        })
    }
}
// ImplicitFormat
#[derive(Clone, Debug)]
pub struct ImplicitFormat {
    pub du_f_slotformat_index: DuFSlotformatIndex,
}

impl ImplicitFormat {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let du_f_slotformat_index = DuFSlotformatIndex::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            du_f_slotformat_index,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.du_f_slotformat_index.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for ImplicitFormat {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ImplicitFormat::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ImplicitFormat");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ImplicitFormat");
            e
        })
    }
}
// IgnorePrachConfiguration
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum IgnorePrachConfiguration {
    True,
}

impl IgnorePrachConfiguration {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for IgnorePrachConfiguration {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IgnorePrachConfiguration::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IgnorePrachConfiguration");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IgnorePrachConfiguration");
            e
        })
    }
}
// IgnoreResourceCoordinationContainer
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum IgnoreResourceCoordinationContainer {
    Yes,
}

impl IgnoreResourceCoordinationContainer {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for IgnoreResourceCoordinationContainer {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IgnoreResourceCoordinationContainer::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IgnoreResourceCoordinationContainer");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IgnoreResourceCoordinationContainer");
            e
        })
    }
}
// InactivityMonitoringRequest
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum InactivityMonitoringRequest {
    True,
}

impl InactivityMonitoringRequest {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for InactivityMonitoringRequest {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        InactivityMonitoringRequest::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("InactivityMonitoringRequest");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("InactivityMonitoringRequest");
            e
        })
    }
}
// InactivityMonitoringResponse
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum InactivityMonitoringResponse {
    NotSupported,
}

impl InactivityMonitoringResponse {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for InactivityMonitoringResponse {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        InactivityMonitoringResponse::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("InactivityMonitoringResponse");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("InactivityMonitoringResponse");
            e
        })
    }
}
// InterfacesToTrace
#[derive(Clone, Debug)]
pub struct InterfacesToTrace(pub BitString);

impl InterfacesToTrace {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(8),
            Some(8),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(8), Some(8), false, &self.0, false)
    }
}

impl AperCodec for InterfacesToTrace {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        InterfacesToTrace::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("InterfacesToTrace");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("InterfacesToTrace");
            e
        })
    }
}
// IntendedTddDlUlConfig
#[derive(Clone, Debug)]
pub struct IntendedTddDlUlConfig {
    pub nr_scs: NrScs1,
    pub nr_cp: NrCp,
    pub nr_dlul_tx_periodicity: NrDlulTxPeriodicity,
    pub slot_configuration_list: SlotConfigurationList,
}

impl IntendedTddDlUlConfig {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let nr_scs = NrScs1::aper_decode(data)?;
        let nr_cp = NrCp::aper_decode(data)?;
        let nr_dlul_tx_periodicity = NrDlulTxPeriodicity::aper_decode(data)?;
        let slot_configuration_list = SlotConfigurationList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            nr_scs,
            nr_cp,
            nr_dlul_tx_periodicity,
            slot_configuration_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.nr_scs.aper_encode(data)?;
        self.nr_cp.aper_encode(data)?;
        self.nr_dlul_tx_periodicity.aper_encode(data)?;
        self.slot_configuration_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for IntendedTddDlUlConfig {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IntendedTddDlUlConfig::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IntendedTddDlUlConfig");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IntendedTddDlUlConfig");
            e
        })
    }
}
// IpHeaderInformation
#[derive(Clone, Debug)]
pub struct IpHeaderInformation {
    pub destination_iabtnl_address: IabtnlAddress,
    pub ds_information_list: Option<DsInformationList>,
    pub i_pv_6_flow_label: Option<BitString>,
}

impl IpHeaderInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 3)?;
        let destination_iabtnl_address = IabtnlAddress::aper_decode(data)?;
        let ds_information_list = if optionals[0] {
            Some(DsInformationList::aper_decode(data)?)
        } else {
            None
        };
        let i_pv_6_flow_label = if optionals[1] {
            Some(aper::decode::decode_bitstring(
                data,
                Some(20),
                Some(20),
                false,
            )?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            destination_iabtnl_address,
            ds_information_list,
            i_pv_6_flow_label,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.ds_information_list.is_some());
        optionals.push(self.i_pv_6_flow_label.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.destination_iabtnl_address.aper_encode(data)?;
        if let Some(x) = &self.ds_information_list {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.i_pv_6_flow_label {
            aper::encode::encode_bitstring(data, Some(20), Some(20), false, &x, false)?;
        }

        Ok(())
    }
}

impl AperCodec for IpHeaderInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IpHeaderInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IpHeaderInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IpHeaderInformation");
            e
        })
    }
}
// IPtolayer2TrafficMappingInfo
#[derive(Clone, Debug)]
pub struct IPtolayer2TrafficMappingInfo {
    pub i_ptolayer_2_traffic_mapping_info_to_add: Option<IPtolayer2TrafficMappingInfoList>,
    pub i_ptolayer_2_traffic_mapping_info_to_remove: Option<MappingInformationtoRemove>,
}

impl IPtolayer2TrafficMappingInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 3)?;
        let i_ptolayer_2_traffic_mapping_info_to_add = if optionals[0] {
            Some(IPtolayer2TrafficMappingInfoList::aper_decode(data)?)
        } else {
            None
        };
        let i_ptolayer_2_traffic_mapping_info_to_remove = if optionals[1] {
            Some(MappingInformationtoRemove::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            i_ptolayer_2_traffic_mapping_info_to_add,
            i_ptolayer_2_traffic_mapping_info_to_remove,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.i_ptolayer_2_traffic_mapping_info_to_add.is_some());
        optionals.push(self.i_ptolayer_2_traffic_mapping_info_to_remove.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        if let Some(x) = &self.i_ptolayer_2_traffic_mapping_info_to_add {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.i_ptolayer_2_traffic_mapping_info_to_remove {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for IPtolayer2TrafficMappingInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IPtolayer2TrafficMappingInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IPtolayer2TrafficMappingInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IPtolayer2TrafficMappingInfo");
            e
        })
    }
}
// IPtolayer2TrafficMappingInfoList
#[derive(Clone, Debug)]
pub struct IPtolayer2TrafficMappingInfoList(pub Vec<IPtolayer2TrafficMappingInfoItem>);

impl IPtolayer2TrafficMappingInfoList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(67108864), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(IPtolayer2TrafficMappingInfoItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(
            data,
            Some(1),
            Some(67108864),
            false,
            self.0.len(),
        )?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for IPtolayer2TrafficMappingInfoList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IPtolayer2TrafficMappingInfoList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IPtolayer2TrafficMappingInfoList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IPtolayer2TrafficMappingInfoList");
            e
        })
    }
}
// IPtolayer2TrafficMappingInfoItem
#[derive(Clone, Debug)]
pub struct IPtolayer2TrafficMappingInfoItem {
    pub mapping_information_index: MappingInformationIndex,
    pub ip_header_information: IpHeaderInformation,
    pub bh_info: BhInfo,
}

impl IPtolayer2TrafficMappingInfoItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let mapping_information_index = MappingInformationIndex::aper_decode(data)?;
        let ip_header_information = IpHeaderInformation::aper_decode(data)?;
        let bh_info = BhInfo::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            mapping_information_index,
            ip_header_information,
            bh_info,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.mapping_information_index.aper_encode(data)?;
        self.ip_header_information.aper_encode(data)?;
        self.bh_info.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for IPtolayer2TrafficMappingInfoItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        IPtolayer2TrafficMappingInfoItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IPtolayer2TrafficMappingInfoItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("IPtolayer2TrafficMappingInfoItem");
            e
        })
    }
}
// L139Info
#[derive(Clone, Debug)]
pub struct L139Info {
    pub msg_1scs: Msg1scs,
    pub root_sequence_index: Option<u8>,
}

impl L139Info {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let msg_1scs = Msg1scs::aper_decode(data)?;
        let root_sequence_index = if optionals[0] {
            Some(aper::decode::decode_integer(data, Some(0), Some(137), false)?.0 as u8)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            msg_1scs,
            root_sequence_index,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.root_sequence_index.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.msg_1scs.aper_encode(data)?;
        if let Some(x) = &self.root_sequence_index {
            aper::encode::encode_integer(data, Some(0), Some(137), false, *x as i128, false)?;
        }

        Ok(())
    }
}

impl AperCodec for L139Info {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        L139Info::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("L139Info");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("L139Info");
            e
        })
    }
}
// L839Info
#[derive(Clone, Debug)]
pub struct L839Info {
    pub root_sequence_index: u16,
    pub restricted_set_config: RestrictedSetConfig,
}

impl L839Info {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let root_sequence_index =
            aper::decode::decode_integer(data, Some(0), Some(837), false)?.0 as u16;
        let restricted_set_config = RestrictedSetConfig::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            root_sequence_index,
            restricted_set_config,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(837),
            false,
            self.root_sequence_index as i128,
            false,
        )?;
        self.restricted_set_config.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for L839Info {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        L839Info::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("L839Info");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("L839Info");
            e
        })
    }
}
// Lcid
#[derive(Clone, Copy, Debug)]
pub struct Lcid(pub u8);

impl Lcid {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(32), true)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(32), true, self.0 as i128, false)
    }
}

impl AperCodec for Lcid {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Lcid::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Lcid");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Lcid");
            e
        })
    }
}
// LcsToGcsTranslationAoA
#[derive(Clone, Debug)]
pub struct LcsToGcsTranslationAoA {
    pub alpha: u16,
    pub beta: u16,
    pub gamma: u16,
}

impl LcsToGcsTranslationAoA {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let alpha = aper::decode::decode_integer(data, Some(0), Some(3599), false)?.0 as u16;
        let beta = aper::decode::decode_integer(data, Some(0), Some(3599), false)?.0 as u16;
        let gamma = aper::decode::decode_integer(data, Some(0), Some(3599), false)?.0 as u16;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { alpha, beta, gamma })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        aper::encode::encode_integer(data, Some(0), Some(3599), false, self.alpha as i128, false)?;
        aper::encode::encode_integer(data, Some(0), Some(3599), false, self.beta as i128, false)?;
        aper::encode::encode_integer(data, Some(0), Some(3599), false, self.gamma as i128, false)?;

        Ok(())
    }
}

impl AperCodec for LcsToGcsTranslationAoA {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        LcsToGcsTranslationAoA::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LcsToGcsTranslationAoA");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LcsToGcsTranslationAoA");
            e
        })
    }
}
// LcStoGcsTranslationList
#[derive(Clone, Debug)]
pub struct LcStoGcsTranslationList(pub Vec<LcStoGcsTranslation>);

impl LcStoGcsTranslationList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(3), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(LcStoGcsTranslation::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(3), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for LcStoGcsTranslationList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        LcStoGcsTranslationList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LcStoGcsTranslationList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LcStoGcsTranslationList");
            e
        })
    }
}
// LcStoGcsTranslation
#[derive(Clone, Debug)]
pub struct LcStoGcsTranslation {
    pub alpha: u16,
    pub alpha_fine: Option<u8>,
    pub beta: u16,
    pub beta_fine: Option<u8>,
    pub gamma: u16,
    pub gamma_fine: Option<u8>,
}

impl LcStoGcsTranslation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 4)?;
        let alpha = aper::decode::decode_integer(data, Some(0), Some(359), false)?.0 as u16;
        let alpha_fine = if optionals[0] {
            Some(aper::decode::decode_integer(data, Some(0), Some(9), false)?.0 as u8)
        } else {
            None
        };
        let beta = aper::decode::decode_integer(data, Some(0), Some(359), false)?.0 as u16;
        let beta_fine = if optionals[1] {
            Some(aper::decode::decode_integer(data, Some(0), Some(9), false)?.0 as u8)
        } else {
            None
        };
        let gamma = aper::decode::decode_integer(data, Some(0), Some(359), false)?.0 as u16;
        let gamma_fine = if optionals[2] {
            Some(aper::decode::decode_integer(data, Some(0), Some(9), false)?.0 as u8)
        } else {
            None
        };

        // Process the extension container

        if optionals[3] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            alpha,
            alpha_fine,
            beta,
            beta_fine,
            gamma,
            gamma_fine,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.alpha_fine.is_some());
        optionals.push(self.beta_fine.is_some());
        optionals.push(self.gamma_fine.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(data, Some(0), Some(359), false, self.alpha as i128, false)?;
        if let Some(x) = &self.alpha_fine {
            aper::encode::encode_integer(data, Some(0), Some(9), false, *x as i128, false)?;
        }
        aper::encode::encode_integer(data, Some(0), Some(359), false, self.beta as i128, false)?;
        if let Some(x) = &self.beta_fine {
            aper::encode::encode_integer(data, Some(0), Some(9), false, *x as i128, false)?;
        }
        aper::encode::encode_integer(data, Some(0), Some(359), false, self.gamma as i128, false)?;
        if let Some(x) = &self.gamma_fine {
            aper::encode::encode_integer(data, Some(0), Some(9), false, *x as i128, false)?;
        }

        Ok(())
    }
}

impl AperCodec for LcStoGcsTranslation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        LcStoGcsTranslation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LcStoGcsTranslation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LcStoGcsTranslation");
            e
        })
    }
}
// LmfMeasurementId
#[derive(Clone, Copy, Debug)]
pub struct LmfMeasurementId(pub u32);

impl LmfMeasurementId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(65536), true)?.0 as u32,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(65536), true, self.0 as i128, false)
    }
}

impl AperCodec for LmfMeasurementId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        LmfMeasurementId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LmfMeasurementId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LmfMeasurementId");
            e
        })
    }
}
// LmfUeMeasurementId
#[derive(Clone, Copy, Debug)]
pub struct LmfUeMeasurementId(pub u16);

impl LmfUeMeasurementId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(256), true)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(256), true, self.0 as i128, false)
    }
}

impl AperCodec for LmfUeMeasurementId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        LmfUeMeasurementId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LmfUeMeasurementId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LmfUeMeasurementId");
            e
        })
    }
}
// LocationUncertainty
#[derive(Clone, Debug)]
pub struct LocationUncertainty {
    pub horizontal_uncertainty: u8,
    pub horizontal_confidence: u8,
    pub vertical_uncertainty: u8,
    pub vertical_confidence: u8,
}

impl LocationUncertainty {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let horizontal_uncertainty =
            aper::decode::decode_integer(data, Some(0), Some(255), false)?.0 as u8;
        let horizontal_confidence =
            aper::decode::decode_integer(data, Some(0), Some(100), false)?.0 as u8;
        let vertical_uncertainty =
            aper::decode::decode_integer(data, Some(0), Some(255), false)?.0 as u8;
        let vertical_confidence =
            aper::decode::decode_integer(data, Some(0), Some(100), false)?.0 as u8;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            horizontal_uncertainty,
            horizontal_confidence,
            vertical_uncertainty,
            vertical_confidence,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(255),
            false,
            self.horizontal_uncertainty as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(100),
            false,
            self.horizontal_confidence as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(255),
            false,
            self.vertical_uncertainty as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(100),
            false,
            self.vertical_confidence as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for LocationUncertainty {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        LocationUncertainty::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LocationUncertainty");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LocationUncertainty");
            e
        })
    }
}
// LongDrxCycleLength
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum LongDrxCycleLength {
    Ms10,
    Ms20,
    Ms32,
    Ms40,
    Ms60,
    Ms64,
    Ms70,
    Ms80,
    Ms128,
    Ms160,
    Ms256,
    Ms320,
    Ms512,
    Ms640,
    Ms1024,
    Ms1280,
    Ms2048,
    Ms2560,
    Ms5120,
    Ms10240,
}

impl LongDrxCycleLength {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(19), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(19), true, *self as i128, false)
    }
}

impl AperCodec for LongDrxCycleLength {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        LongDrxCycleLength::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LongDrxCycleLength");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LongDrxCycleLength");
            e
        })
    }
}
// LowerLayerPresenceStatusChange
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum LowerLayerPresenceStatusChange {
    SuspendLowerLayers,
    ResumeLowerLayers,
}

impl LowerLayerPresenceStatusChange {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for LowerLayerPresenceStatusChange {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        LowerLayerPresenceStatusChange::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LowerLayerPresenceStatusChange");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LowerLayerPresenceStatusChange");
            e
        })
    }
}
// LteUeSidelinkAggregateMaximumBitrate
#[derive(Clone, Debug)]
pub struct LteUeSidelinkAggregateMaximumBitrate {
    pub ue_lte_sidelink_aggregate_maximum_bitrate: BitRate,
}

impl LteUeSidelinkAggregateMaximumBitrate {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let ue_lte_sidelink_aggregate_maximum_bitrate = BitRate::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ue_lte_sidelink_aggregate_maximum_bitrate,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.ue_lte_sidelink_aggregate_maximum_bitrate
            .aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for LteUeSidelinkAggregateMaximumBitrate {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        LteUeSidelinkAggregateMaximumBitrate::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LteUeSidelinkAggregateMaximumBitrate");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LteUeSidelinkAggregateMaximumBitrate");
            e
        })
    }
}
// Ltev2xServicesAuthorized
#[derive(Clone, Debug)]
pub struct Ltev2xServicesAuthorized {
    pub vehicle_ue: Option<VehicleUe>,
    pub pedestrian_ue: Option<PedestrianUe>,
}

impl Ltev2xServicesAuthorized {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 3)?;
        let vehicle_ue = if optionals[0] {
            Some(VehicleUe::aper_decode(data)?)
        } else {
            None
        };
        let pedestrian_ue = if optionals[1] {
            Some(PedestrianUe::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            vehicle_ue,
            pedestrian_ue,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.vehicle_ue.is_some());
        optionals.push(self.pedestrian_ue.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        if let Some(x) = &self.vehicle_ue {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.pedestrian_ue {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for Ltev2xServicesAuthorized {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ltev2xServicesAuthorized::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Ltev2xServicesAuthorized");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Ltev2xServicesAuthorized");
            e
        })
    }
}
// MappingInformationIndex
#[derive(Clone, Debug)]
pub struct MappingInformationIndex(pub BitString);

impl MappingInformationIndex {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(26),
            Some(26),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(26), Some(26), false, &self.0, false)
    }
}

impl AperCodec for MappingInformationIndex {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MappingInformationIndex::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MappingInformationIndex");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MappingInformationIndex");
            e
        })
    }
}
// MappingInformationtoRemove
#[derive(Clone, Debug)]
pub struct MappingInformationtoRemove(pub Vec<MappingInformationIndex>);

impl MappingInformationtoRemove {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(67108864), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(MappingInformationIndex::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(
            data,
            Some(1),
            Some(67108864),
            false,
            self.0.len(),
        )?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for MappingInformationtoRemove {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MappingInformationtoRemove::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MappingInformationtoRemove");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MappingInformationtoRemove");
            e
        })
    }
}
// MaskedImeisv
#[derive(Clone, Debug)]
pub struct MaskedImeisv(pub BitString);

impl MaskedImeisv {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(64),
            Some(64),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(64), Some(64), false, &self.0, false)
    }
}

impl AperCodec for MaskedImeisv {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MaskedImeisv::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MaskedImeisv");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MaskedImeisv");
            e
        })
    }
}
// MaxDataBurstVolume
#[derive(Clone, Copy, Debug)]
pub struct MaxDataBurstVolume(pub i128);

impl MaxDataBurstVolume {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(4095), true)?.0,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(4095), true, self.0, false)
    }
}

impl AperCodec for MaxDataBurstVolume {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MaxDataBurstVolume::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MaxDataBurstVolume");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MaxDataBurstVolume");
            e
        })
    }
}
// MaxPacketLossRate
#[derive(Clone, Copy, Debug)]
pub struct MaxPacketLossRate(pub u16);

impl MaxPacketLossRate {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(1000), false)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(1000), false, self.0 as i128, false)
    }
}

impl AperCodec for MaxPacketLossRate {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MaxPacketLossRate::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MaxPacketLossRate");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MaxPacketLossRate");
            e
        })
    }
}
// MibMessage
#[derive(Clone, Debug)]
pub struct MibMessage(pub Vec<u8>);

impl MibMessage {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for MibMessage {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MibMessage::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MibMessage");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MibMessage");
            e
        })
    }
}
// MeasConfig
#[derive(Clone, Debug)]
pub struct MeasConfig(pub Vec<u8>);

impl MeasConfig {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for MeasConfig {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MeasConfig::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MeasConfig");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MeasConfig");
            e
        })
    }
}
// MeasGapConfig
#[derive(Clone, Debug)]
pub struct MeasGapConfig(pub Vec<u8>);

impl MeasGapConfig {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for MeasGapConfig {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MeasGapConfig::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MeasGapConfig");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MeasGapConfig");
            e
        })
    }
}
// MeasGapSharingConfig
#[derive(Clone, Debug)]
pub struct MeasGapSharingConfig(pub Vec<u8>);

impl MeasGapSharingConfig {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for MeasGapSharingConfig {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MeasGapSharingConfig::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MeasGapSharingConfig");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MeasGapSharingConfig");
            e
        })
    }
}
// MeasurementBeamInfoRequest
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum MeasurementBeamInfoRequest {
    True,
}

impl MeasurementBeamInfoRequest {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for MeasurementBeamInfoRequest {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MeasurementBeamInfoRequest::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MeasurementBeamInfoRequest");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MeasurementBeamInfoRequest");
            e
        })
    }
}
// MeasurementBeamInfo
#[derive(Clone, Debug)]
pub struct MeasurementBeamInfo {
    pub prs_resource_id: Option<PrsResourceId>,
    pub prs_resource_set_id: Option<PrsResourceSetId>,
    pub ssb_index: Option<SsbIndex>,
}

impl MeasurementBeamInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 4)?;
        let prs_resource_id = if optionals[0] {
            Some(PrsResourceId::aper_decode(data)?)
        } else {
            None
        };
        let prs_resource_set_id = if optionals[1] {
            Some(PrsResourceSetId::aper_decode(data)?)
        } else {
            None
        };
        let ssb_index = if optionals[2] {
            Some(SsbIndex::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[3] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            prs_resource_id,
            prs_resource_set_id,
            ssb_index,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.prs_resource_id.is_some());
        optionals.push(self.prs_resource_set_id.is_some());
        optionals.push(self.ssb_index.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        if let Some(x) = &self.prs_resource_id {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.prs_resource_set_id {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.ssb_index {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for MeasurementBeamInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MeasurementBeamInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MeasurementBeamInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MeasurementBeamInfo");
            e
        })
    }
}
// MeasurementTimingConfiguration
#[derive(Clone, Debug)]
pub struct MeasurementTimingConfiguration(pub Vec<u8>);

impl MeasurementTimingConfiguration {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for MeasurementTimingConfiguration {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MeasurementTimingConfiguration::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MeasurementTimingConfiguration");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MeasurementTimingConfiguration");
            e
        })
    }
}
// MessageIdentifier
#[derive(Clone, Debug)]
pub struct MessageIdentifier(pub BitString);

impl MessageIdentifier {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(16),
            Some(16),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(16), Some(16), false, &self.0, false)
    }
}

impl AperCodec for MessageIdentifier {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MessageIdentifier::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MessageIdentifier");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MessageIdentifier");
            e
        })
    }
}
// MultiplexingInfo
#[derive(Clone, Debug)]
pub struct MultiplexingInfo {
    pub iab_mt_cell_list: IabMtCellList,
}

impl MultiplexingInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let iab_mt_cell_list = IabMtCellList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { iab_mt_cell_list })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.iab_mt_cell_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for MultiplexingInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MultiplexingInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MultiplexingInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MultiplexingInfo");
            e
        })
    }
}
// M2Configuration
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum M2Configuration {
    True,
}

impl M2Configuration {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for M2Configuration {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        M2Configuration::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M2Configuration");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M2Configuration");
            e
        })
    }
}
// M5Configuration
#[derive(Clone, Debug)]
pub struct M5Configuration {
    pub m5period: M5period,
    pub m5_links_to_log: M5LinksToLog,
}

impl M5Configuration {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let m5period = M5period::aper_decode(data)?;
        let m5_links_to_log = M5LinksToLog::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            m5period,
            m5_links_to_log,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.m5period.aper_encode(data)?;
        self.m5_links_to_log.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for M5Configuration {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        M5Configuration::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M5Configuration");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M5Configuration");
            e
        })
    }
}
// M5period
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum M5period {
    Ms1024,
    Ms2048,
    Ms5120,
    Ms10240,
    Min1,
}

impl M5period {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(4), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(4), true, *self as i128, false)
    }
}

impl AperCodec for M5period {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        M5period::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M5period");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M5period");
            e
        })
    }
}
// M5LinksToLog
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum M5LinksToLog {
    Uplink,
    Downlink,
    BothUplinkAndDownlink,
}

impl M5LinksToLog {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), true, *self as i128, false)
    }
}

impl AperCodec for M5LinksToLog {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        M5LinksToLog::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M5LinksToLog");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M5LinksToLog");
            e
        })
    }
}
// M6Configuration
#[derive(Clone, Debug)]
pub struct M6Configuration {
    pub m6report_interval: M6reportInterval,
    pub m6_links_to_log: M6LinksToLog,
}

impl M6Configuration {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let m6report_interval = M6reportInterval::aper_decode(data)?;
        let m6_links_to_log = M6LinksToLog::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            m6report_interval,
            m6_links_to_log,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.m6report_interval.aper_encode(data)?;
        self.m6_links_to_log.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for M6Configuration {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        M6Configuration::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M6Configuration");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M6Configuration");
            e
        })
    }
}
// M6reportInterval
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum M6reportInterval {
    Ms120,
    Ms240,
    Ms640,
    Ms1024,
    Ms2048,
    Ms5120,
    Ms10240,
    Ms20480,
    Ms40960,
    Min1,
    Min6,
    Min12,
    Min30,
}

impl M6reportInterval {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(12), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(12), true, *self as i128, false)
    }
}

impl AperCodec for M6reportInterval {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        M6reportInterval::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M6reportInterval");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M6reportInterval");
            e
        })
    }
}
// M6LinksToLog
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum M6LinksToLog {
    Uplink,
    Downlink,
    BothUplinkAndDownlink,
}

impl M6LinksToLog {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), true, *self as i128, false)
    }
}

impl AperCodec for M6LinksToLog {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        M6LinksToLog::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M6LinksToLog");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M6LinksToLog");
            e
        })
    }
}
// M7Configuration
#[derive(Clone, Debug)]
pub struct M7Configuration {
    pub m7period: M7period,
    pub m7_links_to_log: M7LinksToLog,
}

impl M7Configuration {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let m7period = M7period::aper_decode(data)?;
        let m7_links_to_log = M7LinksToLog::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            m7period,
            m7_links_to_log,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.m7period.aper_encode(data)?;
        self.m7_links_to_log.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for M7Configuration {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        M7Configuration::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M7Configuration");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M7Configuration");
            e
        })
    }
}
// M7period
#[derive(Clone, Copy, Debug)]
pub struct M7period(pub u8);

impl M7period {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(60), true)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(60), true, self.0 as i128, false)
    }
}

impl AperCodec for M7period {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        M7period::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M7period");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M7period");
            e
        })
    }
}
// M7LinksToLog
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum M7LinksToLog {
    Downlink,
}

impl M7LinksToLog {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for M7LinksToLog {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        M7LinksToLog::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M7LinksToLog");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("M7LinksToLog");
            e
        })
    }
}
// MdtActivation
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum MdtActivation {
    ImmediateMdtOnly,
    ImmediateMdtAndTrace,
}

impl MdtActivation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for MdtActivation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MdtActivation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MdtActivation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MdtActivation");
            e
        })
    }
}
// MdtConfiguration
#[derive(Clone, Debug)]
pub struct MdtConfiguration {
    pub mdt_activation: MdtActivation,
    pub measurements_to_activate: MeasurementsToActivate,
    pub m2_configuration: Option<M2Configuration>,
    pub m5_configuration: Option<M5Configuration>,
    pub m6_configuration: Option<M6Configuration>,
    pub m7_configuration: Option<M7Configuration>,
}

impl MdtConfiguration {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 5)?;
        let mdt_activation = MdtActivation::aper_decode(data)?;
        let measurements_to_activate = MeasurementsToActivate::aper_decode(data)?;
        let m2_configuration = if optionals[0] {
            Some(M2Configuration::aper_decode(data)?)
        } else {
            None
        };
        let m5_configuration = if optionals[1] {
            Some(M5Configuration::aper_decode(data)?)
        } else {
            None
        };
        let m6_configuration = if optionals[2] {
            Some(M6Configuration::aper_decode(data)?)
        } else {
            None
        };
        let m7_configuration = if optionals[3] {
            Some(M7Configuration::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[4] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            mdt_activation,
            measurements_to_activate,
            m2_configuration,
            m5_configuration,
            m6_configuration,
            m7_configuration,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.m2_configuration.is_some());
        optionals.push(self.m5_configuration.is_some());
        optionals.push(self.m6_configuration.is_some());
        optionals.push(self.m7_configuration.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.mdt_activation.aper_encode(data)?;
        self.measurements_to_activate.aper_encode(data)?;
        if let Some(x) = &self.m2_configuration {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.m5_configuration {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.m6_configuration {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.m7_configuration {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for MdtConfiguration {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MdtConfiguration::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MdtConfiguration");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MdtConfiguration");
            e
        })
    }
}
// MdtPlmnList
#[derive(Clone, Debug)]
pub struct MdtPlmnList(pub Vec<PlmnIdentity>);

impl MdtPlmnList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(16), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(PlmnIdentity::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(16), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for MdtPlmnList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MdtPlmnList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MdtPlmnList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MdtPlmnList");
            e
        })
    }
}
// MeasuredResultsValue
#[derive(Clone, Debug)]
pub enum MeasuredResultsValue {
    UlAngleOfArrival(UlAoA),
    UlSrsRsrp(UlSrsRsrp),
    UlRtoa(UlRtoaMeasurement),
    GnbRxTxTimeDiff(GnbRxTxTimeDiff),
}

impl MeasuredResultsValue {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 4, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::UlAngleOfArrival(UlAoA::aper_decode(data)?)),
            1 => Ok(Self::UlSrsRsrp(UlSrsRsrp::aper_decode(data)?)),
            2 => Ok(Self::UlRtoa(UlRtoaMeasurement::aper_decode(data)?)),
            3 => Ok(Self::GnbRxTxTimeDiff(GnbRxTxTimeDiff::aper_decode(data)?)),
            4 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::UlAngleOfArrival(x) => {
                aper::encode::encode_choice_idx(data, 0, 4, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::UlSrsRsrp(x) => {
                aper::encode::encode_choice_idx(data, 0, 4, false, 1, false)?;
                x.aper_encode(data)
            }
            Self::UlRtoa(x) => {
                aper::encode::encode_choice_idx(data, 0, 4, false, 2, false)?;
                x.aper_encode(data)
            }
            Self::GnbRxTxTimeDiff(x) => {
                aper::encode::encode_choice_idx(data, 0, 4, false, 3, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for MeasuredResultsValue {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MeasuredResultsValue::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MeasuredResultsValue");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MeasuredResultsValue");
            e
        })
    }
}
// MeasurementsToActivate
#[derive(Clone, Debug)]
pub struct MeasurementsToActivate(pub BitString);

impl MeasurementsToActivate {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(8),
            Some(8),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(8), Some(8), false, &self.0, false)
    }
}

impl AperCodec for MeasurementsToActivate {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MeasurementsToActivate::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MeasurementsToActivate");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MeasurementsToActivate");
            e
        })
    }
}
// NeedforGap
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum NeedforGap {
    True,
}

impl NeedforGap {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for NeedforGap {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NeedforGap::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NeedforGap");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NeedforGap");
            e
        })
    }
}
// NeighbourCellInformationItem
#[derive(Clone, Debug)]
pub struct NeighbourCellInformationItem {
    pub nr_cgi: NrCgi,
    pub intended_tdd_dl_ul_config: Option<IntendedTddDlUlConfig>,
}

impl NeighbourCellInformationItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let nr_cgi = NrCgi::aper_decode(data)?;
        let intended_tdd_dl_ul_config = if optionals[0] {
            Some(IntendedTddDlUlConfig::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            nr_cgi,
            intended_tdd_dl_ul_config,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.intended_tdd_dl_ul_config.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.nr_cgi.aper_encode(data)?;
        if let Some(x) = &self.intended_tdd_dl_ul_config {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for NeighbourCellInformationItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NeighbourCellInformationItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NeighbourCellInformationItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NeighbourCellInformationItem");
            e
        })
    }
}
// NgranAllocationAndRetentionPriority
#[derive(Clone, Debug)]
pub struct NgranAllocationAndRetentionPriority {
    pub priority_level: PriorityLevel,
    pub pre_emption_capability: PreEmptionCapability,
    pub pre_emption_vulnerability: PreEmptionVulnerability,
}

impl NgranAllocationAndRetentionPriority {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let priority_level = PriorityLevel::aper_decode(data)?;
        let pre_emption_capability = PreEmptionCapability::aper_decode(data)?;
        let pre_emption_vulnerability = PreEmptionVulnerability::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            priority_level,
            pre_emption_capability,
            pre_emption_vulnerability,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.priority_level.aper_encode(data)?;
        self.pre_emption_capability.aper_encode(data)?;
        self.pre_emption_vulnerability.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for NgranAllocationAndRetentionPriority {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NgranAllocationAndRetentionPriority::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NgranAllocationAndRetentionPriority");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NgranAllocationAndRetentionPriority");
            e
        })
    }
}
// NgranHighAccuracyAccessPointPosition
#[derive(Clone, Debug)]
pub struct NgranHighAccuracyAccessPointPosition {
    pub latitude: i32,
    pub longitude: i32,
    pub altitude: i32,
    pub uncertainty_semi_major: u8,
    pub uncertainty_semi_minor: u8,
    pub orientation_of_major_axis: u8,
    pub horizontal_confidence: u8,
    pub uncertainty_altitude: u8,
    pub vertical_confidence: u8,
}

impl NgranHighAccuracyAccessPointPosition {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let latitude =
            aper::decode::decode_integer(data, Some(-2147483648), Some(2147483647), false)?.0
                as i32;
        let longitude =
            aper::decode::decode_integer(data, Some(-2147483648), Some(2147483647), false)?.0
                as i32;
        let altitude =
            aper::decode::decode_integer(data, Some(-64000), Some(1280000), false)?.0 as i32;
        let uncertainty_semi_major =
            aper::decode::decode_integer(data, Some(0), Some(255), false)?.0 as u8;
        let uncertainty_semi_minor =
            aper::decode::decode_integer(data, Some(0), Some(255), false)?.0 as u8;
        let orientation_of_major_axis =
            aper::decode::decode_integer(data, Some(0), Some(179), false)?.0 as u8;
        let horizontal_confidence =
            aper::decode::decode_integer(data, Some(0), Some(100), false)?.0 as u8;
        let uncertainty_altitude =
            aper::decode::decode_integer(data, Some(0), Some(255), false)?.0 as u8;
        let vertical_confidence =
            aper::decode::decode_integer(data, Some(0), Some(100), false)?.0 as u8;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            latitude,
            longitude,
            altitude,
            uncertainty_semi_major,
            uncertainty_semi_minor,
            orientation_of_major_axis,
            horizontal_confidence,
            uncertainty_altitude,
            vertical_confidence,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(-2147483648),
            Some(2147483647),
            false,
            self.latitude as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(-2147483648),
            Some(2147483647),
            false,
            self.longitude as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(-64000),
            Some(1280000),
            false,
            self.altitude as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(255),
            false,
            self.uncertainty_semi_major as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(255),
            false,
            self.uncertainty_semi_minor as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(179),
            false,
            self.orientation_of_major_axis as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(100),
            false,
            self.horizontal_confidence as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(255),
            false,
            self.uncertainty_altitude as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(100),
            false,
            self.vertical_confidence as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for NgranHighAccuracyAccessPointPosition {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NgranHighAccuracyAccessPointPosition::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NgranHighAccuracyAccessPointPosition");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NgranHighAccuracyAccessPointPosition");
            e
        })
    }
}
// Nid
#[derive(Clone, Debug)]
pub struct Nid(pub BitString);

impl Nid {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(44),
            Some(44),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(44), Some(44), false, &self.0, false)
    }
}

impl AperCodec for Nid {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Nid::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Nid");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Nid");
            e
        })
    }
}
// NrCgiListForRestartItem
#[derive(Clone, Debug)]
pub struct NrCgiListForRestartItem {
    pub nr_cgi: NrCgi,
}

impl NrCgiListForRestartItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let nr_cgi = NrCgi::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { nr_cgi })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.nr_cgi.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for NrCgiListForRestartItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrCgiListForRestartItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrCgiListForRestartItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrCgiListForRestartItem");
            e
        })
    }
}
// NrPrsBeamInformation
#[derive(Clone, Debug)]
pub struct NrPrsBeamInformation {
    pub nr_prs_beam_information_list: NrPrsBeamInformationList,
    pub lc_sto_gcs_translation_list: Option<LcStoGcsTranslationList>,
}

impl NrPrsBeamInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let nr_prs_beam_information_list = NrPrsBeamInformationList::aper_decode(data)?;
        let lc_sto_gcs_translation_list = if optionals[0] {
            Some(LcStoGcsTranslationList::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            nr_prs_beam_information_list,
            lc_sto_gcs_translation_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.lc_sto_gcs_translation_list.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.nr_prs_beam_information_list.aper_encode(data)?;
        if let Some(x) = &self.lc_sto_gcs_translation_list {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for NrPrsBeamInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrPrsBeamInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrPrsBeamInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrPrsBeamInformation");
            e
        })
    }
}
// NrPrsBeamInformationList
#[derive(Clone, Debug)]
pub struct NrPrsBeamInformationList(pub Vec<NrPrsBeamInformationItem>);

impl NrPrsBeamInformationList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(2), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(NrPrsBeamInformationItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(2), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for NrPrsBeamInformationList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrPrsBeamInformationList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrPrsBeamInformationList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrPrsBeamInformationList");
            e
        })
    }
}
// NrPrsBeamInformationItem
#[derive(Clone, Debug)]
pub struct NrPrsBeamInformationItem {
    pub prs_resource_set_id: PrsResourceSetId,
    pub prs_angle_list: PrsAngleList,
}

impl NrPrsBeamInformationItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let prs_resource_set_id = PrsResourceSetId::aper_decode(data)?;
        let prs_angle_list = PrsAngleList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            prs_resource_set_id,
            prs_angle_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.prs_resource_set_id.aper_encode(data)?;
        self.prs_angle_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for NrPrsBeamInformationItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrPrsBeamInformationItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrPrsBeamInformationItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrPrsBeamInformationItem");
            e
        })
    }
}
// NonDynamic5qiDescriptor
#[derive(Clone, Debug)]
pub struct NonDynamic5qiDescriptor {
    pub five_qi: u8,
    pub qos_priority_level: Option<u8>,
    pub averaging_window: Option<AveragingWindow>,
    pub max_data_burst_volume: Option<MaxDataBurstVolume>,
    pub cn_packet_delay_budget_downlink: Option<ExtendedPacketDelayBudget>,
    pub cn_packet_delay_budget_uplink: Option<ExtendedPacketDelayBudget>,
}

impl NonDynamic5qiDescriptor {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 4)?;
        let five_qi = aper::decode::decode_integer(data, Some(0), Some(255), true)?.0 as u8;
        let qos_priority_level = if optionals[0] {
            Some(aper::decode::decode_integer(data, Some(1), Some(127), false)?.0 as u8)
        } else {
            None
        };
        let averaging_window = if optionals[1] {
            Some(AveragingWindow::aper_decode(data)?)
        } else {
            None
        };
        let max_data_burst_volume = if optionals[2] {
            Some(MaxDataBurstVolume::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut cn_packet_delay_budget_downlink: Option<ExtendedPacketDelayBudget> = None;
        let mut cn_packet_delay_budget_uplink: Option<ExtendedPacketDelayBudget> = None;

        if optionals[3] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    362 => {
                        cn_packet_delay_budget_downlink =
                            Some(ExtendedPacketDelayBudget::aper_decode(data)?)
                    }
                    369 => {
                        cn_packet_delay_budget_uplink =
                            Some(ExtendedPacketDelayBudget::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            five_qi,
            qos_priority_level,
            averaging_window,
            max_data_burst_volume,
            cn_packet_delay_budget_downlink,
            cn_packet_delay_budget_uplink,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.qos_priority_level.is_some());
        optionals.push(self.averaging_window.is_some());
        optionals.push(self.max_data_burst_volume.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(data, Some(0), Some(255), true, self.five_qi as i128, false)?;
        if let Some(x) = &self.qos_priority_level {
            aper::encode::encode_integer(data, Some(1), Some(127), false, *x as i128, false)?;
        }
        if let Some(x) = &self.averaging_window {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.max_data_burst_volume {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for NonDynamic5qiDescriptor {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NonDynamic5qiDescriptor::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NonDynamic5qiDescriptor");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NonDynamic5qiDescriptor");
            e
        })
    }
}
// NonDynamicPqiDescriptor
#[derive(Clone, Debug)]
pub struct NonDynamicPqiDescriptor {
    pub five_qi: u8,
    pub qos_priority_level: Option<u8>,
    pub averaging_window: Option<AveragingWindow>,
    pub max_data_burst_volume: Option<MaxDataBurstVolume>,
}

impl NonDynamicPqiDescriptor {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 4)?;
        let five_qi = aper::decode::decode_integer(data, Some(0), Some(255), true)?.0 as u8;
        let qos_priority_level = if optionals[0] {
            Some(aper::decode::decode_integer(data, Some(1), Some(8), true)?.0 as u8)
        } else {
            None
        };
        let averaging_window = if optionals[1] {
            Some(AveragingWindow::aper_decode(data)?)
        } else {
            None
        };
        let max_data_burst_volume = if optionals[2] {
            Some(MaxDataBurstVolume::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[3] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            five_qi,
            qos_priority_level,
            averaging_window,
            max_data_burst_volume,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.qos_priority_level.is_some());
        optionals.push(self.averaging_window.is_some());
        optionals.push(self.max_data_burst_volume.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(data, Some(0), Some(255), true, self.five_qi as i128, false)?;
        if let Some(x) = &self.qos_priority_level {
            aper::encode::encode_integer(data, Some(1), Some(8), true, *x as i128, false)?;
        }
        if let Some(x) = &self.averaging_window {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.max_data_burst_volume {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for NonDynamicPqiDescriptor {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NonDynamicPqiDescriptor::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NonDynamicPqiDescriptor");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NonDynamicPqiDescriptor");
            e
        })
    }
}
// NonUpTrafficType
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum NonUpTrafficType {
    UeAssociated,
    NonUeAssociated,
    NonF1,
    BapControlPdu,
}

impl NonUpTrafficType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for NonUpTrafficType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NonUpTrafficType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NonUpTrafficType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NonUpTrafficType");
            e
        })
    }
}
// NoofDownlinkSymbols
#[derive(Clone, Copy, Debug)]
pub struct NoofDownlinkSymbols(pub u8);

impl NoofDownlinkSymbols {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(14), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(14), false, self.0 as i128, false)
    }
}

impl AperCodec for NoofDownlinkSymbols {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NoofDownlinkSymbols::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NoofDownlinkSymbols");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NoofDownlinkSymbols");
            e
        })
    }
}
// NoofUplinkSymbols
#[derive(Clone, Copy, Debug)]
pub struct NoofUplinkSymbols(pub u8);

impl NoofUplinkSymbols {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(14), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(14), false, self.0 as i128, false)
    }
}

impl AperCodec for NoofUplinkSymbols {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NoofUplinkSymbols::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NoofUplinkSymbols");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NoofUplinkSymbols");
            e
        })
    }
}
// NotificationCause
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum NotificationCause {
    Fulfilled,
    NotFulfilled,
}

impl NotificationCause {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for NotificationCause {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NotificationCause::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NotificationCause");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NotificationCause");
            e
        })
    }
}
// NotificationControl
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum NotificationControl {
    Active,
    NotActive,
}

impl NotificationControl {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for NotificationControl {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NotificationControl::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NotificationControl");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NotificationControl");
            e
        })
    }
}
// NotificationInformation
#[derive(Clone, Debug)]
pub struct NotificationInformation {
    pub message_identifier: MessageIdentifier,
    pub serial_number: SerialNumber,
}

impl NotificationInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let message_identifier = MessageIdentifier::aper_decode(data)?;
        let serial_number = SerialNumber::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            message_identifier,
            serial_number,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.message_identifier.aper_encode(data)?;
        self.serial_number.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for NotificationInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NotificationInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NotificationInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NotificationInformation");
            e
        })
    }
}
// NpnBroadcastInformation
#[derive(Clone, Debug)]
pub enum NpnBroadcastInformation {
    SnpnBroadcastInformation(NpnBroadcastInformationSnpn),
    PniNpnBroadcastInformation(NpnBroadcastInformationPniNpn),
}

impl NpnBroadcastInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::SnpnBroadcastInformation(
                NpnBroadcastInformationSnpn::aper_decode(data)?,
            )),
            1 => Ok(Self::PniNpnBroadcastInformation(
                NpnBroadcastInformationPniNpn::aper_decode(data)?,
            )),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::SnpnBroadcastInformation(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::PniNpnBroadcastInformation(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for NpnBroadcastInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NpnBroadcastInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NpnBroadcastInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NpnBroadcastInformation");
            e
        })
    }
}
// NpnBroadcastInformationSnpn
#[derive(Clone, Debug)]
pub struct NpnBroadcastInformationSnpn {
    pub broadcast_snpnid_list: BroadcastSnpnIdList,
}

impl NpnBroadcastInformationSnpn {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let broadcast_snpnid_list = BroadcastSnpnIdList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            broadcast_snpnid_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.broadcast_snpnid_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for NpnBroadcastInformationSnpn {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NpnBroadcastInformationSnpn::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NpnBroadcastInformationSnpn");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NpnBroadcastInformationSnpn");
            e
        })
    }
}
// NpnBroadcastInformationPniNpn
#[derive(Clone, Debug)]
pub struct NpnBroadcastInformationPniNpn {
    pub broadcast_pni_npn_id_information: BroadcastPniNpnIdList,
}

impl NpnBroadcastInformationPniNpn {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let broadcast_pni_npn_id_information = BroadcastPniNpnIdList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            broadcast_pni_npn_id_information,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.broadcast_pni_npn_id_information.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for NpnBroadcastInformationPniNpn {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NpnBroadcastInformationPniNpn::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NpnBroadcastInformationPniNpn");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NpnBroadcastInformationPniNpn");
            e
        })
    }
}
// NpnSupportInfo
#[derive(Clone, Debug)]
pub enum NpnSupportInfo {
    SnpnInformation(Nid),
}

impl NpnSupportInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 1, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::SnpnInformation(Nid::aper_decode(data)?)),
            1 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::SnpnInformation(x) => {
                aper::encode::encode_choice_idx(data, 0, 1, false, 0, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for NpnSupportInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NpnSupportInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NpnSupportInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NpnSupportInfo");
            e
        })
    }
}
// NrCarrierList
#[derive(Clone, Debug)]
pub struct NrCarrierList(pub Vec<NrCarrierItem>);

impl NrCarrierList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(5), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(NrCarrierItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(5), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for NrCarrierList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrCarrierList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrCarrierList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrCarrierList");
            e
        })
    }
}
// NrCarrierItem
#[derive(Clone, Debug)]
pub struct NrCarrierItem {
    pub carrier_scs: NrScs,
    pub offset_to_carrier: u16,
    pub carrier_bandwidth: u16,
}

impl NrCarrierItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let carrier_scs = NrScs::aper_decode(data)?;
        let offset_to_carrier =
            aper::decode::decode_integer(data, Some(0), Some(2199), true)?.0 as u16;
        let carrier_bandwidth =
            aper::decode::decode_integer(data, Some(0), Some(275), true)?.0 as u16;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            carrier_scs,
            offset_to_carrier,
            carrier_bandwidth,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.carrier_scs.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(2199),
            true,
            self.offset_to_carrier as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(275),
            true,
            self.carrier_bandwidth as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for NrCarrierItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrCarrierItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrCarrierItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrCarrierItem");
            e
        })
    }
}
// NrFreqInfo
#[derive(Clone, Debug)]
pub struct NrFreqInfo {
    pub nr_arfcn: u32,
    pub sul_information: Option<SulInformation>,
    pub freq_band_list_nr: Vec<FreqBandNrItem>,
    pub frequency_shift7p5khz: Option<FrequencyShift7p5khz>,
}

impl NrFreqInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let nr_arfcn = aper::decode::decode_integer(data, Some(0), Some(3279165), false)?.0 as u32;
        let sul_information = if optionals[0] {
            Some(SulInformation::aper_decode(data)?)
        } else {
            None
        };
        let freq_band_list_nr = {
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(FreqBandNrItem::aper_decode(data)?);
            }
            items
        };

        // Process the extension container
        let mut frequency_shift7p5khz: Option<FrequencyShift7p5khz> = None;

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    356 => frequency_shift7p5khz = Some(FrequencyShift7p5khz::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            nr_arfcn,
            sul_information,
            freq_band_list_nr,
            frequency_shift7p5khz,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.sul_information.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(3279165),
            false,
            self.nr_arfcn as i128,
            false,
        )?;
        if let Some(x) = &self.sul_information {
            x.aper_encode(data)?;
        }
        aper::encode::encode_length_determinent(
            data,
            Some(1),
            Some(32),
            false,
            self.freq_band_list_nr.len(),
        )?;
        for x in &self.freq_band_list_nr {
            x.aper_encode(data)?;
        }
        Ok(())?;

        Ok(())
    }
}

impl AperCodec for NrFreqInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrFreqInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrFreqInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrFreqInfo");
            e
        })
    }
}
// NrCgi
#[derive(Clone, Debug)]
pub struct NrCgi {
    pub plmn_identity: PlmnIdentity,
    pub nr_cell_identity: NrCellIdentity,
}

impl NrCgi {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let plmn_identity = PlmnIdentity::aper_decode(data)?;
        let nr_cell_identity = NrCellIdentity::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            plmn_identity,
            nr_cell_identity,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.plmn_identity.aper_encode(data)?;
        self.nr_cell_identity.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for NrCgi {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrCgi::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrCgi");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrCgi");
            e
        })
    }
}
// NrModeInfo
#[derive(Clone, Debug)]
pub enum NrModeInfo {
    Fdd(FddInfo),
    Tdd(TddInfo),
}

impl NrModeInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::Fdd(FddInfo::aper_decode(data)?)),
            1 => Ok(Self::Tdd(TddInfo::aper_decode(data)?)),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::Fdd(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::Tdd(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for NrModeInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrModeInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrModeInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrModeInfo");
            e
        })
    }
}
// NrPrachConfig
#[derive(Clone, Debug)]
pub struct NrPrachConfig {
    pub ul_prach_config_list: Option<NrPrachConfigList>,
    pub sul_prach_config_list: Option<NrPrachConfigList>,
}

impl NrPrachConfig {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 3)?;
        let ul_prach_config_list = if optionals[0] {
            Some(NrPrachConfigList::aper_decode(data)?)
        } else {
            None
        };
        let sul_prach_config_list = if optionals[1] {
            Some(NrPrachConfigList::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ul_prach_config_list,
            sul_prach_config_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.ul_prach_config_list.is_some());
        optionals.push(self.sul_prach_config_list.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        if let Some(x) = &self.ul_prach_config_list {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.sul_prach_config_list {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for NrPrachConfig {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrPrachConfig::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrPrachConfig");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrPrachConfig");
            e
        })
    }
}
// NrCellIdentity
#[derive(Clone, Debug)]
pub struct NrCellIdentity(pub BitString);

impl NrCellIdentity {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(36),
            Some(36),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(36), Some(36), false, &self.0, false)
    }
}

impl AperCodec for NrCellIdentity {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrCellIdentity::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrCellIdentity");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrCellIdentity");
            e
        })
    }
}
// NrNrB
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum NrNrB {
    Nrb11,
    Nrb18,
    Nrb24,
    Nrb25,
    Nrb31,
    Nrb32,
    Nrb38,
    Nrb51,
    Nrb52,
    Nrb65,
    Nrb66,
    Nrb78,
    Nrb79,
    Nrb93,
    Nrb106,
    Nrb107,
    Nrb121,
    Nrb132,
    Nrb133,
    Nrb135,
    Nrb160,
    Nrb162,
    Nrb189,
    Nrb216,
    Nrb217,
    Nrb245,
    Nrb264,
    Nrb270,
    Nrb273,
}

impl NrNrB {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(28), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(28), true, *self as i128, false)
    }
}

impl AperCodec for NrNrB {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrNrB::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrNrB");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrNrB");
            e
        })
    }
}
// NrPci
#[derive(Clone, Copy, Debug)]
pub struct NrPci(pub u16);

impl NrPci {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(1007), false)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(1007), false, self.0 as i128, false)
    }
}

impl AperCodec for NrPci {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrPci::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrPci");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrPci");
            e
        })
    }
}
// NrPrachConfigList
#[derive(Clone, Debug)]
pub struct NrPrachConfigList(pub Vec<NrPrachConfigItem>);

impl NrPrachConfigList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(0), Some(16), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(NrPrachConfigItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(0), Some(16), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for NrPrachConfigList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrPrachConfigList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrPrachConfigList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrPrachConfigList");
            e
        })
    }
}
// NrPrachConfigItem
#[derive(Clone, Debug)]
pub struct NrPrachConfigItem {
    pub nr_scs: NrScs,
    pub prach_freq_startfrom_carrier: u16,
    pub msg_1fdm: Msg1fdm,
    pub parch_config_index: i128,
    pub ssb_per_rach_occasion: SsbPerRachOccasion,
    pub freq_domain_length: FreqDomainLength,
    pub zero_correl_zone_config: u8,
}

impl NrPrachConfigItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let nr_scs = NrScs::aper_decode(data)?;
        let prach_freq_startfrom_carrier =
            aper::decode::decode_integer(data, Some(0), Some(274), true)?.0 as u16;
        let msg_1fdm = Msg1fdm::aper_decode(data)?;
        let parch_config_index = aper::decode::decode_integer(data, Some(0), Some(255), true)?.0;
        let ssb_per_rach_occasion = SsbPerRachOccasion::aper_decode(data)?;
        let freq_domain_length = FreqDomainLength::aper_decode(data)?;
        let zero_correl_zone_config =
            aper::decode::decode_integer(data, Some(0), Some(15), false)?.0 as u8;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            nr_scs,
            prach_freq_startfrom_carrier,
            msg_1fdm,
            parch_config_index,
            ssb_per_rach_occasion,
            freq_domain_length,
            zero_correl_zone_config,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.nr_scs.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(274),
            true,
            self.prach_freq_startfrom_carrier as i128,
            false,
        )?;
        self.msg_1fdm.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(255),
            true,
            self.parch_config_index,
            false,
        )?;
        self.ssb_per_rach_occasion.aper_encode(data)?;
        self.freq_domain_length.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(15),
            false,
            self.zero_correl_zone_config as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for NrPrachConfigItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrPrachConfigItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrPrachConfigItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrPrachConfigItem");
            e
        })
    }
}
// NrScs
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum NrScs {
    Scs15,
    Scs30,
    Scs60,
    Scs120,
}

impl NrScs {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for NrScs {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrScs::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrScs");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrScs");
            e
        })
    }
}
// NrUeRlfReportContainer
#[derive(Clone, Debug)]
pub struct NrUeRlfReportContainer(pub Vec<u8>);

impl NrUeRlfReportContainer {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for NrUeRlfReportContainer {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrUeRlfReportContainer::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrUeRlfReportContainer");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrUeRlfReportContainer");
            e
        })
    }
}
// NumberofActiveUes
#[derive(Clone, Copy, Debug)]
pub struct NumberofActiveUes(pub u32);

impl NumberofActiveUes {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(16777215), true)?.0 as u32,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(16777215), true, self.0 as i128, false)
    }
}

impl AperCodec for NumberofActiveUes {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NumberofActiveUes::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NumberofActiveUes");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NumberofActiveUes");
            e
        })
    }
}
// NumberOfBroadcasts
#[derive(Clone, Copy, Debug)]
pub struct NumberOfBroadcasts(pub u16);

impl NumberOfBroadcasts {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(65535), false)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(65535), false, self.0 as i128, false)
    }
}

impl AperCodec for NumberOfBroadcasts {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NumberOfBroadcasts::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NumberOfBroadcasts");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NumberOfBroadcasts");
            e
        })
    }
}
// NumberofBroadcastRequest
#[derive(Clone, Copy, Debug)]
pub struct NumberofBroadcastRequest(pub u16);

impl NumberofBroadcastRequest {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(65535), false)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(65535), false, self.0 as i128, false)
    }
}

impl AperCodec for NumberofBroadcastRequest {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NumberofBroadcastRequest::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NumberofBroadcastRequest");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NumberofBroadcastRequest");
            e
        })
    }
}
// NumDlulSymbols
#[derive(Clone, Debug)]
pub struct NumDlulSymbols {
    pub num_dl_symbols: u8,
    pub num_ul_symbols: u8,
}

impl NumDlulSymbols {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let num_dl_symbols = aper::decode::decode_integer(data, Some(0), Some(13), true)?.0 as u8;
        let num_ul_symbols = aper::decode::decode_integer(data, Some(0), Some(13), true)?.0 as u8;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            num_dl_symbols,
            num_ul_symbols,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(13),
            true,
            self.num_dl_symbols as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(13),
            true,
            self.num_ul_symbols as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for NumDlulSymbols {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NumDlulSymbols::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NumDlulSymbols");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NumDlulSymbols");
            e
        })
    }
}
// NrV2xServicesAuthorized
#[derive(Clone, Debug)]
pub struct NrV2xServicesAuthorized {
    pub vehicle_ue: Option<VehicleUe>,
    pub pedestrian_ue: Option<PedestrianUe>,
}

impl NrV2xServicesAuthorized {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 3)?;
        let vehicle_ue = if optionals[0] {
            Some(VehicleUe::aper_decode(data)?)
        } else {
            None
        };
        let pedestrian_ue = if optionals[1] {
            Some(PedestrianUe::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            vehicle_ue,
            pedestrian_ue,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.vehicle_ue.is_some());
        optionals.push(self.pedestrian_ue.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        if let Some(x) = &self.vehicle_ue {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.pedestrian_ue {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for NrV2xServicesAuthorized {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrV2xServicesAuthorized::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrV2xServicesAuthorized");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrV2xServicesAuthorized");
            e
        })
    }
}
// NrUeSidelinkAggregateMaximumBitrate
#[derive(Clone, Debug)]
pub struct NrUeSidelinkAggregateMaximumBitrate {
    pub ue_nr_sidelink_aggregate_maximum_bitrate: BitRate,
}

impl NrUeSidelinkAggregateMaximumBitrate {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let ue_nr_sidelink_aggregate_maximum_bitrate = BitRate::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ue_nr_sidelink_aggregate_maximum_bitrate,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.ue_nr_sidelink_aggregate_maximum_bitrate
            .aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for NrUeSidelinkAggregateMaximumBitrate {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrUeSidelinkAggregateMaximumBitrate::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrUeSidelinkAggregateMaximumBitrate");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrUeSidelinkAggregateMaximumBitrate");
            e
        })
    }
}
// NzpCsiRsResourceId
#[derive(Clone, Copy, Debug)]
pub struct NzpCsiRsResourceId(pub u8);

impl NzpCsiRsResourceId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(191), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(191), false, self.0 as i128, false)
    }
}

impl AperCodec for NzpCsiRsResourceId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NzpCsiRsResourceId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NzpCsiRsResourceId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NzpCsiRsResourceId");
            e
        })
    }
}
// OffsetToPointA
#[derive(Clone, Copy, Debug)]
pub struct OffsetToPointA(pub u16);

impl OffsetToPointA {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(2199), true)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(2199), true, self.0 as i128, false)
    }
}

impl AperCodec for OffsetToPointA {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        OffsetToPointA::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("OffsetToPointA");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("OffsetToPointA");
            e
        })
    }
}
// PacketDelayBudget
#[derive(Clone, Copy, Debug)]
pub struct PacketDelayBudget(pub u16);

impl PacketDelayBudget {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(1023), true)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(1023), true, self.0 as i128, false)
    }
}

impl AperCodec for PacketDelayBudget {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PacketDelayBudget::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PacketDelayBudget");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PacketDelayBudget");
            e
        })
    }
}
// PacketErrorRate
#[derive(Clone, Debug)]
pub struct PacketErrorRate {
    pub per_scalar: PerScalar,
    pub per_exponent: PerExponent,
}

impl PacketErrorRate {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let per_scalar = PerScalar::aper_decode(data)?;
        let per_exponent = PerExponent::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            per_scalar,
            per_exponent,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.per_scalar.aper_encode(data)?;
        self.per_exponent.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for PacketErrorRate {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PacketErrorRate::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PacketErrorRate");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PacketErrorRate");
            e
        })
    }
}
// PerScalar
#[derive(Clone, Copy, Debug)]
pub struct PerScalar(pub u8);

impl PerScalar {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(9), true)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(9), true, self.0 as i128, false)
    }
}

impl AperCodec for PerScalar {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PerScalar::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PerScalar");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PerScalar");
            e
        })
    }
}
// PerExponent
#[derive(Clone, Copy, Debug)]
pub struct PerExponent(pub u8);

impl PerExponent {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(9), true)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(9), true, self.0 as i128, false)
    }
}

impl AperCodec for PerExponent {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PerExponent::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PerExponent");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PerExponent");
            e
        })
    }
}
// PagingCellItem
#[derive(Clone, Debug)]
pub struct PagingCellItem {
    pub nr_cgi: NrCgi,
}

impl PagingCellItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let nr_cgi = NrCgi::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { nr_cgi })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.nr_cgi.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for PagingCellItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PagingCellItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PagingCellItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PagingCellItem");
            e
        })
    }
}
// PagingDrx
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum PagingDrx {
    V32,
    V64,
    V128,
    V256,
}

impl PagingDrx {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for PagingDrx {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PagingDrx::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PagingDrx");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PagingDrx");
            e
        })
    }
}
// PagingIdentity
#[derive(Clone, Debug)]
pub enum PagingIdentity {
    RanUePagingIdentity(RanUePagingIdentity),
    CnUePagingIdentity(CnUePagingIdentity),
}

impl PagingIdentity {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::RanUePagingIdentity(RanUePagingIdentity::aper_decode(
                data,
            )?)),
            1 => Ok(Self::CnUePagingIdentity(CnUePagingIdentity::aper_decode(
                data,
            )?)),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::RanUePagingIdentity(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::CnUePagingIdentity(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for PagingIdentity {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PagingIdentity::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PagingIdentity");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PagingIdentity");
            e
        })
    }
}
// PagingOrigin
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum PagingOrigin {
    Non3gpp,
}

impl PagingOrigin {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for PagingOrigin {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PagingOrigin::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PagingOrigin");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PagingOrigin");
            e
        })
    }
}
// PagingPriority
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum PagingPriority {
    Priolevel1,
    Priolevel2,
    Priolevel3,
    Priolevel4,
    Priolevel5,
    Priolevel6,
    Priolevel7,
    Priolevel8,
}

impl PagingPriority {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(7), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(7), true, *self as i128, false)
    }
}

impl AperCodec for PagingPriority {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PagingPriority::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PagingPriority");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PagingPriority");
            e
        })
    }
}
// RelativePathDelay
#[derive(Clone, Debug)]
pub enum RelativePathDelay {
    K0(u16),
    K1(u16),
    K2(u16),
    K3(u16),
    K4(u16),
    K5(u16),
}

impl RelativePathDelay {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 6, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::K0(
                aper::decode::decode_integer(data, Some(0), Some(16351), false)?.0 as u16,
            )),
            1 => Ok(Self::K1(
                aper::decode::decode_integer(data, Some(0), Some(8176), false)?.0 as u16,
            )),
            2 => Ok(Self::K2(
                aper::decode::decode_integer(data, Some(0), Some(4088), false)?.0 as u16,
            )),
            3 => Ok(Self::K3(
                aper::decode::decode_integer(data, Some(0), Some(2044), false)?.0 as u16,
            )),
            4 => Ok(Self::K4(
                aper::decode::decode_integer(data, Some(0), Some(1022), false)?.0 as u16,
            )),
            5 => Ok(Self::K5(
                aper::decode::decode_integer(data, Some(0), Some(511), false)?.0 as u16,
            )),
            6 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::K0(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 0, false)?;
                aper::encode::encode_integer(data, Some(0), Some(16351), false, *x as i128, false)
            }
            Self::K1(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 1, false)?;
                aper::encode::encode_integer(data, Some(0), Some(8176), false, *x as i128, false)
            }
            Self::K2(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 2, false)?;
                aper::encode::encode_integer(data, Some(0), Some(4088), false, *x as i128, false)
            }
            Self::K3(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 3, false)?;
                aper::encode::encode_integer(data, Some(0), Some(2044), false, *x as i128, false)
            }
            Self::K4(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 4, false)?;
                aper::encode::encode_integer(data, Some(0), Some(1022), false, *x as i128, false)
            }
            Self::K5(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 5, false)?;
                aper::encode::encode_integer(data, Some(0), Some(511), false, *x as i128, false)
            }
        }
    }
}

impl AperCodec for RelativePathDelay {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RelativePathDelay::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RelativePathDelay");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RelativePathDelay");
            e
        })
    }
}
// PathlossReferenceInfo
#[derive(Clone, Debug)]
pub struct PathlossReferenceInfo {
    pub pathloss_reference_signal: PathlossReferenceSignal,
}

impl PathlossReferenceInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let pathloss_reference_signal = PathlossReferenceSignal::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            pathloss_reference_signal,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.pathloss_reference_signal.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for PathlossReferenceInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PathlossReferenceInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PathlossReferenceInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PathlossReferenceInfo");
            e
        })
    }
}
// PathlossReferenceSignal
#[derive(Clone, Debug)]
pub enum PathlossReferenceSignal {
    Ssb(Ssb),
    DlPrs(DlPrs),
}

impl PathlossReferenceSignal {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::Ssb(Ssb::aper_decode(data)?)),
            1 => Ok(Self::DlPrs(DlPrs::aper_decode(data)?)),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::Ssb(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::DlPrs(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for PathlossReferenceSignal {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PathlossReferenceSignal::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PathlossReferenceSignal");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PathlossReferenceSignal");
            e
        })
    }
}
// Pc5QosFlowIdentifier
#[derive(Clone, Copy, Debug)]
pub struct Pc5QosFlowIdentifier(pub u16);

impl Pc5QosFlowIdentifier {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(2048), false)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(2048), false, self.0 as i128, false)
    }
}

impl AperCodec for Pc5QosFlowIdentifier {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Pc5QosFlowIdentifier::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Pc5QosFlowIdentifier");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Pc5QosFlowIdentifier");
            e
        })
    }
}
// Pc5QosCharacteristics
#[derive(Clone, Debug)]
pub enum Pc5QosCharacteristics {
    NonDynamicPqi(NonDynamicPqiDescriptor),
    DynamicPqi(DynamicPqiDescriptor),
}

impl Pc5QosCharacteristics {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::NonDynamicPqi(NonDynamicPqiDescriptor::aper_decode(
                data,
            )?)),
            1 => Ok(Self::DynamicPqi(DynamicPqiDescriptor::aper_decode(data)?)),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::NonDynamicPqi(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::DynamicPqi(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for Pc5QosCharacteristics {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Pc5QosCharacteristics::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Pc5QosCharacteristics");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Pc5QosCharacteristics");
            e
        })
    }
}
// Pc5QosParameters
#[derive(Clone, Debug)]
pub struct Pc5QosParameters {
    pub pc5_qos_characteristics: Pc5QosCharacteristics,
    pub pc5_qos_flow_bit_rates: Option<Pc5FlowBitRates>,
}

impl Pc5QosParameters {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let pc5_qos_characteristics = Pc5QosCharacteristics::aper_decode(data)?;
        let pc5_qos_flow_bit_rates = if optionals[0] {
            Some(Pc5FlowBitRates::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            pc5_qos_characteristics,
            pc5_qos_flow_bit_rates,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.pc5_qos_flow_bit_rates.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.pc5_qos_characteristics.aper_encode(data)?;
        if let Some(x) = &self.pc5_qos_flow_bit_rates {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for Pc5QosParameters {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Pc5QosParameters::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Pc5QosParameters");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Pc5QosParameters");
            e
        })
    }
}
// Pc5FlowBitRates
#[derive(Clone, Debug)]
pub struct Pc5FlowBitRates {
    pub guaranteed_flow_bit_rate: BitRate,
    pub maximum_flow_bit_rate: BitRate,
}

impl Pc5FlowBitRates {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let guaranteed_flow_bit_rate = BitRate::aper_decode(data)?;
        let maximum_flow_bit_rate = BitRate::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            guaranteed_flow_bit_rate,
            maximum_flow_bit_rate,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.guaranteed_flow_bit_rate.aper_encode(data)?;
        self.maximum_flow_bit_rate.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for Pc5FlowBitRates {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Pc5FlowBitRates::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Pc5FlowBitRates");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Pc5FlowBitRates");
            e
        })
    }
}
// PdcchBlindDetectionScg
#[derive(Clone, Debug)]
pub struct PdcchBlindDetectionScg(pub Vec<u8>);

impl PdcchBlindDetectionScg {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for PdcchBlindDetectionScg {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PdcchBlindDetectionScg::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PdcchBlindDetectionScg");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PdcchBlindDetectionScg");
            e
        })
    }
}
// PdcpSn
#[derive(Clone, Copy, Debug)]
pub struct PdcpSn(pub u16);

impl PdcpSn {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(4095), false)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(4095), false, self.0 as i128, false)
    }
}

impl AperCodec for PdcpSn {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PdcpSn::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PdcpSn");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PdcpSn");
            e
        })
    }
}
// PdcpsnLength
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum PdcpsnLength {
    TwelveBits,
    EighteenBits,
}

impl PdcpsnLength {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for PdcpsnLength {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PdcpsnLength::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PdcpsnLength");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PdcpsnLength");
            e
        })
    }
}
// PduSessionId
#[derive(Clone, Copy, Debug)]
pub struct PduSessionId(pub u8);

impl PduSessionId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(255), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(255), false, self.0 as i128, false)
    }
}

impl AperCodec for PduSessionId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PduSessionId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PduSessionId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PduSessionId");
            e
        })
    }
}
// ReportingPeriodicityValue
#[derive(Clone, Copy, Debug)]
pub struct ReportingPeriodicityValue(pub u16);

impl ReportingPeriodicityValue {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(512), true)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(512), true, self.0 as i128, false)
    }
}

impl AperCodec for ReportingPeriodicityValue {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ReportingPeriodicityValue::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReportingPeriodicityValue");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReportingPeriodicityValue");
            e
        })
    }
}
// Periodicity
#[derive(Clone, Copy, Debug)]
pub struct Periodicity(pub u32);

impl Periodicity {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(640000), true)?.0 as u32,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(640000), true, self.0 as i128, false)
    }
}

impl AperCodec for Periodicity {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Periodicity::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Periodicity");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Periodicity");
            e
        })
    }
}
// PeriodicitySrs
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum PeriodicitySrs {
    Ms0p125,
    Ms0p25,
    Ms0p5,
    Ms0p625,
    Ms1,
    Ms1p25,
    Ms2,
    Ms2p5,
    Ms4,
    Ms5,
    Ms8,
    Ms10,
    Ms16,
    Ms20,
    Ms32,
    Ms40,
    Ms64,
    Ms80,
    Ms160,
    Ms320,
    Ms640,
    Ms1280,
    Ms2560,
    Ms5120,
    Ms10240,
}

impl PeriodicitySrs {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(24), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(24), true, *self as i128, false)
    }
}

impl AperCodec for PeriodicitySrs {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PeriodicitySrs::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PeriodicitySrs");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PeriodicitySrs");
            e
        })
    }
}
// PeriodicityList
#[derive(Clone, Debug)]
pub struct PeriodicityList(pub Vec<PeriodicityListItem>);

impl PeriodicityList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(16), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(PeriodicityListItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(16), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for PeriodicityList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PeriodicityList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PeriodicityList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PeriodicityList");
            e
        })
    }
}
// PeriodicityListItem
#[derive(Clone, Debug)]
pub struct PeriodicityListItem {
    pub periodicity_srs: PeriodicitySrs,
}

impl PeriodicityListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let periodicity_srs = PeriodicitySrs::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { periodicity_srs })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.periodicity_srs.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for PeriodicityListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PeriodicityListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PeriodicityListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PeriodicityListItem");
            e
        })
    }
}
// Permutation
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum Permutation {
    Dfu,
    Ufd,
}

impl Permutation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for Permutation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Permutation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Permutation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Permutation");
            e
        })
    }
}
// PhInfoMcg
#[derive(Clone, Debug)]
pub struct PhInfoMcg(pub Vec<u8>);

impl PhInfoMcg {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for PhInfoMcg {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PhInfoMcg::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PhInfoMcg");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PhInfoMcg");
            e
        })
    }
}
// PhInfoScg
#[derive(Clone, Debug)]
pub struct PhInfoScg(pub Vec<u8>);

impl PhInfoScg {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for PhInfoScg {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PhInfoScg::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PhInfoScg");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PhInfoScg");
            e
        })
    }
}
// PlmnIdentity
#[derive(Clone, Debug)]
pub struct PlmnIdentity(pub Vec<u8>);

impl PlmnIdentity {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data,
            Some(3),
            Some(3),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, Some(3), Some(3), false, &self.0, false)
    }
}

impl AperCodec for PlmnIdentity {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PlmnIdentity::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PlmnIdentity");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PlmnIdentity");
            e
        })
    }
}
// PortNumber
#[derive(Clone, Debug)]
pub struct PortNumber(pub BitString);

impl PortNumber {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(16),
            Some(16),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(16), Some(16), false, &self.0, false)
    }
}

impl AperCodec for PortNumber {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PortNumber::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PortNumber");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PortNumber");
            e
        })
    }
}
// PosAssistanceInformation
#[derive(Clone, Debug)]
pub struct PosAssistanceInformation(pub Vec<u8>);

impl PosAssistanceInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for PosAssistanceInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosAssistanceInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosAssistanceInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosAssistanceInformation");
            e
        })
    }
}
// PosAssistanceInformationFailureList
#[derive(Clone, Debug)]
pub struct PosAssistanceInformationFailureList(pub Vec<u8>);

impl PosAssistanceInformationFailureList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for PosAssistanceInformationFailureList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosAssistanceInformationFailureList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosAssistanceInformationFailureList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosAssistanceInformationFailureList");
            e
        })
    }
}
// PosBroadcast
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum PosBroadcast {
    Start,
    Stop,
}

impl PosBroadcast {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for PosBroadcast {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosBroadcast::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosBroadcast");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosBroadcast");
            e
        })
    }
}
// PositioningBroadcastCells
#[derive(Clone, Debug)]
pub struct PositioningBroadcastCells(pub Vec<NrCgi>);

impl PositioningBroadcastCells {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(16384), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(NrCgi::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(16384), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for PositioningBroadcastCells {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PositioningBroadcastCells::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PositioningBroadcastCells");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PositioningBroadcastCells");
            e
        })
    }
}
// MeasurementPeriodicity
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum MeasurementPeriodicity {
    Ms120,
    Ms240,
    Ms480,
    Ms640,
    Ms1024,
    Ms2048,
    Ms5120,
    Ms10240,
    Min1,
    Min6,
    Min12,
    Min30,
}

impl MeasurementPeriodicity {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(11), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(11), true, *self as i128, false)
    }
}

impl AperCodec for MeasurementPeriodicity {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MeasurementPeriodicity::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MeasurementPeriodicity");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MeasurementPeriodicity");
            e
        })
    }
}
// PosMeasurementQuantities
#[derive(Clone, Debug)]
pub struct PosMeasurementQuantities(pub Vec<PosMeasurementQuantitiesItem>);

impl PosMeasurementQuantities {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(16384), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(PosMeasurementQuantitiesItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(16384), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for PosMeasurementQuantities {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosMeasurementQuantities::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosMeasurementQuantities");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosMeasurementQuantities");
            e
        })
    }
}
// PosMeasurementQuantitiesItem
#[derive(Clone, Debug)]
pub struct PosMeasurementQuantitiesItem {
    pub pos_measurement_type: PosMeasurementType,
    pub timing_reporting_granularity_factor: Option<u8>,
}

impl PosMeasurementQuantitiesItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let pos_measurement_type = PosMeasurementType::aper_decode(data)?;
        let timing_reporting_granularity_factor = if optionals[0] {
            Some(aper::decode::decode_integer(data, Some(0), Some(5), false)?.0 as u8)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            pos_measurement_type,
            timing_reporting_granularity_factor,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.timing_reporting_granularity_factor.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.pos_measurement_type.aper_encode(data)?;
        if let Some(x) = &self.timing_reporting_granularity_factor {
            aper::encode::encode_integer(data, Some(0), Some(5), false, *x as i128, false)?;
        }

        Ok(())
    }
}

impl AperCodec for PosMeasurementQuantitiesItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosMeasurementQuantitiesItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosMeasurementQuantitiesItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosMeasurementQuantitiesItem");
            e
        })
    }
}
// PosMeasurementResult
#[derive(Clone, Debug)]
pub struct PosMeasurementResult(pub Vec<PosMeasurementResultItem>);

impl PosMeasurementResult {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(16384), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(PosMeasurementResultItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(16384), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for PosMeasurementResult {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosMeasurementResult::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosMeasurementResult");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosMeasurementResult");
            e
        })
    }
}
// PosMeasurementResultItem
#[derive(Clone, Debug)]
pub struct PosMeasurementResultItem {
    pub measured_results_value: MeasuredResultsValue,
    pub time_stamp: TimeStamp,
    pub measurement_quality: Option<TrpMeasurementQuality>,
    pub measurement_beam_info: Option<MeasurementBeamInfo>,
}

impl PosMeasurementResultItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 3)?;
        let measured_results_value = MeasuredResultsValue::aper_decode(data)?;
        let time_stamp = TimeStamp::aper_decode(data)?;
        let measurement_quality = if optionals[0] {
            Some(TrpMeasurementQuality::aper_decode(data)?)
        } else {
            None
        };
        let measurement_beam_info = if optionals[1] {
            Some(MeasurementBeamInfo::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            measured_results_value,
            time_stamp,
            measurement_quality,
            measurement_beam_info,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.measurement_quality.is_some());
        optionals.push(self.measurement_beam_info.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.measured_results_value.aper_encode(data)?;
        self.time_stamp.aper_encode(data)?;
        if let Some(x) = &self.measurement_quality {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.measurement_beam_info {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for PosMeasurementResultItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosMeasurementResultItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosMeasurementResultItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosMeasurementResultItem");
            e
        })
    }
}
// PosMeasurementResultList
#[derive(Clone, Debug)]
pub struct PosMeasurementResultList(pub Vec<PosMeasurementResultListItem>);

impl PosMeasurementResultList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(PosMeasurementResultListItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for PosMeasurementResultList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosMeasurementResultList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosMeasurementResultList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosMeasurementResultList");
            e
        })
    }
}
// PosMeasurementResultListItem
#[derive(Clone, Debug)]
pub struct PosMeasurementResultListItem {
    pub pos_measurement_result: PosMeasurementResult,
    pub trpid: Trpid,
    pub nr_cgi: Option<NrCgi>,
}

impl PosMeasurementResultListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let pos_measurement_result = PosMeasurementResult::aper_decode(data)?;
        let trpid = Trpid::aper_decode(data)?;

        // Process the extension container
        let mut nr_cgi: Option<NrCgi> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    111 => nr_cgi = Some(NrCgi::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            pos_measurement_result,
            trpid,
            nr_cgi,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.pos_measurement_result.aper_encode(data)?;
        self.trpid.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for PosMeasurementResultListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosMeasurementResultListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosMeasurementResultListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosMeasurementResultListItem");
            e
        })
    }
}
// PosMeasurementType
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum PosMeasurementType {
    GnbRxTx,
    UlSrsRsrp,
    UlAoa,
    UlRtoa,
}

impl PosMeasurementType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for PosMeasurementType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosMeasurementType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosMeasurementType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosMeasurementType");
            e
        })
    }
}
// PosReportCharacteristics
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum PosReportCharacteristics {
    Ondemand,
    Periodic,
}

impl PosReportCharacteristics {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for PosReportCharacteristics {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosReportCharacteristics::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosReportCharacteristics");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosReportCharacteristics");
            e
        })
    }
}
// PosResourceSetType
#[derive(Clone, Debug)]
pub enum PosResourceSetType {
    Periodic(PosResourceSetTypePr),
    SemiPersistent(PosResourceSetTypeSp),
    Aperiodic(PosResourceSetTypeAp),
}

impl PosResourceSetType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 3, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::Periodic(PosResourceSetTypePr::aper_decode(data)?)),
            1 => Ok(Self::SemiPersistent(PosResourceSetTypeSp::aper_decode(
                data,
            )?)),
            2 => Ok(Self::Aperiodic(PosResourceSetTypeAp::aper_decode(data)?)),
            3 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::Periodic(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::SemiPersistent(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 1, false)?;
                x.aper_encode(data)
            }
            Self::Aperiodic(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 2, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for PosResourceSetType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosResourceSetType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosResourceSetType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosResourceSetType");
            e
        })
    }
}
// PosResourceSetTypePr
#[derive(Clone, Debug)]
pub struct PosResourceSetTypePr {
    pub posperiodic_set: PosperiodicSet,
}

impl PosResourceSetTypePr {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let posperiodic_set = PosperiodicSet::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { posperiodic_set })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.posperiodic_set.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for PosResourceSetTypePr {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosResourceSetTypePr::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosResourceSetTypePr");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosResourceSetTypePr");
            e
        })
    }
}
// PosResourceSetTypeSp
#[derive(Clone, Debug)]
pub struct PosResourceSetTypeSp {
    pub possemi_persistent_set: PossemiPersistentSet,
}

impl PosResourceSetTypeSp {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let possemi_persistent_set = PossemiPersistentSet::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            possemi_persistent_set,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.possemi_persistent_set.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for PosResourceSetTypeSp {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosResourceSetTypeSp::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosResourceSetTypeSp");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosResourceSetTypeSp");
            e
        })
    }
}
// PosResourceSetTypeAp
#[derive(Clone, Debug)]
pub struct PosResourceSetTypeAp {
    pub srs_resource_trigger_list: u8,
}

impl PosResourceSetTypeAp {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let srs_resource_trigger_list =
            aper::decode::decode_integer(data, Some(1), Some(3), false)?.0 as u8;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            srs_resource_trigger_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(1),
            Some(3),
            false,
            self.srs_resource_trigger_list as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for PosResourceSetTypeAp {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosResourceSetTypeAp::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosResourceSetTypeAp");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosResourceSetTypeAp");
            e
        })
    }
}
// PosSrsResourceIdList
#[derive(Clone, Debug)]
pub struct PosSrsResourceIdList(pub Vec<SrsPosResourceId>);

impl PosSrsResourceIdList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(16), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SrsPosResourceId::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(16), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for PosSrsResourceIdList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosSrsResourceIdList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosSrsResourceIdList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosSrsResourceIdList");
            e
        })
    }
}
// PosSrsResourceItem
#[derive(Clone, Debug)]
pub struct PosSrsResourceItem {
    pub srs_pos_resource_id: SrsPosResourceId,
    pub transmission_comb_pos: TransmissionCombPos,
    pub start_position: u8,
    pub nrof_symbols: NrofSymbols,
    pub freq_domain_shift: u16,
    pub c_srs: u8,
    pub group_or_sequence_hopping: GroupOrSequenceHopping,
    pub resource_type_pos: ResourceTypePos,
    pub sequence_id: u16,
    pub spatial_relation_pos: Option<SpatialRelationPos>,
}

impl PosSrsResourceItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let srs_pos_resource_id = SrsPosResourceId::aper_decode(data)?;
        let transmission_comb_pos = TransmissionCombPos::aper_decode(data)?;
        let start_position = aper::decode::decode_integer(data, Some(0), Some(13), false)?.0 as u8;
        let nrof_symbols = NrofSymbols::aper_decode(data)?;
        let freq_domain_shift =
            aper::decode::decode_integer(data, Some(0), Some(268), false)?.0 as u16;
        let c_srs = aper::decode::decode_integer(data, Some(0), Some(63), false)?.0 as u8;
        let group_or_sequence_hopping = GroupOrSequenceHopping::aper_decode(data)?;
        let resource_type_pos = ResourceTypePos::aper_decode(data)?;
        let sequence_id = aper::decode::decode_integer(data, Some(0), Some(65535), false)?.0 as u16;
        let spatial_relation_pos = if optionals[0] {
            Some(SpatialRelationPos::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            srs_pos_resource_id,
            transmission_comb_pos,
            start_position,
            nrof_symbols,
            freq_domain_shift,
            c_srs,
            group_or_sequence_hopping,
            resource_type_pos,
            sequence_id,
            spatial_relation_pos,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.spatial_relation_pos.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.srs_pos_resource_id.aper_encode(data)?;
        self.transmission_comb_pos.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(13),
            false,
            self.start_position as i128,
            false,
        )?;
        self.nrof_symbols.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(268),
            false,
            self.freq_domain_shift as i128,
            false,
        )?;
        aper::encode::encode_integer(data, Some(0), Some(63), false, self.c_srs as i128, false)?;
        self.group_or_sequence_hopping.aper_encode(data)?;
        self.resource_type_pos.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(65535),
            false,
            self.sequence_id as i128,
            false,
        )?;
        if let Some(x) = &self.spatial_relation_pos {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for PosSrsResourceItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosSrsResourceItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosSrsResourceItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosSrsResourceItem");
            e
        })
    }
}
// PosSrsResourceList
#[derive(Clone, Debug)]
pub struct PosSrsResourceList(pub Vec<PosSrsResourceItem>);

impl PosSrsResourceList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(PosSrsResourceItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for PosSrsResourceList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosSrsResourceList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosSrsResourceList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosSrsResourceList");
            e
        })
    }
}
// PosSrsResourceSetItem
#[derive(Clone, Debug)]
pub struct PosSrsResourceSetItem {
    pub possrs_resource_set_id: u8,
    pub poss_rs_resource_id_list: PosSrsResourceIdList,
    pub posresource_set_type: PosResourceSetType,
}

impl PosSrsResourceSetItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let possrs_resource_set_id =
            aper::decode::decode_integer(data, Some(0), Some(15), false)?.0 as u8;
        let poss_rs_resource_id_list = PosSrsResourceIdList::aper_decode(data)?;
        let posresource_set_type = PosResourceSetType::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            possrs_resource_set_id,
            poss_rs_resource_id_list,
            posresource_set_type,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(15),
            false,
            self.possrs_resource_set_id as i128,
            false,
        )?;
        self.poss_rs_resource_id_list.aper_encode(data)?;
        self.posresource_set_type.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for PosSrsResourceSetItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosSrsResourceSetItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosSrsResourceSetItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosSrsResourceSetItem");
            e
        })
    }
}
// PosSrsResourceSetList
#[derive(Clone, Debug)]
pub struct PosSrsResourceSetList(pub Vec<PosSrsResourceSetItem>);

impl PosSrsResourceSetList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(16), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(PosSrsResourceSetItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(16), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for PosSrsResourceSetList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosSrsResourceSetList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosSrsResourceSetList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosSrsResourceSetList");
            e
        })
    }
}
// PrimaryPathIndication
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum PrimaryPathIndication {
    True,
    False,
}

impl PrimaryPathIndication {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for PrimaryPathIndication {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PrimaryPathIndication::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrimaryPathIndication");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrimaryPathIndication");
            e
        })
    }
}
// PreEmptionCapability
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum PreEmptionCapability {
    ShallNotTriggerPreEmption,
    MayTriggerPreEmption,
}

impl PreEmptionCapability {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), false, *self as i128, false)
    }
}

impl AperCodec for PreEmptionCapability {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PreEmptionCapability::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PreEmptionCapability");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PreEmptionCapability");
            e
        })
    }
}
// PreEmptionVulnerability
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum PreEmptionVulnerability {
    NotPreEmptable,
    PreEmptable,
}

impl PreEmptionVulnerability {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), false, *self as i128, false)
    }
}

impl AperCodec for PreEmptionVulnerability {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PreEmptionVulnerability::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PreEmptionVulnerability");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PreEmptionVulnerability");
            e
        })
    }
}
// PriorityLevel
#[derive(Clone, Copy, Debug)]
pub struct PriorityLevel(pub u8);

impl PriorityLevel {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(15), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(15), false, self.0 as i128, false)
    }
}

impl AperCodec for PriorityLevel {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PriorityLevel::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PriorityLevel");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PriorityLevel");
            e
        })
    }
}
// ProtectedEutraResourceIndication
#[derive(Clone, Debug)]
pub struct ProtectedEutraResourceIndication(pub Vec<u8>);

impl ProtectedEutraResourceIndication {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for ProtectedEutraResourceIndication {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ProtectedEutraResourceIndication::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ProtectedEutraResourceIndication");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ProtectedEutraResourceIndication");
            e
        })
    }
}
// ProtectedEutraResourcesItem
#[derive(Clone, Debug)]
pub struct ProtectedEutraResourcesItem {
    pub spectrum_sharing_group_id: SpectrumSharingGroupId,
    pub eutra_cells_list: EutraCellsList,
}

impl ProtectedEutraResourcesItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let spectrum_sharing_group_id = SpectrumSharingGroupId::aper_decode(data)?;
        let eutra_cells_list = EutraCellsList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            spectrum_sharing_group_id,
            eutra_cells_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.spectrum_sharing_group_id.aper_encode(data)?;
        self.eutra_cells_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for ProtectedEutraResourcesItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ProtectedEutraResourcesItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ProtectedEutraResourcesItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ProtectedEutraResourcesItem");
            e
        })
    }
}
// PrsConfiguration
#[derive(Clone, Debug)]
pub struct PrsConfiguration {
    pub prs_resource_set_list: PrsResourceSetList,
}

impl PrsConfiguration {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let prs_resource_set_list = PrsResourceSetList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            prs_resource_set_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.prs_resource_set_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for PrsConfiguration {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PrsConfiguration::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsConfiguration");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsConfiguration");
            e
        })
    }
}
// PrsInformationPos
#[derive(Clone, Debug)]
pub struct PrsInformationPos {
    pub prs_id_pos: u8,
    pub prs_resource_set_id_pos: u8,
    pub prs_resource_id_pos: Option<u8>,
}

impl PrsInformationPos {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let prs_id_pos = aper::decode::decode_integer(data, Some(0), Some(255), false)?.0 as u8;
        let prs_resource_set_id_pos =
            aper::decode::decode_integer(data, Some(0), Some(7), false)?.0 as u8;
        let prs_resource_id_pos = if optionals[0] {
            Some(aper::decode::decode_integer(data, Some(0), Some(63), false)?.0 as u8)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            prs_id_pos,
            prs_resource_set_id_pos,
            prs_resource_id_pos,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.prs_resource_id_pos.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(255),
            false,
            self.prs_id_pos as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(7),
            false,
            self.prs_resource_set_id_pos as i128,
            false,
        )?;
        if let Some(x) = &self.prs_resource_id_pos {
            aper::encode::encode_integer(data, Some(0), Some(63), false, *x as i128, false)?;
        }

        Ok(())
    }
}

impl AperCodec for PrsInformationPos {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PrsInformationPos::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsInformationPos");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsInformationPos");
            e
        })
    }
}
// PotentialSpCellItem
#[derive(Clone, Debug)]
pub struct PotentialSpCellItem {
    pub potential_sp_cell_id: NrCgi,
}

impl PotentialSpCellItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let potential_sp_cell_id = NrCgi::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            potential_sp_cell_id,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.potential_sp_cell_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for PotentialSpCellItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PotentialSpCellItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PotentialSpCellItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PotentialSpCellItem");
            e
        })
    }
}
// PrsAngleList
#[derive(Clone, Debug)]
pub struct PrsAngleList(pub Vec<PrsAngleItem>);

impl PrsAngleList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(PrsAngleItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for PrsAngleList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PrsAngleList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsAngleList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsAngleList");
            e
        })
    }
}
// PrsAngleItem
#[derive(Clone, Debug)]
pub struct PrsAngleItem {
    pub nr_prs_azimuth: u16,
    pub nr_prs_azimuth_fine: u8,
    pub nr_prs_elevation: u8,
    pub nr_prs_elevation_fine: u8,
}

impl PrsAngleItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let nr_prs_azimuth =
            aper::decode::decode_integer(data, Some(0), Some(359), false)?.0 as u16;
        let nr_prs_azimuth_fine =
            aper::decode::decode_integer(data, Some(0), Some(9), false)?.0 as u8;
        let nr_prs_elevation =
            aper::decode::decode_integer(data, Some(0), Some(180), false)?.0 as u8;
        let nr_prs_elevation_fine =
            aper::decode::decode_integer(data, Some(0), Some(9), false)?.0 as u8;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            nr_prs_azimuth,
            nr_prs_azimuth_fine,
            nr_prs_elevation,
            nr_prs_elevation_fine,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(359),
            false,
            self.nr_prs_azimuth as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(9),
            false,
            self.nr_prs_azimuth_fine as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(180),
            false,
            self.nr_prs_elevation as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(9),
            false,
            self.nr_prs_elevation_fine as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for PrsAngleItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PrsAngleItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsAngleItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsAngleItem");
            e
        })
    }
}
// PrsMuting
#[derive(Clone, Debug)]
pub struct PrsMuting {
    pub prs_muting_option_1: PrsMutingOption1,
    pub prs_muting_option_2: PrsMutingOption2,
}

impl PrsMuting {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let prs_muting_option_1 = PrsMutingOption1::aper_decode(data)?;
        let prs_muting_option_2 = PrsMutingOption2::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            prs_muting_option_1,
            prs_muting_option_2,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.prs_muting_option_1.aper_encode(data)?;
        self.prs_muting_option_2.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for PrsMuting {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PrsMuting::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsMuting");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsMuting");
            e
        })
    }
}
// PrsMutingOption1
#[derive(Clone, Debug)]
pub struct PrsMutingOption1 {
    pub muting_pattern: DlPrsMutingPattern,
    pub muting_bit_repetition_factor: MutingBitRepetitionFactor,
}

impl PrsMutingOption1 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let muting_pattern = DlPrsMutingPattern::aper_decode(data)?;
        let muting_bit_repetition_factor = MutingBitRepetitionFactor::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            muting_pattern,
            muting_bit_repetition_factor,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.muting_pattern.aper_encode(data)?;
        self.muting_bit_repetition_factor.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for PrsMutingOption1 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PrsMutingOption1::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsMutingOption1");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsMutingOption1");
            e
        })
    }
}
// PrsMutingOption2
#[derive(Clone, Debug)]
pub struct PrsMutingOption2 {
    pub muting_pattern: DlPrsMutingPattern,
}

impl PrsMutingOption2 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let muting_pattern = DlPrsMutingPattern::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { muting_pattern })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.muting_pattern.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for PrsMutingOption2 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PrsMutingOption2::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsMutingOption2");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsMutingOption2");
            e
        })
    }
}
// PrsResourceId
#[derive(Clone, Copy, Debug)]
pub struct PrsResourceId(pub u8);

impl PrsResourceId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(63), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(63), false, self.0 as i128, false)
    }
}

impl AperCodec for PrsResourceId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PrsResourceId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsResourceId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsResourceId");
            e
        })
    }
}
// PrsResourceList
#[derive(Clone, Debug)]
pub struct PrsResourceList(pub Vec<PrsResourceItem>);

impl PrsResourceList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(PrsResourceItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for PrsResourceList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PrsResourceList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsResourceList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsResourceList");
            e
        })
    }
}
// PrsResourceItem
#[derive(Clone, Debug)]
pub struct PrsResourceItem {
    pub prs_resource_id: PrsResourceId,
    pub sequence_id: u16,
    pub re_offset: u8,
    pub resource_slot_offset: u16,
    pub resource_symbol_offset: u8,
    pub qcl_info: Option<PrsResourceQclInfo>,
}

impl PrsResourceItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let prs_resource_id = PrsResourceId::aper_decode(data)?;
        let sequence_id = aper::decode::decode_integer(data, Some(0), Some(4095), false)?.0 as u16;
        let re_offset = aper::decode::decode_integer(data, Some(0), Some(11), true)?.0 as u8;
        let resource_slot_offset =
            aper::decode::decode_integer(data, Some(0), Some(511), false)?.0 as u16;
        let resource_symbol_offset =
            aper::decode::decode_integer(data, Some(0), Some(12), false)?.0 as u8;
        let qcl_info = if optionals[0] {
            Some(PrsResourceQclInfo::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            prs_resource_id,
            sequence_id,
            re_offset,
            resource_slot_offset,
            resource_symbol_offset,
            qcl_info,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.qcl_info.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.prs_resource_id.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(4095),
            false,
            self.sequence_id as i128,
            false,
        )?;
        aper::encode::encode_integer(data, Some(0), Some(11), true, self.re_offset as i128, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(511),
            false,
            self.resource_slot_offset as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(12),
            false,
            self.resource_symbol_offset as i128,
            false,
        )?;
        if let Some(x) = &self.qcl_info {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for PrsResourceItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PrsResourceItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsResourceItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsResourceItem");
            e
        })
    }
}
// PrsResourceQclInfo
#[derive(Clone, Debug)]
pub enum PrsResourceQclInfo {
    QclSourceSsb(PrsResourceQclSourceSsb),
    QclSourcePrs(PrsResourceQclSourcePrs),
}

impl PrsResourceQclInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::QclSourceSsb(PrsResourceQclSourceSsb::aper_decode(
                data,
            )?)),
            1 => Ok(Self::QclSourcePrs(PrsResourceQclSourcePrs::aper_decode(
                data,
            )?)),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::QclSourceSsb(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::QclSourcePrs(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for PrsResourceQclInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PrsResourceQclInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsResourceQclInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsResourceQclInfo");
            e
        })
    }
}
// PrsResourceQclSourceSsb
#[derive(Clone, Debug)]
pub struct PrsResourceQclSourceSsb {
    pub pci_nr: u16,
    pub ssb_index: Option<SsbIndex>,
}

impl PrsResourceQclSourceSsb {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let pci_nr = aper::decode::decode_integer(data, Some(0), Some(1007), false)?.0 as u16;
        let ssb_index = if optionals[0] {
            Some(SsbIndex::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { pci_nr, ssb_index })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.ssb_index.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        aper::encode::encode_integer(data, Some(0), Some(1007), false, self.pci_nr as i128, false)?;
        if let Some(x) = &self.ssb_index {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for PrsResourceQclSourceSsb {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PrsResourceQclSourceSsb::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsResourceQclSourceSsb");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsResourceQclSourceSsb");
            e
        })
    }
}
// PrsResourceQclSourcePrs
#[derive(Clone, Debug)]
pub struct PrsResourceQclSourcePrs {
    pub qcl_source_prs_resource_set_id: PrsResourceSetId,
    pub qcl_source_prs_resource_id: Option<PrsResourceId>,
}

impl PrsResourceQclSourcePrs {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let qcl_source_prs_resource_set_id = PrsResourceSetId::aper_decode(data)?;
        let qcl_source_prs_resource_id = if optionals[0] {
            Some(PrsResourceId::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            qcl_source_prs_resource_set_id,
            qcl_source_prs_resource_id,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.qcl_source_prs_resource_id.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.qcl_source_prs_resource_set_id.aper_encode(data)?;
        if let Some(x) = &self.qcl_source_prs_resource_id {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for PrsResourceQclSourcePrs {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PrsResourceQclSourcePrs::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsResourceQclSourcePrs");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsResourceQclSourcePrs");
            e
        })
    }
}
// PrsResourceSetId
#[derive(Clone, Copy, Debug)]
pub struct PrsResourceSetId(pub u8);

impl PrsResourceSetId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(7), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(7), false, self.0 as i128, false)
    }
}

impl AperCodec for PrsResourceSetId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PrsResourceSetId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsResourceSetId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsResourceSetId");
            e
        })
    }
}
// PrsResourceSetList
#[derive(Clone, Debug)]
pub struct PrsResourceSetList(pub Vec<PrsResourceSetItem>);

impl PrsResourceSetList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(8), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(PrsResourceSetItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(8), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for PrsResourceSetList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PrsResourceSetList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsResourceSetList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsResourceSetList");
            e
        })
    }
}
// PrsResourceSetItem
#[derive(Clone, Debug)]
pub struct PrsResourceSetItem {
    pub prs_resource_set_id: PrsResourceSetId,
    pub subcarrier_spacing: SubcarrierSpacing2,
    pub pr_sbandwidth: u8,
    pub start_prb: u16,
    pub point_a: u32,
    pub comb_size: CombSize,
    pub cp_type: CpType,
    pub resource_set_periodicity: ResourceSetPeriodicity,
    pub resource_set_slot_offset: u32,
    pub resource_repetition_factor: ResourceRepetitionFactor,
    pub resource_time_gap: ResourceTimeGap,
    pub resource_numberof_symbols: ResourceNumberofSymbols,
    pub prs_muting: Option<PrsMuting>,
    pub prs_resource_transmit_power: i8,
    pub prs_resource_list: PrsResourceList,
}

impl PrsResourceSetItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let prs_resource_set_id = PrsResourceSetId::aper_decode(data)?;
        let subcarrier_spacing = SubcarrierSpacing2::aper_decode(data)?;
        let pr_sbandwidth = aper::decode::decode_integer(data, Some(1), Some(63), false)?.0 as u8;
        let start_prb = aper::decode::decode_integer(data, Some(0), Some(2176), false)?.0 as u16;
        let point_a = aper::decode::decode_integer(data, Some(0), Some(3279165), false)?.0 as u32;
        let comb_size = CombSize::aper_decode(data)?;
        let cp_type = CpType::aper_decode(data)?;
        let resource_set_periodicity = ResourceSetPeriodicity::aper_decode(data)?;
        let resource_set_slot_offset =
            aper::decode::decode_integer(data, Some(0), Some(81919), true)?.0 as u32;
        let resource_repetition_factor = ResourceRepetitionFactor::aper_decode(data)?;
        let resource_time_gap = ResourceTimeGap::aper_decode(data)?;
        let resource_numberof_symbols = ResourceNumberofSymbols::aper_decode(data)?;
        let prs_muting = if optionals[0] {
            Some(PrsMuting::aper_decode(data)?)
        } else {
            None
        };
        let prs_resource_transmit_power =
            aper::decode::decode_integer(data, Some(-60), Some(50), false)?.0 as i8;
        let prs_resource_list = PrsResourceList::aper_decode(data)?;

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            prs_resource_set_id,
            subcarrier_spacing,
            pr_sbandwidth,
            start_prb,
            point_a,
            comb_size,
            cp_type,
            resource_set_periodicity,
            resource_set_slot_offset,
            resource_repetition_factor,
            resource_time_gap,
            resource_numberof_symbols,
            prs_muting,
            prs_resource_transmit_power,
            prs_resource_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.prs_muting.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.prs_resource_set_id.aper_encode(data)?;
        self.subcarrier_spacing.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(1),
            Some(63),
            false,
            self.pr_sbandwidth as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(2176),
            false,
            self.start_prb as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(3279165),
            false,
            self.point_a as i128,
            false,
        )?;
        self.comb_size.aper_encode(data)?;
        self.cp_type.aper_encode(data)?;
        self.resource_set_periodicity.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(81919),
            true,
            self.resource_set_slot_offset as i128,
            false,
        )?;
        self.resource_repetition_factor.aper_encode(data)?;
        self.resource_time_gap.aper_encode(data)?;
        self.resource_numberof_symbols.aper_encode(data)?;
        if let Some(x) = &self.prs_muting {
            x.aper_encode(data)?;
        }
        aper::encode::encode_integer(
            data,
            Some(-60),
            Some(50),
            false,
            self.prs_resource_transmit_power as i128,
            false,
        )?;
        self.prs_resource_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for PrsResourceSetItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PrsResourceSetItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsResourceSetItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrsResourceSetItem");
            e
        })
    }
}
// PwsFailedNrCgiItem
#[derive(Clone, Debug)]
pub struct PwsFailedNrCgiItem {
    pub nr_cgi: NrCgi,
    pub number_of_broadcasts: NumberOfBroadcasts,
}

impl PwsFailedNrCgiItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let nr_cgi = NrCgi::aper_decode(data)?;
        let number_of_broadcasts = NumberOfBroadcasts::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            nr_cgi,
            number_of_broadcasts,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.nr_cgi.aper_encode(data)?;
        self.number_of_broadcasts.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for PwsFailedNrCgiItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PwsFailedNrCgiItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PwsFailedNrCgiItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PwsFailedNrCgiItem");
            e
        })
    }
}
// PwsSystemInformation
#[derive(Clone, Debug)]
pub struct PwsSystemInformation {
    pub si_btype: SibTypePws,
    pub si_bmessage: Vec<u8>,
    pub notification_information: Option<NotificationInformation>,
    pub additional_sib_message_list: Option<AdditionalSibMessageList>,
}

impl PwsSystemInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let si_btype = SibTypePws::aper_decode(data)?;
        let si_bmessage = aper::decode::decode_octetstring(data, None, None, false)?;

        // Process the extension container
        let mut notification_information: Option<NotificationInformation> = None;
        let mut additional_sib_message_list: Option<AdditionalSibMessageList> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    220 => {
                        notification_information = Some(NotificationInformation::aper_decode(data)?)
                    }
                    231 => {
                        additional_sib_message_list =
                            Some(AdditionalSibMessageList::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            si_btype,
            si_bmessage,
            notification_information,
            additional_sib_message_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.si_btype.aper_encode(data)?;
        aper::encode::encode_octetstring(data, None, None, false, &self.si_bmessage, false)?;

        Ok(())
    }
}

impl AperCodec for PwsSystemInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PwsSystemInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PwsSystemInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PwsSystemInformation");
            e
        })
    }
}
// PrivacyIndicator
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum PrivacyIndicator {
    ImmediateMdt,
    LoggedMdt,
}

impl PrivacyIndicator {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for PrivacyIndicator {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PrivacyIndicator::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrivacyIndicator");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PrivacyIndicator");
            e
        })
    }
}
// Qci
#[derive(Clone, Copy, Debug)]
pub struct Qci(pub u8);

impl Qci {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(255), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(255), false, self.0 as i128, false)
    }
}

impl AperCodec for Qci {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Qci::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Qci");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Qci");
            e
        })
    }
}
// QosCharacteristics
#[derive(Clone, Debug)]
pub enum QosCharacteristics {
    NonDynamic5qi(NonDynamic5qiDescriptor),
    Dynamic5qi(Dynamic5qiDescriptor),
}

impl QosCharacteristics {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::NonDynamic5qi(NonDynamic5qiDescriptor::aper_decode(
                data,
            )?)),
            1 => Ok(Self::Dynamic5qi(Dynamic5qiDescriptor::aper_decode(data)?)),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::NonDynamic5qi(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::Dynamic5qi(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for QosCharacteristics {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        QosCharacteristics::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("QosCharacteristics");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("QosCharacteristics");
            e
        })
    }
}
// QosFlowIdentifier
#[derive(Clone, Copy, Debug)]
pub struct QosFlowIdentifier(pub u8);

impl QosFlowIdentifier {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(63), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(63), false, self.0 as i128, false)
    }
}

impl AperCodec for QosFlowIdentifier {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        QosFlowIdentifier::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("QosFlowIdentifier");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("QosFlowIdentifier");
            e
        })
    }
}
// QosFlowLevelQosParameters
#[derive(Clone, Debug)]
pub struct QosFlowLevelQosParameters {
    pub qos_characteristics: QosCharacteristics,
    pub ngran_allocation_retention_priority: NgranAllocationAndRetentionPriority,
    pub gbr_qos_flow_information: Option<GbrQosFlowInformation>,
    pub reflective_qos_attribute: Option<ReflectiveQosAttribute>,
    pub pdu_session_id: Option<PduSessionId>,
    pub ulpdu_session_aggregate_maximum_bit_rate: Option<BitRate>,
    pub qos_monitoring_request: Option<QosMonitoringRequest>,
}

impl QosFlowLevelQosParameters {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 3)?;
        let qos_characteristics = QosCharacteristics::aper_decode(data)?;
        let ngran_allocation_retention_priority =
            NgranAllocationAndRetentionPriority::aper_decode(data)?;
        let gbr_qos_flow_information = if optionals[0] {
            Some(GbrQosFlowInformation::aper_decode(data)?)
        } else {
            None
        };
        let reflective_qos_attribute = if optionals[1] {
            Some(ReflectiveQosAttribute::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut pdu_session_id: Option<PduSessionId> = None;
        let mut ulpdu_session_aggregate_maximum_bit_rate: Option<BitRate> = None;
        let mut qos_monitoring_request: Option<QosMonitoringRequest> = None;

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    180 => pdu_session_id = Some(PduSessionId::aper_decode(data)?),
                    181 => {
                        ulpdu_session_aggregate_maximum_bit_rate = Some(BitRate::aper_decode(data)?)
                    }
                    257 => qos_monitoring_request = Some(QosMonitoringRequest::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            qos_characteristics,
            ngran_allocation_retention_priority,
            gbr_qos_flow_information,
            reflective_qos_attribute,
            pdu_session_id,
            ulpdu_session_aggregate_maximum_bit_rate,
            qos_monitoring_request,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.gbr_qos_flow_information.is_some());
        optionals.push(self.reflective_qos_attribute.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.qos_characteristics.aper_encode(data)?;
        self.ngran_allocation_retention_priority.aper_encode(data)?;
        if let Some(x) = &self.gbr_qos_flow_information {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.reflective_qos_attribute {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for QosFlowLevelQosParameters {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        QosFlowLevelQosParameters::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("QosFlowLevelQosParameters");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("QosFlowLevelQosParameters");
            e
        })
    }
}
// QosFlowMappingIndication
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum QosFlowMappingIndication {
    Ul,
    Dl,
}

impl QosFlowMappingIndication {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for QosFlowMappingIndication {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        QosFlowMappingIndication::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("QosFlowMappingIndication");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("QosFlowMappingIndication");
            e
        })
    }
}
// QosInformation
#[derive(Clone, Debug)]
pub enum QosInformation {
    EutranQos(EutranQos),
}

impl QosInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 1, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::EutranQos(EutranQos::aper_decode(data)?)),
            1 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::EutranQos(x) => {
                aper::encode::encode_choice_idx(data, 0, 1, false, 0, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for QosInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        QosInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("QosInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("QosInformation");
            e
        })
    }
}
// QosMonitoringRequest
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum QosMonitoringRequest {
    Ul,
    Dl,
    Both,
}

impl QosMonitoringRequest {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), true, *self as i128, false)
    }
}

impl AperCodec for QosMonitoringRequest {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        QosMonitoringRequest::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("QosMonitoringRequest");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("QosMonitoringRequest");
            e
        })
    }
}
// QosParaSetIndex
#[derive(Clone, Copy, Debug)]
pub struct QosParaSetIndex(pub u8);

impl QosParaSetIndex {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(8), true)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(8), true, self.0 as i128, false)
    }
}

impl AperCodec for QosParaSetIndex {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        QosParaSetIndex::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("QosParaSetIndex");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("QosParaSetIndex");
            e
        })
    }
}
// QosParaSetNotifyIndex
#[derive(Clone, Copy, Debug)]
pub struct QosParaSetNotifyIndex(pub u8);

impl QosParaSetNotifyIndex {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(8), true)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(8), true, self.0 as i128, false)
    }
}

impl AperCodec for QosParaSetNotifyIndex {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        QosParaSetNotifyIndex::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("QosParaSetNotifyIndex");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("QosParaSetNotifyIndex");
            e
        })
    }
}
// RachConfigCommon
#[derive(Clone, Debug)]
pub struct RachConfigCommon(pub Vec<u8>);

impl RachConfigCommon {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for RachConfigCommon {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RachConfigCommon::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RachConfigCommon");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RachConfigCommon");
            e
        })
    }
}
// RachConfigCommonIab
#[derive(Clone, Debug)]
pub struct RachConfigCommonIab(pub Vec<u8>);

impl RachConfigCommonIab {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for RachConfigCommonIab {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RachConfigCommonIab::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RachConfigCommonIab");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RachConfigCommonIab");
            e
        })
    }
}
// RachReportContainer
#[derive(Clone, Debug)]
pub struct RachReportContainer(pub Vec<u8>);

impl RachReportContainer {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for RachReportContainer {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RachReportContainer::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RachReportContainer");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RachReportContainer");
            e
        })
    }
}
// RachReportInformationList
#[derive(Clone, Debug)]
pub struct RachReportInformationList(pub Vec<RachReportInformationItem>);

impl RachReportInformationList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(RachReportInformationItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for RachReportInformationList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RachReportInformationList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RachReportInformationList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RachReportInformationList");
            e
        })
    }
}
// RachReportInformationItem
#[derive(Clone, Debug)]
pub struct RachReportInformationItem {
    pub rach_report_container: RachReportContainer,
    pub ue_assitant_identifier: Option<GnbDuUeF1apId>,
}

impl RachReportInformationItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let rach_report_container = RachReportContainer::aper_decode(data)?;
        let ue_assitant_identifier = if optionals[0] {
            Some(GnbDuUeF1apId::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            rach_report_container,
            ue_assitant_identifier,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.ue_assitant_identifier.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.rach_report_container.aper_encode(data)?;
        if let Some(x) = &self.ue_assitant_identifier {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for RachReportInformationItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RachReportInformationItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RachReportInformationItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RachReportInformationItem");
            e
        })
    }
}
// RadioResourceStatus
#[derive(Clone, Debug)]
pub struct RadioResourceStatus {
    pub ssb_area_radio_resource_status_list: SsbAreaRadioResourceStatusList,
}

impl RadioResourceStatus {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let ssb_area_radio_resource_status_list =
            SsbAreaRadioResourceStatusList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ssb_area_radio_resource_status_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.ssb_area_radio_resource_status_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for RadioResourceStatus {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RadioResourceStatus::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RadioResourceStatus");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RadioResourceStatus");
            e
        })
    }
}
// Ranac
#[derive(Clone, Copy, Debug)]
pub struct Ranac(pub u8);

impl Ranac {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(255), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(255), false, self.0 as i128, false)
    }
}

impl AperCodec for Ranac {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ranac::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Ranac");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Ranac");
            e
        })
    }
}
// RanMeasurementId
#[derive(Clone, Copy, Debug)]
pub struct RanMeasurementId(pub u32);

impl RanMeasurementId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(65536), true)?.0 as u32,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(65536), true, self.0 as i128, false)
    }
}

impl AperCodec for RanMeasurementId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RanMeasurementId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RanMeasurementId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RanMeasurementId");
            e
        })
    }
}
// RanUeMeasurementId
#[derive(Clone, Copy, Debug)]
pub struct RanUeMeasurementId(pub u16);

impl RanUeMeasurementId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(256), true)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(256), true, self.0 as i128, false)
    }
}

impl AperCodec for RanUeMeasurementId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RanUeMeasurementId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RanUeMeasurementId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RanUeMeasurementId");
            e
        })
    }
}
// RanUeId
#[derive(Clone, Debug)]
pub struct RanUeId(pub Vec<u8>);

impl RanUeId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data,
            Some(8),
            Some(8),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, Some(8), Some(8), false, &self.0, false)
    }
}

impl AperCodec for RanUeId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RanUeId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RanUeId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RanUeId");
            e
        })
    }
}
// RanUePagingIdentity
#[derive(Clone, Debug)]
pub struct RanUePagingIdentity {
    pub irnti: BitString,
}

impl RanUePagingIdentity {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let irnti = aper::decode::decode_bitstring(data, Some(40), Some(40), false)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { irnti })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_bitstring(data, Some(40), Some(40), false, &self.irnti, false)?;

        Ok(())
    }
}

impl AperCodec for RanUePagingIdentity {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RanUePagingIdentity::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RanUePagingIdentity");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RanUePagingIdentity");
            e
        })
    }
}
// RatFrequencyPriorityInformation
#[derive(Clone, Debug)]
pub enum RatFrequencyPriorityInformation {
    Endc(SubscriberProfileIDforRfp),
    Ngran(RatFrequencySelectionPriority),
}

impl RatFrequencyPriorityInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::Endc(SubscriberProfileIDforRfp::aper_decode(data)?)),
            1 => Ok(Self::Ngran(RatFrequencySelectionPriority::aper_decode(
                data,
            )?)),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::Endc(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::Ngran(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for RatFrequencyPriorityInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RatFrequencyPriorityInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RatFrequencyPriorityInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RatFrequencyPriorityInformation");
            e
        })
    }
}
// RatFrequencySelectionPriority
#[derive(Clone, Copy, Debug)]
pub struct RatFrequencySelectionPriority(pub u16);

impl RatFrequencySelectionPriority {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(256), true)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(256), true, self.0 as i128, false)
    }
}

impl AperCodec for RatFrequencySelectionPriority {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RatFrequencySelectionPriority::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RatFrequencySelectionPriority");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RatFrequencySelectionPriority");
            e
        })
    }
}
// ReestablishmentIndication
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ReestablishmentIndication {
    Reestablished,
}

impl ReestablishmentIndication {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for ReestablishmentIndication {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ReestablishmentIndication::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReestablishmentIndication");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReestablishmentIndication");
            e
        })
    }
}
// ReferencePoint
#[derive(Clone, Debug)]
pub enum ReferencePoint {
    CoordinateId(CoordinateId),
    ReferencePointCoordinate(AccessPointPosition),
    ReferencePointCoordinateHa(NgranHighAccuracyAccessPointPosition),
}

impl ReferencePoint {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 3, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::CoordinateId(CoordinateId::aper_decode(data)?)),
            1 => Ok(Self::ReferencePointCoordinate(
                AccessPointPosition::aper_decode(data)?,
            )),
            2 => Ok(Self::ReferencePointCoordinateHa(
                NgranHighAccuracyAccessPointPosition::aper_decode(data)?,
            )),
            3 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::CoordinateId(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::ReferencePointCoordinate(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 1, false)?;
                x.aper_encode(data)
            }
            Self::ReferencePointCoordinateHa(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 2, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for ReferencePoint {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ReferencePoint::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReferencePoint");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReferencePoint");
            e
        })
    }
}
// ReferenceSfn
#[derive(Clone, Copy, Debug)]
pub struct ReferenceSfn(pub u16);

impl ReferenceSfn {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(1023), false)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(1023), false, self.0 as i128, false)
    }
}

impl AperCodec for ReferenceSfn {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ReferenceSfn::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReferenceSfn");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReferenceSfn");
            e
        })
    }
}
// ReferenceSignal
#[derive(Clone, Debug)]
pub enum ReferenceSignal {
    NzpCsiRs(NzpCsiRsResourceId),
    Ssb(Ssb),
    Srs(SrsResourceId),
    PositioningSrs(SrsPosResourceId),
    DlPrs(DlPrs),
}

impl ReferenceSignal {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 5, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::NzpCsiRs(NzpCsiRsResourceId::aper_decode(data)?)),
            1 => Ok(Self::Ssb(Ssb::aper_decode(data)?)),
            2 => Ok(Self::Srs(SrsResourceId::aper_decode(data)?)),
            3 => Ok(Self::PositioningSrs(SrsPosResourceId::aper_decode(data)?)),
            4 => Ok(Self::DlPrs(DlPrs::aper_decode(data)?)),
            5 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::NzpCsiRs(x) => {
                aper::encode::encode_choice_idx(data, 0, 5, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::Ssb(x) => {
                aper::encode::encode_choice_idx(data, 0, 5, false, 1, false)?;
                x.aper_encode(data)
            }
            Self::Srs(x) => {
                aper::encode::encode_choice_idx(data, 0, 5, false, 2, false)?;
                x.aper_encode(data)
            }
            Self::PositioningSrs(x) => {
                aper::encode::encode_choice_idx(data, 0, 5, false, 3, false)?;
                x.aper_encode(data)
            }
            Self::DlPrs(x) => {
                aper::encode::encode_choice_idx(data, 0, 5, false, 4, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for ReferenceSignal {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ReferenceSignal::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReferenceSignal");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReferenceSignal");
            e
        })
    }
}
// RelativeCartesianLocation
#[derive(Clone, Debug)]
pub struct RelativeCartesianLocation {
    pub xy_zunit: XyZunit,
    pub xvalue: i32,
    pub yvalue: i32,
    pub zvalue: i16,
    pub location_uncertainty: LocationUncertainty,
}

impl RelativeCartesianLocation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let xy_zunit = XyZunit::aper_decode(data)?;
        let xvalue = aper::decode::decode_integer(data, Some(-65536), Some(65535), false)?.0 as i32;
        let yvalue = aper::decode::decode_integer(data, Some(-65536), Some(65535), false)?.0 as i32;
        let zvalue = aper::decode::decode_integer(data, Some(-32768), Some(32767), false)?.0 as i16;
        let location_uncertainty = LocationUncertainty::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            xy_zunit,
            xvalue,
            yvalue,
            zvalue,
            location_uncertainty,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.xy_zunit.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(-65536),
            Some(65535),
            false,
            self.xvalue as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(-65536),
            Some(65535),
            false,
            self.yvalue as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(-32768),
            Some(32767),
            false,
            self.zvalue as i128,
            false,
        )?;
        self.location_uncertainty.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for RelativeCartesianLocation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RelativeCartesianLocation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RelativeCartesianLocation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RelativeCartesianLocation");
            e
        })
    }
}
// RelativeGeodeticLocation
#[derive(Clone, Debug)]
pub struct RelativeGeodeticLocation {
    pub milli_arc_second_units: MilliArcSecondUnits,
    pub height_units: HeightUnits,
    pub delta_latitude: i16,
    pub delta_longitude: i16,
    pub delta_height: i16,
    pub location_uncertainty: LocationUncertainty,
}

impl RelativeGeodeticLocation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let milli_arc_second_units = MilliArcSecondUnits::aper_decode(data)?;
        let height_units = HeightUnits::aper_decode(data)?;
        let delta_latitude =
            aper::decode::decode_integer(data, Some(-1024), Some(1023), false)?.0 as i16;
        let delta_longitude =
            aper::decode::decode_integer(data, Some(-1024), Some(1023), false)?.0 as i16;
        let delta_height =
            aper::decode::decode_integer(data, Some(-1024), Some(1023), false)?.0 as i16;
        let location_uncertainty = LocationUncertainty::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            milli_arc_second_units,
            height_units,
            delta_latitude,
            delta_longitude,
            delta_height,
            location_uncertainty,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.milli_arc_second_units.aper_encode(data)?;
        self.height_units.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(-1024),
            Some(1023),
            false,
            self.delta_latitude as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(-1024),
            Some(1023),
            false,
            self.delta_longitude as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(-1024),
            Some(1023),
            false,
            self.delta_height as i128,
            false,
        )?;
        self.location_uncertainty.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for RelativeGeodeticLocation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RelativeGeodeticLocation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RelativeGeodeticLocation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RelativeGeodeticLocation");
            e
        })
    }
}
// ReferenceTime
#[derive(Clone, Debug)]
pub struct ReferenceTime(pub Vec<u8>);

impl ReferenceTime {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for ReferenceTime {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ReferenceTime::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReferenceTime");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReferenceTime");
            e
        })
    }
}
// RegistrationRequest
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum RegistrationRequest {
    Start,
    Stop,
    Add,
}

impl RegistrationRequest {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), true, *self as i128, false)
    }
}

impl AperCodec for RegistrationRequest {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RegistrationRequest::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RegistrationRequest");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RegistrationRequest");
            e
        })
    }
}
// ReportCharacteristics
#[derive(Clone, Debug)]
pub struct ReportCharacteristics(pub BitString);

impl ReportCharacteristics {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(32),
            Some(32),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(32), Some(32), false, &self.0, false)
    }
}

impl AperCodec for ReportCharacteristics {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ReportCharacteristics::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReportCharacteristics");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReportCharacteristics");
            e
        })
    }
}
// ReportingPeriodicity
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ReportingPeriodicity {
    Ms500,
    Ms1000,
    Ms2000,
    Ms5000,
    Ms10000,
}

impl ReportingPeriodicity {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(4), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(4), true, *self as i128, false)
    }
}

impl AperCodec for ReportingPeriodicity {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ReportingPeriodicity::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReportingPeriodicity");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReportingPeriodicity");
            e
        })
    }
}
// RequestedBandCombinationIndex
#[derive(Clone, Debug)]
pub struct RequestedBandCombinationIndex(pub Vec<u8>);

impl RequestedBandCombinationIndex {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for RequestedBandCombinationIndex {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RequestedBandCombinationIndex::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RequestedBandCombinationIndex");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RequestedBandCombinationIndex");
            e
        })
    }
}
// RequestedFeatureSetEntryIndex
#[derive(Clone, Debug)]
pub struct RequestedFeatureSetEntryIndex(pub Vec<u8>);

impl RequestedFeatureSetEntryIndex {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for RequestedFeatureSetEntryIndex {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RequestedFeatureSetEntryIndex::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RequestedFeatureSetEntryIndex");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RequestedFeatureSetEntryIndex");
            e
        })
    }
}
// RequestedPMaxFr2
#[derive(Clone, Debug)]
pub struct RequestedPMaxFr2(pub Vec<u8>);

impl RequestedPMaxFr2 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for RequestedPMaxFr2 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RequestedPMaxFr2::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RequestedPMaxFr2");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RequestedPMaxFr2");
            e
        })
    }
}
// RequestedPdcchBlindDetectionScg
#[derive(Clone, Debug)]
pub struct RequestedPdcchBlindDetectionScg(pub Vec<u8>);

impl RequestedPdcchBlindDetectionScg {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for RequestedPdcchBlindDetectionScg {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RequestedPdcchBlindDetectionScg::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RequestedPdcchBlindDetectionScg");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RequestedPdcchBlindDetectionScg");
            e
        })
    }
}
// RequestedSrsTransmissionCharacteristics
#[derive(Clone, Debug)]
pub struct RequestedSrsTransmissionCharacteristics {
    pub number_of_transmissions: Option<u16>,
    pub resource_type: ResourceType2,
    pub bandwidth_srs: BandwidthSrs,
    pub srs_resource_set_list: Option<SrsResourceSetList>,
    pub ssb_information: Option<SsbInformation>,
    pub srs_frequency: Option<SrsFrequency>,
}

impl RequestedSrsTransmissionCharacteristics {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 4)?;
        let number_of_transmissions = if optionals[0] {
            Some(aper::decode::decode_integer(data, Some(0), Some(500), true)?.0 as u16)
        } else {
            None
        };
        let resource_type = ResourceType2::aper_decode(data)?;
        let bandwidth_srs = BandwidthSrs::aper_decode(data)?;
        let srs_resource_set_list = if optionals[1] {
            Some(SrsResourceSetList::aper_decode(data)?)
        } else {
            None
        };
        let ssb_information = if optionals[2] {
            Some(SsbInformation::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut srs_frequency: Option<SrsFrequency> = None;

        if optionals[3] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    431 => srs_frequency = Some(SrsFrequency::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            number_of_transmissions,
            resource_type,
            bandwidth_srs,
            srs_resource_set_list,
            ssb_information,
            srs_frequency,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.number_of_transmissions.is_some());
        optionals.push(self.srs_resource_set_list.is_some());
        optionals.push(self.ssb_information.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        if let Some(x) = &self.number_of_transmissions {
            aper::encode::encode_integer(data, Some(0), Some(500), true, *x as i128, false)?;
        }
        self.resource_type.aper_encode(data)?;
        self.bandwidth_srs.aper_encode(data)?;
        if let Some(x) = &self.srs_resource_set_list {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.ssb_information {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for RequestedSrsTransmissionCharacteristics {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RequestedSrsTransmissionCharacteristics::decode_inner(data).map_err(
            |mut e: PerCodecError| {
                e.push_context("RequestedSrsTransmissionCharacteristics");
                e
            },
        )
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RequestedSrsTransmissionCharacteristics");
            e
        })
    }
}
// RequestType
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum RequestType {
    Offer,
    Execution,
}

impl RequestType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for RequestType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RequestType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RequestType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RequestType");
            e
        })
    }
}
// ResourceCoordinationEutraCellInfo
#[derive(Clone, Debug)]
pub struct ResourceCoordinationEutraCellInfo {
    pub eutra_mode_info: EutraCoexModeInfo,
    pub eutra_prach_configuration: EutraPrachConfiguration,
    pub ignore_prach_configuration: Option<IgnorePrachConfiguration>,
}

impl ResourceCoordinationEutraCellInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let eutra_mode_info = EutraCoexModeInfo::aper_decode(data)?;
        let eutra_prach_configuration = EutraPrachConfiguration::aper_decode(data)?;

        // Process the extension container
        let mut ignore_prach_configuration: Option<IgnorePrachConfiguration> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    233 => {
                        ignore_prach_configuration =
                            Some(IgnorePrachConfiguration::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            eutra_mode_info,
            eutra_prach_configuration,
            ignore_prach_configuration,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.eutra_mode_info.aper_encode(data)?;
        self.eutra_prach_configuration.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for ResourceCoordinationEutraCellInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceCoordinationEutraCellInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceCoordinationEutraCellInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceCoordinationEutraCellInfo");
            e
        })
    }
}
// ResourceCoordinationTransferInformation
#[derive(Clone, Debug)]
pub struct ResourceCoordinationTransferInformation {
    pub m_enb_cell_id: EutraCellId,
    pub resource_coordination_eutra_cell_info: Option<ResourceCoordinationEutraCellInfo>,
}

impl ResourceCoordinationTransferInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let m_enb_cell_id = EutraCellId::aper_decode(data)?;
        let resource_coordination_eutra_cell_info = if optionals[0] {
            Some(ResourceCoordinationEutraCellInfo::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            m_enb_cell_id,
            resource_coordination_eutra_cell_info,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.resource_coordination_eutra_cell_info.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.m_enb_cell_id.aper_encode(data)?;
        if let Some(x) = &self.resource_coordination_eutra_cell_info {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for ResourceCoordinationTransferInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceCoordinationTransferInformation::decode_inner(data).map_err(
            |mut e: PerCodecError| {
                e.push_context("ResourceCoordinationTransferInformation");
                e
            },
        )
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceCoordinationTransferInformation");
            e
        })
    }
}
// ResourceCoordinationTransferContainer
#[derive(Clone, Debug)]
pub struct ResourceCoordinationTransferContainer(pub Vec<u8>);

impl ResourceCoordinationTransferContainer {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for ResourceCoordinationTransferContainer {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceCoordinationTransferContainer::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceCoordinationTransferContainer");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceCoordinationTransferContainer");
            e
        })
    }
}
// ResourceSetType
#[derive(Clone, Debug)]
pub enum ResourceSetType {
    Periodic(ResourceSetTypePeriodic),
    SemiPersistent(ResourceSetTypeSemiPersistent),
    Aperiodic(ResourceSetTypeAperiodic),
}

impl ResourceSetType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 3, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::Periodic(ResourceSetTypePeriodic::aper_decode(data)?)),
            1 => Ok(Self::SemiPersistent(
                ResourceSetTypeSemiPersistent::aper_decode(data)?,
            )),
            2 => Ok(Self::Aperiodic(ResourceSetTypeAperiodic::aper_decode(
                data,
            )?)),
            3 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::Periodic(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::SemiPersistent(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 1, false)?;
                x.aper_encode(data)
            }
            Self::Aperiodic(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 2, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for ResourceSetType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceSetType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceSetType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceSetType");
            e
        })
    }
}
// ResourceSetTypePeriodic
#[derive(Clone, Debug)]
pub struct ResourceSetTypePeriodic {
    pub periodic_set: PeriodicSet,
}

impl ResourceSetTypePeriodic {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let periodic_set = PeriodicSet::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { periodic_set })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.periodic_set.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for ResourceSetTypePeriodic {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceSetTypePeriodic::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceSetTypePeriodic");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceSetTypePeriodic");
            e
        })
    }
}
// ResourceSetTypeSemiPersistent
#[derive(Clone, Debug)]
pub struct ResourceSetTypeSemiPersistent {
    pub semi_persistent_set: SemiPersistentSet,
}

impl ResourceSetTypeSemiPersistent {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let semi_persistent_set = SemiPersistentSet::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            semi_persistent_set,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.semi_persistent_set.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for ResourceSetTypeSemiPersistent {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceSetTypeSemiPersistent::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceSetTypeSemiPersistent");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceSetTypeSemiPersistent");
            e
        })
    }
}
// ResourceSetTypeAperiodic
#[derive(Clone, Debug)]
pub struct ResourceSetTypeAperiodic {
    pub srs_resource_trigger_list: u8,
    pub slotoffset: u8,
}

impl ResourceSetTypeAperiodic {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let srs_resource_trigger_list =
            aper::decode::decode_integer(data, Some(1), Some(3), false)?.0 as u8;
        let slotoffset = aper::decode::decode_integer(data, Some(0), Some(32), false)?.0 as u8;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            srs_resource_trigger_list,
            slotoffset,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(1),
            Some(3),
            false,
            self.srs_resource_trigger_list as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(32),
            false,
            self.slotoffset as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for ResourceSetTypeAperiodic {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceSetTypeAperiodic::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceSetTypeAperiodic");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceSetTypeAperiodic");
            e
        })
    }
}
// RepetitionPeriod
#[derive(Clone, Copy, Debug)]
pub struct RepetitionPeriod(pub u32);

impl RepetitionPeriod {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(131071), true)?.0 as u32,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(131071), true, self.0 as i128, false)
    }
}

impl AperCodec for RepetitionPeriod {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RepetitionPeriod::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RepetitionPeriod");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RepetitionPeriod");
            e
        })
    }
}
// ReportingRequestType
#[derive(Clone, Debug)]
pub struct ReportingRequestType {
    pub event_type: EventType,
    pub reporting_periodicity_value: Option<ReportingPeriodicityValue>,
}

impl ReportingRequestType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let event_type = EventType::aper_decode(data)?;
        let reporting_periodicity_value = if optionals[0] {
            Some(ReportingPeriodicityValue::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            event_type,
            reporting_periodicity_value,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.reporting_periodicity_value.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.event_type.aper_encode(data)?;
        if let Some(x) = &self.reporting_periodicity_value {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for ReportingRequestType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ReportingRequestType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReportingRequestType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReportingRequestType");
            e
        })
    }
}
// ResourceType
#[derive(Clone, Debug)]
pub enum ResourceType {
    Periodic(ResourceTypePeriodic),
    SemiPersistent(ResourceTypeSemiPersistent),
    Aperiodic(ResourceTypeAperiodic),
}

impl ResourceType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 3, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::Periodic(ResourceTypePeriodic::aper_decode(data)?)),
            1 => Ok(Self::SemiPersistent(
                ResourceTypeSemiPersistent::aper_decode(data)?,
            )),
            2 => Ok(Self::Aperiodic(ResourceTypeAperiodic::aper_decode(data)?)),
            3 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::Periodic(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::SemiPersistent(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 1, false)?;
                x.aper_encode(data)
            }
            Self::Aperiodic(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 2, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for ResourceType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceType");
            e
        })
    }
}
// ResourceTypePeriodic
#[derive(Clone, Debug)]
pub struct ResourceTypePeriodic {
    pub periodicity: Periodicity1,
    pub offset: u16,
}

impl ResourceTypePeriodic {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let periodicity = Periodicity1::aper_decode(data)?;
        let offset = aper::decode::decode_integer(data, Some(0), Some(2559), true)?.0 as u16;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            periodicity,
            offset,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.periodicity.aper_encode(data)?;
        aper::encode::encode_integer(data, Some(0), Some(2559), true, self.offset as i128, false)?;

        Ok(())
    }
}

impl AperCodec for ResourceTypePeriodic {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceTypePeriodic::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceTypePeriodic");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceTypePeriodic");
            e
        })
    }
}
// ResourceTypeSemiPersistent
#[derive(Clone, Debug)]
pub struct ResourceTypeSemiPersistent {
    pub periodicity: Periodicity2,
    pub offset: u16,
}

impl ResourceTypeSemiPersistent {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let periodicity = Periodicity2::aper_decode(data)?;
        let offset = aper::decode::decode_integer(data, Some(0), Some(2559), true)?.0 as u16;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            periodicity,
            offset,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.periodicity.aper_encode(data)?;
        aper::encode::encode_integer(data, Some(0), Some(2559), true, self.offset as i128, false)?;

        Ok(())
    }
}

impl AperCodec for ResourceTypeSemiPersistent {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceTypeSemiPersistent::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceTypeSemiPersistent");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceTypeSemiPersistent");
            e
        })
    }
}
// ResourceTypeAperiodic
#[derive(Clone, Debug)]
pub struct ResourceTypeAperiodic {
    pub aperiodic_resource_type: AperiodicResourceType,
}

impl ResourceTypeAperiodic {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let aperiodic_resource_type = AperiodicResourceType::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            aperiodic_resource_type,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.aperiodic_resource_type.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for ResourceTypeAperiodic {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceTypeAperiodic::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceTypeAperiodic");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceTypeAperiodic");
            e
        })
    }
}
// ResourceTypePos
#[derive(Clone, Debug)]
pub enum ResourceTypePos {
    Periodic(ResourceTypePeriodicPos),
    SemiPersistent(ResourceTypeSemiPersistentPos),
    Aperiodic(ResourceTypeAperiodicPos),
}

impl ResourceTypePos {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 3, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::Periodic(ResourceTypePeriodicPos::aper_decode(data)?)),
            1 => Ok(Self::SemiPersistent(
                ResourceTypeSemiPersistentPos::aper_decode(data)?,
            )),
            2 => Ok(Self::Aperiodic(ResourceTypeAperiodicPos::aper_decode(
                data,
            )?)),
            3 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::Periodic(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::SemiPersistent(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 1, false)?;
                x.aper_encode(data)
            }
            Self::Aperiodic(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 2, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for ResourceTypePos {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceTypePos::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceTypePos");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceTypePos");
            e
        })
    }
}
// ResourceTypePeriodicPos
#[derive(Clone, Debug)]
pub struct ResourceTypePeriodicPos {
    pub periodicity: Periodicity3,
    pub offset: u32,
}

impl ResourceTypePeriodicPos {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let periodicity = Periodicity3::aper_decode(data)?;
        let offset = aper::decode::decode_integer(data, Some(0), Some(81919), true)?.0 as u32;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            periodicity,
            offset,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.periodicity.aper_encode(data)?;
        aper::encode::encode_integer(data, Some(0), Some(81919), true, self.offset as i128, false)?;

        Ok(())
    }
}

impl AperCodec for ResourceTypePeriodicPos {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceTypePeriodicPos::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceTypePeriodicPos");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceTypePeriodicPos");
            e
        })
    }
}
// ResourceTypeSemiPersistentPos
#[derive(Clone, Debug)]
pub struct ResourceTypeSemiPersistentPos {
    pub periodicity: Periodicity4,
    pub offset: u32,
}

impl ResourceTypeSemiPersistentPos {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let periodicity = Periodicity4::aper_decode(data)?;
        let offset = aper::decode::decode_integer(data, Some(0), Some(81919), true)?.0 as u32;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            periodicity,
            offset,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.periodicity.aper_encode(data)?;
        aper::encode::encode_integer(data, Some(0), Some(81919), true, self.offset as i128, false)?;

        Ok(())
    }
}

impl AperCodec for ResourceTypeSemiPersistentPos {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceTypeSemiPersistentPos::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceTypeSemiPersistentPos");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceTypeSemiPersistentPos");
            e
        })
    }
}
// ResourceTypeAperiodicPos
#[derive(Clone, Debug)]
pub struct ResourceTypeAperiodicPos {
    pub slot_offset: u8,
}

impl ResourceTypeAperiodicPos {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let slot_offset = aper::decode::decode_integer(data, Some(0), Some(32), false)?.0 as u8;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { slot_offset })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(32),
            false,
            self.slot_offset as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for ResourceTypeAperiodicPos {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceTypeAperiodicPos::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceTypeAperiodicPos");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceTypeAperiodicPos");
            e
        })
    }
}
// RlcDuplicationInformation
#[derive(Clone, Debug)]
pub struct RlcDuplicationInformation {
    pub rlc_duplication_state_list: RlcDuplicationStateList,
    pub primary_path_indication: Option<PrimaryPathIndication>,
}

impl RlcDuplicationInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let rlc_duplication_state_list = RlcDuplicationStateList::aper_decode(data)?;
        let primary_path_indication = if optionals[0] {
            Some(PrimaryPathIndication::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            rlc_duplication_state_list,
            primary_path_indication,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.primary_path_indication.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.rlc_duplication_state_list.aper_encode(data)?;
        if let Some(x) = &self.primary_path_indication {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for RlcDuplicationInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RlcDuplicationInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RlcDuplicationInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RlcDuplicationInformation");
            e
        })
    }
}
// RlcDuplicationStateList
#[derive(Clone, Debug)]
pub struct RlcDuplicationStateList(pub Vec<RlcDuplicationStateItem>);

impl RlcDuplicationStateList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(3), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(RlcDuplicationStateItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(3), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for RlcDuplicationStateList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RlcDuplicationStateList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RlcDuplicationStateList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RlcDuplicationStateList");
            e
        })
    }
}
// RlcDuplicationStateItem
#[derive(Clone, Debug)]
pub struct RlcDuplicationStateItem {
    pub duplication_state: DuplicationState,
}

impl RlcDuplicationStateItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let duplication_state = DuplicationState::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { duplication_state })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.duplication_state.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for RlcDuplicationStateItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RlcDuplicationStateItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RlcDuplicationStateItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RlcDuplicationStateItem");
            e
        })
    }
}
// RlcFailureIndication
#[derive(Clone, Debug)]
pub struct RlcFailureIndication {
    pub assocated_lcid: Lcid,
}

impl RlcFailureIndication {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let assocated_lcid = Lcid::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { assocated_lcid })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.assocated_lcid.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for RlcFailureIndication {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RlcFailureIndication::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RlcFailureIndication");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RlcFailureIndication");
            e
        })
    }
}
// RlcMode
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum RlcMode {
    RlcAm,
    RlcUmBidirectional,
    RlcUmUnidirectionalUl,
    RlcUmUnidirectionalDl,
}

impl RlcMode {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for RlcMode {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RlcMode::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RlcMode");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RlcMode");
            e
        })
    }
}
// RlcStatus
#[derive(Clone, Debug)]
pub struct RlcStatus {
    pub reestablishment_indication: ReestablishmentIndication,
}

impl RlcStatus {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let reestablishment_indication = ReestablishmentIndication::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            reestablishment_indication,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.reestablishment_indication.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for RlcStatus {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RlcStatus::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RlcStatus");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RlcStatus");
            e
        })
    }
}
// RlfReportInformationList
#[derive(Clone, Debug)]
pub struct RlfReportInformationList(pub Vec<RlfReportInformationItem>);

impl RlfReportInformationList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(RlfReportInformationItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for RlfReportInformationList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RlfReportInformationList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RlfReportInformationList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RlfReportInformationList");
            e
        })
    }
}
// RlfReportInformationItem
#[derive(Clone, Debug)]
pub struct RlfReportInformationItem {
    pub nr_ue_rlf_report_container: NrUeRlfReportContainer,
    pub ue_assitant_identifier: Option<GnbDuUeF1apId>,
}

impl RlfReportInformationItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let nr_ue_rlf_report_container = NrUeRlfReportContainer::aper_decode(data)?;
        let ue_assitant_identifier = if optionals[0] {
            Some(GnbDuUeF1apId::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            nr_ue_rlf_report_container,
            ue_assitant_identifier,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.ue_assitant_identifier.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.nr_ue_rlf_report_container.aper_encode(data)?;
        if let Some(x) = &self.ue_assitant_identifier {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for RlfReportInformationItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RlfReportInformationItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RlfReportInformationItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RlfReportInformationItem");
            e
        })
    }
}
// RimrsDetectionStatus
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum RimrsDetectionStatus {
    RsDetected,
    RsDisappeared,
}

impl RimrsDetectionStatus {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for RimrsDetectionStatus {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RimrsDetectionStatus::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RimrsDetectionStatus");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RimrsDetectionStatus");
            e
        })
    }
}
// RrcContainer
#[derive(Clone, Debug)]
pub struct RrcContainer(pub Vec<u8>);

impl RrcContainer {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for RrcContainer {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RrcContainer::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RrcContainer");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RrcContainer");
            e
        })
    }
}
// RrcContainerRrcSetupComplete
#[derive(Clone, Debug)]
pub struct RrcContainerRrcSetupComplete(pub Vec<u8>);

impl RrcContainerRrcSetupComplete {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for RrcContainerRrcSetupComplete {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RrcContainerRrcSetupComplete::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RrcContainerRrcSetupComplete");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RrcContainerRrcSetupComplete");
            e
        })
    }
}
// RrcDeliveryStatus
#[derive(Clone, Debug)]
pub struct RrcDeliveryStatus {
    pub delivery_status: PdcpSn,
    pub triggering_message: PdcpSn,
}

impl RrcDeliveryStatus {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let delivery_status = PdcpSn::aper_decode(data)?;
        let triggering_message = PdcpSn::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            delivery_status,
            triggering_message,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.delivery_status.aper_encode(data)?;
        self.triggering_message.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for RrcDeliveryStatus {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RrcDeliveryStatus::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RrcDeliveryStatus");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RrcDeliveryStatus");
            e
        })
    }
}
// RrcDeliveryStatusRequest
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum RrcDeliveryStatusRequest {
    True,
}

impl RrcDeliveryStatusRequest {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for RrcDeliveryStatusRequest {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RrcDeliveryStatusRequest::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RrcDeliveryStatusRequest");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RrcDeliveryStatusRequest");
            e
        })
    }
}
// RrcReconfigurationCompleteIndicator
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum RrcReconfigurationCompleteIndicator {
    True,
}

impl RrcReconfigurationCompleteIndicator {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for RrcReconfigurationCompleteIndicator {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RrcReconfigurationCompleteIndicator::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RrcReconfigurationCompleteIndicator");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RrcReconfigurationCompleteIndicator");
            e
        })
    }
}
// RrcVersion
#[derive(Clone, Debug)]
pub struct RrcVersion {
    pub latest_rrc_version: BitString,
    pub latest_rrc_version_enhanced: Option<Vec<u8>>,
}

impl RrcVersion {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let latest_rrc_version = aper::decode::decode_bitstring(data, Some(3), Some(3), false)?;

        // Process the extension container
        let mut latest_rrc_version_enhanced: Option<Vec<u8>> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    199 => {
                        latest_rrc_version_enhanced = Some(aper::decode::decode_octetstring(
                            data,
                            Some(3),
                            Some(3),
                            false,
                        )?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            latest_rrc_version,
            latest_rrc_version_enhanced,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_bitstring(
            data,
            Some(3),
            Some(3),
            false,
            &self.latest_rrc_version,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for RrcVersion {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RrcVersion::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RrcVersion");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RrcVersion");
            e
        })
    }
}
// RoutingId
#[derive(Clone, Debug)]
pub struct RoutingId(pub Vec<u8>);

impl RoutingId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for RoutingId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RoutingId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RoutingId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RoutingId");
            e
        })
    }
}
// SCellFailedtoSetupItem
#[derive(Clone, Debug)]
pub struct SCellFailedtoSetupItem {
    pub s_cell_id: NrCgi,
    pub cause: Option<Cause>,
}

impl SCellFailedtoSetupItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let s_cell_id = NrCgi::aper_decode(data)?;
        let cause = if optionals[0] {
            Some(Cause::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { s_cell_id, cause })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.cause.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.s_cell_id.aper_encode(data)?;
        if let Some(x) = &self.cause {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SCellFailedtoSetupItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SCellFailedtoSetupItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SCellFailedtoSetupItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SCellFailedtoSetupItem");
            e
        })
    }
}
// SCellFailedtoSetupModItem
#[derive(Clone, Debug)]
pub struct SCellFailedtoSetupModItem {
    pub s_cell_id: NrCgi,
    pub cause: Option<Cause>,
}

impl SCellFailedtoSetupModItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let s_cell_id = NrCgi::aper_decode(data)?;
        let cause = if optionals[0] {
            Some(Cause::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { s_cell_id, cause })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.cause.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.s_cell_id.aper_encode(data)?;
        if let Some(x) = &self.cause {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SCellFailedtoSetupModItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SCellFailedtoSetupModItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SCellFailedtoSetupModItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SCellFailedtoSetupModItem");
            e
        })
    }
}
// SCellToBeRemovedItem
#[derive(Clone, Debug)]
pub struct SCellToBeRemovedItem {
    pub s_cell_id: NrCgi,
}

impl SCellToBeRemovedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let s_cell_id = NrCgi::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { s_cell_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.s_cell_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SCellToBeRemovedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SCellToBeRemovedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SCellToBeRemovedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SCellToBeRemovedItem");
            e
        })
    }
}
// SCellToBeSetupItem
#[derive(Clone, Debug)]
pub struct SCellToBeSetupItem {
    pub s_cell_id: NrCgi,
    pub s_cell_index: SCellIndex,
    pub s_cell_ul_configured: Option<CellUlConfigured>,
    pub serving_cell_mo: Option<ServingCellMo>,
}

impl SCellToBeSetupItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let s_cell_id = NrCgi::aper_decode(data)?;
        let s_cell_index = SCellIndex::aper_decode(data)?;
        let s_cell_ul_configured = if optionals[0] {
            Some(CellUlConfigured::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut serving_cell_mo: Option<ServingCellMo> = None;

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    182 => serving_cell_mo = Some(ServingCellMo::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            s_cell_id,
            s_cell_index,
            s_cell_ul_configured,
            serving_cell_mo,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.s_cell_ul_configured.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.s_cell_id.aper_encode(data)?;
        self.s_cell_index.aper_encode(data)?;
        if let Some(x) = &self.s_cell_ul_configured {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SCellToBeSetupItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SCellToBeSetupItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SCellToBeSetupItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SCellToBeSetupItem");
            e
        })
    }
}
// SCellToBeSetupModItem
#[derive(Clone, Debug)]
pub struct SCellToBeSetupModItem {
    pub s_cell_id: NrCgi,
    pub s_cell_index: SCellIndex,
    pub s_cell_ul_configured: Option<CellUlConfigured>,
    pub serving_cell_mo: Option<ServingCellMo>,
}

impl SCellToBeSetupModItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let s_cell_id = NrCgi::aper_decode(data)?;
        let s_cell_index = SCellIndex::aper_decode(data)?;
        let s_cell_ul_configured = if optionals[0] {
            Some(CellUlConfigured::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut serving_cell_mo: Option<ServingCellMo> = None;

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    182 => serving_cell_mo = Some(ServingCellMo::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            s_cell_id,
            s_cell_index,
            s_cell_ul_configured,
            serving_cell_mo,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.s_cell_ul_configured.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.s_cell_id.aper_encode(data)?;
        self.s_cell_index.aper_encode(data)?;
        if let Some(x) = &self.s_cell_ul_configured {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SCellToBeSetupModItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SCellToBeSetupModItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SCellToBeSetupModItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SCellToBeSetupModItem");
            e
        })
    }
}
// SCellIndex
#[derive(Clone, Copy, Debug)]
pub struct SCellIndex(pub u8);

impl SCellIndex {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(31), true)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(31), true, self.0 as i128, false)
    }
}

impl AperCodec for SCellIndex {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SCellIndex::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SCellIndex");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SCellIndex");
            e
        })
    }
}
// ScgIndicator
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ScgIndicator {
    Released,
}

impl ScgIndicator {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for ScgIndicator {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ScgIndicator::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ScgIndicator");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ScgIndicator");
            e
        })
    }
}
// ScsSpecificCarrier
#[derive(Clone, Debug)]
pub struct ScsSpecificCarrier {
    pub offset_to_carrier: u16,
    pub subcarrier_spacing: SubcarrierSpacing3,
    pub carrier_bandwidth: u16,
}

impl ScsSpecificCarrier {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let offset_to_carrier =
            aper::decode::decode_integer(data, Some(0), Some(2199), true)?.0 as u16;
        let subcarrier_spacing = SubcarrierSpacing3::aper_decode(data)?;
        let carrier_bandwidth =
            aper::decode::decode_integer(data, Some(1), Some(275), true)?.0 as u16;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            offset_to_carrier,
            subcarrier_spacing,
            carrier_bandwidth,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(2199),
            true,
            self.offset_to_carrier as i128,
            false,
        )?;
        self.subcarrier_spacing.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(1),
            Some(275),
            true,
            self.carrier_bandwidth as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for ScsSpecificCarrier {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ScsSpecificCarrier::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ScsSpecificCarrier");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ScsSpecificCarrier");
            e
        })
    }
}
// SearchWindowInformation
#[derive(Clone, Debug)]
pub struct SearchWindowInformation {
    pub expected_propagation_delay: i16,
    pub delay_uncertainty: u8,
}

impl SearchWindowInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let expected_propagation_delay =
            aper::decode::decode_integer(data, Some(-3841), Some(3841), true)?.0 as i16;
        let delay_uncertainty =
            aper::decode::decode_integer(data, Some(1), Some(246), true)?.0 as u8;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            expected_propagation_delay,
            delay_uncertainty,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(-3841),
            Some(3841),
            true,
            self.expected_propagation_delay as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(1),
            Some(246),
            true,
            self.delay_uncertainty as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for SearchWindowInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SearchWindowInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SearchWindowInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SearchWindowInformation");
            e
        })
    }
}
// SerialNumber
#[derive(Clone, Debug)]
pub struct SerialNumber(pub BitString);

impl SerialNumber {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(16),
            Some(16),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(16), Some(16), false, &self.0, false)
    }
}

impl AperCodec for SerialNumber {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SerialNumber::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SerialNumber");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SerialNumber");
            e
        })
    }
}
// SibTypePws
#[derive(Clone, Copy, Debug)]
pub struct SibTypePws(pub u8);

impl SibTypePws {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(6), Some(8), true)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(6), Some(8), true, self.0 as i128, false)
    }
}

impl AperCodec for SibTypePws {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SibTypePws::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SibTypePws");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SibTypePws");
            e
        })
    }
}
// SelectedBandCombinationIndex
#[derive(Clone, Debug)]
pub struct SelectedBandCombinationIndex(pub Vec<u8>);

impl SelectedBandCombinationIndex {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for SelectedBandCombinationIndex {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SelectedBandCombinationIndex::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SelectedBandCombinationIndex");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SelectedBandCombinationIndex");
            e
        })
    }
}
// SelectedFeatureSetEntryIndex
#[derive(Clone, Debug)]
pub struct SelectedFeatureSetEntryIndex(pub Vec<u8>);

impl SelectedFeatureSetEntryIndex {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for SelectedFeatureSetEntryIndex {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SelectedFeatureSetEntryIndex::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SelectedFeatureSetEntryIndex");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SelectedFeatureSetEntryIndex");
            e
        })
    }
}
// CgConfigInfo
#[derive(Clone, Debug)]
pub struct CgConfigInfo(pub Vec<u8>);

impl CgConfigInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for CgConfigInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CgConfigInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CgConfigInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CgConfigInfo");
            e
        })
    }
}
// ServCellIndex
#[derive(Clone, Copy, Debug)]
pub struct ServCellIndex(pub u8);

impl ServCellIndex {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(31), true)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(31), true, self.0 as i128, false)
    }
}

impl AperCodec for ServCellIndex {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ServCellIndex::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServCellIndex");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServCellIndex");
            e
        })
    }
}
// ServingCellMo
#[derive(Clone, Copy, Debug)]
pub struct ServingCellMo(pub u8);

impl ServingCellMo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(64), true)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(64), true, self.0 as i128, false)
    }
}

impl AperCodec for ServingCellMo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ServingCellMo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServingCellMo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServingCellMo");
            e
        })
    }
}
// ServedCellInformation
#[derive(Clone, Debug)]
pub struct ServedCellInformation {
    pub nr_cgi: NrCgi,
    pub nr_pci: NrPci,
    pub five_gs_tac: Option<FiveGsTac>,
    pub configured_eps_tac: Option<ConfiguredEpsTac>,
    pub served_plmns: ServedPlmnsList,
    pub nr_mode_info: NrModeInfo,
    pub measurement_timing_configuration: Vec<u8>,
    pub ranac: Option<Ranac>,
    pub extended_served_plmns_list: Option<ExtendedServedPlmnsList>,
    pub cell_direction: Option<CellDirection>,
    pub b_plmn_id_info_list: Option<BPlmnIdInfoList>,
    pub cell_type: Option<CellType>,
    pub configured_tac_indication: Option<ConfiguredTacIndication>,
    pub aggressor_gnb_set_id: Option<AggressorGnbSetId>,
    pub victim_gnb_set_id: Option<VictimGnbSetId>,
    pub iab_info_iab_du: Option<IabInfoIabDu>,
    pub ssb_positions_in_burst: Option<SsbPositionsInBurst>,
    pub nr_prach_config: Option<NrPrachConfig>,
    pub sfn_offset: Option<SfnOffset>,
}

impl ServedCellInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 3)?;
        let nr_cgi = NrCgi::aper_decode(data)?;
        let nr_pci = NrPci::aper_decode(data)?;
        let five_gs_tac = if optionals[0] {
            Some(FiveGsTac::aper_decode(data)?)
        } else {
            None
        };
        let configured_eps_tac = if optionals[1] {
            Some(ConfiguredEpsTac::aper_decode(data)?)
        } else {
            None
        };
        let served_plmns = ServedPlmnsList::aper_decode(data)?;
        let nr_mode_info = NrModeInfo::aper_decode(data)?;
        let measurement_timing_configuration =
            aper::decode::decode_octetstring(data, None, None, false)?;

        // Process the extension container
        let mut ranac: Option<Ranac> = None;
        let mut extended_served_plmns_list: Option<ExtendedServedPlmnsList> = None;
        let mut cell_direction: Option<CellDirection> = None;
        let mut b_plmn_id_info_list: Option<BPlmnIdInfoList> = None;
        let mut cell_type: Option<CellType> = None;
        let mut configured_tac_indication: Option<ConfiguredTacIndication> = None;
        let mut aggressor_gnb_set_id: Option<AggressorGnbSetId> = None;
        let mut victim_gnb_set_id: Option<VictimGnbSetId> = None;
        let mut iab_info_iab_du: Option<IabInfoIabDu> = None;
        let mut ssb_positions_in_burst: Option<SsbPositionsInBurst> = None;
        let mut nr_prach_config: Option<NrPrachConfig> = None;
        let mut sfn_offset: Option<SfnOffset> = None;

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    139 => ranac = Some(Ranac::aper_decode(data)?),
                    196 => {
                        extended_served_plmns_list =
                            Some(ExtendedServedPlmnsList::aper_decode(data)?)
                    }
                    201 => cell_direction = Some(CellDirection::aper_decode(data)?),
                    223 => b_plmn_id_info_list = Some(BPlmnIdInfoList::aper_decode(data)?),
                    232 => cell_type = Some(CellType::aper_decode(data)?),
                    425 => {
                        configured_tac_indication =
                            Some(ConfiguredTacIndication::aper_decode(data)?)
                    }
                    251 => aggressor_gnb_set_id = Some(AggressorGnbSetId::aper_decode(data)?),
                    252 => victim_gnb_set_id = Some(VictimGnbSetId::aper_decode(data)?),
                    290 => iab_info_iab_du = Some(IabInfoIabDu::aper_decode(data)?),
                    357 => ssb_positions_in_burst = Some(SsbPositionsInBurst::aper_decode(data)?),
                    358 => nr_prach_config = Some(NrPrachConfig::aper_decode(data)?),
                    429 => sfn_offset = Some(SfnOffset::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            nr_cgi,
            nr_pci,
            five_gs_tac,
            configured_eps_tac,
            served_plmns,
            nr_mode_info,
            measurement_timing_configuration,
            ranac,
            extended_served_plmns_list,
            cell_direction,
            b_plmn_id_info_list,
            cell_type,
            configured_tac_indication,
            aggressor_gnb_set_id,
            victim_gnb_set_id,
            iab_info_iab_du,
            ssb_positions_in_burst,
            nr_prach_config,
            sfn_offset,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.five_gs_tac.is_some());
        optionals.push(self.configured_eps_tac.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.nr_cgi.aper_encode(data)?;
        self.nr_pci.aper_encode(data)?;
        if let Some(x) = &self.five_gs_tac {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.configured_eps_tac {
            x.aper_encode(data)?;
        }
        self.served_plmns.aper_encode(data)?;
        self.nr_mode_info.aper_encode(data)?;
        aper::encode::encode_octetstring(
            data,
            None,
            None,
            false,
            &self.measurement_timing_configuration,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for ServedCellInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ServedCellInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServedCellInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServedCellInformation");
            e
        })
    }
}
// SfnOffset
#[derive(Clone, Debug)]
pub struct SfnOffset {
    pub sfn_time_offset: BitString,
}

impl SfnOffset {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let sfn_time_offset = aper::decode::decode_bitstring(data, Some(24), Some(24), false)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { sfn_time_offset })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        aper::encode::encode_bitstring(
            data,
            Some(24),
            Some(24),
            false,
            &self.sfn_time_offset,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for SfnOffset {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SfnOffset::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SfnOffset");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SfnOffset");
            e
        })
    }
}
// ServedCellsToAddItem
#[derive(Clone, Debug)]
pub struct ServedCellsToAddItem {
    pub served_cell_information: ServedCellInformation,
    pub gnb_du_system_information: Option<GnbDuSystemInformation>,
}

impl ServedCellsToAddItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let served_cell_information = ServedCellInformation::aper_decode(data)?;
        let gnb_du_system_information = if optionals[0] {
            Some(GnbDuSystemInformation::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            served_cell_information,
            gnb_du_system_information,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.gnb_du_system_information.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.served_cell_information.aper_encode(data)?;
        if let Some(x) = &self.gnb_du_system_information {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for ServedCellsToAddItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ServedCellsToAddItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServedCellsToAddItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServedCellsToAddItem");
            e
        })
    }
}
// ServedCellsToDeleteItem
#[derive(Clone, Debug)]
pub struct ServedCellsToDeleteItem {
    pub old_nr_cgi: NrCgi,
}

impl ServedCellsToDeleteItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let old_nr_cgi = NrCgi::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { old_nr_cgi })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.old_nr_cgi.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for ServedCellsToDeleteItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ServedCellsToDeleteItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServedCellsToDeleteItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServedCellsToDeleteItem");
            e
        })
    }
}
// ServedCellsToModifyItem
#[derive(Clone, Debug)]
pub struct ServedCellsToModifyItem {
    pub old_nr_cgi: NrCgi,
    pub served_cell_information: ServedCellInformation,
    pub gnb_du_system_information: Option<GnbDuSystemInformation>,
}

impl ServedCellsToModifyItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let old_nr_cgi = NrCgi::aper_decode(data)?;
        let served_cell_information = ServedCellInformation::aper_decode(data)?;
        let gnb_du_system_information = if optionals[0] {
            Some(GnbDuSystemInformation::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            old_nr_cgi,
            served_cell_information,
            gnb_du_system_information,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.gnb_du_system_information.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.old_nr_cgi.aper_encode(data)?;
        self.served_cell_information.aper_encode(data)?;
        if let Some(x) = &self.gnb_du_system_information {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for ServedCellsToModifyItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ServedCellsToModifyItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServedCellsToModifyItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServedCellsToModifyItem");
            e
        })
    }
}
// ServedEutraCellsInformation
#[derive(Clone, Debug)]
pub struct ServedEutraCellsInformation {
    pub eutra_mode_info: EutraModeInfo,
    pub protected_eutra_resource_indication: ProtectedEutraResourceIndication,
}

impl ServedEutraCellsInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let eutra_mode_info = EutraModeInfo::aper_decode(data)?;
        let protected_eutra_resource_indication =
            ProtectedEutraResourceIndication::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            eutra_mode_info,
            protected_eutra_resource_indication,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.eutra_mode_info.aper_encode(data)?;
        self.protected_eutra_resource_indication.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for ServedEutraCellsInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ServedEutraCellsInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServedEutraCellsInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServedEutraCellsInformation");
            e
        })
    }
}
// ServiceState
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ServiceState {
    InService,
    OutOfService,
}

impl ServiceState {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for ServiceState {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ServiceState::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServiceState");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServiceState");
            e
        })
    }
}
// ServiceStatus
#[derive(Clone, Debug)]
pub struct ServiceStatus {
    pub service_state: ServiceState,
    pub switching_off_ongoing: Option<SwitchingOffOngoing>,
}

impl ServiceStatus {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let service_state = ServiceState::aper_decode(data)?;
        let switching_off_ongoing = if optionals[0] {
            Some(SwitchingOffOngoing::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            service_state,
            switching_off_ongoing,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.switching_off_ongoing.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.service_state.aper_encode(data)?;
        if let Some(x) = &self.switching_off_ongoing {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for ServiceStatus {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ServiceStatus::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServiceStatus");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ServiceStatus");
            e
        })
    }
}
// RelativeTime1900
#[derive(Clone, Debug)]
pub struct RelativeTime1900(pub BitString);

impl RelativeTime1900 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(64),
            Some(64),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(64), Some(64), false, &self.0, false)
    }
}

impl AperCodec for RelativeTime1900 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RelativeTime1900::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RelativeTime1900");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RelativeTime1900");
            e
        })
    }
}
// ShortDrxCycleLength
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ShortDrxCycleLength {
    Ms2,
    Ms3,
    Ms4,
    Ms5,
    Ms6,
    Ms7,
    Ms8,
    Ms10,
    Ms14,
    Ms16,
    Ms20,
    Ms30,
    Ms32,
    Ms35,
    Ms40,
    Ms64,
    Ms80,
    Ms128,
    Ms160,
    Ms256,
    Ms320,
    Ms512,
    Ms640,
}

impl ShortDrxCycleLength {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(22), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(22), true, *self as i128, false)
    }
}

impl AperCodec for ShortDrxCycleLength {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ShortDrxCycleLength::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ShortDrxCycleLength");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ShortDrxCycleLength");
            e
        })
    }
}
// ShortDrxCycleTimer
#[derive(Clone, Copy, Debug)]
pub struct ShortDrxCycleTimer(pub u8);

impl ShortDrxCycleTimer {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(16), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(16), false, self.0 as i128, false)
    }
}

impl AperCodec for ShortDrxCycleTimer {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ShortDrxCycleTimer::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ShortDrxCycleTimer");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ShortDrxCycleTimer");
            e
        })
    }
}
// Sib1Message
#[derive(Clone, Debug)]
pub struct Sib1Message(pub Vec<u8>);

impl Sib1Message {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for Sib1Message {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Sib1Message::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Sib1Message");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Sib1Message");
            e
        })
    }
}
// Sib10Message
#[derive(Clone, Debug)]
pub struct Sib10Message(pub Vec<u8>);

impl Sib10Message {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for Sib10Message {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Sib10Message::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Sib10Message");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Sib10Message");
            e
        })
    }
}
// Sib12Message
#[derive(Clone, Debug)]
pub struct Sib12Message(pub Vec<u8>);

impl Sib12Message {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for Sib12Message {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Sib12Message::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Sib12Message");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Sib12Message");
            e
        })
    }
}
// Sib13Message
#[derive(Clone, Debug)]
pub struct Sib13Message(pub Vec<u8>);

impl Sib13Message {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for Sib13Message {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Sib13Message::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Sib13Message");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Sib13Message");
            e
        })
    }
}
// Sib14Message
#[derive(Clone, Debug)]
pub struct Sib14Message(pub Vec<u8>);

impl Sib14Message {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for Sib14Message {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Sib14Message::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Sib14Message");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Sib14Message");
            e
        })
    }
}
// SItype
#[derive(Clone, Copy, Debug)]
pub struct SItype(pub u8);

impl SItype {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(32), true)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(32), true, self.0 as i128, false)
    }
}

impl AperCodec for SItype {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SItype::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SItype");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SItype");
            e
        })
    }
}
// SItypeList
#[derive(Clone, Debug)]
pub struct SItypeList(pub Vec<SItypeItem>);

impl SItypeList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SItypeItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for SItypeList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SItypeList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SItypeList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SItypeList");
            e
        })
    }
}
// SItypeItem
#[derive(Clone, Debug)]
pub struct SItypeItem {
    pub s_itype: SItype,
}

impl SItypeItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let s_itype = SItype::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { s_itype })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.s_itype.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SItypeItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SItypeItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SItypeItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SItypeItem");
            e
        })
    }
}
// SibtypetobeupdatedListItem
#[derive(Clone, Debug)]
pub struct SibtypetobeupdatedListItem {
    pub si_btype: u8,
    pub si_bmessage: Vec<u8>,
    pub value_tag: u8,
    pub area_scope: Option<AreaScope>,
}

impl SibtypetobeupdatedListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let si_btype = aper::decode::decode_integer(data, Some(2), Some(32), true)?.0 as u8;
        let si_bmessage = aper::decode::decode_octetstring(data, None, None, false)?;
        let value_tag = aper::decode::decode_integer(data, Some(0), Some(31), true)?.0 as u8;

        // Process the extension container
        let mut area_scope: Option<AreaScope> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    240 => area_scope = Some(AreaScope::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            si_btype,
            si_bmessage,
            value_tag,
            area_scope,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        aper::encode::encode_integer(data, Some(2), Some(32), true, self.si_btype as i128, false)?;
        aper::encode::encode_octetstring(data, None, None, false, &self.si_bmessage, false)?;
        aper::encode::encode_integer(data, Some(0), Some(31), true, self.value_tag as i128, false)?;

        Ok(())
    }
}

impl AperCodec for SibtypetobeupdatedListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SibtypetobeupdatedListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SibtypetobeupdatedListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SibtypetobeupdatedListItem");
            e
        })
    }
}
// SlDrbId
#[derive(Clone, Copy, Debug)]
pub struct SlDrbId(pub u16);

impl SlDrbId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(512), true)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(512), true, self.0 as i128, false)
    }
}

impl AperCodec for SlDrbId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlDrbId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbId");
            e
        })
    }
}
// SlDrbInformation
#[derive(Clone, Debug)]
pub struct SlDrbInformation {
    pub sl_drb_qos: Pc5QosParameters,
    pub flows_mapped_to_sl_drb_list: FlowsMappedToSlDrbList,
}

impl SlDrbInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (_optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, true, 0)?;
        let sl_drb_qos = Pc5QosParameters::aper_decode(data)?;
        let flows_mapped_to_sl_drb_list = FlowsMappedToSlDrbList::aper_decode(data)?;

        Ok(Self {
            sl_drb_qos,
            flows_mapped_to_sl_drb_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let optionals = BitVec::new();

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.sl_drb_qos.aper_encode(data)?;
        self.flows_mapped_to_sl_drb_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SlDrbInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlDrbInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbInformation");
            e
        })
    }
}
// SlDrbsFailedToBeModifiedItem
#[derive(Clone, Debug)]
pub struct SlDrbsFailedToBeModifiedItem {
    pub sl_drb_id: SlDrbId,
    pub cause: Option<Cause>,
}

impl SlDrbsFailedToBeModifiedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let sl_drb_id = SlDrbId::aper_decode(data)?;
        let cause = if optionals[0] {
            Some(Cause::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { sl_drb_id, cause })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.cause.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.sl_drb_id.aper_encode(data)?;
        if let Some(x) = &self.cause {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SlDrbsFailedToBeModifiedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlDrbsFailedToBeModifiedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsFailedToBeModifiedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsFailedToBeModifiedItem");
            e
        })
    }
}
// SlDrbsFailedToBeSetupItem
#[derive(Clone, Debug)]
pub struct SlDrbsFailedToBeSetupItem {
    pub sl_drb_id: SlDrbId,
    pub cause: Option<Cause>,
}

impl SlDrbsFailedToBeSetupItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let sl_drb_id = SlDrbId::aper_decode(data)?;
        let cause = if optionals[0] {
            Some(Cause::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { sl_drb_id, cause })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.cause.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.sl_drb_id.aper_encode(data)?;
        if let Some(x) = &self.cause {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SlDrbsFailedToBeSetupItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlDrbsFailedToBeSetupItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsFailedToBeSetupItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsFailedToBeSetupItem");
            e
        })
    }
}
// SlDrbsFailedToBeSetupModItem
#[derive(Clone, Debug)]
pub struct SlDrbsFailedToBeSetupModItem {
    pub sl_drb_id: SlDrbId,
    pub cause: Option<Cause>,
}

impl SlDrbsFailedToBeSetupModItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let sl_drb_id = SlDrbId::aper_decode(data)?;
        let cause = if optionals[0] {
            Some(Cause::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { sl_drb_id, cause })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.cause.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.sl_drb_id.aper_encode(data)?;
        if let Some(x) = &self.cause {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SlDrbsFailedToBeSetupModItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlDrbsFailedToBeSetupModItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsFailedToBeSetupModItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsFailedToBeSetupModItem");
            e
        })
    }
}
// SlDrbsModifiedItem
#[derive(Clone, Debug)]
pub struct SlDrbsModifiedItem {
    pub sl_drb_id: SlDrbId,
}

impl SlDrbsModifiedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let sl_drb_id = SlDrbId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { sl_drb_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.sl_drb_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SlDrbsModifiedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlDrbsModifiedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsModifiedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsModifiedItem");
            e
        })
    }
}
// SlDrbsModifiedConfItem
#[derive(Clone, Debug)]
pub struct SlDrbsModifiedConfItem {
    pub sl_drb_id: SlDrbId,
}

impl SlDrbsModifiedConfItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let sl_drb_id = SlDrbId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { sl_drb_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.sl_drb_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SlDrbsModifiedConfItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlDrbsModifiedConfItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsModifiedConfItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsModifiedConfItem");
            e
        })
    }
}
// SlDrbsRequiredToBeModifiedItem
#[derive(Clone, Debug)]
pub struct SlDrbsRequiredToBeModifiedItem {
    pub sl_drb_id: SlDrbId,
}

impl SlDrbsRequiredToBeModifiedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let sl_drb_id = SlDrbId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { sl_drb_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.sl_drb_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SlDrbsRequiredToBeModifiedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlDrbsRequiredToBeModifiedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsRequiredToBeModifiedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsRequiredToBeModifiedItem");
            e
        })
    }
}
// SlDrbsRequiredToBeReleasedItem
#[derive(Clone, Debug)]
pub struct SlDrbsRequiredToBeReleasedItem {
    pub sl_drb_id: SlDrbId,
}

impl SlDrbsRequiredToBeReleasedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let sl_drb_id = SlDrbId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { sl_drb_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.sl_drb_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SlDrbsRequiredToBeReleasedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlDrbsRequiredToBeReleasedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsRequiredToBeReleasedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsRequiredToBeReleasedItem");
            e
        })
    }
}
// SlDrbsSetupItem
#[derive(Clone, Debug)]
pub struct SlDrbsSetupItem {
    pub sl_drb_id: SlDrbId,
}

impl SlDrbsSetupItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let sl_drb_id = SlDrbId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { sl_drb_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.sl_drb_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SlDrbsSetupItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlDrbsSetupItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsSetupItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsSetupItem");
            e
        })
    }
}
// SlDrbsSetupModItem
#[derive(Clone, Debug)]
pub struct SlDrbsSetupModItem {
    pub sl_drb_id: SlDrbId,
}

impl SlDrbsSetupModItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let sl_drb_id = SlDrbId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { sl_drb_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.sl_drb_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SlDrbsSetupModItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlDrbsSetupModItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsSetupModItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsSetupModItem");
            e
        })
    }
}
// SlDrbsToBeModifiedItem
#[derive(Clone, Debug)]
pub struct SlDrbsToBeModifiedItem {
    pub sl_drb_id: SlDrbId,
    pub sl_drb_information: Option<SlDrbInformation>,
    pub rlc_mode: Option<RlcMode>,
}

impl SlDrbsToBeModifiedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 3)?;
        let sl_drb_id = SlDrbId::aper_decode(data)?;
        let sl_drb_information = if optionals[0] {
            Some(SlDrbInformation::aper_decode(data)?)
        } else {
            None
        };
        let rlc_mode = if optionals[1] {
            Some(RlcMode::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            sl_drb_id,
            sl_drb_information,
            rlc_mode,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.sl_drb_information.is_some());
        optionals.push(self.rlc_mode.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.sl_drb_id.aper_encode(data)?;
        if let Some(x) = &self.sl_drb_information {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.rlc_mode {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SlDrbsToBeModifiedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlDrbsToBeModifiedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsToBeModifiedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsToBeModifiedItem");
            e
        })
    }
}
// SlDrbsToBeReleasedItem
#[derive(Clone, Debug)]
pub struct SlDrbsToBeReleasedItem {
    pub sl_drb_id: SlDrbId,
}

impl SlDrbsToBeReleasedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let sl_drb_id = SlDrbId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { sl_drb_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.sl_drb_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SlDrbsToBeReleasedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlDrbsToBeReleasedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsToBeReleasedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsToBeReleasedItem");
            e
        })
    }
}
// SlDrbsToBeSetupItem
#[derive(Clone, Debug)]
pub struct SlDrbsToBeSetupItem {
    pub sl_drb_id: SlDrbId,
    pub sl_drb_information: SlDrbInformation,
    pub rlc_mode: RlcMode,
}

impl SlDrbsToBeSetupItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let sl_drb_id = SlDrbId::aper_decode(data)?;
        let sl_drb_information = SlDrbInformation::aper_decode(data)?;
        let rlc_mode = RlcMode::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            sl_drb_id,
            sl_drb_information,
            rlc_mode,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.sl_drb_id.aper_encode(data)?;
        self.sl_drb_information.aper_encode(data)?;
        self.rlc_mode.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SlDrbsToBeSetupItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlDrbsToBeSetupItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsToBeSetupItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsToBeSetupItem");
            e
        })
    }
}
// SlDrbsToBeSetupModItem
#[derive(Clone, Debug)]
pub struct SlDrbsToBeSetupModItem {
    pub sl_drb_id: SlDrbId,
    pub sl_drb_information: SlDrbInformation,
    pub rlc_mode: Option<RlcMode>,
}

impl SlDrbsToBeSetupModItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let sl_drb_id = SlDrbId::aper_decode(data)?;
        let sl_drb_information = SlDrbInformation::aper_decode(data)?;
        let rlc_mode = if optionals[0] {
            Some(RlcMode::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            sl_drb_id,
            sl_drb_information,
            rlc_mode,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.rlc_mode.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.sl_drb_id.aper_encode(data)?;
        self.sl_drb_information.aper_encode(data)?;
        if let Some(x) = &self.rlc_mode {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SlDrbsToBeSetupModItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlDrbsToBeSetupModItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsToBeSetupModItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlDrbsToBeSetupModItem");
            e
        })
    }
}
// SlPhyMacRlcConfig
#[derive(Clone, Debug)]
pub struct SlPhyMacRlcConfig(pub Vec<u8>);

impl SlPhyMacRlcConfig {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for SlPhyMacRlcConfig {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlPhyMacRlcConfig::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlPhyMacRlcConfig");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlPhyMacRlcConfig");
            e
        })
    }
}
// SlConfigDedicatedEutraInfo
#[derive(Clone, Debug)]
pub struct SlConfigDedicatedEutraInfo(pub Vec<u8>);

impl SlConfigDedicatedEutraInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for SlConfigDedicatedEutraInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlConfigDedicatedEutraInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlConfigDedicatedEutraInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlConfigDedicatedEutraInfo");
            e
        })
    }
}
// SliceAvailableCapacity
#[derive(Clone, Debug)]
pub struct SliceAvailableCapacity {
    pub slice_available_capacity_list: SliceAvailableCapacityList,
}

impl SliceAvailableCapacity {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let slice_available_capacity_list = SliceAvailableCapacityList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            slice_available_capacity_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.slice_available_capacity_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SliceAvailableCapacity {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SliceAvailableCapacity::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SliceAvailableCapacity");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SliceAvailableCapacity");
            e
        })
    }
}
// SliceAvailableCapacityList
#[derive(Clone, Debug)]
pub struct SliceAvailableCapacityList(pub Vec<SliceAvailableCapacityItem>);

impl SliceAvailableCapacityList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(12), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SliceAvailableCapacityItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(12), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for SliceAvailableCapacityList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SliceAvailableCapacityList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SliceAvailableCapacityList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SliceAvailableCapacityList");
            e
        })
    }
}
// SliceAvailableCapacityItem
#[derive(Clone, Debug)]
pub struct SliceAvailableCapacityItem {
    pub plmn_identity: PlmnIdentity,
    pub snssai_available_capacity_list: SnssaiAvailableCapacityList,
}

impl SliceAvailableCapacityItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let plmn_identity = PlmnIdentity::aper_decode(data)?;
        let snssai_available_capacity_list = SnssaiAvailableCapacityList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            plmn_identity,
            snssai_available_capacity_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.plmn_identity.aper_encode(data)?;
        self.snssai_available_capacity_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SliceAvailableCapacityItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SliceAvailableCapacityItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SliceAvailableCapacityItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SliceAvailableCapacityItem");
            e
        })
    }
}
// SnssaiAvailableCapacityList
#[derive(Clone, Debug)]
pub struct SnssaiAvailableCapacityList(pub Vec<SnssaiAvailableCapacityItem>);

impl SnssaiAvailableCapacityList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(1024), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SnssaiAvailableCapacityItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(1024), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for SnssaiAvailableCapacityList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SnssaiAvailableCapacityList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SnssaiAvailableCapacityList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SnssaiAvailableCapacityList");
            e
        })
    }
}
// SnssaiAvailableCapacityItem
#[derive(Clone, Debug)]
pub struct SnssaiAvailableCapacityItem {
    pub snssai: Snssai,
    pub slice_available_capacity_value_downlink: Option<u8>,
    pub slice_available_capacity_value_uplink: Option<u8>,
}

impl SnssaiAvailableCapacityItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 3)?;
        let snssai = Snssai::aper_decode(data)?;
        let slice_available_capacity_value_downlink = if optionals[0] {
            Some(aper::decode::decode_integer(data, Some(0), Some(100), false)?.0 as u8)
        } else {
            None
        };
        let slice_available_capacity_value_uplink = if optionals[1] {
            Some(aper::decode::decode_integer(data, Some(0), Some(100), false)?.0 as u8)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            snssai,
            slice_available_capacity_value_downlink,
            slice_available_capacity_value_uplink,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.slice_available_capacity_value_downlink.is_some());
        optionals.push(self.slice_available_capacity_value_uplink.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.snssai.aper_encode(data)?;
        if let Some(x) = &self.slice_available_capacity_value_downlink {
            aper::encode::encode_integer(data, Some(0), Some(100), false, *x as i128, false)?;
        }
        if let Some(x) = &self.slice_available_capacity_value_uplink {
            aper::encode::encode_integer(data, Some(0), Some(100), false, *x as i128, false)?;
        }

        Ok(())
    }
}

impl AperCodec for SnssaiAvailableCapacityItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SnssaiAvailableCapacityItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SnssaiAvailableCapacityItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SnssaiAvailableCapacityItem");
            e
        })
    }
}
// SliceSupportList
#[derive(Clone, Debug)]
pub struct SliceSupportList(pub Vec<SliceSupportItem>);

impl SliceSupportList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(1024), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SliceSupportItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(1024), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for SliceSupportList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SliceSupportList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SliceSupportList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SliceSupportList");
            e
        })
    }
}
// SliceSupportItem
#[derive(Clone, Debug)]
pub struct SliceSupportItem {
    pub snssai: Snssai,
}

impl SliceSupportItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let snssai = Snssai::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { snssai })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.snssai.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SliceSupportItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SliceSupportItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SliceSupportItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SliceSupportItem");
            e
        })
    }
}
// SliceToReportList
#[derive(Clone, Debug)]
pub struct SliceToReportList(pub Vec<SliceToReportItem>);

impl SliceToReportList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(12), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SliceToReportItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(12), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for SliceToReportList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SliceToReportList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SliceToReportList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SliceToReportList");
            e
        })
    }
}
// SliceToReportItem
#[derive(Clone, Debug)]
pub struct SliceToReportItem {
    pub plmn_identity: PlmnIdentity,
    pub snssa_ilist: SnssaiList,
}

impl SliceToReportItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let plmn_identity = PlmnIdentity::aper_decode(data)?;
        let snssa_ilist = SnssaiList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            plmn_identity,
            snssa_ilist,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.plmn_identity.aper_encode(data)?;
        self.snssa_ilist.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SliceToReportItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SliceToReportItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SliceToReportItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SliceToReportItem");
            e
        })
    }
}
// SlotNumber
#[derive(Clone, Copy, Debug)]
pub struct SlotNumber(pub u8);

impl SlotNumber {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(79), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(79), false, self.0 as i128, false)
    }
}

impl AperCodec for SlotNumber {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlotNumber::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlotNumber");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlotNumber");
            e
        })
    }
}
// SnssaiList
#[derive(Clone, Debug)]
pub struct SnssaiList(pub Vec<SnssaiItem>);

impl SnssaiList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(1024), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SnssaiItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(1024), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for SnssaiList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SnssaiList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SnssaiList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SnssaiList");
            e
        })
    }
}
// SnssaiItem
#[derive(Clone, Debug)]
pub struct SnssaiItem {
    pub snssai: Snssai,
}

impl SnssaiItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let snssai = Snssai::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { snssai })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.snssai.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SnssaiItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SnssaiItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SnssaiItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SnssaiItem");
            e
        })
    }
}
// SlotConfigurationList
#[derive(Clone, Debug)]
pub struct SlotConfigurationList(pub Vec<SlotConfigurationItem>);

impl SlotConfigurationList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(5120), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SlotConfigurationItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(5120), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for SlotConfigurationList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlotConfigurationList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlotConfigurationList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlotConfigurationList");
            e
        })
    }
}
// SlotConfigurationItem
#[derive(Clone, Debug)]
pub struct SlotConfigurationItem {
    pub slot_index: u16,
    pub symbol_alloc_in_slot: SymbolAllocInSlot,
}

impl SlotConfigurationItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let slot_index = aper::decode::decode_integer(data, Some(0), Some(5119), true)?.0 as u16;
        let symbol_alloc_in_slot = SymbolAllocInSlot::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            slot_index,
            symbol_alloc_in_slot,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(5119),
            true,
            self.slot_index as i128,
            false,
        )?;
        self.symbol_alloc_in_slot.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SlotConfigurationItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SlotConfigurationItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlotConfigurationItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SlotConfigurationItem");
            e
        })
    }
}
// Snssai
#[derive(Clone, Debug)]
pub struct Snssai {
    pub sst: Vec<u8>,
    pub sd: Option<Vec<u8>>,
}

impl Snssai {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let sst = aper::decode::decode_octetstring(data, Some(1), Some(1), false)?;
        let sd = if optionals[0] {
            Some(aper::decode::decode_octetstring(
                data,
                Some(3),
                Some(3),
                false,
            )?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { sst, sd })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.sd.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_octetstring(data, Some(1), Some(1), false, &self.sst, false)?;
        if let Some(x) = &self.sd {
            aper::encode::encode_octetstring(data, Some(3), Some(3), false, &x, false)?;
        }

        Ok(())
    }
}

impl AperCodec for Snssai {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Snssai::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Snssai");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Snssai");
            e
        })
    }
}
// SpatialDirectionInformation
#[derive(Clone, Debug)]
pub struct SpatialDirectionInformation {
    pub nr_prs_beam_information: NrPrsBeamInformation,
}

impl SpatialDirectionInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let nr_prs_beam_information = NrPrsBeamInformation::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            nr_prs_beam_information,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.nr_prs_beam_information.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SpatialDirectionInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SpatialDirectionInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SpatialDirectionInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SpatialDirectionInformation");
            e
        })
    }
}
// SpatialRelationInfo
#[derive(Clone, Debug)]
pub struct SpatialRelationInfo {
    pub spatial_relationfor_resource_id: SpatialRelationforResourceId,
}

impl SpatialRelationInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let spatial_relationfor_resource_id = SpatialRelationforResourceId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            spatial_relationfor_resource_id,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.spatial_relationfor_resource_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SpatialRelationInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SpatialRelationInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SpatialRelationInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SpatialRelationInfo");
            e
        })
    }
}
// SpatialRelationforResourceId
#[derive(Clone, Debug)]
pub struct SpatialRelationforResourceId(pub Vec<SpatialRelationforResourceIdItem>);

impl SpatialRelationforResourceId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SpatialRelationforResourceIdItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for SpatialRelationforResourceId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SpatialRelationforResourceId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SpatialRelationforResourceId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SpatialRelationforResourceId");
            e
        })
    }
}
// SpatialRelationforResourceIdItem
#[derive(Clone, Debug)]
pub struct SpatialRelationforResourceIdItem {
    pub reference_signal: ReferenceSignal,
}

impl SpatialRelationforResourceIdItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let reference_signal = ReferenceSignal::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { reference_signal })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.reference_signal.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SpatialRelationforResourceIdItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SpatialRelationforResourceIdItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SpatialRelationforResourceIdItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SpatialRelationforResourceIdItem");
            e
        })
    }
}
// SpatialRelationPos
#[derive(Clone, Debug)]
pub enum SpatialRelationPos {
    SsbPos(Ssb),
    PrsInformationPos(PrsInformationPos),
}

impl SpatialRelationPos {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::SsbPos(Ssb::aper_decode(data)?)),
            1 => Ok(Self::PrsInformationPos(PrsInformationPos::aper_decode(
                data,
            )?)),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::SsbPos(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::PrsInformationPos(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for SpatialRelationPos {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SpatialRelationPos::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SpatialRelationPos");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SpatialRelationPos");
            e
        })
    }
}
// SpectrumSharingGroupId
#[derive(Clone, Copy, Debug)]
pub struct SpectrumSharingGroupId(pub u16);

impl SpectrumSharingGroupId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(256), false)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(256), false, self.0 as i128, false)
    }
}

impl AperCodec for SpectrumSharingGroupId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SpectrumSharingGroupId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SpectrumSharingGroupId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SpectrumSharingGroupId");
            e
        })
    }
}
// SrbId
#[derive(Clone, Copy, Debug)]
pub struct SrbId(pub u8);

impl SrbId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(3), true)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(3), true, self.0 as i128, false)
    }
}

impl AperCodec for SrbId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrbId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbId");
            e
        })
    }
}
// SrbsFailedToBeSetupItem
#[derive(Clone, Debug)]
pub struct SrbsFailedToBeSetupItem {
    pub srb_id: SrbId,
    pub cause: Option<Cause>,
}

impl SrbsFailedToBeSetupItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let srb_id = SrbId::aper_decode(data)?;
        let cause = if optionals[0] {
            Some(Cause::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { srb_id, cause })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.cause.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.srb_id.aper_encode(data)?;
        if let Some(x) = &self.cause {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SrbsFailedToBeSetupItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrbsFailedToBeSetupItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbsFailedToBeSetupItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbsFailedToBeSetupItem");
            e
        })
    }
}
// SrbsFailedToBeSetupModItem
#[derive(Clone, Debug)]
pub struct SrbsFailedToBeSetupModItem {
    pub srb_id: SrbId,
    pub cause: Option<Cause>,
}

impl SrbsFailedToBeSetupModItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let srb_id = SrbId::aper_decode(data)?;
        let cause = if optionals[0] {
            Some(Cause::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { srb_id, cause })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.cause.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.srb_id.aper_encode(data)?;
        if let Some(x) = &self.cause {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SrbsFailedToBeSetupModItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrbsFailedToBeSetupModItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbsFailedToBeSetupModItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbsFailedToBeSetupModItem");
            e
        })
    }
}
// SrbsModifiedItem
#[derive(Clone, Debug)]
pub struct SrbsModifiedItem {
    pub srb_id: SrbId,
    pub lcid: Lcid,
}

impl SrbsModifiedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let srb_id = SrbId::aper_decode(data)?;
        let lcid = Lcid::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { srb_id, lcid })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.srb_id.aper_encode(data)?;
        self.lcid.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SrbsModifiedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrbsModifiedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbsModifiedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbsModifiedItem");
            e
        })
    }
}
// SrbsRequiredToBeReleasedItem
#[derive(Clone, Debug)]
pub struct SrbsRequiredToBeReleasedItem {
    pub srb_id: SrbId,
}

impl SrbsRequiredToBeReleasedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let srb_id = SrbId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { srb_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.srb_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SrbsRequiredToBeReleasedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrbsRequiredToBeReleasedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbsRequiredToBeReleasedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbsRequiredToBeReleasedItem");
            e
        })
    }
}
// SrbsSetupItem
#[derive(Clone, Debug)]
pub struct SrbsSetupItem {
    pub srb_id: SrbId,
    pub lcid: Lcid,
}

impl SrbsSetupItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let srb_id = SrbId::aper_decode(data)?;
        let lcid = Lcid::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { srb_id, lcid })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.srb_id.aper_encode(data)?;
        self.lcid.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SrbsSetupItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrbsSetupItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbsSetupItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbsSetupItem");
            e
        })
    }
}
// SrbsSetupModItem
#[derive(Clone, Debug)]
pub struct SrbsSetupModItem {
    pub srb_id: SrbId,
    pub lcid: Lcid,
}

impl SrbsSetupModItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let srb_id = SrbId::aper_decode(data)?;
        let lcid = Lcid::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { srb_id, lcid })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.srb_id.aper_encode(data)?;
        self.lcid.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SrbsSetupModItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrbsSetupModItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbsSetupModItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbsSetupModItem");
            e
        })
    }
}
// SrbsToBeReleasedItem
#[derive(Clone, Debug)]
pub struct SrbsToBeReleasedItem {
    pub srb_id: SrbId,
}

impl SrbsToBeReleasedItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let srb_id = SrbId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { srb_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.srb_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SrbsToBeReleasedItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrbsToBeReleasedItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbsToBeReleasedItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbsToBeReleasedItem");
            e
        })
    }
}
// SrbsToBeSetupItem
#[derive(Clone, Debug)]
pub struct SrbsToBeSetupItem {
    pub srb_id: SrbId,
    pub duplication_indication: Option<DuplicationIndication>,
    pub additional_duplication_indication: Option<AdditionalDuplicationIndication>,
}

impl SrbsToBeSetupItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let srb_id = SrbId::aper_decode(data)?;
        let duplication_indication = if optionals[0] {
            Some(DuplicationIndication::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut additional_duplication_indication: Option<AdditionalDuplicationIndication> = None;

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    372 => {
                        additional_duplication_indication =
                            Some(AdditionalDuplicationIndication::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            srb_id,
            duplication_indication,
            additional_duplication_indication,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.duplication_indication.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.srb_id.aper_encode(data)?;
        if let Some(x) = &self.duplication_indication {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SrbsToBeSetupItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrbsToBeSetupItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbsToBeSetupItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbsToBeSetupItem");
            e
        })
    }
}
// SrbsToBeSetupModItem
#[derive(Clone, Debug)]
pub struct SrbsToBeSetupModItem {
    pub srb_id: SrbId,
    pub duplication_indication: Option<DuplicationIndication>,
    pub additional_duplication_indication: Option<AdditionalDuplicationIndication>,
}

impl SrbsToBeSetupModItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let srb_id = SrbId::aper_decode(data)?;
        let duplication_indication = if optionals[0] {
            Some(DuplicationIndication::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut additional_duplication_indication: Option<AdditionalDuplicationIndication> = None;

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    372 => {
                        additional_duplication_indication =
                            Some(AdditionalDuplicationIndication::aper_decode(data)?)
                    }
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            srb_id,
            duplication_indication,
            additional_duplication_indication,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.duplication_indication.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.srb_id.aper_encode(data)?;
        if let Some(x) = &self.duplication_indication {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SrbsToBeSetupModItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrbsToBeSetupModItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbsToBeSetupModItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrbsToBeSetupModItem");
            e
        })
    }
}
// SrsCarrierList
#[derive(Clone, Debug)]
pub struct SrsCarrierList(pub Vec<SrsCarrierListItem>);

impl SrsCarrierList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SrsCarrierListItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for SrsCarrierList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrsCarrierList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsCarrierList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsCarrierList");
            e
        })
    }
}
// SrsCarrierListItem
#[derive(Clone, Debug)]
pub struct SrsCarrierListItem {
    pub point_a: u32,
    pub uplink_channel_bw_per_scs_list: UplinkChannelBwPerScsList,
    pub active_ulbwp: ActiveUlbwp,
    pub pci: Option<NrPci>,
}

impl SrsCarrierListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let point_a = aper::decode::decode_integer(data, Some(0), Some(3279165), false)?.0 as u32;
        let uplink_channel_bw_per_scs_list = UplinkChannelBwPerScsList::aper_decode(data)?;
        let active_ulbwp = ActiveUlbwp::aper_decode(data)?;
        let pci = if optionals[0] {
            Some(NrPci::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            point_a,
            uplink_channel_bw_per_scs_list,
            active_ulbwp,
            pci,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.pci.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(3279165),
            false,
            self.point_a as i128,
            false,
        )?;
        self.uplink_channel_bw_per_scs_list.aper_encode(data)?;
        self.active_ulbwp.aper_encode(data)?;
        if let Some(x) = &self.pci {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SrsCarrierListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrsCarrierListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsCarrierListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsCarrierListItem");
            e
        })
    }
}
// SrsConfig
#[derive(Clone, Debug)]
pub struct SrsConfig {
    pub srs_resource_list: Option<SrsResourceList>,
    pub pos_srs_resource_list: Option<PosSrsResourceList>,
    pub srs_resource_set_list: Option<SrsResourceSetList1>,
    pub pos_srs_resource_set_list: Option<PosSrsResourceSetList>,
}

impl SrsConfig {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 5)?;
        let srs_resource_list = if optionals[0] {
            Some(SrsResourceList::aper_decode(data)?)
        } else {
            None
        };
        let pos_srs_resource_list = if optionals[1] {
            Some(PosSrsResourceList::aper_decode(data)?)
        } else {
            None
        };
        let srs_resource_set_list = if optionals[2] {
            Some(SrsResourceSetList1::aper_decode(data)?)
        } else {
            None
        };
        let pos_srs_resource_set_list = if optionals[3] {
            Some(PosSrsResourceSetList::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[4] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            srs_resource_list,
            pos_srs_resource_list,
            srs_resource_set_list,
            pos_srs_resource_set_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.srs_resource_list.is_some());
        optionals.push(self.pos_srs_resource_list.is_some());
        optionals.push(self.srs_resource_set_list.is_some());
        optionals.push(self.pos_srs_resource_set_list.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        if let Some(x) = &self.srs_resource_list {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.pos_srs_resource_list {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.srs_resource_set_list {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.pos_srs_resource_set_list {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SrsConfig {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrsConfig::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsConfig");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsConfig");
            e
        })
    }
}
// SrsConfiguration
#[derive(Clone, Debug)]
pub struct SrsConfiguration {
    pub srs_carrier_list: SrsCarrierList,
}

impl SrsConfiguration {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let srs_carrier_list = SrsCarrierList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { srs_carrier_list })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.srs_carrier_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SrsConfiguration {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrsConfiguration::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsConfiguration");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsConfiguration");
            e
        })
    }
}
// SrsFrequency
#[derive(Clone, Copy, Debug)]
pub struct SrsFrequency(pub u32);

impl SrsFrequency {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(3279165), false)?.0 as u32,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(3279165), false, self.0 as i128, false)
    }
}

impl AperCodec for SrsFrequency {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrsFrequency::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsFrequency");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsFrequency");
            e
        })
    }
}
// SrsPosResourceId
#[derive(Clone, Copy, Debug)]
pub struct SrsPosResourceId(pub u8);

impl SrsPosResourceId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(63), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(63), false, self.0 as i128, false)
    }
}

impl AperCodec for SrsPosResourceId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrsPosResourceId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsPosResourceId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsPosResourceId");
            e
        })
    }
}
// SrsResource
#[derive(Clone, Debug)]
pub struct SrsResource {
    pub srs_resource_id: SrsResourceId,
    pub nrof_srs_ports: NrofSrsPorts,
    pub transmission_comb: TransmissionComb,
    pub start_position: u8,
    pub nrof_symbols: NrofSymbols1,
    pub repetition_factor: RepetitionFactor,
    pub freq_domain_position: u8,
    pub freq_domain_shift: u16,
    pub c_srs: u8,
    pub b_srs: u8,
    pub b_hop: u8,
    pub group_or_sequence_hopping: GroupOrSequenceHopping1,
    pub resource_type: ResourceType,
    pub sequence_id: u16,
}

impl SrsResource {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let srs_resource_id = SrsResourceId::aper_decode(data)?;
        let nrof_srs_ports = NrofSrsPorts::aper_decode(data)?;
        let transmission_comb = TransmissionComb::aper_decode(data)?;
        let start_position = aper::decode::decode_integer(data, Some(0), Some(13), false)?.0 as u8;
        let nrof_symbols = NrofSymbols1::aper_decode(data)?;
        let repetition_factor = RepetitionFactor::aper_decode(data)?;
        let freq_domain_position =
            aper::decode::decode_integer(data, Some(0), Some(67), false)?.0 as u8;
        let freq_domain_shift =
            aper::decode::decode_integer(data, Some(0), Some(268), false)?.0 as u16;
        let c_srs = aper::decode::decode_integer(data, Some(0), Some(63), false)?.0 as u8;
        let b_srs = aper::decode::decode_integer(data, Some(0), Some(3), false)?.0 as u8;
        let b_hop = aper::decode::decode_integer(data, Some(0), Some(3), false)?.0 as u8;
        let group_or_sequence_hopping = GroupOrSequenceHopping1::aper_decode(data)?;
        let resource_type = ResourceType::aper_decode(data)?;
        let sequence_id = aper::decode::decode_integer(data, Some(0), Some(1023), false)?.0 as u16;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            srs_resource_id,
            nrof_srs_ports,
            transmission_comb,
            start_position,
            nrof_symbols,
            repetition_factor,
            freq_domain_position,
            freq_domain_shift,
            c_srs,
            b_srs,
            b_hop,
            group_or_sequence_hopping,
            resource_type,
            sequence_id,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.srs_resource_id.aper_encode(data)?;
        self.nrof_srs_ports.aper_encode(data)?;
        self.transmission_comb.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(13),
            false,
            self.start_position as i128,
            false,
        )?;
        self.nrof_symbols.aper_encode(data)?;
        self.repetition_factor.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(67),
            false,
            self.freq_domain_position as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(268),
            false,
            self.freq_domain_shift as i128,
            false,
        )?;
        aper::encode::encode_integer(data, Some(0), Some(63), false, self.c_srs as i128, false)?;
        aper::encode::encode_integer(data, Some(0), Some(3), false, self.b_srs as i128, false)?;
        aper::encode::encode_integer(data, Some(0), Some(3), false, self.b_hop as i128, false)?;
        self.group_or_sequence_hopping.aper_encode(data)?;
        self.resource_type.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(1023),
            false,
            self.sequence_id as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for SrsResource {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrsResource::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResource");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResource");
            e
        })
    }
}
// SrsResourceId
#[derive(Clone, Copy, Debug)]
pub struct SrsResourceId(pub u8);

impl SrsResourceId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(63), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(63), false, self.0 as i128, false)
    }
}

impl AperCodec for SrsResourceId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrsResourceId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResourceId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResourceId");
            e
        })
    }
}
// SrsResourceIdList
#[derive(Clone, Debug)]
pub struct SrsResourceIdList(pub Vec<SrsResourceId>);

impl SrsResourceIdList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(16), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SrsResourceId::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(16), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for SrsResourceIdList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrsResourceIdList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResourceIdList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResourceIdList");
            e
        })
    }
}
// SrsResourceList
#[derive(Clone, Debug)]
pub struct SrsResourceList(pub Vec<SrsResource>);

impl SrsResourceList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SrsResource::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for SrsResourceList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrsResourceList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResourceList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResourceList");
            e
        })
    }
}
// SrsResourceSet
#[derive(Clone, Debug)]
pub struct SrsResourceSet {
    pub srs_resource_set_id: SrsResourceSetId,
    pub srs_resource_id_list: SrsResourceIdList,
    pub resource_set_type: ResourceSetType,
}

impl SrsResourceSet {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let srs_resource_set_id = SrsResourceSetId::aper_decode(data)?;
        let srs_resource_id_list = SrsResourceIdList::aper_decode(data)?;
        let resource_set_type = ResourceSetType::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            srs_resource_set_id,
            srs_resource_id_list,
            resource_set_type,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.srs_resource_set_id.aper_encode(data)?;
        self.srs_resource_id_list.aper_encode(data)?;
        self.resource_set_type.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SrsResourceSet {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrsResourceSet::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResourceSet");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResourceSet");
            e
        })
    }
}
// SrsResourceSetId
#[derive(Clone, Copy, Debug)]
pub struct SrsResourceSetId(pub u8);

impl SrsResourceSetId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(15), true)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(15), true, self.0 as i128, false)
    }
}

impl AperCodec for SrsResourceSetId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrsResourceSetId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResourceSetId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResourceSetId");
            e
        })
    }
}
// SrsResourceSetList
#[derive(Clone, Debug)]
pub struct SrsResourceSetList(pub Vec<SrsResourceSetItem>);

impl SrsResourceSetList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(16), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SrsResourceSetItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(16), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for SrsResourceSetList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrsResourceSetList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResourceSetList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResourceSetList");
            e
        })
    }
}
// SrsResourceSetItem
#[derive(Clone, Debug)]
pub struct SrsResourceSetItem {
    pub num_sr_sresourcesperset: Option<u8>,
    pub periodicity_list: Option<PeriodicityList>,
    pub spatial_relation_info: Option<SpatialRelationInfo>,
    pub pathloss_reference_info: Option<PathlossReferenceInfo>,
}

impl SrsResourceSetItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 5)?;
        let num_sr_sresourcesperset = if optionals[0] {
            Some(aper::decode::decode_integer(data, Some(1), Some(16), true)?.0 as u8)
        } else {
            None
        };
        let periodicity_list = if optionals[1] {
            Some(PeriodicityList::aper_decode(data)?)
        } else {
            None
        };
        let spatial_relation_info = if optionals[2] {
            Some(SpatialRelationInfo::aper_decode(data)?)
        } else {
            None
        };
        let pathloss_reference_info = if optionals[3] {
            Some(PathlossReferenceInfo::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[4] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            num_sr_sresourcesperset,
            periodicity_list,
            spatial_relation_info,
            pathloss_reference_info,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.num_sr_sresourcesperset.is_some());
        optionals.push(self.periodicity_list.is_some());
        optionals.push(self.spatial_relation_info.is_some());
        optionals.push(self.pathloss_reference_info.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        if let Some(x) = &self.num_sr_sresourcesperset {
            aper::encode::encode_integer(data, Some(1), Some(16), true, *x as i128, false)?;
        }
        if let Some(x) = &self.periodicity_list {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.spatial_relation_info {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.pathloss_reference_info {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SrsResourceSetItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrsResourceSetItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResourceSetItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResourceSetItem");
            e
        })
    }
}
// SrsResourceSetList1
#[derive(Clone, Debug)]
pub struct SrsResourceSetList1(pub Vec<SrsResourceSet>);

impl SrsResourceSetList1 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(16), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SrsResourceSet::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(16), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for SrsResourceSetList1 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrsResourceSetList1::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResourceSetList1");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResourceSetList1");
            e
        })
    }
}
// SrsResourceTrigger
#[derive(Clone, Debug)]
pub struct SrsResourceTrigger {
    pub aperiodic_srs_resource_trigger_list: AperiodicSrsResourceTriggerList,
}

impl SrsResourceTrigger {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let aperiodic_srs_resource_trigger_list =
            AperiodicSrsResourceTriggerList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            aperiodic_srs_resource_trigger_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.aperiodic_srs_resource_trigger_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SrsResourceTrigger {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SrsResourceTrigger::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResourceTrigger");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SrsResourceTrigger");
            e
        })
    }
}
// Ssb
#[derive(Clone, Debug)]
pub struct Ssb {
    pub pci_nr: NrPci,
    pub ssb_index: Option<SsbIndex>,
}

impl Ssb {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let pci_nr = NrPci::aper_decode(data)?;
        let ssb_index = if optionals[0] {
            Some(SsbIndex::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { pci_nr, ssb_index })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.ssb_index.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.pci_nr.aper_encode(data)?;
        if let Some(x) = &self.ssb_index {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for Ssb {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ssb::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Ssb");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Ssb");
            e
        })
    }
}
// SsbFreqInfo
#[derive(Clone, Copy, Debug)]
pub struct SsbFreqInfo(pub u32);

impl SsbFreqInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(3279165), false)?.0 as u32,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(3279165), false, self.0 as i128, false)
    }
}

impl AperCodec for SsbFreqInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbFreqInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbFreqInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbFreqInfo");
            e
        })
    }
}
// SsbIndex
#[derive(Clone, Copy, Debug)]
pub struct SsbIndex(pub u8);

impl SsbIndex {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(63), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(63), false, self.0 as i128, false)
    }
}

impl AperCodec for SsbIndex {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbIndex::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbIndex");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbIndex");
            e
        })
    }
}
// SsbSubcarrierSpacing
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum SsbSubcarrierSpacing {
    KHz15,
    KHz30,
    KHz120,
    KHz240,
    Spare3,
    Spare2,
    Spare1,
}

impl SsbSubcarrierSpacing {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(6), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(6), true, *self as i128, false)
    }
}

impl AperCodec for SsbSubcarrierSpacing {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbSubcarrierSpacing::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbSubcarrierSpacing");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbSubcarrierSpacing");
            e
        })
    }
}
// SsbTransmissionPeriodicity
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum SsbTransmissionPeriodicity {
    Sf10,
    Sf20,
    Sf40,
    Sf80,
    Sf160,
    Sf320,
    Sf640,
}

impl SsbTransmissionPeriodicity {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(6), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(6), true, *self as i128, false)
    }
}

impl AperCodec for SsbTransmissionPeriodicity {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbTransmissionPeriodicity::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbTransmissionPeriodicity");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbTransmissionPeriodicity");
            e
        })
    }
}
// SsbTransmissionTimingOffset
#[derive(Clone, Copy, Debug)]
pub struct SsbTransmissionTimingOffset(pub u8);

impl SsbTransmissionTimingOffset {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(127), true)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(127), true, self.0 as i128, false)
    }
}

impl AperCodec for SsbTransmissionTimingOffset {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbTransmissionTimingOffset::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbTransmissionTimingOffset");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbTransmissionTimingOffset");
            e
        })
    }
}
// SsbTransmissionBitmap
#[derive(Clone, Debug)]
pub enum SsbTransmissionBitmap {
    ShortBitmap(BitString),
    MediumBitmap(BitString),
    LongBitmap(BitString),
}

impl SsbTransmissionBitmap {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 3, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::ShortBitmap(aper::decode::decode_bitstring(
                data,
                Some(4),
                Some(4),
                false,
            )?)),
            1 => Ok(Self::MediumBitmap(aper::decode::decode_bitstring(
                data,
                Some(8),
                Some(8),
                false,
            )?)),
            2 => Ok(Self::LongBitmap(aper::decode::decode_bitstring(
                data,
                Some(64),
                Some(64),
                false,
            )?)),
            3 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::ShortBitmap(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 0, false)?;
                aper::encode::encode_bitstring(data, Some(4), Some(4), false, &x, false)
            }
            Self::MediumBitmap(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 1, false)?;
                aper::encode::encode_bitstring(data, Some(8), Some(8), false, &x, false)
            }
            Self::LongBitmap(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 2, false)?;
                aper::encode::encode_bitstring(data, Some(64), Some(64), false, &x, false)
            }
        }
    }
}

impl AperCodec for SsbTransmissionBitmap {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbTransmissionBitmap::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbTransmissionBitmap");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbTransmissionBitmap");
            e
        })
    }
}
// SsbAreaCapacityValueList
#[derive(Clone, Debug)]
pub struct SsbAreaCapacityValueList(pub Vec<SsbAreaCapacityValueItem>);

impl SsbAreaCapacityValueList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SsbAreaCapacityValueItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for SsbAreaCapacityValueList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbAreaCapacityValueList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbAreaCapacityValueList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbAreaCapacityValueList");
            e
        })
    }
}
// SsbAreaCapacityValueItem
#[derive(Clone, Debug)]
pub struct SsbAreaCapacityValueItem {
    pub ssb_index: u8,
    pub ssb_area_capacity_value: u8,
}

impl SsbAreaCapacityValueItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let ssb_index = aper::decode::decode_integer(data, Some(0), Some(63), false)?.0 as u8;
        let ssb_area_capacity_value =
            aper::decode::decode_integer(data, Some(0), Some(100), false)?.0 as u8;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ssb_index,
            ssb_area_capacity_value,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(63),
            false,
            self.ssb_index as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(100),
            false,
            self.ssb_area_capacity_value as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for SsbAreaCapacityValueItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbAreaCapacityValueItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbAreaCapacityValueItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbAreaCapacityValueItem");
            e
        })
    }
}
// SsbAreaRadioResourceStatusList
#[derive(Clone, Debug)]
pub struct SsbAreaRadioResourceStatusList(pub Vec<SsbAreaRadioResourceStatusItem>);

impl SsbAreaRadioResourceStatusList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SsbAreaRadioResourceStatusItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for SsbAreaRadioResourceStatusList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbAreaRadioResourceStatusList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbAreaRadioResourceStatusList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbAreaRadioResourceStatusList");
            e
        })
    }
}
// SsbAreaRadioResourceStatusItem
#[derive(Clone, Debug)]
pub struct SsbAreaRadioResourceStatusItem {
    pub ssb_index: u8,
    pub ssb_area_dlgbrpr_busage: u8,
    pub ssb_area_ulgbrpr_busage: u8,
    pub ssb_area_d_lnon_gbrpr_busage: u8,
    pub ssb_area_u_lnon_gbrpr_busage: u8,
    pub ssb_area_dl_total_pr_busage: u8,
    pub ssb_area_ul_total_pr_busage: u8,
    pub d_lscheduling_pdcchcc_eusage: Option<u8>,
    pub u_lscheduling_pdcchcc_eusage: Option<u8>,
}

impl SsbAreaRadioResourceStatusItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 3)?;
        let ssb_index = aper::decode::decode_integer(data, Some(0), Some(63), false)?.0 as u8;
        let ssb_area_dlgbrpr_busage =
            aper::decode::decode_integer(data, Some(0), Some(100), false)?.0 as u8;
        let ssb_area_ulgbrpr_busage =
            aper::decode::decode_integer(data, Some(0), Some(100), false)?.0 as u8;
        let ssb_area_d_lnon_gbrpr_busage =
            aper::decode::decode_integer(data, Some(0), Some(100), false)?.0 as u8;
        let ssb_area_u_lnon_gbrpr_busage =
            aper::decode::decode_integer(data, Some(0), Some(100), false)?.0 as u8;
        let ssb_area_dl_total_pr_busage =
            aper::decode::decode_integer(data, Some(0), Some(100), false)?.0 as u8;
        let ssb_area_ul_total_pr_busage =
            aper::decode::decode_integer(data, Some(0), Some(100), false)?.0 as u8;
        let d_lscheduling_pdcchcc_eusage = if optionals[0] {
            Some(aper::decode::decode_integer(data, Some(0), Some(100), false)?.0 as u8)
        } else {
            None
        };
        let u_lscheduling_pdcchcc_eusage = if optionals[1] {
            Some(aper::decode::decode_integer(data, Some(0), Some(100), false)?.0 as u8)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ssb_index,
            ssb_area_dlgbrpr_busage,
            ssb_area_ulgbrpr_busage,
            ssb_area_d_lnon_gbrpr_busage,
            ssb_area_u_lnon_gbrpr_busage,
            ssb_area_dl_total_pr_busage,
            ssb_area_ul_total_pr_busage,
            d_lscheduling_pdcchcc_eusage,
            u_lscheduling_pdcchcc_eusage,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.d_lscheduling_pdcchcc_eusage.is_some());
        optionals.push(self.u_lscheduling_pdcchcc_eusage.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(63),
            false,
            self.ssb_index as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(100),
            false,
            self.ssb_area_dlgbrpr_busage as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(100),
            false,
            self.ssb_area_ulgbrpr_busage as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(100),
            false,
            self.ssb_area_d_lnon_gbrpr_busage as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(100),
            false,
            self.ssb_area_u_lnon_gbrpr_busage as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(100),
            false,
            self.ssb_area_dl_total_pr_busage as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(100),
            false,
            self.ssb_area_ul_total_pr_busage as i128,
            false,
        )?;
        if let Some(x) = &self.d_lscheduling_pdcchcc_eusage {
            aper::encode::encode_integer(data, Some(0), Some(100), false, *x as i128, false)?;
        }
        if let Some(x) = &self.u_lscheduling_pdcchcc_eusage {
            aper::encode::encode_integer(data, Some(0), Some(100), false, *x as i128, false)?;
        }

        Ok(())
    }
}

impl AperCodec for SsbAreaRadioResourceStatusItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbAreaRadioResourceStatusItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbAreaRadioResourceStatusItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbAreaRadioResourceStatusItem");
            e
        })
    }
}
// SsbInformation
#[derive(Clone, Debug)]
pub struct SsbInformation {
    pub ssb_information_list: SsbInformationList,
}

impl SsbInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let ssb_information_list = SsbInformationList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ssb_information_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.ssb_information_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SsbInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbInformation");
            e
        })
    }
}
// SsbInformationList
#[derive(Clone, Debug)]
pub struct SsbInformationList(pub Vec<SsbInformationItem>);

impl SsbInformationList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(255), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SsbInformationItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(255), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for SsbInformationList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbInformationList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbInformationList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbInformationList");
            e
        })
    }
}
// SsbInformationItem
#[derive(Clone, Debug)]
pub struct SsbInformationItem {
    pub ssb_configuration: SsbTfConfiguration,
    pub pci_nr: NrPci,
}

impl SsbInformationItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let ssb_configuration = SsbTfConfiguration::aper_decode(data)?;
        let pci_nr = NrPci::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ssb_configuration,
            pci_nr,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.ssb_configuration.aper_encode(data)?;
        self.pci_nr.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SsbInformationItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbInformationItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbInformationItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbInformationItem");
            e
        })
    }
}
// SsbPositionsInBurst
#[derive(Clone, Debug)]
pub enum SsbPositionsInBurst {
    ShortBitmap(BitString),
    MediumBitmap(BitString),
    LongBitmap(BitString),
}

impl SsbPositionsInBurst {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 3, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::ShortBitmap(aper::decode::decode_bitstring(
                data,
                Some(4),
                Some(4),
                false,
            )?)),
            1 => Ok(Self::MediumBitmap(aper::decode::decode_bitstring(
                data,
                Some(8),
                Some(8),
                false,
            )?)),
            2 => Ok(Self::LongBitmap(aper::decode::decode_bitstring(
                data,
                Some(64),
                Some(64),
                false,
            )?)),
            3 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::ShortBitmap(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 0, false)?;
                aper::encode::encode_bitstring(data, Some(4), Some(4), false, &x, false)
            }
            Self::MediumBitmap(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 1, false)?;
                aper::encode::encode_bitstring(data, Some(8), Some(8), false, &x, false)
            }
            Self::LongBitmap(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 2, false)?;
                aper::encode::encode_bitstring(data, Some(64), Some(64), false, &x, false)
            }
        }
    }
}

impl AperCodec for SsbPositionsInBurst {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbPositionsInBurst::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbPositionsInBurst");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbPositionsInBurst");
            e
        })
    }
}
// SsbTfConfiguration
#[derive(Clone, Debug)]
pub struct SsbTfConfiguration {
    pub ssb_frequency: u32,
    pub ssb_subcarrier_spacing: SsbSubcarrierSpacing1,
    pub ssb_transmit_power: i8,
    pub ssb_periodicity: SsbPeriodicity,
    pub ssb_half_frame_offset: u8,
    pub ssb_sfn_offset: u8,
    pub ssb_position_in_burst: Option<SsbPositionsInBurst>,
    pub sfn_initialisation_time: Option<RelativeTime1900>,
}

impl SsbTfConfiguration {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 3)?;
        let ssb_frequency =
            aper::decode::decode_integer(data, Some(0), Some(3279165), false)?.0 as u32;
        let ssb_subcarrier_spacing = SsbSubcarrierSpacing1::aper_decode(data)?;
        let ssb_transmit_power =
            aper::decode::decode_integer(data, Some(-60), Some(50), false)?.0 as i8;
        let ssb_periodicity = SsbPeriodicity::aper_decode(data)?;
        let ssb_half_frame_offset =
            aper::decode::decode_integer(data, Some(0), Some(1), false)?.0 as u8;
        let ssb_sfn_offset = aper::decode::decode_integer(data, Some(0), Some(15), false)?.0 as u8;
        let ssb_position_in_burst = if optionals[0] {
            Some(SsbPositionsInBurst::aper_decode(data)?)
        } else {
            None
        };
        let sfn_initialisation_time = if optionals[1] {
            Some(RelativeTime1900::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ssb_frequency,
            ssb_subcarrier_spacing,
            ssb_transmit_power,
            ssb_periodicity,
            ssb_half_frame_offset,
            ssb_sfn_offset,
            ssb_position_in_burst,
            sfn_initialisation_time,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.ssb_position_in_burst.is_some());
        optionals.push(self.sfn_initialisation_time.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(3279165),
            false,
            self.ssb_frequency as i128,
            false,
        )?;
        self.ssb_subcarrier_spacing.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(-60),
            Some(50),
            false,
            self.ssb_transmit_power as i128,
            false,
        )?;
        self.ssb_periodicity.aper_encode(data)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(1),
            false,
            self.ssb_half_frame_offset as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(15),
            false,
            self.ssb_sfn_offset as i128,
            false,
        )?;
        if let Some(x) = &self.ssb_position_in_burst {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.sfn_initialisation_time {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for SsbTfConfiguration {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbTfConfiguration::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbTfConfiguration");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbTfConfiguration");
            e
        })
    }
}
// SsbToReportList
#[derive(Clone, Debug)]
pub struct SsbToReportList(pub Vec<SsbToReportItem>);

impl SsbToReportList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(SsbToReportItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for SsbToReportList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbToReportList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbToReportList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbToReportList");
            e
        })
    }
}
// SsbToReportItem
#[derive(Clone, Debug)]
pub struct SsbToReportItem {
    pub ssb_index: u8,
}

impl SsbToReportItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let ssb_index = aper::decode::decode_integer(data, Some(0), Some(63), false)?.0 as u8;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { ssb_index })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(63),
            false,
            self.ssb_index as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for SsbToReportItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbToReportItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbToReportItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbToReportItem");
            e
        })
    }
}
// SulInformation
#[derive(Clone, Debug)]
pub struct SulInformation {
    pub sul_nr_arfcn: u32,
    pub sul_transmission_bandwidth: TransmissionBandwidth,
    pub carrier_list: Option<NrCarrierList>,
    pub frequency_shift7p5khz: Option<FrequencyShift7p5khz>,
}

impl SulInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let sul_nr_arfcn =
            aper::decode::decode_integer(data, Some(0), Some(3279165), false)?.0 as u32;
        let sul_transmission_bandwidth = TransmissionBandwidth::aper_decode(data)?;

        // Process the extension container
        let mut carrier_list: Option<NrCarrierList> = None;
        let mut frequency_shift7p5khz: Option<FrequencyShift7p5khz> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    354 => carrier_list = Some(NrCarrierList::aper_decode(data)?),
                    356 => frequency_shift7p5khz = Some(FrequencyShift7p5khz::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            sul_nr_arfcn,
            sul_transmission_bandwidth,
            carrier_list,
            frequency_shift7p5khz,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(3279165),
            false,
            self.sul_nr_arfcn as i128,
            false,
        )?;
        self.sul_transmission_bandwidth.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for SulInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SulInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SulInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SulInformation");
            e
        })
    }
}
// SubcarrierSpacing
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum SubcarrierSpacing {
    KHz15,
    KHz30,
    KHz60,
    KHz120,
    KHz240,
    Spare3,
    Spare2,
    Spare1,
}

impl SubcarrierSpacing {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(7), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(7), true, *self as i128, false)
    }
}

impl AperCodec for SubcarrierSpacing {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SubcarrierSpacing::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SubcarrierSpacing");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SubcarrierSpacing");
            e
        })
    }
}
// SubscriberProfileIDforRfp
#[derive(Clone, Copy, Debug)]
pub struct SubscriberProfileIDforRfp(pub u16);

impl SubscriberProfileIDforRfp {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(1), Some(256), true)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(1), Some(256), true, self.0 as i128, false)
    }
}

impl AperCodec for SubscriberProfileIDforRfp {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SubscriberProfileIDforRfp::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SubscriberProfileIDforRfp");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SubscriberProfileIDforRfp");
            e
        })
    }
}
// SulAccessIndication
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum SulAccessIndication {
    True,
}

impl SulAccessIndication {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for SulAccessIndication {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SulAccessIndication::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SulAccessIndication");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SulAccessIndication");
            e
        })
    }
}
// SupportedSulFreqBandItem
#[derive(Clone, Debug)]
pub struct SupportedSulFreqBandItem {
    pub freq_band_indicator_nr: u16,
}

impl SupportedSulFreqBandItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let freq_band_indicator_nr =
            aper::decode::decode_integer(data, Some(1), Some(1024), true)?.0 as u16;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            freq_band_indicator_nr,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(1),
            Some(1024),
            true,
            self.freq_band_indicator_nr as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for SupportedSulFreqBandItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SupportedSulFreqBandItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SupportedSulFreqBandItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SupportedSulFreqBandItem");
            e
        })
    }
}
// SymbolAllocInSlot
#[derive(Clone, Debug)]
pub enum SymbolAllocInSlot {
    AllDl,
    AllUl,
    BothDlAndUl(NumDlulSymbols),
}

impl SymbolAllocInSlot {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 3, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::AllDl),
            1 => Ok(Self::AllUl),
            2 => Ok(Self::BothDlAndUl(NumDlulSymbols::aper_decode(data)?)),
            3 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::AllDl => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 0, false)?;
                Ok(())
            }
            Self::AllUl => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 1, false)?;
                Ok(())
            }
            Self::BothDlAndUl(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 2, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for SymbolAllocInSlot {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SymbolAllocInSlot::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SymbolAllocInSlot");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SymbolAllocInSlot");
            e
        })
    }
}
// SystemFrameNumber
#[derive(Clone, Copy, Debug)]
pub struct SystemFrameNumber(pub u16);

impl SystemFrameNumber {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(1023), false)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(1023), false, self.0 as i128, false)
    }
}

impl AperCodec for SystemFrameNumber {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SystemFrameNumber::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SystemFrameNumber");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SystemFrameNumber");
            e
        })
    }
}
// SystemInformationAreaId
#[derive(Clone, Debug)]
pub struct SystemInformationAreaId(pub BitString);

impl SystemInformationAreaId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(24),
            Some(24),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(24), Some(24), false, &self.0, false)
    }
}

impl AperCodec for SystemInformationAreaId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SystemInformationAreaId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SystemInformationAreaId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SystemInformationAreaId");
            e
        })
    }
}
// FiveGsTac
#[derive(Clone, Debug)]
pub struct FiveGsTac(pub Vec<u8>);

impl FiveGsTac {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data,
            Some(3),
            Some(3),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, Some(3), Some(3), false, &self.0, false)
    }
}

impl AperCodec for FiveGsTac {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        FiveGsTac::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FiveGsTac");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("FiveGsTac");
            e
        })
    }
}
// ConfiguredEpsTac
#[derive(Clone, Debug)]
pub struct ConfiguredEpsTac(pub Vec<u8>);

impl ConfiguredEpsTac {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data,
            Some(2),
            Some(2),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, Some(2), Some(2), false, &self.0, false)
    }
}

impl AperCodec for ConfiguredEpsTac {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ConfiguredEpsTac::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ConfiguredEpsTac");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ConfiguredEpsTac");
            e
        })
    }
}
// TargetCellList
#[derive(Clone, Debug)]
pub struct TargetCellList(pub Vec<TargetCellListItem>);

impl TargetCellList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(8), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(TargetCellListItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(8), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for TargetCellList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TargetCellList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TargetCellList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TargetCellList");
            e
        })
    }
}
// TargetCellListItem
#[derive(Clone, Debug)]
pub struct TargetCellListItem {
    pub target_cell: NrCgi,
}

impl TargetCellListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let target_cell = NrCgi::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { target_cell })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.target_cell.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for TargetCellListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TargetCellListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TargetCellListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TargetCellListItem");
            e
        })
    }
}
// TddInfo
#[derive(Clone, Debug)]
pub struct TddInfo {
    pub nr_freq_info: NrFreqInfo,
    pub transmission_bandwidth: TransmissionBandwidth,
    pub intended_tdd_dl_ul_config: Option<IntendedTddDlUlConfig>,
    pub tdd_ul_dl_config_common_nr: Option<TddUlDlConfigCommonNr>,
    pub carrier_list: Option<NrCarrierList>,
}

impl TddInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let nr_freq_info = NrFreqInfo::aper_decode(data)?;
        let transmission_bandwidth = TransmissionBandwidth::aper_decode(data)?;

        // Process the extension container
        let mut intended_tdd_dl_ul_config: Option<IntendedTddDlUlConfig> = None;
        let mut tdd_ul_dl_config_common_nr: Option<TddUlDlConfigCommonNr> = None;
        let mut carrier_list: Option<NrCarrierList> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    256 => {
                        intended_tdd_dl_ul_config = Some(IntendedTddDlUlConfig::aper_decode(data)?)
                    }
                    361 => {
                        tdd_ul_dl_config_common_nr = Some(TddUlDlConfigCommonNr::aper_decode(data)?)
                    }
                    354 => carrier_list = Some(NrCarrierList::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            nr_freq_info,
            transmission_bandwidth,
            intended_tdd_dl_ul_config,
            tdd_ul_dl_config_common_nr,
            carrier_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.nr_freq_info.aper_encode(data)?;
        self.transmission_bandwidth.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for TddInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TddInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TddInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TddInfo");
            e
        })
    }
}
// TddUlDlConfigCommonNr
#[derive(Clone, Debug)]
pub struct TddUlDlConfigCommonNr(pub Vec<u8>);

impl TddUlDlConfigCommonNr {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for TddUlDlConfigCommonNr {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TddUlDlConfigCommonNr::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TddUlDlConfigCommonNr");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TddUlDlConfigCommonNr");
            e
        })
    }
}
// TimeReferenceInformation
#[derive(Clone, Debug)]
pub struct TimeReferenceInformation {
    pub reference_time: ReferenceTime,
    pub reference_sfn: ReferenceSfn,
    pub uncertainty: Uncertainty,
    pub time_information_type: TimeInformationType,
}

impl TimeReferenceInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let reference_time = ReferenceTime::aper_decode(data)?;
        let reference_sfn = ReferenceSfn::aper_decode(data)?;
        let uncertainty = Uncertainty::aper_decode(data)?;
        let time_information_type = TimeInformationType::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            reference_time,
            reference_sfn,
            uncertainty,
            time_information_type,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.reference_time.aper_encode(data)?;
        self.reference_sfn.aper_encode(data)?;
        self.uncertainty.aper_encode(data)?;
        self.time_information_type.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for TimeReferenceInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TimeReferenceInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TimeReferenceInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TimeReferenceInformation");
            e
        })
    }
}
// TimeInformationType
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum TimeInformationType {
    LocalClock,
}

impl TimeInformationType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), false, *self as i128, false)
    }
}

impl AperCodec for TimeInformationType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TimeInformationType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TimeInformationType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TimeInformationType");
            e
        })
    }
}
// TimeStamp
#[derive(Clone, Debug)]
pub struct TimeStamp {
    pub system_frame_number: SystemFrameNumber,
    pub slot_index: TimeStampSlotIndex,
    pub measurement_time: Option<RelativeTime1900>,
}

impl TimeStamp {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let system_frame_number = SystemFrameNumber::aper_decode(data)?;
        let slot_index = TimeStampSlotIndex::aper_decode(data)?;
        let measurement_time = if optionals[0] {
            Some(RelativeTime1900::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            system_frame_number,
            slot_index,
            measurement_time,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.measurement_time.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.system_frame_number.aper_encode(data)?;
        self.slot_index.aper_encode(data)?;
        if let Some(x) = &self.measurement_time {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for TimeStamp {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TimeStamp::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TimeStamp");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TimeStamp");
            e
        })
    }
}
// TimeStampSlotIndex
#[derive(Clone, Debug)]
pub enum TimeStampSlotIndex {
    Scs15(u8),
    Scs30(u8),
    Scs60(u8),
    Scs120(u8),
}

impl TimeStampSlotIndex {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 4, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::Scs15(
                aper::decode::decode_integer(data, Some(0), Some(9), false)?.0 as u8,
            )),
            1 => Ok(Self::Scs30(
                aper::decode::decode_integer(data, Some(0), Some(19), false)?.0 as u8,
            )),
            2 => Ok(Self::Scs60(
                aper::decode::decode_integer(data, Some(0), Some(39), false)?.0 as u8,
            )),
            3 => Ok(Self::Scs120(
                aper::decode::decode_integer(data, Some(0), Some(79), false)?.0 as u8,
            )),
            4 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::Scs15(x) => {
                aper::encode::encode_choice_idx(data, 0, 4, false, 0, false)?;
                aper::encode::encode_integer(data, Some(0), Some(9), false, *x as i128, false)
            }
            Self::Scs30(x) => {
                aper::encode::encode_choice_idx(data, 0, 4, false, 1, false)?;
                aper::encode::encode_integer(data, Some(0), Some(19), false, *x as i128, false)
            }
            Self::Scs60(x) => {
                aper::encode::encode_choice_idx(data, 0, 4, false, 2, false)?;
                aper::encode::encode_integer(data, Some(0), Some(39), false, *x as i128, false)
            }
            Self::Scs120(x) => {
                aper::encode::encode_choice_idx(data, 0, 4, false, 3, false)?;
                aper::encode::encode_integer(data, Some(0), Some(79), false, *x as i128, false)
            }
        }
    }
}

impl AperCodec for TimeStampSlotIndex {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TimeStampSlotIndex::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TimeStampSlotIndex");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TimeStampSlotIndex");
            e
        })
    }
}
// TimeToWait
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum TimeToWait {
    V1s,
    V2s,
    V5s,
    V10s,
    V20s,
    V60s,
}

impl TimeToWait {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(5), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(5), true, *self as i128, false)
    }
}

impl AperCodec for TimeToWait {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TimeToWait::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TimeToWait");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TimeToWait");
            e
        })
    }
}
// TimingMeasurementQuality
#[derive(Clone, Debug)]
pub struct TimingMeasurementQuality {
    pub measurement_quality: u8,
    pub resolution: Resolution1,
}

impl TimingMeasurementQuality {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let measurement_quality =
            aper::decode::decode_integer(data, Some(0), Some(31), false)?.0 as u8;
        let resolution = Resolution1::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            measurement_quality,
            resolution,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(31),
            false,
            self.measurement_quality as i128,
            false,
        )?;
        self.resolution.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for TimingMeasurementQuality {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TimingMeasurementQuality::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TimingMeasurementQuality");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TimingMeasurementQuality");
            e
        })
    }
}
// TnlAssociationUsage
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum TnlAssociationUsage {
    Ue,
    NonUe,
    Both,
}

impl TnlAssociationUsage {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), true, *self as i128, false)
    }
}

impl AperCodec for TnlAssociationUsage {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TnlAssociationUsage::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TnlAssociationUsage");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TnlAssociationUsage");
            e
        })
    }
}
// TnlCapacityIndicator
#[derive(Clone, Debug)]
pub struct TnlCapacityIndicator {
    pub dltnl_offered_capacity: u32,
    pub dltnl_available_capacity: u8,
    pub ultnl_offered_capacity: u32,
    pub ultnl_available_capacity: u8,
}

impl TnlCapacityIndicator {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let dltnl_offered_capacity =
            aper::decode::decode_integer(data, Some(1), Some(16777216), true)?.0 as u32;
        let dltnl_available_capacity =
            aper::decode::decode_integer(data, Some(0), Some(100), true)?.0 as u8;
        let ultnl_offered_capacity =
            aper::decode::decode_integer(data, Some(1), Some(16777216), true)?.0 as u32;
        let ultnl_available_capacity =
            aper::decode::decode_integer(data, Some(0), Some(100), true)?.0 as u8;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            dltnl_offered_capacity,
            dltnl_available_capacity,
            ultnl_offered_capacity,
            ultnl_available_capacity,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(1),
            Some(16777216),
            true,
            self.dltnl_offered_capacity as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(100),
            true,
            self.dltnl_available_capacity as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(1),
            Some(16777216),
            true,
            self.ultnl_offered_capacity as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(100),
            true,
            self.ultnl_available_capacity as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for TnlCapacityIndicator {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TnlCapacityIndicator::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TnlCapacityIndicator");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TnlCapacityIndicator");
            e
        })
    }
}
// TraceActivation
#[derive(Clone, Debug)]
pub struct TraceActivation {
    pub trace_id: TraceId,
    pub interfaces_to_trace: InterfacesToTrace,
    pub trace_depth: TraceDepth,
    pub trace_collection_entity_ip_address: TransportLayerAddress,
    pub mdt_configuration: Option<MdtConfiguration>,
    pub trace_collection_entity_uri: Option<UriAddress>,
}

impl TraceActivation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let trace_id = TraceId::aper_decode(data)?;
        let interfaces_to_trace = InterfacesToTrace::aper_decode(data)?;
        let trace_depth = TraceDepth::aper_decode(data)?;
        let trace_collection_entity_ip_address = TransportLayerAddress::aper_decode(data)?;

        // Process the extension container
        let mut mdt_configuration: Option<MdtConfiguration> = None;
        let mut trace_collection_entity_uri: Option<UriAddress> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    381 => mdt_configuration = Some(MdtConfiguration::aper_decode(data)?),
                    380 => trace_collection_entity_uri = Some(UriAddress::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            trace_id,
            interfaces_to_trace,
            trace_depth,
            trace_collection_entity_ip_address,
            mdt_configuration,
            trace_collection_entity_uri,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.trace_id.aper_encode(data)?;
        self.interfaces_to_trace.aper_encode(data)?;
        self.trace_depth.aper_encode(data)?;
        self.trace_collection_entity_ip_address.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for TraceActivation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TraceActivation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TraceActivation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TraceActivation");
            e
        })
    }
}
// TraceDepth
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum TraceDepth {
    Minimum,
    Medium,
    Maximum,
    MinimumWithoutVendorSpecificExtension,
    MediumWithoutVendorSpecificExtension,
    MaximumWithoutVendorSpecificExtension,
}

impl TraceDepth {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(5), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(5), true, *self as i128, false)
    }
}

impl AperCodec for TraceDepth {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TraceDepth::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TraceDepth");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TraceDepth");
            e
        })
    }
}
// TraceId
#[derive(Clone, Debug)]
pub struct TraceId(pub Vec<u8>);

impl TraceId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data,
            Some(8),
            Some(8),
            false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, Some(8), Some(8), false, &self.0, false)
    }
}

impl AperCodec for TraceId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TraceId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TraceId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TraceId");
            e
        })
    }
}
// TrafficMappingInfo
#[derive(Clone, Debug)]
pub enum TrafficMappingInfo {
    IPtolayer2TrafficMappingInfo(IPtolayer2TrafficMappingInfo),
    BaPlayerBhrlCchannelMappingInfo(BaPlayerBhrlCchannelMappingInfo),
}

impl TrafficMappingInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::IPtolayer2TrafficMappingInfo(
                IPtolayer2TrafficMappingInfo::aper_decode(data)?,
            )),
            1 => Ok(Self::BaPlayerBhrlCchannelMappingInfo(
                BaPlayerBhrlCchannelMappingInfo::aper_decode(data)?,
            )),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::IPtolayer2TrafficMappingInfo(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::BaPlayerBhrlCchannelMappingInfo(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for TrafficMappingInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TrafficMappingInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrafficMappingInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrafficMappingInfo");
            e
        })
    }
}
// TransportLayerAddress
#[derive(Clone, Debug)]
pub struct TransportLayerAddress(pub BitString);

impl TransportLayerAddress {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_bitstring(
            data,
            Some(1),
            Some(160),
            true,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_bitstring(data, Some(1), Some(160), true, &self.0, false)
    }
}

impl AperCodec for TransportLayerAddress {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TransportLayerAddress::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransportLayerAddress");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransportLayerAddress");
            e
        })
    }
}
// TransactionId
#[derive(Clone, Copy, Debug)]
pub struct TransactionId(pub u8);

impl TransactionId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(255), true)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(255), true, self.0 as i128, false)
    }
}

impl AperCodec for TransactionId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TransactionId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransactionId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransactionId");
            e
        })
    }
}
// TransmissionBandwidth
#[derive(Clone, Debug)]
pub struct TransmissionBandwidth {
    pub nr_scs: NrScs,
    pub nr_nr_b: NrNrB,
}

impl TransmissionBandwidth {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let nr_scs = NrScs::aper_decode(data)?;
        let nr_nr_b = NrNrB::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { nr_scs, nr_nr_b })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.nr_scs.aper_encode(data)?;
        self.nr_nr_b.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for TransmissionBandwidth {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TransmissionBandwidth::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransmissionBandwidth");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransmissionBandwidth");
            e
        })
    }
}
// TransmissionComb
#[derive(Clone, Debug)]
pub enum TransmissionComb {
    N2(N2),
    N4(N4),
}

impl TransmissionComb {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::N2(N2::aper_decode(data)?)),
            1 => Ok(Self::N4(N4::aper_decode(data)?)),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::N2(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::N4(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for TransmissionComb {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TransmissionComb::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransmissionComb");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransmissionComb");
            e
        })
    }
}
// TransmissionCombPos
#[derive(Clone, Debug)]
pub enum TransmissionCombPos {
    N2(N2_1),
    N4(N4_1),
    N8(N8),
}

impl TransmissionCombPos {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 3, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::N2(N2_1::aper_decode(data)?)),
            1 => Ok(Self::N4(N4_1::aper_decode(data)?)),
            2 => Ok(Self::N8(N8::aper_decode(data)?)),
            3 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::N2(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::N4(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 1, false)?;
                x.aper_encode(data)
            }
            Self::N8(x) => {
                aper::encode::encode_choice_idx(data, 0, 3, false, 2, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for TransmissionCombPos {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TransmissionCombPos::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransmissionCombPos");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransmissionCombPos");
            e
        })
    }
}
// TransmissionStopIndicator
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum TransmissionStopIndicator {
    True,
}

impl TransmissionStopIndicator {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for TransmissionStopIndicator {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TransmissionStopIndicator::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransmissionStopIndicator");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransmissionStopIndicator");
            e
        })
    }
}
// TransportUpLayerAddressInfoToAddList
#[derive(Clone, Debug)]
pub struct TransportUpLayerAddressInfoToAddList(pub Vec<TransportUpLayerAddressInfoToAddItem>);

impl TransportUpLayerAddressInfoToAddList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(16), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(TransportUpLayerAddressInfoToAddItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(16), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for TransportUpLayerAddressInfoToAddList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TransportUpLayerAddressInfoToAddList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransportUpLayerAddressInfoToAddList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransportUpLayerAddressInfoToAddList");
            e
        })
    }
}
// TransportUpLayerAddressInfoToAddItem
#[derive(Clone, Debug)]
pub struct TransportUpLayerAddressInfoToAddItem {
    pub ip_sec_transport_layer_address: TransportLayerAddress,
    pub gtp_transport_layer_address_to_add: Option<GtptlAs>,
}

impl TransportUpLayerAddressInfoToAddItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let ip_sec_transport_layer_address = TransportLayerAddress::aper_decode(data)?;
        let gtp_transport_layer_address_to_add = if optionals[0] {
            Some(GtptlAs::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ip_sec_transport_layer_address,
            gtp_transport_layer_address_to_add,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.gtp_transport_layer_address_to_add.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.ip_sec_transport_layer_address.aper_encode(data)?;
        if let Some(x) = &self.gtp_transport_layer_address_to_add {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for TransportUpLayerAddressInfoToAddItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TransportUpLayerAddressInfoToAddItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransportUpLayerAddressInfoToAddItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransportUpLayerAddressInfoToAddItem");
            e
        })
    }
}
// TransportUpLayerAddressInfoToRemoveList
#[derive(Clone, Debug)]
pub struct TransportUpLayerAddressInfoToRemoveList(
    pub Vec<TransportUpLayerAddressInfoToRemoveItem>,
);

impl TransportUpLayerAddressInfoToRemoveList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(16), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(TransportUpLayerAddressInfoToRemoveItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(16), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for TransportUpLayerAddressInfoToRemoveList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TransportUpLayerAddressInfoToRemoveList::decode_inner(data).map_err(
            |mut e: PerCodecError| {
                e.push_context("TransportUpLayerAddressInfoToRemoveList");
                e
            },
        )
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransportUpLayerAddressInfoToRemoveList");
            e
        })
    }
}
// TransportUpLayerAddressInfoToRemoveItem
#[derive(Clone, Debug)]
pub struct TransportUpLayerAddressInfoToRemoveItem {
    pub ip_sec_transport_layer_address: TransportLayerAddress,
    pub gtp_transport_layer_address_to_remove: Option<GtptlAs>,
}

impl TransportUpLayerAddressInfoToRemoveItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let ip_sec_transport_layer_address = TransportLayerAddress::aper_decode(data)?;
        let gtp_transport_layer_address_to_remove = if optionals[0] {
            Some(GtptlAs::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ip_sec_transport_layer_address,
            gtp_transport_layer_address_to_remove,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.gtp_transport_layer_address_to_remove.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.ip_sec_transport_layer_address.aper_encode(data)?;
        if let Some(x) = &self.gtp_transport_layer_address_to_remove {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for TransportUpLayerAddressInfoToRemoveItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TransportUpLayerAddressInfoToRemoveItem::decode_inner(data).map_err(
            |mut e: PerCodecError| {
                e.push_context("TransportUpLayerAddressInfoToRemoveItem");
                e
            },
        )
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransportUpLayerAddressInfoToRemoveItem");
            e
        })
    }
}
// TransmissionActionIndicator
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum TransmissionActionIndicator {
    Stop,
}

impl TransmissionActionIndicator {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for TransmissionActionIndicator {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TransmissionActionIndicator::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransmissionActionIndicator");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransmissionActionIndicator");
            e
        })
    }
}
// Trpid
#[derive(Clone, Copy, Debug)]
pub struct Trpid(pub u16);

impl Trpid {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(65535), true)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(65535), true, self.0 as i128, false)
    }
}

impl AperCodec for Trpid {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Trpid::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Trpid");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Trpid");
            e
        })
    }
}
// TrpInformation
#[derive(Clone, Debug)]
pub struct TrpInformation {
    pub trpid: Trpid,
    pub trp_information_type_response_list: TrpInformationTypeResponseList,
}

impl TrpInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let trpid = Trpid::aper_decode(data)?;
        let trp_information_type_response_list = TrpInformationTypeResponseList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            trpid,
            trp_information_type_response_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.trpid.aper_encode(data)?;
        self.trp_information_type_response_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for TrpInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TrpInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpInformation");
            e
        })
    }
}
// TrpInformationItem
#[derive(Clone, Debug)]
pub struct TrpInformationItem {
    pub trp_information: TrpInformation,
}

impl TrpInformationItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let trp_information = TrpInformation::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { trp_information })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.trp_information.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for TrpInformationItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TrpInformationItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpInformationItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpInformationItem");
            e
        })
    }
}
// TrpInformationTypeItem
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum TrpInformationTypeItem {
    NrPci,
    NgRanCgi,
    Arfcn,
    PrsConfig,
    SsbConfig,
    SfnInitTime,
    SpatialDirectInfo,
    GeoCoord,
}

impl TrpInformationTypeItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(7), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(7), true, *self as i128, false)
    }
}

impl AperCodec for TrpInformationTypeItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TrpInformationTypeItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpInformationTypeItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpInformationTypeItem");
            e
        })
    }
}
// TrpInformationTypeResponseList
#[derive(Clone, Debug)]
pub struct TrpInformationTypeResponseList(pub Vec<TrpInformationTypeResponseItem>);

impl TrpInformationTypeResponseList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(TrpInformationTypeResponseItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for TrpInformationTypeResponseList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TrpInformationTypeResponseList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpInformationTypeResponseList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpInformationTypeResponseList");
            e
        })
    }
}
// TrpInformationTypeResponseItem
#[derive(Clone, Debug)]
pub enum TrpInformationTypeResponseItem {
    PciNr(NrPci),
    NgRanCgi(NrCgi),
    NrArfcn(u32),
    PrsConfiguration(PrsConfiguration),
    SsBinformation(SsbInformation),
    SfnInitialisationTime(RelativeTime1900),
    SpatialDirectionInformation(SpatialDirectionInformation),
    GeographicalCoordinates(GeographicalCoordinates),
}

impl TrpInformationTypeResponseItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 8, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::PciNr(NrPci::aper_decode(data)?)),
            1 => Ok(Self::NgRanCgi(NrCgi::aper_decode(data)?)),
            2 => Ok(Self::NrArfcn(
                aper::decode::decode_integer(data, Some(0), Some(3279165), false)?.0 as u32,
            )),
            3 => Ok(Self::PrsConfiguration(PrsConfiguration::aper_decode(data)?)),
            4 => Ok(Self::SsBinformation(SsbInformation::aper_decode(data)?)),
            5 => Ok(Self::SfnInitialisationTime(RelativeTime1900::aper_decode(
                data,
            )?)),
            6 => Ok(Self::SpatialDirectionInformation(
                SpatialDirectionInformation::aper_decode(data)?,
            )),
            7 => Ok(Self::GeographicalCoordinates(
                GeographicalCoordinates::aper_decode(data)?,
            )),
            8 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::PciNr(x) => {
                aper::encode::encode_choice_idx(data, 0, 8, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::NgRanCgi(x) => {
                aper::encode::encode_choice_idx(data, 0, 8, false, 1, false)?;
                x.aper_encode(data)
            }
            Self::NrArfcn(x) => {
                aper::encode::encode_choice_idx(data, 0, 8, false, 2, false)?;
                aper::encode::encode_integer(data, Some(0), Some(3279165), false, *x as i128, false)
            }
            Self::PrsConfiguration(x) => {
                aper::encode::encode_choice_idx(data, 0, 8, false, 3, false)?;
                x.aper_encode(data)
            }
            Self::SsBinformation(x) => {
                aper::encode::encode_choice_idx(data, 0, 8, false, 4, false)?;
                x.aper_encode(data)
            }
            Self::SfnInitialisationTime(x) => {
                aper::encode::encode_choice_idx(data, 0, 8, false, 5, false)?;
                x.aper_encode(data)
            }
            Self::SpatialDirectionInformation(x) => {
                aper::encode::encode_choice_idx(data, 0, 8, false, 6, false)?;
                x.aper_encode(data)
            }
            Self::GeographicalCoordinates(x) => {
                aper::encode::encode_choice_idx(data, 0, 8, false, 7, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for TrpInformationTypeResponseItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TrpInformationTypeResponseItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpInformationTypeResponseItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpInformationTypeResponseItem");
            e
        })
    }
}
// TrpList
#[derive(Clone, Debug)]
pub struct TrpList(pub Vec<TrpListItem>);

impl TrpList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(TrpListItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(65535), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for TrpList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TrpList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpList");
            e
        })
    }
}
// TrpListItem
#[derive(Clone, Debug)]
pub struct TrpListItem {
    pub trpid: Trpid,
}

impl TrpListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let trpid = Trpid::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { trpid })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.trpid.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for TrpListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TrpListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpListItem");
            e
        })
    }
}
// TrpMeasurementQuality
#[derive(Clone, Debug)]
pub struct TrpMeasurementQuality {
    pub tr_pmeasurement_quality_item: TrpMeasurementQualityItem,
}

impl TrpMeasurementQuality {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let tr_pmeasurement_quality_item = TrpMeasurementQualityItem::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            tr_pmeasurement_quality_item,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.tr_pmeasurement_quality_item.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for TrpMeasurementQuality {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TrpMeasurementQuality::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpMeasurementQuality");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpMeasurementQuality");
            e
        })
    }
}
// TrpMeasurementQualityItem
#[derive(Clone, Debug)]
pub enum TrpMeasurementQualityItem {
    TimingMeasurementQuality(TimingMeasurementQuality),
    AngleMeasurementQuality(AngleMeasurementQuality),
}

impl TrpMeasurementQualityItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::TimingMeasurementQuality(
                TimingMeasurementQuality::aper_decode(data)?,
            )),
            1 => Ok(Self::AngleMeasurementQuality(
                AngleMeasurementQuality::aper_decode(data)?,
            )),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::TimingMeasurementQuality(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::AngleMeasurementQuality(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for TrpMeasurementQualityItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TrpMeasurementQualityItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpMeasurementQualityItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpMeasurementQualityItem");
            e
        })
    }
}
// TrpMeasurementRequestList
#[derive(Clone, Debug)]
pub struct TrpMeasurementRequestList(pub Vec<TrpMeasurementRequestItem>);

impl TrpMeasurementRequestList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(TrpMeasurementRequestItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for TrpMeasurementRequestList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TrpMeasurementRequestList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpMeasurementRequestList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpMeasurementRequestList");
            e
        })
    }
}
// TrpMeasurementRequestItem
#[derive(Clone, Debug)]
pub struct TrpMeasurementRequestItem {
    pub trpid: Trpid,
    pub search_window_information: Option<SearchWindowInformation>,
    pub nr_cgi: Option<NrCgi>,
}

impl TrpMeasurementRequestItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let trpid = Trpid::aper_decode(data)?;
        let search_window_information = if optionals[0] {
            Some(SearchWindowInformation::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container
        let mut nr_cgi: Option<NrCgi> = None;

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    111 => nr_cgi = Some(NrCgi::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            trpid,
            search_window_information,
            nr_cgi,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.search_window_information.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.trpid.aper_encode(data)?;
        if let Some(x) = &self.search_window_information {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for TrpMeasurementRequestItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TrpMeasurementRequestItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpMeasurementRequestItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpMeasurementRequestItem");
            e
        })
    }
}
// TrpPositionDefinitionType
#[derive(Clone, Debug)]
pub enum TrpPositionDefinitionType {
    Direct(TrpPositionDirect),
    Referenced(TrpPositionReferenced),
}

impl TrpPositionDefinitionType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::Direct(TrpPositionDirect::aper_decode(data)?)),
            1 => Ok(Self::Referenced(TrpPositionReferenced::aper_decode(data)?)),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::Direct(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::Referenced(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for TrpPositionDefinitionType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TrpPositionDefinitionType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpPositionDefinitionType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpPositionDefinitionType");
            e
        })
    }
}
// TrpPositionDirect
#[derive(Clone, Debug)]
pub struct TrpPositionDirect {
    pub accuracy: TrpPositionDirectAccuracy,
}

impl TrpPositionDirect {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let accuracy = TrpPositionDirectAccuracy::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { accuracy })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.accuracy.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for TrpPositionDirect {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TrpPositionDirect::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpPositionDirect");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpPositionDirect");
            e
        })
    }
}
// TrpPositionDirectAccuracy
#[derive(Clone, Debug)]
pub enum TrpPositionDirectAccuracy {
    TrpPosition(AccessPointPosition),
    TrphAposition(NgranHighAccuracyAccessPointPosition),
}

impl TrpPositionDirectAccuracy {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::TrpPosition(AccessPointPosition::aper_decode(data)?)),
            1 => Ok(Self::TrphAposition(
                NgranHighAccuracyAccessPointPosition::aper_decode(data)?,
            )),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::TrpPosition(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::TrphAposition(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for TrpPositionDirectAccuracy {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TrpPositionDirectAccuracy::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpPositionDirectAccuracy");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpPositionDirectAccuracy");
            e
        })
    }
}
// TrpPositionReferenced
#[derive(Clone, Debug)]
pub struct TrpPositionReferenced {
    pub reference_point: ReferencePoint,
    pub reference_point_type: TrpReferencePointType,
}

impl TrpPositionReferenced {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let reference_point = ReferencePoint::aper_decode(data)?;
        let reference_point_type = TrpReferencePointType::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            reference_point,
            reference_point_type,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.reference_point.aper_encode(data)?;
        self.reference_point_type.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for TrpPositionReferenced {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TrpPositionReferenced::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpPositionReferenced");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpPositionReferenced");
            e
        })
    }
}
// TrpReferencePointType
#[derive(Clone, Debug)]
pub enum TrpReferencePointType {
    TrpPositionRelativeGeodetic(RelativeGeodeticLocation),
    TrpPositionRelativeCartesian(RelativeCartesianLocation),
}

impl TrpReferencePointType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::TrpPositionRelativeGeodetic(
                RelativeGeodeticLocation::aper_decode(data)?,
            )),
            1 => Ok(Self::TrpPositionRelativeCartesian(
                RelativeCartesianLocation::aper_decode(data)?,
            )),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::TrpPositionRelativeGeodetic(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::TrpPositionRelativeCartesian(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for TrpReferencePointType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TrpReferencePointType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpReferencePointType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TrpReferencePointType");
            e
        })
    }
}
// TypeOfError
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum TypeOfError {
    NotUnderstood,
    Missing,
}

impl TypeOfError {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for TypeOfError {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TypeOfError::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TypeOfError");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TypeOfError");
            e
        })
    }
}
// TransportLayerAddressInfo
#[derive(Clone, Debug)]
pub struct TransportLayerAddressInfo {
    pub transport_up_layer_address_info_to_add_list: Option<TransportUpLayerAddressInfoToAddList>,
    pub transport_up_layer_address_info_to_remove_list:
        Option<TransportUpLayerAddressInfoToRemoveList>,
}

impl TransportLayerAddressInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 3)?;
        let transport_up_layer_address_info_to_add_list = if optionals[0] {
            Some(TransportUpLayerAddressInfoToAddList::aper_decode(data)?)
        } else {
            None
        };
        let transport_up_layer_address_info_to_remove_list = if optionals[1] {
            Some(TransportUpLayerAddressInfoToRemoveList::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            transport_up_layer_address_info_to_add_list,
            transport_up_layer_address_info_to_remove_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.transport_up_layer_address_info_to_add_list.is_some());
        optionals.push(
            self.transport_up_layer_address_info_to_remove_list
                .is_some(),
        );
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        if let Some(x) = &self.transport_up_layer_address_info_to_add_list {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.transport_up_layer_address_info_to_remove_list {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for TransportLayerAddressInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TransportLayerAddressInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransportLayerAddressInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TransportLayerAddressInfo");
            e
        })
    }
}
// TscAssistanceInformation
#[derive(Clone, Debug)]
pub struct TscAssistanceInformation {
    pub periodicity: Periodicity,
    pub burst_arrival_time: Option<BurstArrivalTime>,
}

impl TscAssistanceInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let periodicity = Periodicity::aper_decode(data)?;
        let burst_arrival_time = if optionals[0] {
            Some(BurstArrivalTime::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            periodicity,
            burst_arrival_time,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.burst_arrival_time.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.periodicity.aper_encode(data)?;
        if let Some(x) = &self.burst_arrival_time {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for TscAssistanceInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TscAssistanceInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TscAssistanceInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TscAssistanceInformation");
            e
        })
    }
}
// TscTrafficCharacteristics
#[derive(Clone, Debug)]
pub struct TscTrafficCharacteristics {
    pub tsc_assistance_information_dl: Option<TscAssistanceInformation>,
    pub tsc_assistance_information_ul: Option<TscAssistanceInformation>,
}

impl TscTrafficCharacteristics {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 3)?;
        let tsc_assistance_information_dl = if optionals[0] {
            Some(TscAssistanceInformation::aper_decode(data)?)
        } else {
            None
        };
        let tsc_assistance_information_ul = if optionals[1] {
            Some(TscAssistanceInformation::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            tsc_assistance_information_dl,
            tsc_assistance_information_ul,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.tsc_assistance_information_dl.is_some());
        optionals.push(self.tsc_assistance_information_ul.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        if let Some(x) = &self.tsc_assistance_information_dl {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.tsc_assistance_information_ul {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for TscTrafficCharacteristics {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        TscTrafficCharacteristics::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TscTrafficCharacteristics");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("TscTrafficCharacteristics");
            e
        })
    }
}
// UacAssistanceInfo
#[derive(Clone, Debug)]
pub struct UacAssistanceInfo {
    pub uac_plmn_list: UacPlmnList,
}

impl UacAssistanceInfo {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let uac_plmn_list = UacPlmnList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { uac_plmn_list })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.uac_plmn_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for UacAssistanceInfo {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UacAssistanceInfo::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UacAssistanceInfo");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UacAssistanceInfo");
            e
        })
    }
}
// UacPlmnList
#[derive(Clone, Debug)]
pub struct UacPlmnList(pub Vec<UacPlmnItem>);

impl UacPlmnList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(12), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(UacPlmnItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(12), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for UacPlmnList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UacPlmnList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UacPlmnList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UacPlmnList");
            e
        })
    }
}
// UacPlmnItem
#[derive(Clone, Debug)]
pub struct UacPlmnItem {
    pub plmn_identity: PlmnIdentity,
    pub uac_type_list: UacTypeList,
    pub nid: Option<Nid>,
}

impl UacPlmnItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let plmn_identity = PlmnIdentity::aper_decode(data)?;
        let uac_type_list = UacTypeList::aper_decode(data)?;

        // Process the extension container
        let mut nid: Option<Nid> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    385 => nid = Some(Nid::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            plmn_identity,
            uac_type_list,
            nid,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.plmn_identity.aper_encode(data)?;
        self.uac_type_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for UacPlmnItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UacPlmnItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UacPlmnItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UacPlmnItem");
            e
        })
    }
}
// UacTypeList
#[derive(Clone, Debug)]
pub struct UacTypeList(pub Vec<UacTypeItem>);

impl UacTypeList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(64), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(UacTypeItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(64), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for UacTypeList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UacTypeList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UacTypeList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UacTypeList");
            e
        })
    }
}
// UacTypeItem
#[derive(Clone, Debug)]
pub struct UacTypeItem {
    pub uac_reduction_indication: UacReductionIndication,
    pub uac_category_type: UacCategoryType,
}

impl UacTypeItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let uac_reduction_indication = UacReductionIndication::aper_decode(data)?;
        let uac_category_type = UacCategoryType::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            uac_reduction_indication,
            uac_category_type,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.uac_reduction_indication.aper_encode(data)?;
        self.uac_category_type.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for UacTypeItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UacTypeItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UacTypeItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UacTypeItem");
            e
        })
    }
}
// UacCategoryType
#[derive(Clone, Debug)]
pub enum UacCategoryType {
    UaCstandardized(UacAction),
    UacOperatorDefined(UacOperatorDefined),
}

impl UacCategoryType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 2, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::UaCstandardized(UacAction::aper_decode(data)?)),
            1 => Ok(Self::UacOperatorDefined(UacOperatorDefined::aper_decode(
                data,
            )?)),
            2 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::UaCstandardized(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 0, false)?;
                x.aper_encode(data)
            }
            Self::UacOperatorDefined(x) => {
                aper::encode::encode_choice_idx(data, 0, 2, false, 1, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for UacCategoryType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UacCategoryType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UacCategoryType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UacCategoryType");
            e
        })
    }
}
// UacOperatorDefined
#[derive(Clone, Debug)]
pub struct UacOperatorDefined {
    pub access_category: u8,
    pub access_identity: BitString,
}

impl UacOperatorDefined {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let access_category = aper::decode::decode_integer(data, Some(32), Some(63), true)?.0 as u8;
        let access_identity = aper::decode::decode_bitstring(data, Some(7), Some(7), false)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            access_category,
            access_identity,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(32),
            Some(63),
            true,
            self.access_category as i128,
            false,
        )?;
        aper::encode::encode_bitstring(
            data,
            Some(7),
            Some(7),
            false,
            &self.access_identity,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for UacOperatorDefined {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UacOperatorDefined::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UacOperatorDefined");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UacOperatorDefined");
            e
        })
    }
}
// UacAction
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum UacAction {
    RejectNonEmergencyMoDt,
    RejectRrcCrSignalling,
    PermitEmergencySessionsAndMobileTerminatedServicesOnly,
    PermitHighPrioritySessionsAndMobileTerminatedServicesOnly,
}

impl UacAction {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for UacAction {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UacAction::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UacAction");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UacAction");
            e
        })
    }
}
// UacReductionIndication
#[derive(Clone, Copy, Debug)]
pub struct UacReductionIndication(pub u8);

impl UacReductionIndication {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(100), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(100), false, self.0 as i128, false)
    }
}

impl AperCodec for UacReductionIndication {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UacReductionIndication::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UacReductionIndication");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UacReductionIndication");
            e
        })
    }
}
// UeAssociatedLogicalF1ConnectionItem
#[derive(Clone, Debug)]
pub struct UeAssociatedLogicalF1ConnectionItem {
    pub gnb_cu_ue_f1ap_id: Option<GnbCuUeF1apId>,
    pub gnb_du_ue_f1ap_id: Option<GnbDuUeF1apId>,
}

impl UeAssociatedLogicalF1ConnectionItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 3)?;
        let gnb_cu_ue_f1ap_id = if optionals[0] {
            Some(GnbCuUeF1apId::aper_decode(data)?)
        } else {
            None
        };
        let gnb_du_ue_f1ap_id = if optionals[1] {
            Some(GnbDuUeF1apId::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            gnb_cu_ue_f1ap_id,
            gnb_du_ue_f1ap_id,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.gnb_cu_ue_f1ap_id.is_some());
        optionals.push(self.gnb_du_ue_f1ap_id.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        if let Some(x) = &self.gnb_cu_ue_f1ap_id {
            x.aper_encode(data)?;
        }
        if let Some(x) = &self.gnb_du_ue_f1ap_id {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for UeAssociatedLogicalF1ConnectionItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UeAssociatedLogicalF1ConnectionItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UeAssociatedLogicalF1ConnectionItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UeAssociatedLogicalF1ConnectionItem");
            e
        })
    }
}
// UeAssistanceInformation
#[derive(Clone, Debug)]
pub struct UeAssistanceInformation(pub Vec<u8>);

impl UeAssistanceInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for UeAssistanceInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UeAssistanceInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UeAssistanceInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UeAssistanceInformation");
            e
        })
    }
}
// UeAssistanceInformationEutra
#[derive(Clone, Debug)]
pub struct UeAssistanceInformationEutra(pub Vec<u8>);

impl UeAssistanceInformationEutra {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for UeAssistanceInformationEutra {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UeAssistanceInformationEutra::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UeAssistanceInformationEutra");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UeAssistanceInformationEutra");
            e
        })
    }
}
// UeCapabilityRatContainerList
#[derive(Clone, Debug)]
pub struct UeCapabilityRatContainerList(pub Vec<u8>);

impl UeCapabilityRatContainerList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for UeCapabilityRatContainerList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UeCapabilityRatContainerList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UeCapabilityRatContainerList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UeCapabilityRatContainerList");
            e
        })
    }
}
// UeContextNotRetrievable
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum UeContextNotRetrievable {
    True,
}

impl UeContextNotRetrievable {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for UeContextNotRetrievable {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UeContextNotRetrievable::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UeContextNotRetrievable");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UeContextNotRetrievable");
            e
        })
    }
}
// UeIdentityIndexValue
#[derive(Clone, Debug)]
pub enum UeIdentityIndexValue {
    IndexLength10(BitString),
}

impl UeIdentityIndexValue {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 1, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::IndexLength10(aper::decode::decode_bitstring(
                data,
                Some(10),
                Some(10),
                false,
            )?)),
            1 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::IndexLength10(x) => {
                aper::encode::encode_choice_idx(data, 0, 1, false, 0, false)?;
                aper::encode::encode_bitstring(data, Some(10), Some(10), false, &x, false)
            }
        }
    }
}

impl AperCodec for UeIdentityIndexValue {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UeIdentityIndexValue::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UeIdentityIndexValue");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UeIdentityIndexValue");
            e
        })
    }
}
// UlAoA
#[derive(Clone, Debug)]
pub struct UlAoA {
    pub azimuth_ao_a: u16,
    pub zenith_ao_a: Option<u16>,
    pub lcs_to_gcs_translation_ao_a: Option<LcsToGcsTranslationAoA>,
}

impl UlAoA {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 3)?;
        let azimuth_ao_a = aper::decode::decode_integer(data, Some(0), Some(3599), false)?.0 as u16;
        let zenith_ao_a = if optionals[0] {
            Some(aper::decode::decode_integer(data, Some(0), Some(1799), false)?.0 as u16)
        } else {
            None
        };
        let lcs_to_gcs_translation_ao_a = if optionals[1] {
            Some(LcsToGcsTranslationAoA::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[2] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            azimuth_ao_a,
            zenith_ao_a,
            lcs_to_gcs_translation_ao_a,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.zenith_ao_a.is_some());
        optionals.push(self.lcs_to_gcs_translation_ao_a.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(3599),
            false,
            self.azimuth_ao_a as i128,
            false,
        )?;
        if let Some(x) = &self.zenith_ao_a {
            aper::encode::encode_integer(data, Some(0), Some(1799), false, *x as i128, false)?;
        }
        if let Some(x) = &self.lcs_to_gcs_translation_ao_a {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for UlAoA {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UlAoA::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlAoA");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlAoA");
            e
        })
    }
}
// UlBhNonUpTrafficMapping
#[derive(Clone, Debug)]
pub struct UlBhNonUpTrafficMapping {
    pub ul_bh_non_up_traffic_mapping_list: UlBhNonUpTrafficMappingList,
}

impl UlBhNonUpTrafficMapping {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let ul_bh_non_up_traffic_mapping_list = UlBhNonUpTrafficMappingList::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ul_bh_non_up_traffic_mapping_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.ul_bh_non_up_traffic_mapping_list.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for UlBhNonUpTrafficMapping {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UlBhNonUpTrafficMapping::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlBhNonUpTrafficMapping");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlBhNonUpTrafficMapping");
            e
        })
    }
}
// UlBhNonUpTrafficMappingList
#[derive(Clone, Debug)]
pub struct UlBhNonUpTrafficMappingList(pub Vec<UlBhNonUpTrafficMappingItem>);

impl UlBhNonUpTrafficMappingList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(32), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(UlBhNonUpTrafficMappingItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(32), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for UlBhNonUpTrafficMappingList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UlBhNonUpTrafficMappingList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlBhNonUpTrafficMappingList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlBhNonUpTrafficMappingList");
            e
        })
    }
}
// UlBhNonUpTrafficMappingItem
#[derive(Clone, Debug)]
pub struct UlBhNonUpTrafficMappingItem {
    pub non_up_traffic_type: NonUpTrafficType,
    pub bh_info: BhInfo,
}

impl UlBhNonUpTrafficMappingItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let non_up_traffic_type = NonUpTrafficType::aper_decode(data)?;
        let bh_info = BhInfo::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            non_up_traffic_type,
            bh_info,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.non_up_traffic_type.aper_encode(data)?;
        self.bh_info.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for UlBhNonUpTrafficMappingItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UlBhNonUpTrafficMappingItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlBhNonUpTrafficMappingItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlBhNonUpTrafficMappingItem");
            e
        })
    }
}
// UlConfiguration
#[derive(Clone, Debug)]
pub struct UlConfiguration {
    pub ul_ue_configuration: UlUeConfiguration,
}

impl UlConfiguration {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let ul_ue_configuration = UlUeConfiguration::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ul_ue_configuration,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.ul_ue_configuration.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for UlConfiguration {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UlConfiguration::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlConfiguration");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlConfiguration");
            e
        })
    }
}
// UlRtoaMeasurement
#[derive(Clone, Debug)]
pub struct UlRtoaMeasurement {
    pub ul_rtoa_measurement_item: UlRtoaMeasurementItem,
    pub additional_path_list: Option<AdditionalPathList>,
}

impl UlRtoaMeasurement {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 2)?;
        let ul_rtoa_measurement_item = UlRtoaMeasurementItem::aper_decode(data)?;
        let additional_path_list = if optionals[0] {
            Some(AdditionalPathList::aper_decode(data)?)
        } else {
            None
        };

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            ul_rtoa_measurement_item,
            additional_path_list,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.additional_path_list.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.ul_rtoa_measurement_item.aper_encode(data)?;
        if let Some(x) = &self.additional_path_list {
            x.aper_encode(data)?;
        }

        Ok(())
    }
}

impl AperCodec for UlRtoaMeasurement {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UlRtoaMeasurement::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlRtoaMeasurement");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlRtoaMeasurement");
            e
        })
    }
}
// UlRtoaMeasurementItem
#[derive(Clone, Debug)]
pub enum UlRtoaMeasurementItem {
    K0(u32),
    K1(u32),
    K2(u32),
    K3(u32),
    K4(u32),
    K5(u16),
}

impl UlRtoaMeasurementItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 6, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::K0(
                aper::decode::decode_integer(data, Some(0), Some(1970049), false)?.0 as u32,
            )),
            1 => Ok(Self::K1(
                aper::decode::decode_integer(data, Some(0), Some(985025), false)?.0 as u32,
            )),
            2 => Ok(Self::K2(
                aper::decode::decode_integer(data, Some(0), Some(492513), false)?.0 as u32,
            )),
            3 => Ok(Self::K3(
                aper::decode::decode_integer(data, Some(0), Some(246257), false)?.0 as u32,
            )),
            4 => Ok(Self::K4(
                aper::decode::decode_integer(data, Some(0), Some(123129), false)?.0 as u32,
            )),
            5 => Ok(Self::K5(
                aper::decode::decode_integer(data, Some(0), Some(61565), false)?.0 as u16,
            )),
            6 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::K0(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 0, false)?;
                aper::encode::encode_integer(data, Some(0), Some(1970049), false, *x as i128, false)
            }
            Self::K1(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 1, false)?;
                aper::encode::encode_integer(data, Some(0), Some(985025), false, *x as i128, false)
            }
            Self::K2(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 2, false)?;
                aper::encode::encode_integer(data, Some(0), Some(492513), false, *x as i128, false)
            }
            Self::K3(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 3, false)?;
                aper::encode::encode_integer(data, Some(0), Some(246257), false, *x as i128, false)
            }
            Self::K4(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 4, false)?;
                aper::encode::encode_integer(data, Some(0), Some(123129), false, *x as i128, false)
            }
            Self::K5(x) => {
                aper::encode::encode_choice_idx(data, 0, 6, false, 5, false)?;
                aper::encode::encode_integer(data, Some(0), Some(61565), false, *x as i128, false)
            }
        }
    }
}

impl AperCodec for UlRtoaMeasurementItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UlRtoaMeasurementItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlRtoaMeasurementItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlRtoaMeasurementItem");
            e
        })
    }
}
// UlSrsRsrp
#[derive(Clone, Copy, Debug)]
pub struct UlSrsRsrp(pub u8);

impl UlSrsRsrp {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(126), false)?.0 as u8,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(126), false, self.0 as i128, false)
    }
}

impl AperCodec for UlSrsRsrp {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UlSrsRsrp::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlSrsRsrp");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlSrsRsrp");
            e
        })
    }
}
// UlUeConfiguration
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum UlUeConfiguration {
    NoData,
    Shared,
    Only,
}

impl UlUeConfiguration {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), true, *self as i128, false)
    }
}

impl AperCodec for UlUeConfiguration {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UlUeConfiguration::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlUeConfiguration");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlUeConfiguration");
            e
        })
    }
}
// UlUpTnlInformationToUpdateListItem
#[derive(Clone, Debug)]
pub struct UlUpTnlInformationToUpdateListItem {
    pub uluptnl_information: UpTransportLayerInformation,
    pub new_uluptnl_information: Option<UpTransportLayerInformation>,
    pub bh_info: BhInfo,
}

impl UlUpTnlInformationToUpdateListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 2)?;
        let uluptnl_information = UpTransportLayerInformation::aper_decode(data)?;
        let new_uluptnl_information = if optionals[0] {
            Some(UpTransportLayerInformation::aper_decode(data)?)
        } else {
            None
        };
        let bh_info = BhInfo::aper_decode(data)?;

        // Process the extension container

        if optionals[1] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            uluptnl_information,
            new_uluptnl_information,
            bh_info,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(self.new_uluptnl_information.is_some());
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.uluptnl_information.aper_encode(data)?;
        if let Some(x) = &self.new_uluptnl_information {
            x.aper_encode(data)?;
        }
        self.bh_info.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for UlUpTnlInformationToUpdateListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UlUpTnlInformationToUpdateListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlUpTnlInformationToUpdateListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlUpTnlInformationToUpdateListItem");
            e
        })
    }
}
// UlUpTnlAddressToUpdateListItem
#[derive(Clone, Debug)]
pub struct UlUpTnlAddressToUpdateListItem {
    pub old_ip_adress: TransportLayerAddress,
    pub new_ip_adress: TransportLayerAddress,
}

impl UlUpTnlAddressToUpdateListItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let old_ip_adress = TransportLayerAddress::aper_decode(data)?;
        let new_ip_adress = TransportLayerAddress::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            old_ip_adress,
            new_ip_adress,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.old_ip_adress.aper_encode(data)?;
        self.new_ip_adress.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for UlUpTnlAddressToUpdateListItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UlUpTnlAddressToUpdateListItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlUpTnlAddressToUpdateListItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UlUpTnlAddressToUpdateListItem");
            e
        })
    }
}
// UluptnlInformationToBeSetupList
#[derive(Clone, Debug)]
pub struct UluptnlInformationToBeSetupList(pub Vec<UluptnlInformationToBeSetupItem>);

impl UluptnlInformationToBeSetupList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(2), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(UluptnlInformationToBeSetupItem::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(2), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for UluptnlInformationToBeSetupList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UluptnlInformationToBeSetupList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UluptnlInformationToBeSetupList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UluptnlInformationToBeSetupList");
            e
        })
    }
}
// UluptnlInformationToBeSetupItem
#[derive(Clone, Debug)]
pub struct UluptnlInformationToBeSetupItem {
    pub uluptnl_information: UpTransportLayerInformation,
    pub bh_info: Option<BhInfo>,
}

impl UluptnlInformationToBeSetupItem {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) = aper::decode::decode_sequence_header(data, true, 1)?;
        let uluptnl_information = UpTransportLayerInformation::aper_decode(data)?;

        // Process the extension container
        let mut bh_info: Option<BhInfo> = None;

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    280 => bh_info = Some(BhInfo::aper_decode(data)?),
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self {
            uluptnl_information,
            bh_info,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, true, &optionals, false)?;
        self.uluptnl_information.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for UluptnlInformationToBeSetupItem {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UluptnlInformationToBeSetupItem::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UluptnlInformationToBeSetupItem");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UluptnlInformationToBeSetupItem");
            e
        })
    }
}
// Uncertainty
#[derive(Clone, Copy, Debug)]
pub struct Uncertainty(pub u16);

impl Uncertainty {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(
            aper::decode::decode_integer(data, Some(0), Some(32767), true)?.0 as u16,
        ))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_integer(data, Some(0), Some(32767), true, self.0 as i128, false)
    }
}

impl AperCodec for Uncertainty {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Uncertainty::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Uncertainty");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Uncertainty");
            e
        })
    }
}
// UplinkChannelBwPerScsList
#[derive(Clone, Debug)]
pub struct UplinkChannelBwPerScsList(pub Vec<ScsSpecificCarrier>);

impl UplinkChannelBwPerScsList {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self({
            let length = aper::decode::decode_length_determinent(data, Some(1), Some(5), false)?;
            let mut items = vec![];
            for _ in 0..length {
                items.push(ScsSpecificCarrier::aper_decode(data)?);
            }
            items
        }))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_length_determinent(data, Some(1), Some(5), false, self.0.len())?;
        for x in &self.0 {
            x.aper_encode(data)?;
        }
        Ok(())
    }
}

impl AperCodec for UplinkChannelBwPerScsList {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UplinkChannelBwPerScsList::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UplinkChannelBwPerScsList");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UplinkChannelBwPerScsList");
            e
        })
    }
}
// UplinkTxDirectCurrentListInformation
#[derive(Clone, Debug)]
pub struct UplinkTxDirectCurrentListInformation(pub Vec<u8>);

impl UplinkTxDirectCurrentListInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_octetstring(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_octetstring(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for UplinkTxDirectCurrentListInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UplinkTxDirectCurrentListInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UplinkTxDirectCurrentListInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UplinkTxDirectCurrentListInformation");
            e
        })
    }
}
// UpTransportLayerInformation
#[derive(Clone, Debug)]
pub enum UpTransportLayerInformation {
    GtpTunnel(GtpTunnel),
}

impl UpTransportLayerInformation {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_choice_idx(data, 0, 1, false)?;
        if extended {
            return Err(PerCodecError::new("CHOICE additions not implemented"));
        }
        match idx {
            0 => Ok(Self::GtpTunnel(GtpTunnel::aper_decode(data)?)),
            1 => Err(PerCodecError::new(
                "Choice extension container not implemented",
            )),
            _ => Err(PerCodecError::new("Unknown choice idx")),
        }
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        match self {
            Self::GtpTunnel(x) => {
                aper::encode::encode_choice_idx(data, 0, 1, false, 0, false)?;
                x.aper_encode(data)
            }
        }
    }
}

impl AperCodec for UpTransportLayerInformation {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UpTransportLayerInformation::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UpTransportLayerInformation");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UpTransportLayerInformation");
            e
        })
    }
}
// UriAddress
#[derive(Clone, Debug)]
pub struct UriAddress(pub String);

impl UriAddress {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Ok(Self(aper::decode::decode_visible_string(
            data, None, None, false,
        )?))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_visible_string(data, None, None, false, &self.0, false)
    }
}

impl AperCodec for UriAddress {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        UriAddress::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UriAddress");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("UriAddress");
            e
        })
    }
}
// VictimGnbSetId
#[derive(Clone, Debug)]
pub struct VictimGnbSetId {
    pub victim_gnb_set_id: GnbSetId,
}

impl VictimGnbSetId {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 1)?;
        let victim_gnb_set_id = GnbSetId::aper_decode(data)?;

        // Process the extension container

        if optionals[0] {
            let num_ies =
                aper::decode::decode_length_determinent(data, Some(1), Some(65535), false)?;
            for _ in 0..num_ies {
                let (id, _ext) = aper::decode::decode_integer(data, Some(0), Some(65535), false)?;
                let _criticality = Criticality::aper_decode(data)?;
                let ie_length = aper::decode::decode_length_determinent(data, None, None, false)?;
                match id {
                    _ => data.advance_maybe_err(ie_length, false)?,
                }
            }
        }
        Ok(Self { victim_gnb_set_id })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let mut optionals = BitVec::new();
        optionals.push(false);

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        self.victim_gnb_set_id.aper_encode(data)?;

        Ok(())
    }
}

impl AperCodec for VictimGnbSetId {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        VictimGnbSetId::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("VictimGnbSetId");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("VictimGnbSetId");
            e
        })
    }
}
// VehicleUe
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum VehicleUe {
    Authorized,
    NotAuthorized,
}

impl VehicleUe {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for VehicleUe {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        VehicleUe::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("VehicleUe");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("VehicleUe");
            e
        })
    }
}
// PedestrianUe
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum PedestrianUe {
    Authorized,
    NotAuthorized,
}

impl PedestrianUe {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for PedestrianUe {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PedestrianUe::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PedestrianUe");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PedestrianUe");
            e
        })
    }
}
// LatitudeSign
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum LatitudeSign {
    North,
    South,
}

impl LatitudeSign {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), false, *self as i128, false)
    }
}

impl AperCodec for LatitudeSign {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        LatitudeSign::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LatitudeSign");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("LatitudeSign");
            e
        })
    }
}
// DirectionOfAltitude
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum DirectionOfAltitude {
    Height,
    Depth,
}

impl DirectionOfAltitude {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), false, *self as i128, false)
    }
}

impl AperCodec for DirectionOfAltitude {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DirectionOfAltitude::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DirectionOfAltitude");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DirectionOfAltitude");
            e
        })
    }
}
// SubcarrierSpacing1
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum SubcarrierSpacing1 {
    KHz15,
    KHz30,
    KHz60,
    KHz120,
}

impl SubcarrierSpacing1 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for SubcarrierSpacing1 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SubcarrierSpacing1::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SubcarrierSpacing1");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SubcarrierSpacing1");
            e
        })
    }
}
// CyclicPrefix
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum CyclicPrefix {
    Normal,
    Extended,
}

impl CyclicPrefix {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), false, *self as i128, false)
    }
}

impl AperCodec for CyclicPrefix {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CyclicPrefix::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CyclicPrefix");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CyclicPrefix");
            e
        })
    }
}
// Shift7dot5kHz
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum Shift7dot5kHz {
    True,
}

impl Shift7dot5kHz {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for Shift7dot5kHz {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Shift7dot5kHz::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Shift7dot5kHz");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Shift7dot5kHz");
            e
        })
    }
}
// Resolution
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum Resolution {
    Deg0dot1,
}

impl Resolution {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for Resolution {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Resolution::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Resolution");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Resolution");
            e
        })
    }
}
// DelayCritical
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum DelayCritical {
    DelayCritical,
    NonDelayCritical,
}

impl DelayCritical {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), false, *self as i128, false)
    }
}

impl AperCodec for DelayCritical {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        DelayCritical::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DelayCritical");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("DelayCritical");
            e
        })
    }
}
// ResourceType1
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ResourceType1 {
    Gbr,
    NonGbr,
    DelayCriticalGrb,
}

impl ResourceType1 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), true, *self as i128, false)
    }
}

impl AperCodec for ResourceType1 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceType1::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceType1");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceType1");
            e
        })
    }
}
// NrScs1
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum NrScs1 {
    Scs15,
    Scs30,
    Scs60,
    Scs120,
}

impl NrScs1 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for NrScs1 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrScs1::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrScs1");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrScs1");
            e
        })
    }
}
// NrCp
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum NrCp {
    Normal,
    Extended,
}

impl NrCp {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for NrCp {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrCp::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrCp");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrCp");
            e
        })
    }
}
// NrDlulTxPeriodicity
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum NrDlulTxPeriodicity {
    Ms0p5,
    Ms0p625,
    Ms1,
    Ms1p25,
    Ms2,
    Ms2p5,
    Ms3,
    Ms4,
    Ms5,
    Ms10,
    Ms20,
    Ms40,
    Ms60,
    Ms80,
    Ms100,
    Ms120,
    Ms140,
    Ms160,
}

impl NrDlulTxPeriodicity {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(17), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(17), true, *self as i128, false)
    }
}

impl AperCodec for NrDlulTxPeriodicity {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrDlulTxPeriodicity::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrDlulTxPeriodicity");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrDlulTxPeriodicity");
            e
        })
    }
}
// Msg1scs
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum Msg1scs {
    Scs15,
    Scs30,
    Scs60,
    Scs120,
}

impl Msg1scs {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for Msg1scs {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Msg1scs::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Msg1scs");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Msg1scs");
            e
        })
    }
}
// RestrictedSetConfig
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum RestrictedSetConfig {
    UnrestrictedSet,
    RestrictedSetTypeA,
    RestrictedSetTypeB,
}

impl RestrictedSetConfig {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), true, *self as i128, false)
    }
}

impl AperCodec for RestrictedSetConfig {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RestrictedSetConfig::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RestrictedSetConfig");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RestrictedSetConfig");
            e
        })
    }
}
// Msg1fdm
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum Msg1fdm {
    One,
    Two,
    Four,
    Eight,
}

impl Msg1fdm {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for Msg1fdm {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Msg1fdm::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Msg1fdm");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Msg1fdm");
            e
        })
    }
}
// SsbPerRachOccasion
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum SsbPerRachOccasion {
    OneEighth,
    OneFourth,
    OneHalf,
    One,
    Two,
    Four,
    Eight,
    Sixteen,
}

impl SsbPerRachOccasion {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(7), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(7), true, *self as i128, false)
    }
}

impl AperCodec for SsbPerRachOccasion {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbPerRachOccasion::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbPerRachOccasion");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbPerRachOccasion");
            e
        })
    }
}
// PosperiodicSet
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum PosperiodicSet {
    True,
}

impl PosperiodicSet {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for PosperiodicSet {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PosperiodicSet::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosperiodicSet");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PosperiodicSet");
            e
        })
    }
}
// PossemiPersistentSet
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum PossemiPersistentSet {
    True,
}

impl PossemiPersistentSet {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for PossemiPersistentSet {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PossemiPersistentSet::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PossemiPersistentSet");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PossemiPersistentSet");
            e
        })
    }
}
// NrofSymbols
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum NrofSymbols {
    N1,
    N2,
    N4,
    N8,
    N12,
}

impl NrofSymbols {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(4), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(4), false, *self as i128, false)
    }
}

impl AperCodec for NrofSymbols {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrofSymbols::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrofSymbols");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrofSymbols");
            e
        })
    }
}
// GroupOrSequenceHopping
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum GroupOrSequenceHopping {
    Neither,
    GroupHopping,
    SequenceHopping,
}

impl GroupOrSequenceHopping {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), false, *self as i128, false)
    }
}

impl AperCodec for GroupOrSequenceHopping {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GroupOrSequenceHopping::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GroupOrSequenceHopping");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GroupOrSequenceHopping");
            e
        })
    }
}
// MutingBitRepetitionFactor
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum MutingBitRepetitionFactor {
    Rf1,
    Rf2,
    Rf4,
    Rf8,
}

impl MutingBitRepetitionFactor {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for MutingBitRepetitionFactor {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MutingBitRepetitionFactor::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MutingBitRepetitionFactor");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MutingBitRepetitionFactor");
            e
        })
    }
}
// SubcarrierSpacing2
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum SubcarrierSpacing2 {
    KHz15,
    KHz30,
    KHz60,
    KHz120,
}

impl SubcarrierSpacing2 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for SubcarrierSpacing2 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SubcarrierSpacing2::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SubcarrierSpacing2");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SubcarrierSpacing2");
            e
        })
    }
}
// CombSize
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum CombSize {
    N2,
    N4,
    N6,
    N12,
}

impl CombSize {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for CombSize {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CombSize::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CombSize");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CombSize");
            e
        })
    }
}
// CpType
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum CpType {
    Normal,
    Extended,
}

impl CpType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(1), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(1), true, *self as i128, false)
    }
}

impl AperCodec for CpType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        CpType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CpType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("CpType");
            e
        })
    }
}
// ResourceSetPeriodicity
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ResourceSetPeriodicity {
    N4,
    N5,
    N8,
    N10,
    N16,
    N20,
    N32,
    N40,
    N64,
    N80,
    N160,
    N320,
    N640,
    N1280,
    N2560,
    N5120,
    N10240,
    N20480,
    N40960,
    N81920,
}

impl ResourceSetPeriodicity {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(19), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(19), true, *self as i128, false)
    }
}

impl AperCodec for ResourceSetPeriodicity {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceSetPeriodicity::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceSetPeriodicity");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceSetPeriodicity");
            e
        })
    }
}
// ResourceRepetitionFactor
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ResourceRepetitionFactor {
    Rf1,
    Rf2,
    Rf4,
    Rf6,
    Rf8,
    Rf16,
    Rf32,
}

impl ResourceRepetitionFactor {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(6), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(6), true, *self as i128, false)
    }
}

impl AperCodec for ResourceRepetitionFactor {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceRepetitionFactor::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceRepetitionFactor");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceRepetitionFactor");
            e
        })
    }
}
// ResourceTimeGap
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ResourceTimeGap {
    Tg1,
    Tg2,
    Tg4,
    Tg8,
    Tg16,
    Tg32,
}

impl ResourceTimeGap {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(5), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(5), true, *self as i128, false)
    }
}

impl AperCodec for ResourceTimeGap {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceTimeGap::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceTimeGap");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceTimeGap");
            e
        })
    }
}
// ResourceNumberofSymbols
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ResourceNumberofSymbols {
    N2,
    N4,
    N6,
    N12,
}

impl ResourceNumberofSymbols {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for ResourceNumberofSymbols {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceNumberofSymbols::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceNumberofSymbols");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceNumberofSymbols");
            e
        })
    }
}
// ReflectiveQosAttribute
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ReflectiveQosAttribute {
    SubjectTo,
}

impl ReflectiveQosAttribute {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for ReflectiveQosAttribute {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ReflectiveQosAttribute::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReflectiveQosAttribute");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ReflectiveQosAttribute");
            e
        })
    }
}
// XyZunit
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum XyZunit {
    Mm,
    Cm,
    Dm,
}

impl XyZunit {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), true, *self as i128, false)
    }
}

impl AperCodec for XyZunit {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        XyZunit::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("XyZunit");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("XyZunit");
            e
        })
    }
}
// MilliArcSecondUnits
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum MilliArcSecondUnits {
    Zerodot03,
    Zerodot3,
    Three,
}

impl MilliArcSecondUnits {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), true, *self as i128, false)
    }
}

impl AperCodec for MilliArcSecondUnits {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        MilliArcSecondUnits::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MilliArcSecondUnits");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("MilliArcSecondUnits");
            e
        })
    }
}
// HeightUnits
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum HeightUnits {
    Mm,
    Cm,
    M,
}

impl HeightUnits {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), true, *self as i128, false)
    }
}

impl AperCodec for HeightUnits {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        HeightUnits::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("HeightUnits");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("HeightUnits");
            e
        })
    }
}
// ResourceType2
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum ResourceType2 {
    Periodic,
    SemiPersistent,
    Aperiodic,
}

impl ResourceType2 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), true, *self as i128, false)
    }
}

impl AperCodec for ResourceType2 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        ResourceType2::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceType2");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("ResourceType2");
            e
        })
    }
}
// PeriodicSet
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum PeriodicSet {
    True,
}

impl PeriodicSet {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for PeriodicSet {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        PeriodicSet::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PeriodicSet");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("PeriodicSet");
            e
        })
    }
}
// SemiPersistentSet
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum SemiPersistentSet {
    True,
}

impl SemiPersistentSet {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for SemiPersistentSet {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SemiPersistentSet::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SemiPersistentSet");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SemiPersistentSet");
            e
        })
    }
}
// Periodicity1
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum Periodicity1 {
    Slot1,
    Slot2,
    Slot4,
    Slot5,
    Slot8,
    Slot10,
    Slot16,
    Slot20,
    Slot32,
    Slot40,
    Slot64,
    Slot80,
    Slot160,
    Slot320,
    Slot640,
    Slot1280,
    Slot2560,
}

impl Periodicity1 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(16), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(16), true, *self as i128, false)
    }
}

impl AperCodec for Periodicity1 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Periodicity1::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Periodicity1");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Periodicity1");
            e
        })
    }
}
// Periodicity2
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum Periodicity2 {
    Slot1,
    Slot2,
    Slot4,
    Slot5,
    Slot8,
    Slot10,
    Slot16,
    Slot20,
    Slot32,
    Slot40,
    Slot64,
    Slot80,
    Slot160,
    Slot320,
    Slot640,
    Slot1280,
    Slot2560,
}

impl Periodicity2 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(16), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(16), true, *self as i128, false)
    }
}

impl AperCodec for Periodicity2 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Periodicity2::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Periodicity2");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Periodicity2");
            e
        })
    }
}
// AperiodicResourceType
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum AperiodicResourceType {
    True,
}

impl AperiodicResourceType {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for AperiodicResourceType {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        AperiodicResourceType::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AperiodicResourceType");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("AperiodicResourceType");
            e
        })
    }
}
// Periodicity3
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum Periodicity3 {
    Slot1,
    Slot2,
    Slot4,
    Slot5,
    Slot8,
    Slot10,
    Slot16,
    Slot20,
    Slot32,
    Slot40,
    Slot64,
    Slot80,
    Slot160,
    Slot320,
    Slot640,
    Slot1280,
    Slot2560,
    Slot5120,
    Slot10240,
    Slot40960,
    Slot81920,
}

impl Periodicity3 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(20), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(20), true, *self as i128, false)
    }
}

impl AperCodec for Periodicity3 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Periodicity3::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Periodicity3");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Periodicity3");
            e
        })
    }
}
// Periodicity4
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum Periodicity4 {
    Slot1,
    Slot2,
    Slot4,
    Slot5,
    Slot8,
    Slot10,
    Slot16,
    Slot20,
    Slot32,
    Slot40,
    Slot64,
    Slot80,
    Slot160,
    Slot320,
    Slot640,
    Slot1280,
    Slot2560,
    Slot5120,
    Slot10240,
    Slot40960,
    Slot81920,
}

impl Periodicity4 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(20), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(20), true, *self as i128, false)
    }
}

impl AperCodec for Periodicity4 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Periodicity4::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Periodicity4");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Periodicity4");
            e
        })
    }
}
// SubcarrierSpacing3
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum SubcarrierSpacing3 {
    KHz15,
    KHz30,
    KHz60,
    KHz120,
}

impl SubcarrierSpacing3 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for SubcarrierSpacing3 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SubcarrierSpacing3::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SubcarrierSpacing3");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SubcarrierSpacing3");
            e
        })
    }
}
// SwitchingOffOngoing
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum SwitchingOffOngoing {
    True,
}

impl SwitchingOffOngoing {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(0), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(0), true, *self as i128, false)
    }
}

impl AperCodec for SwitchingOffOngoing {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SwitchingOffOngoing::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SwitchingOffOngoing");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SwitchingOffOngoing");
            e
        })
    }
}
// NrofSrsPorts
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum NrofSrsPorts {
    Port1,
    Ports2,
    Ports4,
}

impl NrofSrsPorts {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), false, *self as i128, false)
    }
}

impl AperCodec for NrofSrsPorts {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrofSrsPorts::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrofSrsPorts");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrofSrsPorts");
            e
        })
    }
}
// NrofSymbols1
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum NrofSymbols1 {
    N1,
    N2,
    N4,
}

impl NrofSymbols1 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), false, *self as i128, false)
    }
}

impl AperCodec for NrofSymbols1 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        NrofSymbols1::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrofSymbols1");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("NrofSymbols1");
            e
        })
    }
}
// RepetitionFactor
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum RepetitionFactor {
    N1,
    N2,
    N4,
}

impl RepetitionFactor {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), false, *self as i128, false)
    }
}

impl AperCodec for RepetitionFactor {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        RepetitionFactor::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RepetitionFactor");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("RepetitionFactor");
            e
        })
    }
}
// GroupOrSequenceHopping1
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum GroupOrSequenceHopping1 {
    Neither,
    GroupHopping,
    SequenceHopping,
}

impl GroupOrSequenceHopping1 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(2), false)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(2), false, *self as i128, false)
    }
}

impl AperCodec for GroupOrSequenceHopping1 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        GroupOrSequenceHopping1::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GroupOrSequenceHopping1");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("GroupOrSequenceHopping1");
            e
        })
    }
}
// SsbSubcarrierSpacing1
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum SsbSubcarrierSpacing1 {
    KHz15,
    KHz30,
    KHz60,
    KHz120,
    KHz240,
}

impl SsbSubcarrierSpacing1 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(4), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(4), true, *self as i128, false)
    }
}

impl AperCodec for SsbSubcarrierSpacing1 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbSubcarrierSpacing1::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbSubcarrierSpacing1");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbSubcarrierSpacing1");
            e
        })
    }
}
// SsbPeriodicity
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum SsbPeriodicity {
    Ms5,
    Ms10,
    Ms20,
    Ms40,
    Ms80,
    Ms160,
}

impl SsbPeriodicity {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(5), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(5), true, *self as i128, false)
    }
}

impl AperCodec for SsbPeriodicity {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        SsbPeriodicity::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbPeriodicity");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("SsbPeriodicity");
            e
        })
    }
}
// Resolution1
#[derive(Clone, Debug, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum Resolution1 {
    M0dot1,
    M1,
    M10,
    M30,
}

impl Resolution1 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (idx, extended) = aper::decode::decode_enumerated(data, Some(0), Some(3), true)?;
        if extended {
            return Err(PerCodecError::new("Extended enum not implemented"));
        }
        Self::try_from(idx as u8).map_err(|_| PerCodecError::new("Unknown enum variant"))
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        aper::encode::encode_enumerated(data, Some(0), Some(3), true, *self as i128, false)
    }
}

impl AperCodec for Resolution1 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        Resolution1::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Resolution1");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("Resolution1");
            e
        })
    }
}
// N2
#[derive(Clone, Debug)]
pub struct N2 {
    pub comb_offset_n_2: u8,
    pub cyclic_shift_n_2: u8,
}

impl N2 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (_optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 0)?;
        let comb_offset_n_2 = aper::decode::decode_integer(data, Some(0), Some(1), false)?.0 as u8;
        let cyclic_shift_n_2 = aper::decode::decode_integer(data, Some(0), Some(7), false)?.0 as u8;

        Ok(Self {
            comb_offset_n_2,
            cyclic_shift_n_2,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let optionals = BitVec::new();

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(1),
            false,
            self.comb_offset_n_2 as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(7),
            false,
            self.cyclic_shift_n_2 as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for N2 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        N2::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("N2");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("N2");
            e
        })
    }
}
// N4
#[derive(Clone, Debug)]
pub struct N4 {
    pub comb_offset_n_4: u8,
    pub cyclic_shift_n_4: u8,
}

impl N4 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (_optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 0)?;
        let comb_offset_n_4 = aper::decode::decode_integer(data, Some(0), Some(3), false)?.0 as u8;
        let cyclic_shift_n_4 =
            aper::decode::decode_integer(data, Some(0), Some(11), false)?.0 as u8;

        Ok(Self {
            comb_offset_n_4,
            cyclic_shift_n_4,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let optionals = BitVec::new();

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(3),
            false,
            self.comb_offset_n_4 as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(11),
            false,
            self.cyclic_shift_n_4 as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for N4 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        N4::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("N4");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("N4");
            e
        })
    }
}
// N2_1
#[derive(Clone, Debug)]
pub struct N2_1 {
    pub comb_offset_n_2: u8,
    pub cyclic_shift_n_2: u8,
}

impl N2_1 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (_optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 0)?;
        let comb_offset_n_2 = aper::decode::decode_integer(data, Some(0), Some(1), false)?.0 as u8;
        let cyclic_shift_n_2 = aper::decode::decode_integer(data, Some(0), Some(7), false)?.0 as u8;

        Ok(Self {
            comb_offset_n_2,
            cyclic_shift_n_2,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let optionals = BitVec::new();

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(1),
            false,
            self.comb_offset_n_2 as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(7),
            false,
            self.cyclic_shift_n_2 as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for N2_1 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        N2_1::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("N2_1");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("N2_1");
            e
        })
    }
}
// N4_1
#[derive(Clone, Debug)]
pub struct N4_1 {
    pub comb_offset_n_4: u8,
    pub cyclic_shift_n_4: u8,
}

impl N4_1 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (_optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 0)?;
        let comb_offset_n_4 = aper::decode::decode_integer(data, Some(0), Some(3), false)?.0 as u8;
        let cyclic_shift_n_4 =
            aper::decode::decode_integer(data, Some(0), Some(11), false)?.0 as u8;

        Ok(Self {
            comb_offset_n_4,
            cyclic_shift_n_4,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let optionals = BitVec::new();

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(3),
            false,
            self.comb_offset_n_4 as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(11),
            false,
            self.cyclic_shift_n_4 as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for N4_1 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        N4_1::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("N4_1");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("N4_1");
            e
        })
    }
}
// N8
#[derive(Clone, Debug)]
pub struct N8 {
    pub comb_offset_n_8: u8,
    pub cyclic_shift_n_8: u8,
}

impl N8 {
    fn decode_inner(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        let (_optionals, _extensions_present) =
            aper::decode::decode_sequence_header(data, false, 0)?;
        let comb_offset_n_8 = aper::decode::decode_integer(data, Some(0), Some(7), false)?.0 as u8;
        let cyclic_shift_n_8 = aper::decode::decode_integer(data, Some(0), Some(5), false)?.0 as u8;

        Ok(Self {
            comb_offset_n_8,
            cyclic_shift_n_8,
        })
    }
    fn encode_inner(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        let optionals = BitVec::new();

        aper::encode::encode_sequence_header(data, false, &optionals, false)?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(7),
            false,
            self.comb_offset_n_8 as i128,
            false,
        )?;
        aper::encode::encode_integer(
            data,
            Some(0),
            Some(5),
            false,
            self.cyclic_shift_n_8 as i128,
            false,
        )?;

        Ok(())
    }
}

impl AperCodec for N8 {
    type Output = Self;
    fn aper_decode(data: &mut PerCodecData) -> Result<Self, PerCodecError> {
        N8::decode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("N8");
            e
        })
    }
    fn aper_encode(&self, data: &mut PerCodecData) -> Result<(), PerCodecError> {
        self.encode_inner(data).map_err(|mut e: PerCodecError| {
            e.push_context("N8");
            e
        })
    }
}
